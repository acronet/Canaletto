
laspezia.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ef10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000017e  00802000  0000ef10  0000efa4  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000005fc  00802180  00802180  0000f124  2**2
                  ALLOC
  3 .stab         000011dc  00000000  00000000  0000f124  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000047c  00000000  00000000  00010300  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0001077c  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000011d0  00000000  00000000  000107b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00026d83  00000000  00000000  00011980  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00007978  00000000  00000000  00038703  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000198cf  00000000  00000000  0004007b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000459c  00000000  00000000  0005994c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0003660e  00000000  00000000  0005dee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00010a01  00000000  00000000  000944f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001300  00000000  00000000  000a4ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000fbab  00000000  00000000  000a61f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 59 10 	jmp	0x20b2	; 0x20b2 <__ctors_end>
       4:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
       8:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
       c:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
      10:	0c 94 cd 4a 	jmp	0x959a	; 0x959a <__vector_4>
      14:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
      18:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
      1c:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
      20:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
      24:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
      28:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
      2c:	0c 94 fc 5f 	jmp	0xbff8	; 0xbff8 <__vector_11>
      30:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
      34:	0c 94 76 67 	jmp	0xceec	; 0xceec <__vector_13>
      38:	0c 94 3a 60 	jmp	0xc074	; 0xc074 <__vector_14>
      3c:	0c 94 67 60 	jmp	0xc0ce	; 0xc0ce <__vector_15>
      40:	0c 94 94 60 	jmp	0xc128	; 0xc128 <__vector_16>
      44:	0c 94 c1 60 	jmp	0xc182	; 0xc182 <__vector_17>
      48:	0c 94 ee 60 	jmp	0xc1dc	; 0xc1dc <__vector_18>
      4c:	0c 94 1b 61 	jmp	0xc236	; 0xc236 <__vector_19>
      50:	0c 94 48 61 	jmp	0xc290	; 0xc290 <__vector_20>
      54:	0c 94 75 61 	jmp	0xc2ea	; 0xc2ea <__vector_21>
      58:	0c 94 a2 61 	jmp	0xc344	; 0xc344 <__vector_22>
      5c:	0c 94 cf 61 	jmp	0xc39e	; 0xc39e <__vector_23>
      60:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
      64:	0c 94 cf 49 	jmp	0x939e	; 0x939e <__vector_25>
      68:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
      6c:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
      70:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
      74:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
      78:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
      7c:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
      80:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
      84:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
      88:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
      8c:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
      90:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
      94:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
      98:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
      9c:	0c 94 bc 57 	jmp	0xaf78	; 0xaf78 <__vector_39>
      a0:	0c 94 ee 57 	jmp	0xafdc	; 0xafdc <__vector_40>
      a4:	0c 94 20 58 	jmp	0xb040	; 0xb040 <__vector_41>
      a8:	0c 94 52 58 	jmp	0xb0a4	; 0xb0a4 <__vector_42>
      ac:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
      b0:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
      b4:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
      b8:	0c 94 9d 67 	jmp	0xcf3a	; 0xcf3a <__vector_46>
      bc:	0c 94 be 63 	jmp	0xc77c	; 0xc77c <__vector_47>
      c0:	0c 94 eb 63 	jmp	0xc7d6	; 0xc7d6 <__vector_48>
      c4:	0c 94 18 64 	jmp	0xc830	; 0xc830 <__vector_49>
      c8:	0c 94 45 64 	jmp	0xc88a	; 0xc88a <__vector_50>
      cc:	0c 94 72 64 	jmp	0xc8e4	; 0xc8e4 <__vector_51>
      d0:	0c 94 9f 64 	jmp	0xc93e	; 0xc93e <__vector_52>
      d4:	0c 94 cc 64 	jmp	0xc998	; 0xc998 <__vector_53>
      d8:	0c 94 f9 64 	jmp	0xc9f2	; 0xc9f2 <__vector_54>
      dc:	0c 94 26 65 	jmp	0xca4c	; 0xca4c <__vector_55>
      e0:	0c 94 53 65 	jmp	0xcaa6	; 0xcaa6 <__vector_56>
      e4:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
      e8:	0c 94 29 55 	jmp	0xaa52	; 0xaa52 <__vector_58>
      ec:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
      f0:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
      f4:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
      f8:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
      fc:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     100:	0c 94 8c 4b 	jmp	0x9718	; 0x9718 <__vector_64>
     104:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     108:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     10c:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     110:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     114:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     118:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     11c:	0c 94 f4 56 	jmp	0xade8	; 0xade8 <__vector_71>
     120:	0c 94 26 57 	jmp	0xae4c	; 0xae4c <__vector_72>
     124:	0c 94 58 57 	jmp	0xaeb0	; 0xaeb0 <__vector_73>
     128:	0c 94 8a 57 	jmp	0xaf14	; 0xaf14 <__vector_74>
     12c:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     130:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     134:	0c 94 fc 61 	jmp	0xc3f8	; 0xc3f8 <__vector_77>
     138:	0c 94 29 62 	jmp	0xc452	; 0xc452 <__vector_78>
     13c:	0c 94 56 62 	jmp	0xc4ac	; 0xc4ac <__vector_79>
     140:	0c 94 83 62 	jmp	0xc506	; 0xc506 <__vector_80>
     144:	0c 94 b0 62 	jmp	0xc560	; 0xc560 <__vector_81>
     148:	0c 94 dd 62 	jmp	0xc5ba	; 0xc5ba <__vector_82>
     14c:	0c 94 0a 63 	jmp	0xc614	; 0xc614 <__vector_83>
     150:	0c 94 37 63 	jmp	0xc66e	; 0xc66e <__vector_84>
     154:	0c 94 64 63 	jmp	0xc6c8	; 0xc6c8 <__vector_85>
     158:	0c 94 91 63 	jmp	0xc722	; 0xc722 <__vector_86>
     15c:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     160:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     164:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     168:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     16c:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     170:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     174:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     178:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     17c:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     180:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     184:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     188:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     18c:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     190:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     194:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     198:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     19c:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     1a0:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     1a4:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     1a8:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     1ac:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     1b0:	0c 94 80 65 	jmp	0xcb00	; 0xcb00 <__vector_108>
     1b4:	0c 94 ad 65 	jmp	0xcb5a	; 0xcb5a <__vector_109>
     1b8:	0c 94 da 65 	jmp	0xcbb4	; 0xcbb4 <__vector_110>
     1bc:	0c 94 07 66 	jmp	0xcc0e	; 0xcc0e <__vector_111>
     1c0:	0c 94 34 66 	jmp	0xcc68	; 0xcc68 <__vector_112>
     1c4:	0c 94 61 66 	jmp	0xccc2	; 0xccc2 <__vector_113>
     1c8:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     1cc:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     1d0:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     1d4:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     1d8:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     1dc:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     1e0:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     1e4:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     1e8:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     1ec:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     1f0:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__bad_interrupt>
     1f4:	0c 94 ad 6e 	jmp	0xdd5a	; 0xdd5a <__vector_125>
     1f8:	0c 94 6b 6f 	jmp	0xded6	; 0xded6 <__vector_126>

000001fc <__c.6737>:
     1fc:	50 6f 77 65 72 20 4f 6e 0d 0a 00                    Power On...

00000207 <__c.6739>:
     207:	4d 43 55 20 52 65 76 69 73 69 6f 6e 20 3a 20 00     MCU Revision : .

00000217 <__c.6744>:
     217:	45 6e 61 62 6c 69 6e 67 20 6f 73 63 69 6c 61 74     Enabling oscilat
     227:	6f 72 20 66 6f 72 20 44 46 4c 4c 0d 0a 00           or for DFLL...

00000235 <__c.6749>:
     235:	6f 73 63 69 6c 61 74 6f 72 20 6f 6b 0d 0a 00        oscilator ok...

00000244 <__c.6752>:
     244:	0d 0a 73 69 7a 65 6f 66 28 76 6f 69 64 20 2a 29     ..sizeof(void *)
     254:	20 3d 20 00                                          = .

00000258 <__c.6754>:
     258:	0d 0a 73 69 7a 65 6f 66 28 66 6c 61 73 68 5f 61     ..sizeof(flash_a
     268:	64 64 72 5f 74 29 20 3d 20 00                       ddr_t) = .

00000272 <__c.6756>:
     272:	0d 0a 43 6f 6d 70 69 6c 65 64 20 61 73 20 44 45     ..Compiled as DE
     282:	42 55 47 2c 20 73 74 61 72 74 20 74 68 65 20 47     BUG, start the G
     292:	50 52 53 20 55 41 52 54 20 69 6e 20 6d 61 69 6e     PRS UART in main
     2a2:	0d 0a 00                                            ...

000002a5 <__c.7355>:
     2a5:	56 42 61 74 20 3d 20 25 75 0d 0a 72 65 63 49 44     VBat = %u..recID
     2b5:	20 25 6c 75 0d 0a 00                                 %lu...

000002bc <__c.7340>:
     2bc:	28 64 61 74 61 6c 6f 67 67 65 72 5f 73 6e 61 70     (datalogger_snap
     2cc:	73 68 6f 74 5f 64 61 74 61 29 20 53 6e 61 70 73     shot_data) Snaps
     2dc:	68 6f 74 20 6d 65 6d 6f 72 79 20 69 73 20 66 75     hot memory is fu
     2ec:	6c 6c 20 73 6f 6d 65 74 68 69 6e 67 20 77 72 6f     ll something wro
     2fc:	6e 67 20 69 73 20 68 61 70 70 65 6e 69 6e 67 0d     ng is happening.
     30c:	0a 00                                               ..

0000030e <__c.7273>:
     30e:	09 4e 6f 74 68 69 6e 67 20 6c 65 66 74 20 74 6f     .Nothing left to
     31e:	20 73 65 6e 64 2c 20 71 75 69 74 20 74 68 65 20      send, quit the 
     32e:	70 72 6f 63 65 64 75 72 65 0d 0a 00                 procedure...

0000033a <__c.7281>:
     33a:	26 54 49 44 3d 25 6c 75 00                          &TID=%lu.

00000343 <__c.7290>:
     343:	09 42 65 67 69 6e 20 6f 66 20 6d 65 6d 6f 72 79     .Begin of memory
     353:	20 72 65 61 63 68 65 64 0d 0a 00                     reached...

0000035e <__c.7293>:
     35e:	09 72 65 63 6f 72 64 20 00                          .record .

00000367 <__c.7296>:
     367:	09 52 65 63 6f 72 64 20 74 69 6d 65 73 74 61 6d     .Record timestam
     377:	70 20 25 6c 75 0d 0a 00                             p %lu...

0000037f <__c.7298>:
     37f:	09 4d 69 6e 69 6d 75 6d 20 64 61 74 65 20 72 65     .Minimum date re
     38f:	61 63 68 65 64 0d 0a 00                             ached...

00000397 <__c.7300>:
     397:	09 66 6c 61 67 20 73 65 6e 74 20 69 73 20 73 65     .flag sent is se
     3a7:	74 2c 20 73 6b 69 70 0d 0a 00                       t, skip...

000003b1 <__c.7303>:
     3b1:	23 54 49 4d 45 3d 25 6c 75 26 42 3d 25 75 26 54     #TIME=%lu&B=%u&T
     3c1:	5f 4f 33 3d 25 64 26 4f 33 77 3d 25 75 26 4f 33     _O3=%d&O3w=%u&O3
     3d1:	61 3d 25 75 26 54 3d 25 75 26 50 4d 31 30 5f 73     a=%u&T=%u&PM10_s
     3e1:	3d 25 75 26 50 4d 31 30 3d 25 64 00                 =%u&PM10=%d.

000003ed <__c.7306>:
     3ed:	26 56 25 75 3d 25 75 00                             &V%u=%u.

000003f5 <__c.7315>:
     3f5:	09 48 54 54 50 20 72 65 61 64 20 67 6f 74 20 3a     .HTTP read got :
     405:	20 00                                                .

00000407 <__c.7321>:
     407:	09 72 65 71 75 65 73 74 69 6e 67 20 61 6e 6f 74     .requesting anot
     417:	68 65 72 20 69 74 65 72 61 74 69 6f 6e 0d 0a 00     her iteration...

00000427 <__c.7198>:
     427:	2f 43 4d 44 5f 43 48 4b 3f 41 57 53 49 44 3d 00     /CMD_CHK?AWSID=.

00000437 <__c.7200>:
     437:	26 41 50 49 5f 56 45 52 3d 31 00                    &API_VER=1.

00000442 <__c.7170>:
     442:	4f 4b 00                                            OK.

00000445 <__c.7172>:
     445:	09 67 6f 74 20 4f 4b 0d 0a 00                       .got OK...

0000044f <__c.7174>:
     44f:	47 45 54 5f 42 59 5f 44 41 54 45 5f 52 41 4e 47     GET_BY_DATE_RANG
     45f:	45 3a 00                                            E:.

00000462 <__c.7179>:
     462:	09 47 45 54 5f 42 59 5f 44 41 54 45 5f 52 41 4e     .GET_BY_DATE_RAN
     472:	47 45 20 70 61 72 61 6d 65 74 65 72 73 20 00        GE parameters .

00000481 <__c.7182>:
     481:	64 74 42 65 67 3a 25 6c 75 09 64 74 45 6e 64 3a     dtBeg:%lu.dtEnd:
     491:	25 6c 75 0d 0a 00                                   %lu...

00000497 <__c.7184>:
     497:	4b 4f 00                                            KO.

0000049a <__c.7186>:
     49a:	09 5b 57 41 52 4e 49 4e 47 5d 20 53 65 72 76 65     .[WARNING] Serve
     4aa:	72 20 72 65 74 75 72 6e 65 64 20 61 20 4b 4f 20     r returned a KO 
     4ba:	6d 65 73 73 61 67 65 0d 0a 00                       message...

000004c4 <__c.7188>:
     4c4:	09 5b 57 41 52 4e 49 4e 47 5d 20 53 65 72 76 65     .[WARNING] Serve
     4d4:	72 20 72 65 74 75 72 6e 65 64 20 61 6e 20 75 6e     r returned an un
     4e4:	6b 6e 6f 77 6e 20 73 74 61 74 65 6d 65 6e 74 0d     known statement.
     4f4:	0a 00                                               ..

000004f6 <__c.7158>:
     4f6:	44 4c 5f 43 4d 44 5f 47 45 54 5f 42 59 5f 44 41     DL_CMD_GET_BY_DA
     506:	54 45 5f 52 41 4e 47 45 00                          TE_RANGE.

0000050f <__c.7122>:
     50f:	44 4c 5f 53 45 41 52 43 48 5f 52 45 43 4f 52 44     DL_SEARCH_RECORD
     51f:	5f 42 59 5f 44 41 54 45 00                          _BY_DATE.

00000528 <__c.7125>:
     528:	45 52 52 4f 52 20 28 64 6c 5f 73 65 61 72 63 68     ERROR (dl_search
     538:	5f 72 65 63 6f 72 64 5f 62 79 5f 64 61 74 65 29     _record_by_date)
     548:	20 70 61 72 61 6d 65 74 65 72 20 70 49 74 65 72      parameter pIter
     558:	20 69 73 20 4e 55 4c 4c 0d 0a 00                     is NULL...

00000563 <__c.7128>:
     563:	28 64 6c 5f 73 65 61 72 63 68 5f 72 65 63 6f 72     (dl_search_recor
     573:	64 5f 62 79 5f 64 61 74 65 29 20 44 61 74 61 6c     d_by_date) Datal
     583:	6f 67 67 65 72 20 69 73 20 65 6d 70 74 79 2e 20     ogger is empty. 
     593:	4e 6f 74 68 69 6e 67 20 74 6f 20 73 65 61 72 63     Nothing to searc
     5a3:	68 0d 0a 00                                         h...

000005a7 <__c.7130>:
     5a7:	28 64 6c 5f 73 65 61 72 63 68 5f 72 65 63 6f 72     (dl_search_recor
     5b7:	64 5f 62 79 5f 64 61 74 65 29 20 41 54 32 34 43     d_by_date) AT24C
     5c7:	58 58 20 69 6e 69 74 20 77 65 6e 74 20 77 72 6f     XX init went wro
     5d7:	6e 67 2c 20 61 62 6f 72 74 69 6e 67 20 70 72 6f     ng, aborting pro
     5e7:	63 65 64 75 72 65 0d 0a 00                          cedure...

000005f0 <__c.7137>:
     5f0:	53 65 61 72 63 68 20 63 61 6c 6c 65 64 20 77 69     Search called wi
     600:	74 68 20 64 74 3d 25 6c 75 20 66 6f 75 6e 64 20     th dt=%lu found 
     610:	25 6c 75 0d 0a 00                                   %lu...

00000616 <__c.7139>:
     616:	47 6f 69 6e 67 20 66 72 6f 6d 20 62 61 63 6b 77     Going from backw
     626:	61 72 64 20 74 6f 20 66 6f 72 77 61 72 64 0d 0a     ard to forward..
	...

00000637 <__c.7142>:
     637:	47 6f 69 6e 67 20 66 72 6f 6d 20 66 6f 72 77 61     Going from forwa
     647:	72 64 20 74 6f 20 62 61 63 6b 77 61 72 64 0d 0a     rd to backward..
	...

00000658 <__c.7144>:
     658:	47 6f 69 6e 67 20 62 61 63 6b 77 61 72 64 20 2d     Going backward -
     668:	20 4e 6f 20 6d 61 74 63 68 20 66 6f 75 6e 64 0d      No match found.
     678:	0a 00                                               ..

0000067a <__c.7146>:
     67a:	47 6f 69 6e 67 20 66 6f 72 77 61 72 64 20 2d 20     Going forward - 
     68a:	4e 6f 20 6d 61 74 63 68 20 66 6f 75 6e 64 0d 0a     No match found..
	...

0000069b <__c.7149>:
     69b:	09 52 65 63 6f 72 64 20 66 6f 75 6e 64 20 00        .Record found .

000006aa <__c.7151>:
     6aa:	0d 0a 09 52 65 63 6f 72 64 20 20 64 74 3d 25 6c     ...Record  dt=%l
     6ba:	75 0d 0a 00                                         u...

000006be <__c.7099>:
     6be:	28 64 6c 5f 69 74 65 72 61 74 6f 72 5f 6d 6f 76     (dl_iterator_mov
     6ce:	65 66 6f 72 77 61 72 64 29 20 69 74 65 72 61 74     eforward) iterat
     6de:	6f 72 20 77 72 61 70 73 20 64 61 74 61 6c 6f 67     or wraps datalog
     6ee:	67 65 72 0d 0a 00                                   ger...

000006f4 <__c.7090>:
     6f4:	28 64 6c 5f 69 74 65 72 61 74 6f 72 5f 6d 6f 76     (dl_iterator_mov
     704:	65 62 61 63 6b 29 20 69 74 65 72 61 74 6f 72 20     eback) iterator 
     714:	77 72 61 70 73 20 64 61 74 61 6c 6f 67 67 65 72     wraps datalogger
     724:	0d 0a 00                                            ...

00000727 <__c.7078>:
     727:	28 64 6c 5f 69 74 65 72 61 74 6f 72 5f 6d 6f 76     (dl_iterator_mov
     737:	65 66 6f 72 77 61 72 64 5f 77 69 74 68 5f 63 61     eforward_with_ca
     747:	70 29 20 69 74 65 72 61 74 6f 72 20 72 65 61 63     p) iterator reac
     757:	68 65 64 20 74 68 65 20 45 4e 44 20 70 6f 73 69     hed the END posi
     767:	74 69 6f 6e 0d 0a 00                                tion...

0000076e <__c.7081>:
     76e:	28 64 6c 5f 69 74 65 72 61 74 6f 72 5f 6d 6f 76     (dl_iterator_mov
     77e:	65 66 6f 72 77 61 72 64 5f 77 69 74 68 5f 63 61     eforward_with_ca
     78e:	70 29 20 69 74 65 72 61 74 6f 72 20 77 72 61 70     p) iterator wrap
     79e:	73 20 64 61 74 61 6c 6f 67 67 65 72 0d 0a 00        s datalogger...

000007ad <__c.7066>:
     7ad:	28 64 6c 5f 69 74 65 72 61 74 6f 72 5f 6d 6f 76     (dl_iterator_mov
     7bd:	65 62 61 63 6b 5f 77 69 74 68 5f 63 61 70 29 20     eback_with_cap) 
     7cd:	69 74 65 72 61 74 6f 72 20 72 65 61 63 68 65 64     iterator reached
     7dd:	20 74 68 65 20 53 54 41 52 54 20 70 6f 73 69 74      the START posit
     7ed:	69 6f 6e 0d 0a 00                                   ion...

000007f3 <__c.7069>:
     7f3:	28 64 6c 5f 69 74 65 72 61 74 6f 72 5f 6d 6f 76     (dl_iterator_mov
     803:	65 62 61 63 6b 5f 77 69 74 68 5f 63 61 70 29 20     eback_with_cap) 
     813:	69 74 65 72 61 74 6f 72 20 77 72 61 70 73 20 64     iterator wraps d
     823:	61 74 61 6c 6f 67 67 65 72 0d 0a 00                 atalogger...

0000082f <__c.7056>:
     82f:	44 4c 5f 54 41 53 4b 5f 53 45 4e 44 5f 44 41 54     DL_TASK_SEND_DAT
     83f:	41 5f 50 52 45 50 41 52 45 5f 52 54 00              A_PREPARE_RT.

0000084c <__c.7039>:
     84c:	28 62 65 66 6f 72 65 5f 73 65 6e 64 5f 63 68 65     (before_send_che
     85c:	63 6b 29 20 44 61 74 61 6c 6f 67 67 65 72 20 69     ck) Datalogger i
     86c:	73 20 65 6d 70 74 79 2e 20 4e 6f 74 68 69 6e 67     s empty. Nothing
     87c:	20 74 6f 20 73 65 6e 64 0d 0a 00                     to send...

00000887 <__c.7041>:
     887:	28 62 65 66 6f 72 65 5f 73 65 6e 64 5f 63 68 65     (before_send_che
     897:	63 6b 29 20 54 68 65 20 47 50 52 53 20 73 74 61     ck) The GPRS sta
     8a7:	74 75 73 20 69 73 20 6e 6f 74 20 4f 4b 20 74 68     tus is not OK th
     8b7:	69 73 20 74 61 73 6b 20 77 69 6c 6c 20 65 6e 64     is task will end
     8c7:	20 68 65 72 65 0d 0a 00                              here...

000008cf <__c.7043>:
     8cf:	28 62 65 66 6f 72 65 5f 73 65 6e 64 5f 63 68 65     (before_send_che
     8df:	63 6b 29 20 41 54 32 34 43 58 58 20 69 6e 69 74     ck) AT24CXX init
     8ef:	20 77 65 6e 74 20 77 72 6f 6e 67 2c 20 61 62 6f      went wrong, abo
     8ff:	72 74 69 6e 67 20 70 72 6f 63 65 64 75 72 65 0d     rting procedure.
     90f:	0a 00                                               ..

00000911 <__c.7020>:
     911:	44 4c 5f 54 41 53 4b 5f 53 59 4e 43 5f 54 49 4d     DL_TASK_SYNC_TIM
     921:	45 00                                               E.

00000923 <__c.7022>:
     923:	28 64 61 74 61 6c 6f 67 67 65 72 5f 73 79 6e 63     (datalogger_sync
     933:	5f 74 69 6d 65 29 20 74 68 65 20 47 50 52 53 20     _time) the GPRS 
     943:	73 74 61 74 75 73 20 66 6c 61 67 20 69 73 20 6e     status flag is n
     953:	6f 74 20 4f 4b 2c 20 74 68 69 73 20 74 61 73 6b     ot OK, this task
     963:	20 77 69 6c 6c 20 66 69 6e 69 73 68 20 68 65 72      will finish her
     973:	65 0d 0a 00                                         e...

00000977 <__c.7027>:
     977:	28 44 4c 5f 73 79 6e 63 74 69 6d 65 29 20 73 65     (DL_synctime) se
     987:	72 76 69 63 65 20 72 65 74 75 72 6e 65 64 3a 20     rvice returned: 
	...

00000998 <__c.7031>:
     998:	25 30 32 64 2f 25 30 32 64 2f 25 64 20 25 30 32     %02d/%02d/%d %02
     9a8:	64 3a 25 30 32 64 3a 25 30 32 64 0d 0a 00           d:%02d:%02d...

000009b6 <__c.7033>:
     9b6:	28 44 4c 5f 73 79 6e 63 74 69 6d 65 29 20 4e 65     (DL_synctime) Ne
     9c6:	77 20 64 61 74 65 20 69 73 3a 20 00                 w date is: .

000009d2 <__c.6977>:
     9d2:	64 61 74 61 6c 6f 67 67 65 72 20 69 6e 69 74 0d     datalogger init.
     9e2:	0a 00                                               ..

000009e4 <__c.6979>:
     9e4:	0d 0a 0d 0a 5b 45 52 52 4f 52 5d 20 43 6f 6e 66     ....[ERROR] Conf
     9f4:	69 67 75 72 61 74 69 6f 6e 20 69 73 20 6d 69 73     iguration is mis
     a04:	73 69 6e 67 2c 20 63 68 65 63 6b 20 74 68 65 20     sing, check the 
     a14:	69 6e 74 65 72 6e 61 6c 20 65 65 70 72 6f 6d 20     internal eeprom 
     a24:	69 6d 61 67 65 0d 0a 00                             image...

00000a2c <__c.6981>:
     a2c:	44 4c 5f 54 41 53 4b 5f 53 54 4f 52 45 5f 44 54     DL_TASK_STORE_DT
     a3c:	3a 20 25 6c 75 0d 0a 00                             : %lu...

00000a44 <__c.6983>:
     a44:	44 4c 5f 54 41 53 4b 5f 53 45 4e 44 5f 44 54 3a     DL_TASK_SEND_DT:
     a54:	20 25 6c 75 0d 0a 00                                 %lu...

00000a5b <__c.6985>:
     a5b:	44 4c 5f 54 41 53 4b 5f 53 59 4e 43 5f 44 54 3a     DL_TASK_SYNC_DT:
     a6b:	20 25 6c 75 0d 0a 00                                 %lu...

00000a72 <__c.6987>:
     a72:	44 4c 5f 54 49 4d 45 5f 44 54 3a 20 25 6c 75 0d     DL_TIME_DT: %lu.
     a82:	0a 00                                               ..

00000a84 <__c.6995>:
     a84:	28 64 61 74 61 6c 6f 67 67 65 72 5f 69 6e 69 74     (datalogger_init
     a94:	29 20 65 65 70 72 6f 6d 20 69 74 65 72 61 74 6f     ) eeprom iterato
     aa4:	72 73 20 61 72 65 20 3a 0d 0a 00                    rs are :...

00000aaf <__c.7001>:
     aaf:	28 64 61 74 61 6c 6f 67 67 65 72 5f 69 6e 69 74     (datalogger_init
     abf:	29 20 72 65 73 65 74 74 69 6e 67 20 69 74 65 72     ) resetting iter
     acf:	61 74 6f 72 73 0d 0a 00                             ators...

00000ad7 <__c.7013>:
     ad7:	54 43 43 30 20 72 65 73 6f 6c 75 74 69 6f 6e 20     TCC0 resolution 
     ae7:	3d 20 25 6c 75 0d 0a 00                             = %lu...

00000aef <__c.6966>:
     aef:	28 64 61 74 61 6c 6f 67 67 65 72 5f 69 6e 69 74     (datalogger_init
     aff:	29 20 72 65 73 65 74 74 69 6e 67 20 65 65 70 72     ) resetting eepr
     b0f:	6f 6d 0d 0a 00                                      om...

00000b14 <__c.6598>:
     b14:	57 72 69 74 65 20 46 61 69 6c 65 64 3a 20 45 52     Write Failed: ER
     b24:	52 5f 49 4f 5f 45 52 52 4f 52 0d 0a 00              R_IO_ERROR...

00000b31 <__c.6602>:
     b31:	57 72 69 74 65 20 46 61 69 6c 65 64 3a 20 45 52     Write Failed: ER
     b41:	52 5f 46 4c 55 53 48 45 44 0d 0a 00                 R_FLUSHED...

00000b4d <__c.6605>:
     b4d:	57 72 69 74 65 20 46 61 69 6c 65 64 3a 20 45 52     Write Failed: ER
     b5d:	52 5f 54 49 4d 45 4f 55 54 0d 0a 00                 R_TIMEOUT...

00000b69 <__c.6608>:
     b69:	57 72 69 74 65 20 46 61 69 6c 65 64 3a 20 45 52     Write Failed: ER
     b79:	52 5f 42 41 44 5f 44 41 54 41 0d 0a 00              R_BAD_DATA...

00000b86 <__c.6611>:
     b86:	57 72 69 74 65 20 46 61 69 6c 65 64 3a 20 45 52     Write Failed: ER
     b96:	52 5f 50 52 4f 54 4f 43 4f 4c 0d 0a 00              R_PROTOCOL...

00000ba3 <__c.6614>:
     ba3:	57 72 69 74 65 20 46 61 69 6c 65 64 3a 20 45 52     Write Failed: ER
     bb3:	52 5f 55 4e 53 55 50 50 4f 52 54 45 44 5f 44 45     R_UNSUPPORTED_DE
     bc3:	56 0d 0a 00                                         V...

00000bc7 <__c.6617>:
     bc7:	57 72 69 74 65 20 46 61 69 6c 65 64 3a 20 45 52     Write Failed: ER
     bd7:	52 5f 4e 4f 5f 4d 45 4d 4f 52 59 0d 0a 00           R_NO_MEMORY...

00000be5 <__c.6620>:
     be5:	57 72 69 74 65 20 46 61 69 6c 65 64 3a 20 45 52     Write Failed: ER
     bf5:	52 5f 49 4e 56 41 4c 49 44 5f 41 52 47 0d 0a 00     R_INVALID_ARG...

00000c05 <__c.6623>:
     c05:	57 72 69 74 65 20 46 61 69 6c 65 64 3a 20 45 52     Write Failed: ER
     c15:	52 5f 42 41 44 5f 41 44 44 52 45 53 53 0d 0a 00     R_BAD_ADDRESS...

00000c25 <__c.6626>:
     c25:	57 72 69 74 65 20 46 61 69 6c 65 64 3a 20 45 52     Write Failed: ER
     c35:	52 5f 42 55 53 59 0d 0a 00                          R_BUSY...

00000c3e <__c.6629>:
     c3e:	57 72 69 74 65 20 46 61 69 6c 65 64 3a 20 45 52     Write Failed: ER
     c4e:	52 5f 42 41 44 5f 46 4f 52 4d 41 54 0d 0a 00        R_BAD_FORMAT...

00000c5d <__c.6632>:
     c5d:	57 72 69 74 65 20 46 61 69 6c 65 64 3a 20 55 4e     Write Failed: UN
     c6d:	4b 4f 4e 57 4e 20 45 52 52 4f 52 0d 0a 00           KONWN ERROR...

00000c7b <__c.6640>:
     c7b:	52 45 41 44 20 46 61 69 6c 65 64 3a 20 45 52 52     READ Failed: ERR
     c8b:	5f 49 4f 5f 45 52 52 4f 52 0d 0a 00                 _IO_ERROR...

00000c97 <__c.6644>:
     c97:	52 45 41 44 20 20 46 61 69 6c 65 64 3a 20 45 52     READ  Failed: ER
     ca7:	52 5f 46 4c 55 53 48 45 44 0d 0a 00                 R_FLUSHED...

00000cb3 <__c.6647>:
     cb3:	52 45 41 44 20 20 46 61 69 6c 65 64 3a 20 45 52     READ  Failed: ER
     cc3:	52 5f 54 49 4d 45 4f 55 54 0d 0a 00                 R_TIMEOUT...

00000ccf <__c.6650>:
     ccf:	52 45 41 44 20 20 46 61 69 6c 65 64 3a 20 45 52     READ  Failed: ER
     cdf:	52 5f 42 41 44 5f 44 41 54 41 0d 0a 00              R_BAD_DATA...

00000cec <__c.6653>:
     cec:	52 45 41 44 20 20 46 61 69 6c 65 64 3a 20 45 52     READ  Failed: ER
     cfc:	52 5f 50 52 4f 54 4f 43 4f 4c 0d 0a 00              R_PROTOCOL...

00000d09 <__c.6656>:
     d09:	52 45 41 44 20 20 46 61 69 6c 65 64 3a 20 45 52     READ  Failed: ER
     d19:	52 5f 55 4e 53 55 50 50 4f 52 54 45 44 5f 44 45     R_UNSUPPORTED_DE
     d29:	56 0d 0a 00                                         V...

00000d2d <__c.6659>:
     d2d:	52 45 41 44 20 20 46 61 69 6c 65 64 3a 20 45 52     READ  Failed: ER
     d3d:	52 5f 4e 4f 5f 4d 45 4d 4f 52 59 0d 0a 00           R_NO_MEMORY...

00000d4b <__c.6662>:
     d4b:	52 45 41 44 20 20 46 61 69 6c 65 64 3a 20 45 52     READ  Failed: ER
     d5b:	52 5f 49 4e 56 41 4c 49 44 5f 41 52 47 0d 0a 00     R_INVALID_ARG...

00000d6b <__c.6665>:
     d6b:	52 45 41 44 20 20 46 61 69 6c 65 64 3a 20 45 52     READ  Failed: ER
     d7b:	52 5f 42 41 44 5f 41 44 44 52 45 53 53 0d 0a 00     R_BAD_ADDRESS...

00000d8b <__c.6668>:
     d8b:	52 45 41 44 20 20 46 61 69 6c 65 64 3a 20 45 52     READ  Failed: ER
     d9b:	52 5f 42 55 53 59 0d 0a 00                          R_BUSY...

00000da4 <__c.6671>:
     da4:	52 45 41 44 20 20 46 61 69 6c 65 64 3a 20 45 52     READ  Failed: ER
     db4:	52 5f 42 41 44 5f 46 4f 52 4d 41 54 0d 0a 00        R_BAD_FORMAT...

00000dc3 <__c.6674>:
     dc3:	52 45 41 44 20 20 46 61 69 6c 65 64 3a 20 55 4e     READ  Failed: UN
     dd3:	4b 4f 4e 57 4e 20 45 52 52 4f 52 0d 0a 00           KONWN ERROR...

00000de1 <__c.6722>:
     de1:	40 20 00                                            @ .

00000de4 <__c.6724>:
     de4:	20 3a 20 00                                          : .

00000de8 <__c.6726>:
     de8:	20 3a 20 00                                          : .

00000dec <__c.6728>:
     dec:	0d 0a 00                                            ...

00000def <z.6414>:
     def:	ff ff ff ff ff ff ff ff 00 00                       ..........

00000df9 <__c.6402>:
     df9:	5b 45 56 45 4e 54 5d 20 55 53 42 20 6f 66 66 0d     [EVENT] USB off.
     e09:	0a 00                                               ..

00000e0b <__c.6404>:
     e0b:	5b 45 56 45 4e 54 5d 20 55 53 42 20 6f 6e 0d 0a     [EVENT] USB on..
	...

00000e1c <__c.6563>:
     e1c:	41 44 43 3a 20 25 64 0d 0a 00                       ADC: %d...

00000e26 <__c.6567>:
     e26:	41 44 43 3a 20 25 64 09 67 61 69 6e 3a 20 25 64     ADC: %d.gain: %d
     e36:	09 6f 66 66 73 65 74 3a 25 75 0d 0a 00              .offset:%u...

00000e43 <__c.6578>:
     e43:	74 65 6d 70 65 72 61 74 75 72 65 3a 20 25 64 0d     temperature: %d.
     e53:	0a 00                                               ..

00000e55 <__c.6715>:
     e55:	28 73 69 6d 39 30 30 5f 70 6f 77 65 72 5f 6f 66     (sim900_power_of
     e65:	66 29 20 6d 6f 64 75 6c 65 20 69 73 20 4f 4e 20     f) module is ON 
     e75:	73 6f 20 70 6f 77 65 72 20 63 79 63 6c 69 6e 67     so power cycling
     e85:	0d 0a 00                                            ...

00000e88 <__c.6717>:
     e88:	28 73 69 6d 39 30 30 5f 70 6f 77 65 72 5f 6f 66     (sim900_power_of
     e98:	66 29 20 6d 6f 64 75 6c 65 20 69 73 20 61 6c 72     f) module is alr
     ea8:	65 61 64 79 20 4f 46 46 0d 0a 00                    eady OFF...

00000eb3 <__c.6842>:
     eb3:	53 49 4d 39 30 30 5f 49 4e 49 54 00                 SIM900_INIT.

00000ebf <__c.6844>:
     ebf:	28 73 69 6d 39 30 30 5f 69 6e 69 74 29 20 63 6f     (sim900_init) co
     ecf:	64 65 20 63 6f 6d 70 69 6c 65 64 20 77 69 74 68     de compiled with
     edf:	20 69 6e 74 65 72 72 75 70 74 20 75 73 61 72 74      interrupt usart
     eef:	0d 0a 00                                            ...

00000ef2 <sz_AT>:
     ef2:	41 54 0d 0a 00                                      AT...

00000ef7 <sz_OK>:
     ef7:	4f 4b 00                                            OK.

00000efa <__c.6850>:
     efa:	28 53 49 4d 39 30 30 5f 69 6e 69 74 29 20 74 72     (SIM900_init) tr
     f0a:	79 69 6e 67 20 74 6f 20 73 65 74 20 61 20 73 65     ying to set a se
     f1a:	72 69 61 6c 20 6c 69 6e 65 20 73 70 65 65 64 0d     rial line speed.
     f2a:	0a 00                                               ..

00000f2c <__c.6856>:
     f2c:	28 53 49 4d 39 30 30 5f 69 6e 69 74 29 20 4e 6f     (SIM900_init) No
     f3c:	74 20 62 65 69 6e 67 20 61 62 6c 65 20 74 6f 20     t being able to 
     f4c:	63 6f 6e 6e 65 63 74 20 74 6f 20 53 49 4d 39 30     connect to SIM90
     f5c:	30 2e 20 54 72 79 20 74 6f 20 70 6f 77 65 72 20     0. Try to power 
     f6c:	69 74 20 6f 6e 20 61 67 61 69 6e 0d 0a 00           it on again...

00000f7a <__c.6860>:
     f7a:	28 53 49 4d 39 30 30 5f 69 6e 69 74 29 20 66 61     (SIM900_init) fa
     f8a:	69 6c 65 64 20 74 6f 20 73 79 6e 63 68 72 6f 6e     iled to synchron
     f9a:	69 7a 65 20 77 69 74 68 20 47 50 52 53 20 55 41     ize with GPRS UA
     faa:	52 54 2e 20 54 68 65 20 70 72 6f 63 65 73 73 20     RT. The process 
     fba:	77 69 6c 6c 20 65 6e 64 20 68 65 72 65 0d 0a 00     will end here...

00000fca <__c.6862>:
     fca:	41 54 45 30 0d 0a 00                                ATE0...

00000fd1 <__c.6864>:
     fd1:	28 53 49 4d 39 30 30 5f 69 6e 69 74 29 20 74 68     (SIM900_init) th
     fe1:	69 73 20 73 69 6d 39 30 30 20 64 6f 65 73 6e 27     is sim900 doesn'
     ff1:	74 20 73 75 70 70 6f 72 74 20 41 54 45 30 0d 0a     t support ATE0..
	...

00001002 <__c.6866>:
    1002:	28 53 49 4d 39 30 30 5f 69 6e 69 74 29 20 63 6f     (SIM900_init) co
    1012:	72 72 65 63 74 6c 79 20 69 73 73 75 65 64 20 41     rrectly issued A
    1022:	54 45 30 0d 0a 00                                   TE0...

00001028 <__c.6868>:
    1028:	41 54 2b 43 52 45 47 3d 30 0d 0a 00                 AT+CREG=0...

00001034 <__c.6870>:
    1034:	28 53 49 4d 39 30 30 5f 69 6e 69 74 29 20 74 68     (SIM900_init) th
    1044:	69 73 20 73 69 6d 39 30 30 20 64 6f 65 73 6e 27     is sim900 doesn'
    1054:	74 20 73 75 70 70 6f 72 74 20 41 54 2b 43 52 45     t support AT+CRE
    1064:	47 0d 0a 00                                         G...

00001068 <__c.6872>:
    1068:	28 53 49 4d 39 30 30 5f 69 6e 69 74 29 20 63 6f     (SIM900_init) co
    1078:	72 72 65 63 74 6c 79 20 69 73 73 75 65 64 20 41     rrectly issued A
    1088:	54 2b 43 52 45 47 3d 30 0d 0a 00                    T+CREG=0...

00001093 <__c.6874>:
    1093:	41 54 2b 47 53 4e 3d 3f 0d 0a 00                    AT+GSN=?...

0000109e <__c.6876>:
    109e:	28 53 49 4d 39 30 30 5f 69 6e 69 74 29 20 74 68     (SIM900_init) th
    10ae:	69 73 20 73 69 6d 39 30 30 20 64 6f 65 73 6e 27     is sim900 doesn'
    10be:	74 20 73 75 70 70 6f 72 74 20 41 54 2b 47 53 4e     t support AT+GSN
    10ce:	0d 0a 00                                            ...

000010d1 <__c.6879>:
    10d1:	41 54 2b 47 53 4e 0d 0a 00                          AT+GSN...

000010da <__c.6881>:
    10da:	49 4d 45 49 20 63 6f 64 65 20 69 73 20 3a 20 00     IMEI code is : .

000010ea <__c.6883>:
    10ea:	28 53 49 4d 39 30 30 5f 69 6e 69 74 29 20 41 54     (SIM900_init) AT
    10fa:	2b 47 53 4e 20 6d 65 73 73 65 64 20 75 70 0d 0a     +GSN messed up..
	...

0000110b <__c.6885>:
    110b:	28 53 49 4d 39 30 30 5f 69 6e 69 74 29 20 41 54     (SIM900_init) AT
    111b:	2b 47 53 4e 20 47 4f 54 20 4f 4b 0d 0a 00           +GSN GOT OK...

00001129 <__c.6887>:
    1129:	41 54 2b 43 50 49 4e 3d 3f 0d 0a 00                 AT+CPIN=?...

00001135 <__c.6889>:
    1135:	28 53 49 4d 39 30 30 5f 69 6e 69 74 29 20 53 49     (SIM900_init) SI
    1145:	4d 20 69 73 20 6e 6f 74 20 70 72 65 73 65 6e 74     M is not present
    1155:	0d 0a 00                                            ...

00001158 <__c.6891>:
    1158:	41 54 2b 43 50 49 4e 3f 0d 0a 00                    AT+CPIN?...

00001163 <tbl_CPIN_rets>:
    1163:	f7 0e e5 1f eb 1f 75 11 66 12 f1 1f fc 1f 07 20     ......u.f...... 
    1173:	10 20                                               . 

00001175 <szCPIN_SIM_PIN>:
    1175:	53 49 4d 20 50 49 4e 00                             SIM PIN.

0000117d <__c.6894>:
    117d:	28 53 49 4d 39 30 30 5f 69 6e 69 74 29 20 53 49     (SIM900_init) SI
    118d:	4d 20 70 72 65 73 65 6e 74 20 61 6e 64 20 69 73     M present and is
    119d:	20 50 49 4e 20 6c 6f 63 6b 65 64 0d 0a 00            PIN locked...

000011ab <__c.6896>:
    11ab:	28 53 49 4d 39 30 30 5f 69 6e 69 74 29 20 50 49     (SIM900_init) PI
    11bb:	4e 20 63 6f 64 65 20 69 73 20 6e 6f 74 20 70 72     N code is not pr
    11cb:	65 73 65 6e 74 20 69 6e 20 6d 65 6d 6f 72 79 20     esent in memory 
    11db:	53 49 4d 20 77 69 6c 6c 20 72 65 6d 61 69 6e 20     SIM will remain 
    11eb:	6c 6f 63 6b 65 64 0d 0a 00                          locked...

000011f4 <__c.6898>:
    11f4:	28 53 49 4d 39 30 30 5f 69 6e 69 74 29 20 50 49     (SIM900_init) PI
    1204:	4e 20 63 6f 64 65 20 69 73 20 70 72 65 73 65 6e     N code is presen
    1214:	74 20 69 6e 20 6d 65 6d 6f 72 79 20 74 72 79 69     t in memory tryi
    1224:	6e 67 20 74 6f 20 75 6e 6c 6f 63 6b 0d 0a 50 49     ng to unlock..PI
    1234:	4e 3a 20 00                                         N: .

00001238 <__c.6900>:
    1238:	41 54 2b 43 50 49 4e 3d 00                          AT+CPIN=.

00001241 <__c.6903>:
    1241:	28 73 69 6d 39 30 30 5f 69 6e 69 74 29 20 57 41     (sim900_init) WA
    1251:	52 4e 49 4e 47 20 50 49 4e 20 69 73 20 57 52 4f     RNING PIN is WRO
    1261:	4e 47 0d 0a 00                                      NG...

00001266 <szCPIN_SIM_PUK>:
    1266:	53 49 4d 20 50 55 4b 00                             SIM PUK.

0000126e <__c.6905>:
    126e:	28 53 49 4d 39 30 30 5f 69 6e 69 74 29 20 53 49     (SIM900_init) SI
    127e:	4d 20 70 72 65 73 65 6e 74 20 61 6e 64 20 69 73     M present and is
    128e:	20 50 55 4b 20 6c 6f 63 6b 65 64 0d 0a 00            PUK locked...

0000129c <__c.6907>:
    129c:	28 53 49 4d 39 30 30 5f 69 6e 69 74 29 20 6e 6f     (SIM900_init) no
    12ac:	20 50 55 4b 20 63 6f 64 65 2c 20 53 49 4d 20 69      PUK code, SIM i
    12bc:	6e 69 74 20 77 69 6c 6c 20 66 61 69 6c 20 68 65     nit will fail he
    12cc:	72 65 0d 0a 00                                      re...

000012d1 <__c.6909>:
    12d1:	41 54 2b 43 52 45 47 3f 0d 0a 00                    AT+CREG?...

000012dc <__c.6912>:
    12dc:	2b 43 52 45 47 3a 20 31 2c 31 00                    +CREG: 1,1.

000012e7 <__c.6914>:
    12e7:	28 53 49 4d 39 30 30 5f 69 6e 69 74 29 20 64 65     (SIM900_init) de
    12f7:	76 69 63 65 20 69 73 20 6e 6f 74 20 61 6e 73 77     vice is not answ
    1307:	65 72 69 6e 67 20 61 73 20 69 74 20 73 68 6f 75     ering as it shou
    1317:	6c 64 20 72 65 73 74 61 72 74 69 6e 67 20 69 74     ld restarting it
    1327:	0d 0a 00                                            ...

0000132a <__c.6916>:
    132a:	28 53 49 4d 39 30 30 5f 69 6e 69 74 29 20 64 65     (SIM900_init) de
    133a:	76 69 63 65 20 63 6f 72 72 65 63 74 6c 79 20 72     vice correctly r
    134a:	65 67 69 73 74 65 72 65 64 20 69 6e 20 74 68 65     egistered in the
    135a:	20 6e 65 74 77 6f 72 6b 0d 0a 00                     network...

00001365 <__c.6919>:
    1365:	28 53 49 4d 39 30 30 5f 69 6e 69 74 29 20 64 65     (SIM900_init) de
    1375:	76 69 63 65 20 61 6e 73 77 65 72 65 64 20 00        vice answered .

00001384 <__c.6921>:
    1384:	20 73 65 65 6d 73 20 6e 6f 74 20 72 65 67 69 73      seems not regis
    1394:	74 65 72 65 64 20 69 6e 20 74 68 65 20 6e 65 74     tered in the net
    13a4:	77 6f 72 6b 0d 0a 00                                work...

000013ab <__c.6923>:
    13ab:	28 53 49 4d 39 30 30 5f 69 6e 69 74 29 20 77 69     (SIM900_init) wi
    13bb:	6c 6c 20 63 68 65 63 6b 20 61 67 61 69 6e 20 69     ll check again i
    13cb:	6e 20 35 20 73 65 63 6f 6e 64 0d 0a 00              n 5 second...

000013d8 <__c.6819>:
    13d8:	28 73 69 6d 39 30 30 5f 63 6d 64 5f 77 69 74 68     (sim900_cmd_with
    13e8:	5f 72 65 61 64 5f 73 74 72 69 6e 67 29 20 67 6f     _read_string) go
    13f8:	74 20 74 69 6d 65 6f 74 20 72 65 74 72 69 6e 67     t timeot retring
    1408:	0d 0a 00                                            ...

0000140b <__c.6824>:
    140b:	28 73 69 6d 39 30 30 5f 63 6d 64 5f 77 69 74 68     (sim900_cmd_with
    141b:	5f 72 65 61 64 5f 73 74 72 69 6e 67 29 20 66 61     _read_string) fa
    142b:	69 6c 65 64 0d 0a 00                                iled...

00001432 <__c.6785>:
    1432:	28 73 69 6d 39 30 30 5f 77 61 69 74 34 64 69 63     (sim900_wait4dic
    1442:	74 69 6f 6e 61 72 79 29 20 74 69 6d 65 6f 75 74     tionary) timeout
    1452:	20 77 61 69 74 69 6e 67 20 66 6f 72 20 73 69 6d      waiting for sim
    1462:	39 30 30 20 72 65 73 70 6f 6e 73 65 0d 0a 28 73     900 response..(s
    1472:	69 6d 39 30 30 5f 77 61 69 74 34 64 69 63 74 69     im900_wait4dicti
    1482:	6f 6e 61 72 79 29 20 4f 55 54 0d 0a 00              onary) OUT...

0000148f <__c.6755>:
    148f:	28 73 69 6d 39 30 30 5f 77 61 69 74 5f 64 61 74     (sim900_wait_dat
    149f:	61 5f 6f 6e 5f 75 73 61 72 74 29 20 74 69 6d 65     a_on_usart) time
    14af:	64 2d 6f 75 74 0d 0a 00                             d-out...

000014b7 <tbl_returns>:
    14b7:	f7 0e e5 1f                                         ....

000014bb <__c.6765>:
    14bb:	28 73 69 6d 39 30 30 5f 72 65 61 64 5f 73 74 72     (sim900_read_str
    14cb:	69 6e 67 29 20 67 6f 74 20 74 69 6d 65 6f 75 74     ing) got timeout
    14db:	20 77 61 69 74 69 6e 67 20 66 6f 72 20 61 20 63      waiting for a c
    14eb:	68 61 72 61 63 74 65 72 0d 0a 00                    haracter...

000014f6 <__c.6769>:
    14f6:	28 73 69 6d 39 30 30 5f 72 65 61 64 5f 73 74 72     (sim900_read_str
    1506:	69 6e 67 29 20 67 6f 74 20 74 69 6d 65 6f 75 74     ing) got timeout
    1516:	20 77 61 69 74 69 6e 67 20 66 6f 72 20 61 20 63      waiting for a c
    1526:	68 61 72 61 63 74 65 72 0d 0a 00                    haracter...

00001531 <__c.6774>:
    1531:	28 73 69 6d 39 30 30 5f 72 65 61 64 5f 73 74 72     (sim900_read_str
    1541:	69 6e 67 29 20 50 72 6f 76 69 64 65 64 20 62 75     ing) Provided bu
    1551:	66 66 65 72 20 69 73 20 6e 6f 74 20 62 69 67 20     ffer is not big 
    1561:	65 6e 6f 75 67 68 2e 20 44 69 73 63 61 72 64 69     enough. Discardi
    1571:	6e 67 20 63 68 61 72 73 0d 0a 00                    ng chars...

0000157c <__c.6802>:
    157c:	28 73 69 6d 39 30 30 5f 77 61 69 74 5f 73 74 72     (sim900_wait_str
    158c:	69 6e 67 29 20 74 69 6d 65 6f 75 74 20 77 61 69     ing) timeout wai
    159c:	74 69 6e 67 20 66 6f 72 20 73 69 6d 39 30 30 20     ting for sim900 
    15ac:	72 65 73 70 6f 6e 73 65 0d 0a 28 73 69 6d 39 30     response..(sim90
    15bc:	30 5f 77 61 69 74 5f 73 74 72 69 6e 67 29 20 4f     0_wait_string) O
    15cc:	55 54 0d 0a 00                                      UT...

000015d1 <__c.6971>:
    15d1:	28 73 69 6d 39 30 30 5f 47 50 52 53 5f 73 69 6d     (sim900_GPRS_sim
    15e1:	70 6c 65 5f 6f 70 65 6e 29 20 55 73 69 6e 67 20     ple_open) Using 
    15f1:	41 50 4e 20 00                                      APN .

000015f6 <__c.6985>:
    15f6:	53 49 4d 39 30 30 5f 47 50 52 53 5f 49 4e 49 54     SIM900_GPRS_INIT
	...

00001607 <__c.6987>:
    1607:	41 54 2b 53 41 50 42 52 3d 32 2c 31 0d 0a 00        AT+SAPBR=2,1...

00001616 <__c.6989>:
    1616:	28 73 69 6d 39 30 30 5f 67 70 72 73 5f 69 6e 69     (sim900_gprs_ini
    1626:	74 29 20 74 68 65 20 53 41 50 42 52 20 23 31 20     t) the SAPBR #1 
    1636:	71 75 65 72 79 20 77 65 6e 74 20 77 72 6f 6e 67     query went wrong
    1646:	20 66 6f 72 20 73 6f 6d 65 20 72 65 61 73 6f 6e      for some reason
    1656:	2c 20 70 72 6f 63 65 64 75 72 65 20 61 62 6f 72     , procedure abor
    1666:	74 65 64 0d 0a 00                                   ted...

0000166c <__c.6991>:
    166c:	28 73 69 6d 39 30 30 5f 67 70 72 73 5f 69 6e 69     (sim900_gprs_ini
    167c:	74 29 20 62 65 61 72 65 72 20 69 73 20 3a 20 00     t) bearer is : .

0000168c <__c.6993>:
    168c:	28 73 69 6d 39 30 30 5f 67 70 72 73 5f 69 6e 69     (sim900_gprs_ini
    169c:	74 29 20 74 68 65 20 53 41 50 42 52 20 23 32 20     t) the SAPBR #2 
    16ac:	71 75 65 72 79 20 77 65 6e 74 20 77 72 6f 6e 67     query went wrong
    16bc:	20 66 6f 72 20 73 6f 6d 65 20 72 65 61 73 6f 6e      for some reason
    16cc:	2c 20 70 72 6f 63 65 64 75 72 65 20 61 62 6f 72     , procedure abor
    16dc:	74 65 64 0d 0a 00                                   ted...

000016e2 <__c.6995>:
    16e2:	2b 53 41 50 42 52 3a 20 31 2c 33 2c 22 30 2e 30     +SAPBR: 1,3,"0.0
    16f2:	2e 30 2e 30 22 00                                   .0.0".

000016f8 <__c.6998>:
    16f8:	28 73 69 6d 39 30 30 5f 67 70 72 73 5f 69 6e 69     (sim900_gprs_ini
    1708:	74 29 20 74 68 65 20 72 65 71 75 65 73 74 65 64     t) the requested
    1718:	20 62 65 61 72 65 72 20 69 73 20 69 6e 20 63 6c      bearer is in cl
    1728:	6f 73 69 6e 67 20 73 74 61 74 75 73 20 28 57 41     osing status (WA
    1738:	52 4e 49 4e 47 29 0d 0a 00                          RNING)...

00001741 <__c.7000>:
    1741:	28 73 69 6d 39 30 30 5f 67 70 72 73 5f 69 6e 69     (sim900_gprs_ini
    1751:	74 29 20 74 68 65 20 72 65 71 75 65 73 74 65 64     t) the requested
    1761:	20 62 65 61 72 65 72 20 69 73 20 61 6c 72 65 61      bearer is alrea
    1771:	64 79 20 6f 70 65 6e 28 57 41 52 4e 49 4e 47 29     dy open(WARNING)
    1781:	0d 0a 00                                            ...

00001784 <__c.7002>:
    1784:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 6f     AT+SAPBR=3,1,"Co
    1794:	6e 74 79 70 65 22 2c 22 47 50 52 53 22 0d 0a 00     ntype","GPRS"...

000017a4 <__c.7004>:
    17a4:	28 73 69 6d 39 30 30 5f 67 70 72 73 5f 69 6e 69     (sim900_gprs_ini
    17b4:	74 29 20 74 68 65 20 53 41 50 42 52 3d 33 2c 31     t) the SAPBR=3,1
    17c4:	2c 22 43 6f 6e 74 79 70 65 22 2c 22 47 50 52 53     ,"Contype","GPRS
    17d4:	22 20 71 75 65 72 79 20 77 65 6e 74 20 77 72 6f     " query went wro
    17e4:	6e 67 20 66 6f 72 20 73 6f 6d 65 20 72 65 61 73     ng for some reas
    17f4:	6f 6e 2c 20 70 72 6f 63 65 64 75 72 65 20 61 62     on, procedure ab
    1804:	6f 72 74 65 64 0d 0a 00                             orted...

0000180c <__c.7006>:
    180c:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
    181c:	4e 22 2c 22 00                                      N",".

00001821 <__c.7008>:
    1821:	22 0d 0a 00                                         "...

00001825 <__c.7012>:
    1825:	28 73 69 6d 39 30 30 5f 67 70 72 73 5f 69 6e 69     (sim900_gprs_ini
    1835:	74 29 20 74 68 65 20 53 41 50 42 52 3d 33 2c 31     t) the SAPBR=3,1
    1845:	2c 22 41 50 4e 22 20 71 75 65 72 79 20 77 65 6e     ,"APN" query wen
    1855:	74 20 77 72 6f 6e 67 20 66 6f 72 20 73 6f 6d 65     t wrong for some
    1865:	20 72 65 61 73 6f 6e 2c 20 70 72 6f 63 65 64 75      reason, procedu
    1875:	72 65 20 61 62 6f 72 74 65 64 0d 0a 00              re aborted...

00001882 <__c.7016>:
    1882:	41 54 2b 53 41 50 42 52 3d 31 2c 31 0d 0a 00        AT+SAPBR=1,1...

00001891 <__c.7018>:
    1891:	28 73 69 6d 39 30 30 5f 67 70 72 73 5f 69 6e 69     (sim900_gprs_ini
    18a1:	74 29 20 74 68 65 20 53 41 50 42 52 3d 31 2c 31     t) the SAPBR=1,1
    18b1:	20 71 75 65 72 79 20 77 65 6e 74 20 77 72 6f 6e      query went wron
    18c1:	67 20 66 6f 72 20 73 6f 6d 65 20 72 65 61 73 6f     g for some reaso
    18d1:	6e 2c 20 70 72 6f 63 65 64 75 72 65 20 61 62 6f     n, procedure abo
    18e1:	72 74 65 64 0d 0a 00                                rted...

000018e8 <__c.7020>:
    18e8:	41 54 2b 53 41 50 42 52 3d 32 2c 31 0d 0a 00        AT+SAPBR=2,1...

000018f7 <__c.7022>:
    18f7:	28 73 69 6d 39 30 30 5f 67 70 72 73 5f 69 6e 69     (sim900_gprs_ini
    1907:	74 29 20 74 68 65 20 53 41 50 42 52 20 71 75 65     t) the SAPBR que
    1917:	72 79 20 77 65 6e 74 20 77 72 6f 6e 67 20 66 6f     ry went wrong fo
    1927:	72 20 73 6f 6d 65 20 72 65 61 73 6f 6e 2c 20 70     r some reason, p
    1937:	72 6f 63 65 64 75 72 65 20 61 62 6f 72 74 65 64     rocedure aborted
    1947:	0d 0a 00                                            ...

0000194a <__c.7024>:
    194a:	28 73 69 6d 39 30 30 5f 67 70 72 73 5f 69 6e 69     (sim900_gprs_ini
    195a:	74 29 20 62 65 61 72 65 72 20 69 73 20 3a 20 00     t) bearer is : .

0000196a <__c.7026>:
    196a:	28 73 69 6d 39 30 30 5f 67 70 72 73 5f 69 6e 69     (sim900_gprs_ini
    197a:	74 29 20 74 68 65 20 53 41 50 42 52 20 71 75 65     t) the SAPBR que
    198a:	72 79 20 77 65 6e 74 20 77 72 6f 6e 67 2c 20 70     ry went wrong, p
    199a:	72 6f 63 65 64 75 72 65 20 61 62 6f 72 74 65 64     rocedure aborted
    19aa:	0d 0a 00                                            ...

000019ad <__c.7029>:
    19ad:	28 73 69 6d 39 30 30 5f 67 70 72 73 5f 69 6e 69     (sim900_gprs_ini
    19bd:	74 29 20 74 68 65 20 72 65 71 75 65 73 74 65 64     t) the requested
    19cd:	20 62 65 61 72 65 72 20 69 73 20 69 6e 20 27 63      bearer is in 'c
    19dd:	6f 6e 6e 65 63 74 69 6e 67 27 20 73 74 61 74 75     onnecting' statu
    19ed:	73 2e 20 43 68 65 63 6b 20 61 67 61 69 6e 20 69     s. Check again i
    19fd:	6e 20 32 20 73 65 63 6f 6e 64 73 0d 0a 00           n 2 seconds...

00001a0b <__c.7032>:
    1a0b:	28 73 69 6d 39 30 30 5f 67 70 72 73 5f 69 6e 69     (sim900_gprs_ini
    1a1b:	74 29 20 74 68 65 20 72 65 71 75 65 73 74 65 64     t) the requested
    1a2b:	20 62 65 61 72 65 72 20 69 73 20 6f 70 65 6e 0d      bearer is open.
    1a3b:	0a 00                                               ..

00001a3d <__c.7035>:
    1a3d:	28 73 69 6d 39 30 30 5f 67 70 72 73 5f 69 6e 69     (sim900_gprs_ini
    1a4d:	74 29 20 74 68 65 20 72 65 71 75 65 73 74 65 64     t) the requested
    1a5d:	20 62 65 61 72 65 72 20 69 73 20 63 6c 6f 73 65      bearer is close
    1a6d:	64 20 6f 72 20 69 6e 20 63 6c 6f 73 69 6e 67 20     d or in closing 
    1a7d:	73 74 61 74 75 73 20 28 45 52 52 4f 52 29 0d 0a     status (ERROR)..
	...

00001a8e <__c.7042>:
    1a8e:	41 54 2b 53 41 50 42 52 3d 30 2c 31 0d 0a 00        AT+SAPBR=0,1...

00001a9d <__c.7051>:
    1a9d:	41 54 2b 48 54 54 50 52 45 41 44 0d 0a 00           AT+HTTPREAD...

00001aab <__c.7053>:
    1aab:	2b 48 54 54 50 52 45 41 44 3a 00                    +HTTPREAD:.

00001ab6 <__c.7056>:
    1ab6:	28 73 69 6d 39 30 30 5f 68 74 74 70 5f 72 65 61     (sim900_http_rea
    1ac6:	64 31 29 20 23 31 20 67 6f 74 20 74 69 6d 65 6f     d1) #1 got timeo
    1ad6:	75 74 20 77 61 69 74 69 6e 67 20 66 6f 72 20 73     ut waiting for s
    1ae6:	69 6d 39 30 30 20 72 65 73 70 6f 6e 73 65 0d 0a     im900 response..
	...

00001af7 <__c.7058>:
    1af7:	28 73 69 6d 39 30 30 5f 68 74 74 70 5f 72 65 61     (sim900_http_rea
    1b07:	64 31 29 20 23 31 20 70 72 6f 76 69 64 65 64 20     d1) #1 provided 
    1b17:	62 75 66 66 65 72 20 69 73 20 6e 6f 74 20 62 69     buffer is not bi
    1b27:	67 20 65 6e 6f 75 67 68 0d 0a 00                    g enough...

00001b32 <__c.7060>:
    1b32:	28 73 69 6d 39 30 30 5f 68 74 74 70 5f 72 65 61     (sim900_http_rea
    1b42:	64 32 29 20 23 32 20 67 6f 74 20 74 69 6d 65 6f     d2) #2 got timeo
    1b52:	75 74 20 77 61 69 74 69 6e 67 20 66 6f 72 20 73     ut waiting for s
    1b62:	69 6d 39 30 30 20 72 65 73 70 6f 6e 73 65 0d 0a     im900 response..
	...

00001b73 <__c.7062>:
    1b73:	28 73 69 6d 39 30 30 5f 68 74 74 70 5f 72 65 61     (sim900_http_rea
    1b83:	64 32 29 20 23 32 20 70 72 6f 76 69 64 65 64 20     d2) #2 provided 
    1b93:	62 75 66 66 65 72 20 69 73 20 6e 6f 74 20 62 69     buffer is not bi
    1ba3:	67 20 65 6e 6f 75 67 68 0d 0a 00                    g enough...

00001bae <__c.7070>:
    1bae:	41 54 0d 0a 00                                      AT...

00001bb3 <__c.7072>:
    1bb3:	28 73 69 6d 39 30 30 5f 68 74 74 70 5f 67 65 74     (sim900_http_get
    1bc3:	29 20 53 49 4d 39 30 30 20 6e 6f 74 20 72 65 73     ) SIM900 not res
    1bd3:	70 6f 6e 64 69 6e 67 20 0d 0a 00                    ponding ...

00001bde <__c.7074>:
    1bde:	41 54 2b 48 54 54 50 49 4e 49 54 0d 0a 00           AT+HTTPINIT...

00001bec <__c.7076>:
    1bec:	28 73 69 6d 39 30 30 5f 68 74 74 70 5f 67 65 74     (sim900_http_get
    1bfc:	29 20 41 54 2b 48 54 54 50 49 4e 49 54 20 6e 6f     ) AT+HTTPINIT no
    1c0c:	74 20 4f 4b 0d 0a 00                                t OK...

00001c13 <__c.7078>:
    1c13:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 43 49 44     AT+HTTPPARA="CID
    1c23:	22 2c 31 0d 0a 00                                   ",1...

00001c29 <__c.7080>:
    1c29:	28 73 69 6d 39 30 30 5f 68 74 74 70 5f 67 65 74     (sim900_http_get
    1c39:	29 20 41 54 2b 48 54 54 50 50 41 52 41 3d 22 43     ) AT+HTTPPARA="C
    1c49:	49 44 22 20 6e 6f 74 20 4f 4b 0d 0a 00              ID" not OK...

00001c56 <__c.7082>:
    1c56:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 55 52 4c     AT+HTTPPARA="URL
    1c66:	22 2c 22 00                                         ",".

00001c6a <__c.7084>:
    1c6a:	22 0d 0a 00                                         "...

00001c6e <__c.7086>:
    1c6e:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 30 0d     AT+HTTPACTION=0.
    1c7e:	0a 00                                               ..

00001c80 <__c.7088>:
    1c80:	28 68 74 74 70 5f 67 65 74 29 20 48 54 54 50 41     (http_get) HTTPA
    1c90:	43 54 49 4f 4e 20 64 69 64 6e 27 74 20 72 65 74     CTION didn't ret
    1ca0:	75 72 6e 20 4f 4b 0d 0a 00                          urn OK...

00001ca9 <__c.7090>:
    1ca9:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

00001cb6 <__c.7092>:
    1cb6:	28 68 74 74 70 5f 67 65 74 29 20 64 69 64 6e 27     (http_get) didn'
    1cc6:	74 20 67 6f 74 20 2b 68 74 74 70 61 63 74 69 6f     t got +httpactio
    1cd6:	6e 20 61 62 6f 72 74 69 6e 67 0d 0a 00              n aborting...

00001ce3 <__c.7098>:
    1ce3:	28 73 69 6d 39 30 30 5f 68 74 74 70 5f 67 65 74     (sim900_http_get
    1cf3:	29 20 67 6f 74 20 74 69 6d 65 6f 75 74 20 77 61     ) got timeout wa
    1d03:	69 74 69 6e 67 20 66 6f 72 20 68 74 74 70 61 63     iting for httpac
    1d13:	74 69 6f 6e 20 72 65 73 70 6f 6e 73 65 0d 0a 00     tion response...

00001d23 <__c.7100>:
    1d23:	28 73 69 6d 39 30 30 5f 68 74 74 70 5f 67 65 74     (sim900_http_get
    1d33:	29 20 68 74 74 70 61 63 74 69 6f 6e 20 72 65 74     ) httpaction ret
    1d43:	75 72 6e 65 64 3a 20 00                             urned: .

00001d4b <__c.7102>:
    1d4b:	28 73 69 6d 39 30 30 5f 68 74 74 70 5f 67 65 74     (sim900_http_get
    1d5b:	29 20 68 74 74 70 67 65 74 20 72 65 73 70 6f 6e     ) httpget respon
    1d6b:	73 65 20 77 61 73 20 6e 6f 74 20 4f 4b 0d 0a 00     se was not OK...

00001d7b <__c.7104>:
    1d7b:	41 54 2b 48 54 54 50 52 45 41 44 0d 0a 00           AT+HTTPREAD...

00001d89 <__c.7106>:
    1d89:	2b 48 54 54 50 52 45 41 44 3a 00                    +HTTPREAD:.

00001d94 <__c.7108>:
    1d94:	28 73 69 6d 39 30 30 5f 68 74 74 70 5f 67 65 74     (sim900_http_get
    1da4:	29 20 23 31 20 67 6f 74 20 74 69 6d 65 6f 75 74     ) #1 got timeout
    1db4:	20 77 61 69 74 69 6e 67 20 66 6f 72 20 73 69 6d      waiting for sim
    1dc4:	39 30 30 20 72 65 73 70 6f 6e 73 65 0d 0a 00        900 response...

00001dd3 <__c.7110>:
    1dd3:	28 73 69 6d 39 30 30 5f 68 74 74 70 5f 67 65 74     (sim900_http_get
    1de3:	29 20 23 31 20 70 72 6f 76 69 64 65 64 20 62 75     ) #1 provided bu
    1df3:	66 66 65 72 20 69 73 20 6e 6f 74 20 62 69 67 20     ffer is not big 
    1e03:	65 6e 6f 75 67 68 0d 0a 00                          enough...

00001e0c <__c.7123>:
    1e0c:	41 54 0d 0a 00                                      AT...

00001e11 <__c.7125>:
    1e11:	28 73 69 6d 39 30 30 5f 68 74 74 70 5f 70 6f 73     (sim900_http_pos
    1e21:	74 29 20 53 49 4d 39 30 30 20 6e 6f 74 20 72 65     t) SIM900 not re
    1e31:	73 70 6f 6e 64 69 6e 67 20 0d 0a 00                 sponding ...

00001e3d <__c.7127>:
    1e3d:	41 54 2b 48 54 54 50 49 4e 49 54 0d 0a 00           AT+HTTPINIT...

00001e4b <__c.7129>:
    1e4b:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 43 49 44     AT+HTTPPARA="CID
    1e5b:	22 2c 31 0d 0a 00                                   ",1...

00001e61 <__c.7131>:
    1e61:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 55 52 4c     AT+HTTPPARA="URL
    1e71:	22 2c 22 00                                         ",".

00001e75 <__c.7133>:
    1e75:	22 0d 0a 00                                         "...

00001e79 <__c.7137>:
    1e79:	41 54 2b 48 54 54 50 44 41 54 41 3d 25 64 2c 25     AT+HTTPDATA=%d,%
    1e89:	64 0d 0a 00                                         d...

00001e8d <__c.7139>:
    1e8d:	44 4f 57 4e 4c 4f 41 44 00                          DOWNLOAD.

00001e96 <__c.7141>:
    1e96:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 31 0d     AT+HTTPACTION=1.
    1ea6:	0a 00                                               ..

00001ea8 <__c.7143>:
    1ea8:	28 68 74 74 70 5f 70 6f 73 74 29 20 48 54 54 50     (http_post) HTTP
    1eb8:	41 43 54 49 4f 4e 20 64 69 64 6e 27 74 20 72 65     ACTION didn't re
    1ec8:	74 75 72 6e 20 4f 4b 0d 0a 00                       turn OK...

00001ed2 <__c.7145>:
    1ed2:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

00001edf <__c.7147>:
    1edf:	28 68 74 74 70 5f 70 6f 73 74 29 20 2b 68 74 74     (http_post) +htt
    1eef:	70 61 63 74 69 6f 6e 20 69 73 20 74 61 6b 69 6e     paction is takin
    1eff:	67 20 61 20 77 68 69 6c 65 0d 0a 00                 g a while...

00001f0b <__c.7149>:
    1f0b:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

00001f18 <__c.7151>:
    1f18:	28 68 74 74 70 5f 70 6f 73 74 29 20 2b 68 74 74     (http_post) +htt
    1f28:	70 61 63 74 69 6f 6e 20 69 73 20 74 61 6b 69 6e     paction is takin
    1f38:	67 20 61 20 6c 6f 74 0d 0a 00                       g a lot...

00001f42 <__c.7153>:
    1f42:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

00001f4f <__c.7155>:
    1f4f:	28 68 74 74 70 5f 70 6f 73 74 29 20 64 69 64 6e     (http_post) didn
    1f5f:	27 74 20 67 6f 74 20 2b 68 74 74 70 61 63 74 69     't got +httpacti
    1f6f:	6f 6e 20 61 62 6f 72 74 69 6e 67 0d 0a 00           on aborting...

00001f7d <__c.7159>:
    1f7d:	28 73 69 6d 39 30 30 5f 68 74 74 70 5f 70 6f 73     (sim900_http_pos
    1f8d:	74 29 20 68 74 74 70 61 63 74 69 6f 6e 20 72 65     t) httpaction re
    1f9d:	74 75 72 6e 65 64 3a 20 00                          turned: .

00001fa6 <__c.7161>:
    1fa6:	28 73 69 6d 39 30 30 5f 68 74 74 70 5f 67 65 74     (sim900_http_get
    1fb6:	29 20 68 74 74 70 70 6f 73 74 20 72 65 73 70 6f     ) httppost respo
    1fc6:	6e 73 65 20 77 61 73 20 6e 6f 74 20 4f 4b 0d 0a     nse was not OK..
	...

00001fd7 <__c.7166>:
    1fd7:	41 54 2b 48 54 54 50 54 45 52 4d 0d 0a 00           AT+HTTPTERM...

00001fe5 <sz_ERROR>:
    1fe5:	45 52 52 4f 52 00                                   ERROR.

00001feb <szCPIN_SIM_READY>:
    1feb:	52 45 41 44 59 00                                   READY.

00001ff1 <szCPIN_PHSIM_PIN>:
    1ff1:	50 48 5f 53 49 4d 20 50 49 4e 00                    PH_SIM PIN.

00001ffc <szCPIN_PHSIM_PUK>:
    1ffc:	50 48 5f 53 49 4d 20 50 55 4b 00                    PH_SIM PUK.

00002007 <szCPIN_SIM_PIN2>:
    2007:	53 49 4d 20 50 49 4e 32 00                          SIM PIN2.

00002010 <szCPIN_SIM_PUK2>:
    2010:	53 49 4d 20 50 55 4b 32 00                          SIM PUK2.

00002019 <szCRLF>:
    2019:	0d 0a 00                                            ...

0000201c <__c.6577>:
    201c:	20 20 5b 4f 55 54 5d 09 2f 5c 20 00                   [OUT]./\ .

00002028 <__c.6579>:
    2028:	0d 0a 00                                            ...

0000202b <__c.6585>:
    202b:	20 20 5b 49 4e 5d 09 5c 2f 20 00                      [IN].\/ .

00002036 <__c.6587>:
    2036:	0d 0a 00                                            ...

00002039 <__c.6593>:
    2039:	20 20 5b 49 4e 5d 09 5c 2f 20 00                      [IN].\/ .

00002044 <__c.6595>:
    2044:	0d 0a 00                                            ...

00002047 <__c.6600>:
    2047:	20 20 5b 4f 55 54 5d 09 2f 5c 20 00                   [OUT]./\ .

00002053 <__c.6602>:
    2053:	0d 0a 00                                            ...

00002056 <__c.6609>:
    2056:	09 66 69 72 73 74 20 74 69 70 20 63 65 6e 74 73     .first tip cents
    2066:	3a 20 25 75 0d 0a 09 6c 61 73 74 20 74 69 70 20     : %u...last tip 
    2076:	63 65 6e 74 73 3a 25 75 0d 0a 09 6d 61 78 20 73     cents:%u...max s
    2086:	6c 6f 70 65 20 63 65 6e 74 73 3a 20 25 75 0d 0a     lope cents: %u..
    2096:	09 74 69 70 73 3a 20 25 75 0d 0a 09 6d 61 78 20     .tips: %u...max 
    20a6:	73 6c 6f 70 65 20 25 75 0d 0a 00 00                 slope %u....

000020b2 <__ctors_end>:
    20b2:	11 24       	eor	r1, r1
    20b4:	1f be       	out	0x3f, r1	; 63
    20b6:	cf ef       	ldi	r28, 0xFF	; 255
    20b8:	df e5       	ldi	r29, 0x5F	; 95
    20ba:	de bf       	out	0x3e, r29	; 62
    20bc:	cd bf       	out	0x3d, r28	; 61
    20be:	00 e0       	ldi	r16, 0x00	; 0
    20c0:	0c bf       	out	0x3c, r16	; 60

000020c2 <__do_copy_data>:
    20c2:	11 e2       	ldi	r17, 0x21	; 33
    20c4:	a0 e0       	ldi	r26, 0x00	; 0
    20c6:	b0 e2       	ldi	r27, 0x20	; 32
    20c8:	e0 e1       	ldi	r30, 0x10	; 16
    20ca:	ff ee       	ldi	r31, 0xEF	; 239
    20cc:	00 e0       	ldi	r16, 0x00	; 0
    20ce:	0b bf       	out	0x3b, r16	; 59
    20d0:	02 c0       	rjmp	.+4      	; 0x20d6 <__do_copy_data+0x14>
    20d2:	07 90       	elpm	r0, Z+
    20d4:	0d 92       	st	X+, r0
    20d6:	ae 37       	cpi	r26, 0x7E	; 126
    20d8:	b1 07       	cpc	r27, r17
    20da:	d9 f7       	brne	.-10     	; 0x20d2 <__do_copy_data+0x10>

000020dc <__do_clear_bss>:
    20dc:	27 e2       	ldi	r18, 0x27	; 39
    20de:	a0 e8       	ldi	r26, 0x80	; 128
    20e0:	b1 e2       	ldi	r27, 0x21	; 33
    20e2:	01 c0       	rjmp	.+2      	; 0x20e6 <.do_clear_bss_start>

000020e4 <.do_clear_bss_loop>:
    20e4:	1d 92       	st	X+, r1

000020e6 <.do_clear_bss_start>:
    20e6:	ac 37       	cpi	r26, 0x7C	; 124
    20e8:	b2 07       	cpc	r27, r18
    20ea:	e1 f7       	brne	.-8      	; 0x20e4 <.do_clear_bss_loop>
    20ec:	0e 94 49 19 	call	0x3292	; 0x3292 <main>
    20f0:	0c 94 86 77 	jmp	0xef0c	; 0xef0c <_exit>

000020f4 <__bad_interrupt>:
    20f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000020f8 <__fixunssfsi>:
    20f8:	cf 92       	push	r12
    20fa:	df 92       	push	r13
    20fc:	ef 92       	push	r14
    20fe:	ff 92       	push	r15
    2100:	0f 93       	push	r16
    2102:	1f 93       	push	r17
    2104:	6b 01       	movw	r12, r22
    2106:	7c 01       	movw	r14, r24
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	40 e0       	ldi	r20, 0x00	; 0
    210e:	5f e4       	ldi	r21, 0x4F	; 79
    2110:	98 d4       	rcall	.+2352   	; 0x2a42 <__gesf2>
    2112:	87 fd       	sbrc	r24, 7
    2114:	0c c0       	rjmp	.+24     	; 0x212e <__fixunssfsi+0x36>
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	40 e0       	ldi	r20, 0x00	; 0
    211c:	5f e4       	ldi	r21, 0x4F	; 79
    211e:	c7 01       	movw	r24, r14
    2120:	b6 01       	movw	r22, r12
    2122:	e1 d2       	rcall	.+1474   	; 0x26e6 <__subsf3>
    2124:	41 d5       	rcall	.+2690   	; 0x2ba8 <__fixsfsi>
    2126:	8b 01       	movw	r16, r22
    2128:	9c 01       	movw	r18, r24
    212a:	30 58       	subi	r19, 0x80	; 128
    212c:	05 c0       	rjmp	.+10     	; 0x2138 <__fixunssfsi+0x40>
    212e:	c7 01       	movw	r24, r14
    2130:	b6 01       	movw	r22, r12
    2132:	3a d5       	rcall	.+2676   	; 0x2ba8 <__fixsfsi>
    2134:	8b 01       	movw	r16, r22
    2136:	9c 01       	movw	r18, r24
    2138:	b8 01       	movw	r22, r16
    213a:	c9 01       	movw	r24, r18
    213c:	1f 91       	pop	r17
    213e:	0f 91       	pop	r16
    2140:	ff 90       	pop	r15
    2142:	ef 90       	pop	r14
    2144:	df 90       	pop	r13
    2146:	cf 90       	pop	r12
    2148:	08 95       	ret

0000214a <__fixunssfdi>:
    214a:	a0 e0       	ldi	r26, 0x00	; 0
    214c:	b0 e0       	ldi	r27, 0x00	; 0
    214e:	eb ea       	ldi	r30, 0xAB	; 171
    2150:	f0 e1       	ldi	r31, 0x10	; 16
    2152:	0c 94 dc 72 	jmp	0xe5b8	; 0xe5b8 <__prologue_saves__>
    2156:	6b 01       	movw	r12, r22
    2158:	7c 01       	movw	r14, r24
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	40 e8       	ldi	r20, 0x80	; 128
    2160:	5f e3       	ldi	r21, 0x3F	; 63
    2162:	9b d4       	rcall	.+2358   	; 0x2a9a <__ltsf2>
    2164:	87 fd       	sbrc	r24, 7
    2166:	80 c0       	rjmp	.+256    	; 0x2268 <__fixunssfdi+0x11e>
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	40 e8       	ldi	r20, 0x80	; 128
    216e:	5f e4       	ldi	r21, 0x4F	; 79
    2170:	c7 01       	movw	r24, r14
    2172:	b6 01       	movw	r22, r12
    2174:	92 d4       	rcall	.+2340   	; 0x2a9a <__ltsf2>
    2176:	87 ff       	sbrs	r24, 7
    2178:	09 c0       	rjmp	.+18     	; 0x218c <__fixunssfdi+0x42>
    217a:	c7 01       	movw	r24, r14
    217c:	b6 01       	movw	r22, r12
    217e:	bc df       	rcall	.-136    	; 0x20f8 <__fixunssfsi>
    2180:	4b 01       	movw	r8, r22
    2182:	5c 01       	movw	r10, r24
    2184:	c1 2c       	mov	r12, r1
    2186:	d1 2c       	mov	r13, r1
    2188:	76 01       	movw	r14, r12
    218a:	87 c0       	rjmp	.+270    	; 0x229a <__fixunssfdi+0x150>
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	40 e8       	ldi	r20, 0x80	; 128
    2192:	5f e5       	ldi	r21, 0x5F	; 95
    2194:	c7 01       	movw	r24, r14
    2196:	b6 01       	movw	r22, r12
    2198:	80 d4       	rcall	.+2304   	; 0x2a9a <__ltsf2>
    219a:	87 ff       	sbrs	r24, 7
    219c:	6e c0       	rjmp	.+220    	; 0x227a <__fixunssfdi+0x130>
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	40 e8       	ldi	r20, 0x80	; 128
    21a4:	5f e2       	ldi	r21, 0x2F	; 47
    21a6:	c7 01       	movw	r24, r14
    21a8:	b6 01       	movw	r22, r12
    21aa:	c9 d2       	rcall	.+1426   	; 0x273e <__mulsf3>
    21ac:	8b 01       	movw	r16, r22
    21ae:	d8 2f       	mov	r29, r24
    21b0:	c9 2f       	mov	r28, r25
    21b2:	95 e0       	ldi	r25, 0x05	; 5
    21b4:	29 2e       	mov	r2, r25
    21b6:	31 2c       	mov	r3, r1
    21b8:	20 e1       	ldi	r18, 0x10	; 16
    21ba:	c2 2e       	mov	r12, r18
    21bc:	d1 2c       	mov	r13, r1
    21be:	e1 2c       	mov	r14, r1
    21c0:	f1 2c       	mov	r15, r1
    21c2:	81 2c       	mov	r8, r1
    21c4:	91 2c       	mov	r9, r1
    21c6:	54 01       	movw	r10, r8
    21c8:	61 e0       	ldi	r22, 0x01	; 1
    21ca:	70 e0       	ldi	r23, 0x00	; 0
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	0c 2c       	mov	r0, r12
    21d2:	04 c0       	rjmp	.+8      	; 0x21dc <__fixunssfdi+0x92>
    21d4:	66 0f       	add	r22, r22
    21d6:	77 1f       	adc	r23, r23
    21d8:	88 1f       	adc	r24, r24
    21da:	99 1f       	adc	r25, r25
    21dc:	0a 94       	dec	r0
    21de:	d2 f7       	brpl	.-12     	; 0x21d4 <__fixunssfdi+0x8a>
    21e0:	31 d5       	rcall	.+2658   	; 0x2c44 <__floatunsisf>
    21e2:	2b 01       	movw	r4, r22
    21e4:	3c 01       	movw	r6, r24
    21e6:	76 2f       	mov	r23, r22
    21e8:	27 2f       	mov	r18, r23
    21ea:	35 2d       	mov	r19, r5
    21ec:	46 2d       	mov	r20, r6
    21ee:	57 2d       	mov	r21, r7
    21f0:	fe 01       	movw	r30, r28
    21f2:	60 2f       	mov	r22, r16
    21f4:	71 2f       	mov	r23, r17
    21f6:	8f 2f       	mov	r24, r31
    21f8:	9c 2f       	mov	r25, r28
    21fa:	23 d4       	rcall	.+2118   	; 0x2a42 <__gesf2>
    21fc:	87 fd       	sbrc	r24, 7
    21fe:	11 c0       	rjmp	.+34     	; 0x2222 <__fixunssfdi+0xd8>
    2200:	8c 28       	or	r8, r12
    2202:	9d 28       	or	r9, r13
    2204:	ae 28       	or	r10, r14
    2206:	bf 28       	or	r11, r15
    2208:	24 2d       	mov	r18, r4
    220a:	35 2d       	mov	r19, r5
    220c:	46 2d       	mov	r20, r6
    220e:	57 2d       	mov	r21, r7
    2210:	fe 01       	movw	r30, r28
    2212:	60 2f       	mov	r22, r16
    2214:	71 2f       	mov	r23, r17
    2216:	8f 2f       	mov	r24, r31
    2218:	9c 2f       	mov	r25, r28
    221a:	73 d3       	rcall	.+1766   	; 0x2902 <__divsf3>
    221c:	8b 01       	movw	r16, r22
    221e:	d8 2f       	mov	r29, r24
    2220:	c9 2f       	mov	r28, r25
    2222:	f6 94       	lsr	r15
    2224:	e7 94       	ror	r14
    2226:	d7 94       	ror	r13
    2228:	c7 94       	ror	r12
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	28 1a       	sub	r2, r24
    222e:	31 08       	sbc	r3, r1
    2230:	59 f6       	brne	.-106    	; 0x21c8 <__fixunssfdi+0x7e>
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	40 e8       	ldi	r20, 0x80	; 128
    2238:	5f e4       	ldi	r21, 0x4F	; 79
    223a:	fe 01       	movw	r30, r28
    223c:	60 2f       	mov	r22, r16
    223e:	71 2f       	mov	r23, r17
    2240:	8f 2f       	mov	r24, r31
    2242:	9c 2f       	mov	r25, r28
    2244:	7c d2       	rcall	.+1272   	; 0x273e <__mulsf3>
    2246:	58 df       	rcall	.-336    	; 0x20f8 <__fixunssfsi>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	9c 01       	movw	r18, r24
    224e:	ad 01       	movw	r20, r26
    2250:	60 e0       	ldi	r22, 0x00	; 0
    2252:	70 e0       	ldi	r23, 0x00	; 0
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	08 2d       	mov	r16, r8
    225a:	0e 94 a2 72 	call	0xe544	; 0xe544 <__ashldi3>
    225e:	49 01       	movw	r8, r18
    2260:	5a 01       	movw	r10, r20
    2262:	6b 01       	movw	r12, r22
    2264:	7c 01       	movw	r14, r24
    2266:	19 c0       	rjmp	.+50     	; 0x229a <__fixunssfdi+0x150>
    2268:	81 2c       	mov	r8, r1
    226a:	91 2c       	mov	r9, r1
    226c:	a1 2c       	mov	r10, r1
    226e:	b1 2c       	mov	r11, r1
    2270:	c1 2c       	mov	r12, r1
    2272:	d1 2c       	mov	r13, r1
    2274:	e1 2c       	mov	r14, r1
    2276:	f1 2c       	mov	r15, r1
    2278:	10 c0       	rjmp	.+32     	; 0x229a <__fixunssfdi+0x150>
    227a:	88 24       	eor	r8, r8
    227c:	8a 94       	dec	r8
    227e:	99 24       	eor	r9, r9
    2280:	9a 94       	dec	r9
    2282:	aa 24       	eor	r10, r10
    2284:	aa 94       	dec	r10
    2286:	bb 24       	eor	r11, r11
    2288:	ba 94       	dec	r11
    228a:	cc 24       	eor	r12, r12
    228c:	ca 94       	dec	r12
    228e:	dd 24       	eor	r13, r13
    2290:	da 94       	dec	r13
    2292:	ee 24       	eor	r14, r14
    2294:	ea 94       	dec	r14
    2296:	ff 24       	eor	r15, r15
    2298:	fa 94       	dec	r15
    229a:	94 01       	movw	r18, r8
    229c:	a5 01       	movw	r20, r10
    229e:	b6 01       	movw	r22, r12
    22a0:	c7 01       	movw	r24, r14
    22a2:	cd b7       	in	r28, 0x3d	; 61
    22a4:	de b7       	in	r29, 0x3e	; 62
    22a6:	e2 e1       	ldi	r30, 0x12	; 18
    22a8:	0c 94 f5 72 	jmp	0xe5ea	; 0xe5ea <__epilogue_restores__>

000022ac <__floatundisf>:
    22ac:	2f 92       	push	r2
    22ae:	3f 92       	push	r3
    22b0:	4f 92       	push	r4
    22b2:	5f 92       	push	r5
    22b4:	6f 92       	push	r6
    22b6:	7f 92       	push	r7
    22b8:	8f 92       	push	r8
    22ba:	9f 92       	push	r9
    22bc:	af 92       	push	r10
    22be:	bf 92       	push	r11
    22c0:	cf 92       	push	r12
    22c2:	df 92       	push	r13
    22c4:	ef 92       	push	r14
    22c6:	ff 92       	push	r15
    22c8:	0f 93       	push	r16
    22ca:	1f 93       	push	r17
    22cc:	cf 93       	push	r28
    22ce:	19 01       	movw	r2, r18
    22d0:	2a 01       	movw	r4, r20
    22d2:	3b 01       	movw	r6, r22
    22d4:	4c 01       	movw	r8, r24
    22d6:	60 e0       	ldi	r22, 0x00	; 0
    22d8:	70 e0       	ldi	r23, 0x00	; 0
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	51 01       	movw	r10, r2
    22e0:	62 01       	movw	r12, r4
    22e2:	73 01       	movw	r14, r6
    22e4:	84 01       	movw	r16, r8
    22e6:	0e 94 1c 73 	call	0xe638	; 0xe638 <__cmpdi2>
    22ea:	21 f4       	brne	.+8      	; 0x22f4 <__floatundisf+0x48>
    22ec:	b1 01       	movw	r22, r2
    22ee:	c2 01       	movw	r24, r4
    22f0:	a9 d4       	rcall	.+2386   	; 0x2c44 <__floatunsisf>
    22f2:	63 c0       	rjmp	.+198    	; 0x23ba <__floatundisf+0x10e>
    22f4:	91 01       	movw	r18, r2
    22f6:	a2 01       	movw	r20, r4
    22f8:	b3 01       	movw	r22, r6
    22fa:	c4 01       	movw	r24, r8
    22fc:	00 e2       	ldi	r16, 0x20	; 32
    22fe:	0e 94 0d 73 	call	0xe61a	; 0xe61a <__lshrdi3>
    2302:	b9 01       	movw	r22, r18
    2304:	ca 01       	movw	r24, r20
    2306:	0e 94 c3 72 	call	0xe586	; 0xe586 <__clzsi2>
    230a:	aa 27       	eor	r26, r26
    230c:	97 fd       	sbrc	r25, 7
    230e:	a0 95       	com	r26
    2310:	ba 2f       	mov	r27, r26
    2312:	20 e2       	ldi	r18, 0x20	; 32
    2314:	c2 2e       	mov	r12, r18
    2316:	d1 2c       	mov	r13, r1
    2318:	e1 2c       	mov	r14, r1
    231a:	f1 2c       	mov	r15, r1
    231c:	c8 1a       	sub	r12, r24
    231e:	d9 0a       	sbc	r13, r25
    2320:	ea 0a       	sbc	r14, r26
    2322:	fb 0a       	sbc	r15, r27
    2324:	cc 2d       	mov	r28, r12
    2326:	91 01       	movw	r18, r2
    2328:	a2 01       	movw	r20, r4
    232a:	b3 01       	movw	r22, r6
    232c:	c4 01       	movw	r24, r8
    232e:	0c 2d       	mov	r16, r12
    2330:	0e 94 0d 73 	call	0xe61a	; 0xe61a <__lshrdi3>
    2334:	60 e2       	ldi	r22, 0x20	; 32
    2336:	70 e0       	ldi	r23, 0x00	; 0
    2338:	6c 19       	sub	r22, r12
    233a:	7d 09       	sbc	r23, r13
    233c:	04 c0       	rjmp	.+8      	; 0x2346 <__floatundisf+0x9a>
    233e:	22 0c       	add	r2, r2
    2340:	33 1c       	adc	r3, r3
    2342:	44 1c       	adc	r4, r4
    2344:	55 1c       	adc	r5, r5
    2346:	6a 95       	dec	r22
    2348:	d2 f7       	brpl	.-12     	; 0x233e <__floatundisf+0x92>
    234a:	62 2f       	mov	r22, r18
    234c:	23 28       	or	r2, r3
    234e:	24 28       	or	r2, r4
    2350:	25 28       	or	r2, r5
    2352:	09 f4       	brne	.+2      	; 0x2356 <__floatundisf+0xaa>
    2354:	01 c0       	rjmp	.+2      	; 0x2358 <__floatundisf+0xac>
    2356:	61 60       	ori	r22, 0x01	; 1
    2358:	73 2f       	mov	r23, r19
    235a:	ca 01       	movw	r24, r20
    235c:	73 d4       	rcall	.+2278   	; 0x2c44 <__floatunsisf>
    235e:	3b 01       	movw	r6, r22
    2360:	4c 01       	movw	r8, r24
    2362:	80 e2       	ldi	r24, 0x20	; 32
    2364:	c8 16       	cp	r12, r24
    2366:	d1 04       	cpc	r13, r1
    2368:	e1 04       	cpc	r14, r1
    236a:	f1 04       	cpc	r15, r1
    236c:	a1 f0       	breq	.+40     	; 0x2396 <__floatundisf+0xea>
    236e:	9f e1       	ldi	r25, 0x1F	; 31
    2370:	c9 16       	cp	r12, r25
    2372:	d1 04       	cpc	r13, r1
    2374:	e1 04       	cpc	r14, r1
    2376:	f1 04       	cpc	r15, r1
    2378:	91 f0       	breq	.+36     	; 0x239e <__floatundisf+0xf2>
    237a:	61 e0       	ldi	r22, 0x01	; 1
    237c:	70 e0       	ldi	r23, 0x00	; 0
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	04 c0       	rjmp	.+8      	; 0x238c <__floatundisf+0xe0>
    2384:	66 0f       	add	r22, r22
    2386:	77 1f       	adc	r23, r23
    2388:	88 1f       	adc	r24, r24
    238a:	99 1f       	adc	r25, r25
    238c:	ca 95       	dec	r28
    238e:	d2 f7       	brpl	.-12     	; 0x2384 <__floatundisf+0xd8>
    2390:	b0 d3       	rcall	.+1888   	; 0x2af2 <__floatsisf>
    2392:	27 2f       	mov	r18, r23
    2394:	08 c0       	rjmp	.+16     	; 0x23a6 <__floatundisf+0xfa>
    2396:	60 e0       	ldi	r22, 0x00	; 0
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	80 e8       	ldi	r24, 0x80	; 128
    239c:	03 c0       	rjmp	.+6      	; 0x23a4 <__floatundisf+0xf8>
    239e:	60 e0       	ldi	r22, 0x00	; 0
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	9f e4       	ldi	r25, 0x4F	; 79
    23a6:	f2 2f       	mov	r31, r18
    23a8:	26 2f       	mov	r18, r22
    23aa:	3f 2f       	mov	r19, r31
    23ac:	48 2f       	mov	r20, r24
    23ae:	59 2f       	mov	r21, r25
    23b0:	66 2d       	mov	r22, r6
    23b2:	77 2d       	mov	r23, r7
    23b4:	88 2d       	mov	r24, r8
    23b6:	99 2d       	mov	r25, r9
    23b8:	c2 d1       	rcall	.+900    	; 0x273e <__mulsf3>
    23ba:	cf 91       	pop	r28
    23bc:	1f 91       	pop	r17
    23be:	0f 91       	pop	r16
    23c0:	ff 90       	pop	r15
    23c2:	ef 90       	pop	r14
    23c4:	df 90       	pop	r13
    23c6:	cf 90       	pop	r12
    23c8:	bf 90       	pop	r11
    23ca:	af 90       	pop	r10
    23cc:	9f 90       	pop	r9
    23ce:	8f 90       	pop	r8
    23d0:	7f 90       	pop	r7
    23d2:	6f 90       	pop	r6
    23d4:	5f 90       	pop	r5
    23d6:	4f 90       	pop	r4
    23d8:	3f 90       	pop	r3
    23da:	2f 90       	pop	r2
    23dc:	08 95       	ret

000023de <_fpadd_parts>:
    23de:	a4 e0       	ldi	r26, 0x04	; 4
    23e0:	b0 e0       	ldi	r27, 0x00	; 0
    23e2:	e5 ef       	ldi	r30, 0xF5	; 245
    23e4:	f1 e1       	ldi	r31, 0x11	; 17
    23e6:	0c 94 de 72 	jmp	0xe5bc	; 0xe5bc <__prologue_saves__+0x4>
    23ea:	7c 01       	movw	r14, r24
    23ec:	6a 01       	movw	r12, r20
    23ee:	fc 01       	movw	r30, r24
    23f0:	80 81       	ld	r24, Z
    23f2:	82 30       	cpi	r24, 0x02	; 2
    23f4:	08 f4       	brcc	.+2      	; 0x23f8 <_fpadd_parts+0x1a>
    23f6:	4a c1       	rjmp	.+660    	; 0x268c <_fpadd_parts+0x2ae>
    23f8:	fb 01       	movw	r30, r22
    23fa:	90 81       	ld	r25, Z
    23fc:	92 30       	cpi	r25, 0x02	; 2
    23fe:	08 f4       	brcc	.+2      	; 0x2402 <_fpadd_parts+0x24>
    2400:	42 c1       	rjmp	.+644    	; 0x2686 <_fpadd_parts+0x2a8>
    2402:	84 30       	cpi	r24, 0x04	; 4
    2404:	79 f4       	brne	.+30     	; 0x2424 <_fpadd_parts+0x46>
    2406:	94 30       	cpi	r25, 0x04	; 4
    2408:	09 f0       	breq	.+2      	; 0x240c <_fpadd_parts+0x2e>
    240a:	40 c1       	rjmp	.+640    	; 0x268c <_fpadd_parts+0x2ae>
    240c:	f7 01       	movw	r30, r14
    240e:	91 81       	ldd	r25, Z+1	; 0x01
    2410:	fb 01       	movw	r30, r22
    2412:	81 81       	ldd	r24, Z+1	; 0x01
    2414:	98 17       	cp	r25, r24
    2416:	09 f4       	brne	.+2      	; 0x241a <_fpadd_parts+0x3c>
    2418:	39 c1       	rjmp	.+626    	; 0x268c <_fpadd_parts+0x2ae>
    241a:	a6 ec       	ldi	r26, 0xC6	; 198
    241c:	ea 2e       	mov	r14, r26
    241e:	a0 e2       	ldi	r26, 0x20	; 32
    2420:	fa 2e       	mov	r15, r26
    2422:	34 c1       	rjmp	.+616    	; 0x268c <_fpadd_parts+0x2ae>
    2424:	94 30       	cpi	r25, 0x04	; 4
    2426:	09 f4       	brne	.+2      	; 0x242a <_fpadd_parts+0x4c>
    2428:	2e c1       	rjmp	.+604    	; 0x2686 <_fpadd_parts+0x2a8>
    242a:	92 30       	cpi	r25, 0x02	; 2
    242c:	91 f4       	brne	.+36     	; 0x2452 <_fpadd_parts+0x74>
    242e:	82 30       	cpi	r24, 0x02	; 2
    2430:	09 f0       	breq	.+2      	; 0x2434 <_fpadd_parts+0x56>
    2432:	2c c1       	rjmp	.+600    	; 0x268c <_fpadd_parts+0x2ae>
    2434:	88 e0       	ldi	r24, 0x08	; 8
    2436:	f7 01       	movw	r30, r14
    2438:	da 01       	movw	r26, r20
    243a:	01 90       	ld	r0, Z+
    243c:	0d 92       	st	X+, r0
    243e:	8a 95       	dec	r24
    2440:	e1 f7       	brne	.-8      	; 0x243a <_fpadd_parts+0x5c>
    2442:	fb 01       	movw	r30, r22
    2444:	81 81       	ldd	r24, Z+1	; 0x01
    2446:	f7 01       	movw	r30, r14
    2448:	91 81       	ldd	r25, Z+1	; 0x01
    244a:	89 23       	and	r24, r25
    244c:	fa 01       	movw	r30, r20
    244e:	81 83       	std	Z+1, r24	; 0x01
    2450:	1c c1       	rjmp	.+568    	; 0x268a <_fpadd_parts+0x2ac>
    2452:	82 30       	cpi	r24, 0x02	; 2
    2454:	09 f4       	brne	.+2      	; 0x2458 <_fpadd_parts+0x7a>
    2456:	17 c1       	rjmp	.+558    	; 0x2686 <_fpadd_parts+0x2a8>
    2458:	f7 01       	movw	r30, r14
    245a:	82 81       	ldd	r24, Z+2	; 0x02
    245c:	93 81       	ldd	r25, Z+3	; 0x03
    245e:	fb 01       	movw	r30, r22
    2460:	a2 81       	ldd	r26, Z+2	; 0x02
    2462:	b3 81       	ldd	r27, Z+3	; 0x03
    2464:	f7 01       	movw	r30, r14
    2466:	04 81       	ldd	r16, Z+4	; 0x04
    2468:	15 81       	ldd	r17, Z+5	; 0x05
    246a:	26 81       	ldd	r18, Z+6	; 0x06
    246c:	37 81       	ldd	r19, Z+7	; 0x07
    246e:	fb 01       	movw	r30, r22
    2470:	84 80       	ldd	r8, Z+4	; 0x04
    2472:	95 80       	ldd	r9, Z+5	; 0x05
    2474:	a6 80       	ldd	r10, Z+6	; 0x06
    2476:	b7 80       	ldd	r11, Z+7	; 0x07
    2478:	fc 01       	movw	r30, r24
    247a:	ea 1b       	sub	r30, r26
    247c:	fb 0b       	sbc	r31, r27
    247e:	af 01       	movw	r20, r30
    2480:	f7 ff       	sbrs	r31, 7
    2482:	04 c0       	rjmp	.+8      	; 0x248c <_fpadd_parts+0xae>
    2484:	44 27       	eor	r20, r20
    2486:	55 27       	eor	r21, r21
    2488:	4e 1b       	sub	r20, r30
    248a:	5f 0b       	sbc	r21, r31
    248c:	40 32       	cpi	r20, 0x20	; 32
    248e:	51 05       	cpc	r21, r1
    2490:	0c f0       	brlt	.+2      	; 0x2494 <_fpadd_parts+0xb6>
    2492:	74 c0       	rjmp	.+232    	; 0x257c <_fpadd_parts+0x19e>
    2494:	1e 16       	cp	r1, r30
    2496:	1f 06       	cpc	r1, r31
    2498:	b4 f5       	brge	.+108    	; 0x2506 <_fpadd_parts+0x128>
    249a:	24 01       	movw	r4, r8
    249c:	35 01       	movw	r6, r10
    249e:	04 2e       	mov	r0, r20
    24a0:	04 c0       	rjmp	.+8      	; 0x24aa <_fpadd_parts+0xcc>
    24a2:	76 94       	lsr	r7
    24a4:	67 94       	ror	r6
    24a6:	57 94       	ror	r5
    24a8:	47 94       	ror	r4
    24aa:	0a 94       	dec	r0
    24ac:	d2 f7       	brpl	.-12     	; 0x24a2 <_fpadd_parts+0xc4>
    24ae:	49 82       	std	Y+1, r4	; 0x01
    24b0:	5a 82       	std	Y+2, r5	; 0x02
    24b2:	6b 82       	std	Y+3, r6	; 0x03
    24b4:	7c 82       	std	Y+4, r7	; 0x04
    24b6:	41 2c       	mov	r4, r1
    24b8:	51 2c       	mov	r5, r1
    24ba:	32 01       	movw	r6, r4
    24bc:	43 94       	inc	r4
    24be:	04 c0       	rjmp	.+8      	; 0x24c8 <_fpadd_parts+0xea>
    24c0:	44 0c       	add	r4, r4
    24c2:	55 1c       	adc	r5, r5
    24c4:	66 1c       	adc	r6, r6
    24c6:	77 1c       	adc	r7, r7
    24c8:	4a 95       	dec	r20
    24ca:	d2 f7       	brpl	.-12     	; 0x24c0 <_fpadd_parts+0xe2>
    24cc:	41 e0       	ldi	r20, 0x01	; 1
    24ce:	44 1a       	sub	r4, r20
    24d0:	51 08       	sbc	r5, r1
    24d2:	61 08       	sbc	r6, r1
    24d4:	71 08       	sbc	r7, r1
    24d6:	48 20       	and	r4, r8
    24d8:	59 20       	and	r5, r9
    24da:	6a 20       	and	r6, r10
    24dc:	7b 20       	and	r7, r11
    24de:	81 2c       	mov	r8, r1
    24e0:	91 2c       	mov	r9, r1
    24e2:	54 01       	movw	r10, r8
    24e4:	83 94       	inc	r8
    24e6:	45 28       	or	r4, r5
    24e8:	46 28       	or	r4, r6
    24ea:	47 28       	or	r4, r7
    24ec:	19 f4       	brne	.+6      	; 0x24f4 <_fpadd_parts+0x116>
    24ee:	81 2c       	mov	r8, r1
    24f0:	91 2c       	mov	r9, r1
    24f2:	54 01       	movw	r10, r8
    24f4:	49 80       	ldd	r4, Y+1	; 0x01
    24f6:	5a 80       	ldd	r5, Y+2	; 0x02
    24f8:	6b 80       	ldd	r6, Y+3	; 0x03
    24fa:	7c 80       	ldd	r7, Y+4	; 0x04
    24fc:	84 28       	or	r8, r4
    24fe:	95 28       	or	r9, r5
    2500:	a6 28       	or	r10, r6
    2502:	b7 28       	or	r11, r7
    2504:	46 c0       	rjmp	.+140    	; 0x2592 <_fpadd_parts+0x1b4>
    2506:	ef 2b       	or	r30, r31
    2508:	09 f4       	brne	.+2      	; 0x250c <_fpadd_parts+0x12e>
    250a:	43 c0       	rjmp	.+134    	; 0x2592 <_fpadd_parts+0x1b4>
    250c:	84 0f       	add	r24, r20
    250e:	95 1f       	adc	r25, r21
    2510:	28 01       	movw	r4, r16
    2512:	39 01       	movw	r6, r18
    2514:	04 2e       	mov	r0, r20
    2516:	04 c0       	rjmp	.+8      	; 0x2520 <_fpadd_parts+0x142>
    2518:	76 94       	lsr	r7
    251a:	67 94       	ror	r6
    251c:	57 94       	ror	r5
    251e:	47 94       	ror	r4
    2520:	0a 94       	dec	r0
    2522:	d2 f7       	brpl	.-12     	; 0x2518 <_fpadd_parts+0x13a>
    2524:	49 82       	std	Y+1, r4	; 0x01
    2526:	5a 82       	std	Y+2, r5	; 0x02
    2528:	6b 82       	std	Y+3, r6	; 0x03
    252a:	7c 82       	std	Y+4, r7	; 0x04
    252c:	41 2c       	mov	r4, r1
    252e:	51 2c       	mov	r5, r1
    2530:	32 01       	movw	r6, r4
    2532:	43 94       	inc	r4
    2534:	04 c0       	rjmp	.+8      	; 0x253e <_fpadd_parts+0x160>
    2536:	44 0c       	add	r4, r4
    2538:	55 1c       	adc	r5, r5
    253a:	66 1c       	adc	r6, r6
    253c:	77 1c       	adc	r7, r7
    253e:	4a 95       	dec	r20
    2540:	d2 f7       	brpl	.-12     	; 0x2536 <_fpadd_parts+0x158>
    2542:	41 e0       	ldi	r20, 0x01	; 1
    2544:	44 1a       	sub	r4, r20
    2546:	51 08       	sbc	r5, r1
    2548:	61 08       	sbc	r6, r1
    254a:	71 08       	sbc	r7, r1
    254c:	40 22       	and	r4, r16
    254e:	51 22       	and	r5, r17
    2550:	62 22       	and	r6, r18
    2552:	73 22       	and	r7, r19
    2554:	01 e0       	ldi	r16, 0x01	; 1
    2556:	10 e0       	ldi	r17, 0x00	; 0
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	45 28       	or	r4, r5
    255e:	46 28       	or	r4, r6
    2560:	47 28       	or	r4, r7
    2562:	19 f4       	brne	.+6      	; 0x256a <_fpadd_parts+0x18c>
    2564:	00 e0       	ldi	r16, 0x00	; 0
    2566:	10 e0       	ldi	r17, 0x00	; 0
    2568:	98 01       	movw	r18, r16
    256a:	49 80       	ldd	r4, Y+1	; 0x01
    256c:	5a 80       	ldd	r5, Y+2	; 0x02
    256e:	6b 80       	ldd	r6, Y+3	; 0x03
    2570:	7c 80       	ldd	r7, Y+4	; 0x04
    2572:	04 29       	or	r16, r4
    2574:	15 29       	or	r17, r5
    2576:	26 29       	or	r18, r6
    2578:	37 29       	or	r19, r7
    257a:	0b c0       	rjmp	.+22     	; 0x2592 <_fpadd_parts+0x1b4>
    257c:	a8 17       	cp	r26, r24
    257e:	b9 07       	cpc	r27, r25
    2580:	24 f4       	brge	.+8      	; 0x258a <_fpadd_parts+0x1ac>
    2582:	81 2c       	mov	r8, r1
    2584:	91 2c       	mov	r9, r1
    2586:	54 01       	movw	r10, r8
    2588:	04 c0       	rjmp	.+8      	; 0x2592 <_fpadd_parts+0x1b4>
    258a:	cd 01       	movw	r24, r26
    258c:	00 e0       	ldi	r16, 0x00	; 0
    258e:	10 e0       	ldi	r17, 0x00	; 0
    2590:	98 01       	movw	r18, r16
    2592:	f7 01       	movw	r30, r14
    2594:	41 81       	ldd	r20, Z+1	; 0x01
    2596:	fb 01       	movw	r30, r22
    2598:	51 81       	ldd	r21, Z+1	; 0x01
    259a:	45 17       	cp	r20, r21
    259c:	09 f4       	brne	.+2      	; 0x25a0 <_fpadd_parts+0x1c2>
    259e:	46 c0       	rjmp	.+140    	; 0x262c <_fpadd_parts+0x24e>
    25a0:	44 23       	and	r20, r20
    25a2:	49 f0       	breq	.+18     	; 0x25b6 <_fpadd_parts+0x1d8>
    25a4:	24 01       	movw	r4, r8
    25a6:	35 01       	movw	r6, r10
    25a8:	40 1a       	sub	r4, r16
    25aa:	51 0a       	sbc	r5, r17
    25ac:	62 0a       	sbc	r6, r18
    25ae:	73 0a       	sbc	r7, r19
    25b0:	93 01       	movw	r18, r6
    25b2:	82 01       	movw	r16, r4
    25b4:	04 c0       	rjmp	.+8      	; 0x25be <_fpadd_parts+0x1e0>
    25b6:	08 19       	sub	r16, r8
    25b8:	19 09       	sbc	r17, r9
    25ba:	2a 09       	sbc	r18, r10
    25bc:	3b 09       	sbc	r19, r11
    25be:	37 fd       	sbrc	r19, 7
    25c0:	05 c0       	rjmp	.+10     	; 0x25cc <_fpadd_parts+0x1ee>
    25c2:	f6 01       	movw	r30, r12
    25c4:	11 82       	std	Z+1, r1	; 0x01
    25c6:	82 83       	std	Z+2, r24	; 0x02
    25c8:	93 83       	std	Z+3, r25	; 0x03
    25ca:	0c c0       	rjmp	.+24     	; 0x25e4 <_fpadd_parts+0x206>
    25cc:	41 e0       	ldi	r20, 0x01	; 1
    25ce:	f6 01       	movw	r30, r12
    25d0:	41 83       	std	Z+1, r20	; 0x01
    25d2:	82 83       	std	Z+2, r24	; 0x02
    25d4:	93 83       	std	Z+3, r25	; 0x03
    25d6:	30 95       	com	r19
    25d8:	20 95       	com	r18
    25da:	10 95       	com	r17
    25dc:	01 95       	neg	r16
    25de:	1f 4f       	sbci	r17, 0xFF	; 255
    25e0:	2f 4f       	sbci	r18, 0xFF	; 255
    25e2:	3f 4f       	sbci	r19, 0xFF	; 255
    25e4:	04 83       	std	Z+4, r16	; 0x04
    25e6:	15 83       	std	Z+5, r17	; 0x05
    25e8:	26 83       	std	Z+6, r18	; 0x06
    25ea:	37 83       	std	Z+7, r19	; 0x07
    25ec:	0e c0       	rjmp	.+28     	; 0x260a <_fpadd_parts+0x22c>
    25ee:	88 0f       	add	r24, r24
    25f0:	99 1f       	adc	r25, r25
    25f2:	aa 1f       	adc	r26, r26
    25f4:	bb 1f       	adc	r27, r27
    25f6:	f6 01       	movw	r30, r12
    25f8:	84 83       	std	Z+4, r24	; 0x04
    25fa:	95 83       	std	Z+5, r25	; 0x05
    25fc:	a6 83       	std	Z+6, r26	; 0x06
    25fe:	b7 83       	std	Z+7, r27	; 0x07
    2600:	82 81       	ldd	r24, Z+2	; 0x02
    2602:	93 81       	ldd	r25, Z+3	; 0x03
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	82 83       	std	Z+2, r24	; 0x02
    2608:	93 83       	std	Z+3, r25	; 0x03
    260a:	f6 01       	movw	r30, r12
    260c:	84 81       	ldd	r24, Z+4	; 0x04
    260e:	95 81       	ldd	r25, Z+5	; 0x05
    2610:	a6 81       	ldd	r26, Z+6	; 0x06
    2612:	b7 81       	ldd	r27, Z+7	; 0x07
    2614:	ac 01       	movw	r20, r24
    2616:	bd 01       	movw	r22, r26
    2618:	41 50       	subi	r20, 0x01	; 1
    261a:	51 09       	sbc	r21, r1
    261c:	61 09       	sbc	r22, r1
    261e:	71 09       	sbc	r23, r1
    2620:	4f 3f       	cpi	r20, 0xFF	; 255
    2622:	5f 4f       	sbci	r21, 0xFF	; 255
    2624:	6f 4f       	sbci	r22, 0xFF	; 255
    2626:	7f 43       	sbci	r23, 0x3F	; 63
    2628:	10 f3       	brcs	.-60     	; 0x25ee <_fpadd_parts+0x210>
    262a:	0c c0       	rjmp	.+24     	; 0x2644 <_fpadd_parts+0x266>
    262c:	f6 01       	movw	r30, r12
    262e:	41 83       	std	Z+1, r20	; 0x01
    2630:	82 83       	std	Z+2, r24	; 0x02
    2632:	93 83       	std	Z+3, r25	; 0x03
    2634:	08 0d       	add	r16, r8
    2636:	19 1d       	adc	r17, r9
    2638:	2a 1d       	adc	r18, r10
    263a:	3b 1d       	adc	r19, r11
    263c:	04 83       	std	Z+4, r16	; 0x04
    263e:	15 83       	std	Z+5, r17	; 0x05
    2640:	26 83       	std	Z+6, r18	; 0x06
    2642:	37 83       	std	Z+7, r19	; 0x07
    2644:	83 e0       	ldi	r24, 0x03	; 3
    2646:	f6 01       	movw	r30, r12
    2648:	80 83       	st	Z, r24
    264a:	44 81       	ldd	r20, Z+4	; 0x04
    264c:	55 81       	ldd	r21, Z+5	; 0x05
    264e:	66 81       	ldd	r22, Z+6	; 0x06
    2650:	77 81       	ldd	r23, Z+7	; 0x07
    2652:	77 ff       	sbrs	r23, 7
    2654:	1a c0       	rjmp	.+52     	; 0x268a <_fpadd_parts+0x2ac>
    2656:	db 01       	movw	r26, r22
    2658:	ca 01       	movw	r24, r20
    265a:	81 70       	andi	r24, 0x01	; 1
    265c:	99 27       	eor	r25, r25
    265e:	aa 27       	eor	r26, r26
    2660:	bb 27       	eor	r27, r27
    2662:	76 95       	lsr	r23
    2664:	67 95       	ror	r22
    2666:	57 95       	ror	r21
    2668:	47 95       	ror	r20
    266a:	84 2b       	or	r24, r20
    266c:	95 2b       	or	r25, r21
    266e:	a6 2b       	or	r26, r22
    2670:	b7 2b       	or	r27, r23
    2672:	84 83       	std	Z+4, r24	; 0x04
    2674:	95 83       	std	Z+5, r25	; 0x05
    2676:	a6 83       	std	Z+6, r26	; 0x06
    2678:	b7 83       	std	Z+7, r27	; 0x07
    267a:	82 81       	ldd	r24, Z+2	; 0x02
    267c:	93 81       	ldd	r25, Z+3	; 0x03
    267e:	01 96       	adiw	r24, 0x01	; 1
    2680:	82 83       	std	Z+2, r24	; 0x02
    2682:	93 83       	std	Z+3, r25	; 0x03
    2684:	02 c0       	rjmp	.+4      	; 0x268a <_fpadd_parts+0x2ac>
    2686:	7b 01       	movw	r14, r22
    2688:	01 c0       	rjmp	.+2      	; 0x268c <_fpadd_parts+0x2ae>
    268a:	76 01       	movw	r14, r12
    268c:	c7 01       	movw	r24, r14
    268e:	24 96       	adiw	r28, 0x04	; 4
    2690:	e0 e1       	ldi	r30, 0x10	; 16
    2692:	0c 94 f7 72 	jmp	0xe5ee	; 0xe5ee <__epilogue_restores__+0x4>

00002696 <__addsf3>:
    2696:	a0 e2       	ldi	r26, 0x20	; 32
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	e1 e5       	ldi	r30, 0x51	; 81
    269c:	f3 e1       	ldi	r31, 0x13	; 19
    269e:	0c 94 ec 72 	jmp	0xe5d8	; 0xe5d8 <__prologue_saves__+0x20>
    26a2:	6d 8f       	std	Y+29, r22	; 0x1d
    26a4:	7e 8f       	std	Y+30, r23	; 0x1e
    26a6:	8f 8f       	std	Y+31, r24	; 0x1f
    26a8:	98 a3       	std	Y+32, r25	; 0x20
    26aa:	29 8f       	std	Y+25, r18	; 0x19
    26ac:	3a 8f       	std	Y+26, r19	; 0x1a
    26ae:	4b 8f       	std	Y+27, r20	; 0x1b
    26b0:	5c 8f       	std	Y+28, r21	; 0x1c
    26b2:	be 01       	movw	r22, r28
    26b4:	6f 5e       	subi	r22, 0xEF	; 239
    26b6:	7f 4f       	sbci	r23, 0xFF	; 255
    26b8:	ce 01       	movw	r24, r28
    26ba:	4d 96       	adiw	r24, 0x1d	; 29
    26bc:	02 d4       	rcall	.+2052   	; 0x2ec2 <__unpack_f>
    26be:	be 01       	movw	r22, r28
    26c0:	67 5f       	subi	r22, 0xF7	; 247
    26c2:	7f 4f       	sbci	r23, 0xFF	; 255
    26c4:	ce 01       	movw	r24, r28
    26c6:	49 96       	adiw	r24, 0x19	; 25
    26c8:	fc d3       	rcall	.+2040   	; 0x2ec2 <__unpack_f>
    26ca:	ae 01       	movw	r20, r28
    26cc:	4f 5f       	subi	r20, 0xFF	; 255
    26ce:	5f 4f       	sbci	r21, 0xFF	; 255
    26d0:	be 01       	movw	r22, r28
    26d2:	67 5f       	subi	r22, 0xF7	; 247
    26d4:	7f 4f       	sbci	r23, 0xFF	; 255
    26d6:	ce 01       	movw	r24, r28
    26d8:	41 96       	adiw	r24, 0x11	; 17
    26da:	81 de       	rcall	.-766    	; 0x23de <_fpadd_parts>
    26dc:	28 d3       	rcall	.+1616   	; 0x2d2e <__pack_f>
    26de:	a0 96       	adiw	r28, 0x20	; 32
    26e0:	e2 e0       	ldi	r30, 0x02	; 2
    26e2:	0c 94 05 73 	jmp	0xe60a	; 0xe60a <__epilogue_restores__+0x20>

000026e6 <__subsf3>:
    26e6:	a0 e2       	ldi	r26, 0x20	; 32
    26e8:	b0 e0       	ldi	r27, 0x00	; 0
    26ea:	e9 e7       	ldi	r30, 0x79	; 121
    26ec:	f3 e1       	ldi	r31, 0x13	; 19
    26ee:	0c 94 ec 72 	jmp	0xe5d8	; 0xe5d8 <__prologue_saves__+0x20>
    26f2:	6d 8f       	std	Y+29, r22	; 0x1d
    26f4:	7e 8f       	std	Y+30, r23	; 0x1e
    26f6:	8f 8f       	std	Y+31, r24	; 0x1f
    26f8:	98 a3       	std	Y+32, r25	; 0x20
    26fa:	29 8f       	std	Y+25, r18	; 0x19
    26fc:	3a 8f       	std	Y+26, r19	; 0x1a
    26fe:	4b 8f       	std	Y+27, r20	; 0x1b
    2700:	5c 8f       	std	Y+28, r21	; 0x1c
    2702:	be 01       	movw	r22, r28
    2704:	6f 5e       	subi	r22, 0xEF	; 239
    2706:	7f 4f       	sbci	r23, 0xFF	; 255
    2708:	ce 01       	movw	r24, r28
    270a:	4d 96       	adiw	r24, 0x1d	; 29
    270c:	da d3       	rcall	.+1972   	; 0x2ec2 <__unpack_f>
    270e:	be 01       	movw	r22, r28
    2710:	67 5f       	subi	r22, 0xF7	; 247
    2712:	7f 4f       	sbci	r23, 0xFF	; 255
    2714:	ce 01       	movw	r24, r28
    2716:	49 96       	adiw	r24, 0x19	; 25
    2718:	d4 d3       	rcall	.+1960   	; 0x2ec2 <__unpack_f>
    271a:	8a 85       	ldd	r24, Y+10	; 0x0a
    271c:	91 e0       	ldi	r25, 0x01	; 1
    271e:	89 27       	eor	r24, r25
    2720:	8a 87       	std	Y+10, r24	; 0x0a
    2722:	ae 01       	movw	r20, r28
    2724:	4f 5f       	subi	r20, 0xFF	; 255
    2726:	5f 4f       	sbci	r21, 0xFF	; 255
    2728:	be 01       	movw	r22, r28
    272a:	67 5f       	subi	r22, 0xF7	; 247
    272c:	7f 4f       	sbci	r23, 0xFF	; 255
    272e:	ce 01       	movw	r24, r28
    2730:	41 96       	adiw	r24, 0x11	; 17
    2732:	55 de       	rcall	.-854    	; 0x23de <_fpadd_parts>
    2734:	fc d2       	rcall	.+1528   	; 0x2d2e <__pack_f>
    2736:	a0 96       	adiw	r28, 0x20	; 32
    2738:	e2 e0       	ldi	r30, 0x02	; 2
    273a:	0c 94 05 73 	jmp	0xe60a	; 0xe60a <__epilogue_restores__+0x20>

0000273e <__mulsf3>:
    273e:	a0 e2       	ldi	r26, 0x20	; 32
    2740:	b0 e0       	ldi	r27, 0x00	; 0
    2742:	e5 ea       	ldi	r30, 0xA5	; 165
    2744:	f3 e1       	ldi	r31, 0x13	; 19
    2746:	0c 94 de 72 	jmp	0xe5bc	; 0xe5bc <__prologue_saves__+0x4>
    274a:	6d 8f       	std	Y+29, r22	; 0x1d
    274c:	7e 8f       	std	Y+30, r23	; 0x1e
    274e:	8f 8f       	std	Y+31, r24	; 0x1f
    2750:	98 a3       	std	Y+32, r25	; 0x20
    2752:	29 8f       	std	Y+25, r18	; 0x19
    2754:	3a 8f       	std	Y+26, r19	; 0x1a
    2756:	4b 8f       	std	Y+27, r20	; 0x1b
    2758:	5c 8f       	std	Y+28, r21	; 0x1c
    275a:	be 01       	movw	r22, r28
    275c:	6f 5e       	subi	r22, 0xEF	; 239
    275e:	7f 4f       	sbci	r23, 0xFF	; 255
    2760:	ce 01       	movw	r24, r28
    2762:	4d 96       	adiw	r24, 0x1d	; 29
    2764:	ae d3       	rcall	.+1884   	; 0x2ec2 <__unpack_f>
    2766:	be 01       	movw	r22, r28
    2768:	67 5f       	subi	r22, 0xF7	; 247
    276a:	7f 4f       	sbci	r23, 0xFF	; 255
    276c:	ce 01       	movw	r24, r28
    276e:	49 96       	adiw	r24, 0x19	; 25
    2770:	a8 d3       	rcall	.+1872   	; 0x2ec2 <__unpack_f>
    2772:	99 89       	ldd	r25, Y+17	; 0x11
    2774:	92 30       	cpi	r25, 0x02	; 2
    2776:	08 f4       	brcc	.+2      	; 0x277a <__mulsf3+0x3c>
    2778:	12 c0       	rjmp	.+36     	; 0x279e <__mulsf3+0x60>
    277a:	89 85       	ldd	r24, Y+9	; 0x09
    277c:	82 30       	cpi	r24, 0x02	; 2
    277e:	08 f4       	brcc	.+2      	; 0x2782 <__mulsf3+0x44>
    2780:	1a c0       	rjmp	.+52     	; 0x27b6 <__mulsf3+0x78>
    2782:	94 30       	cpi	r25, 0x04	; 4
    2784:	21 f4       	brne	.+8      	; 0x278e <__mulsf3+0x50>
    2786:	82 30       	cpi	r24, 0x02	; 2
    2788:	09 f4       	brne	.+2      	; 0x278c <__mulsf3+0x4e>
    278a:	b4 c0       	rjmp	.+360    	; 0x28f4 <__mulsf3+0x1b6>
    278c:	08 c0       	rjmp	.+16     	; 0x279e <__mulsf3+0x60>
    278e:	84 30       	cpi	r24, 0x04	; 4
    2790:	21 f4       	brne	.+8      	; 0x279a <__mulsf3+0x5c>
    2792:	92 30       	cpi	r25, 0x02	; 2
    2794:	09 f4       	brne	.+2      	; 0x2798 <__mulsf3+0x5a>
    2796:	ae c0       	rjmp	.+348    	; 0x28f4 <__mulsf3+0x1b6>
    2798:	0e c0       	rjmp	.+28     	; 0x27b6 <__mulsf3+0x78>
    279a:	92 30       	cpi	r25, 0x02	; 2
    279c:	51 f4       	brne	.+20     	; 0x27b2 <__mulsf3+0x74>
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	2a 89       	ldd	r18, Y+18	; 0x12
    27a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a4:	29 13       	cpse	r18, r25
    27a6:	01 c0       	rjmp	.+2      	; 0x27aa <__mulsf3+0x6c>
    27a8:	80 e0       	ldi	r24, 0x00	; 0
    27aa:	8a 8b       	std	Y+18, r24	; 0x12
    27ac:	ce 01       	movw	r24, r28
    27ae:	41 96       	adiw	r24, 0x11	; 17
    27b0:	a3 c0       	rjmp	.+326    	; 0x28f8 <__mulsf3+0x1ba>
    27b2:	82 30       	cpi	r24, 0x02	; 2
    27b4:	51 f4       	brne	.+20     	; 0x27ca <__mulsf3+0x8c>
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	2a 89       	ldd	r18, Y+18	; 0x12
    27ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    27bc:	29 13       	cpse	r18, r25
    27be:	01 c0       	rjmp	.+2      	; 0x27c2 <__mulsf3+0x84>
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	8a 87       	std	Y+10, r24	; 0x0a
    27c4:	ce 01       	movw	r24, r28
    27c6:	09 96       	adiw	r24, 0x09	; 9
    27c8:	97 c0       	rjmp	.+302    	; 0x28f8 <__mulsf3+0x1ba>
    27ca:	8d 88       	ldd	r8, Y+21	; 0x15
    27cc:	9e 88       	ldd	r9, Y+22	; 0x16
    27ce:	af 88       	ldd	r10, Y+23	; 0x17
    27d0:	b8 8c       	ldd	r11, Y+24	; 0x18
    27d2:	0d 85       	ldd	r16, Y+13	; 0x0d
    27d4:	1e 85       	ldd	r17, Y+14	; 0x0e
    27d6:	2f 85       	ldd	r18, Y+15	; 0x0f
    27d8:	38 89       	ldd	r19, Y+16	; 0x10
    27da:	e0 e2       	ldi	r30, 0x20	; 32
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	80 e0       	ldi	r24, 0x00	; 0
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	dc 01       	movw	r26, r24
    27e4:	c1 2c       	mov	r12, r1
    27e6:	d1 2c       	mov	r13, r1
    27e8:	76 01       	movw	r14, r12
    27ea:	40 e0       	ldi	r20, 0x00	; 0
    27ec:	50 e0       	ldi	r21, 0x00	; 0
    27ee:	ba 01       	movw	r22, r20
    27f0:	80 fe       	sbrs	r8, 0
    27f2:	18 c0       	rjmp	.+48     	; 0x2824 <__mulsf3+0xe6>
    27f4:	40 0f       	add	r20, r16
    27f6:	51 1f       	adc	r21, r17
    27f8:	62 1f       	adc	r22, r18
    27fa:	73 1f       	adc	r23, r19
    27fc:	8c 0d       	add	r24, r12
    27fe:	9d 1d       	adc	r25, r13
    2800:	ae 1d       	adc	r26, r14
    2802:	bf 1d       	adc	r27, r15
    2804:	41 2c       	mov	r4, r1
    2806:	51 2c       	mov	r5, r1
    2808:	32 01       	movw	r6, r4
    280a:	43 94       	inc	r4
    280c:	40 17       	cp	r20, r16
    280e:	51 07       	cpc	r21, r17
    2810:	62 07       	cpc	r22, r18
    2812:	73 07       	cpc	r23, r19
    2814:	18 f0       	brcs	.+6      	; 0x281c <__mulsf3+0xde>
    2816:	41 2c       	mov	r4, r1
    2818:	51 2c       	mov	r5, r1
    281a:	32 01       	movw	r6, r4
    281c:	84 0d       	add	r24, r4
    281e:	95 1d       	adc	r25, r5
    2820:	a6 1d       	adc	r26, r6
    2822:	b7 1d       	adc	r27, r7
    2824:	cc 0c       	add	r12, r12
    2826:	dd 1c       	adc	r13, r13
    2828:	ee 1c       	adc	r14, r14
    282a:	ff 1c       	adc	r15, r15
    282c:	37 ff       	sbrs	r19, 7
    282e:	02 c0       	rjmp	.+4      	; 0x2834 <__mulsf3+0xf6>
    2830:	68 94       	set
    2832:	c0 f8       	bld	r12, 0
    2834:	00 0f       	add	r16, r16
    2836:	11 1f       	adc	r17, r17
    2838:	22 1f       	adc	r18, r18
    283a:	33 1f       	adc	r19, r19
    283c:	b6 94       	lsr	r11
    283e:	a7 94       	ror	r10
    2840:	97 94       	ror	r9
    2842:	87 94       	ror	r8
    2844:	31 97       	sbiw	r30, 0x01	; 1
    2846:	a1 f6       	brne	.-88     	; 0x27f0 <__mulsf3+0xb2>
    2848:	2b 89       	ldd	r18, Y+19	; 0x13
    284a:	3c 89       	ldd	r19, Y+20	; 0x14
    284c:	eb 85       	ldd	r30, Y+11	; 0x0b
    284e:	fc 85       	ldd	r31, Y+12	; 0x0c
    2850:	2e 0f       	add	r18, r30
    2852:	3f 1f       	adc	r19, r31
    2854:	2e 5f       	subi	r18, 0xFE	; 254
    2856:	3f 4f       	sbci	r19, 0xFF	; 255
    2858:	2b 83       	std	Y+3, r18	; 0x03
    285a:	3c 83       	std	Y+4, r19	; 0x04
    285c:	21 e0       	ldi	r18, 0x01	; 1
    285e:	ea 89       	ldd	r30, Y+18	; 0x12
    2860:	3a 85       	ldd	r19, Y+10	; 0x0a
    2862:	e3 13       	cpse	r30, r19
    2864:	01 c0       	rjmp	.+2      	; 0x2868 <__mulsf3+0x12a>
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	2a 83       	std	Y+2, r18	; 0x02
    286a:	eb 81       	ldd	r30, Y+3	; 0x03
    286c:	fc 81       	ldd	r31, Y+4	; 0x04
    286e:	0c c0       	rjmp	.+24     	; 0x2888 <__mulsf3+0x14a>
    2870:	80 ff       	sbrs	r24, 0
    2872:	05 c0       	rjmp	.+10     	; 0x287e <__mulsf3+0x140>
    2874:	76 95       	lsr	r23
    2876:	67 95       	ror	r22
    2878:	57 95       	ror	r21
    287a:	47 95       	ror	r20
    287c:	70 68       	ori	r23, 0x80	; 128
    287e:	b6 95       	lsr	r27
    2880:	a7 95       	ror	r26
    2882:	97 95       	ror	r25
    2884:	87 95       	ror	r24
    2886:	31 96       	adiw	r30, 0x01	; 1
    2888:	b7 fd       	sbrc	r27, 7
    288a:	f2 cf       	rjmp	.-28     	; 0x2870 <__mulsf3+0x132>
    288c:	9f 01       	movw	r18, r30
    288e:	0c c0       	rjmp	.+24     	; 0x28a8 <__mulsf3+0x16a>
    2890:	88 0f       	add	r24, r24
    2892:	99 1f       	adc	r25, r25
    2894:	aa 1f       	adc	r26, r26
    2896:	bb 1f       	adc	r27, r27
    2898:	77 fd       	sbrc	r23, 7
    289a:	81 60       	ori	r24, 0x01	; 1
    289c:	44 0f       	add	r20, r20
    289e:	55 1f       	adc	r21, r21
    28a0:	66 1f       	adc	r22, r22
    28a2:	77 1f       	adc	r23, r23
    28a4:	21 50       	subi	r18, 0x01	; 1
    28a6:	31 09       	sbc	r19, r1
    28a8:	00 97       	sbiw	r24, 0x00	; 0
    28aa:	a1 05       	cpc	r26, r1
    28ac:	e0 e4       	ldi	r30, 0x40	; 64
    28ae:	be 07       	cpc	r27, r30
    28b0:	78 f3       	brcs	.-34     	; 0x2890 <__mulsf3+0x152>
    28b2:	2b 83       	std	Y+3, r18	; 0x03
    28b4:	3c 83       	std	Y+4, r19	; 0x04
    28b6:	8c 01       	movw	r16, r24
    28b8:	9d 01       	movw	r18, r26
    28ba:	0f 77       	andi	r16, 0x7F	; 127
    28bc:	11 27       	eor	r17, r17
    28be:	22 27       	eor	r18, r18
    28c0:	33 27       	eor	r19, r19
    28c2:	00 34       	cpi	r16, 0x40	; 64
    28c4:	11 05       	cpc	r17, r1
    28c6:	21 05       	cpc	r18, r1
    28c8:	31 05       	cpc	r19, r1
    28ca:	59 f4       	brne	.+22     	; 0x28e2 <__mulsf3+0x1a4>
    28cc:	87 fd       	sbrc	r24, 7
    28ce:	09 c0       	rjmp	.+18     	; 0x28e2 <__mulsf3+0x1a4>
    28d0:	45 2b       	or	r20, r21
    28d2:	46 2b       	or	r20, r22
    28d4:	47 2b       	or	r20, r23
    28d6:	29 f0       	breq	.+10     	; 0x28e2 <__mulsf3+0x1a4>
    28d8:	80 5c       	subi	r24, 0xC0	; 192
    28da:	9f 4f       	sbci	r25, 0xFF	; 255
    28dc:	af 4f       	sbci	r26, 0xFF	; 255
    28de:	bf 4f       	sbci	r27, 0xFF	; 255
    28e0:	80 78       	andi	r24, 0x80	; 128
    28e2:	8d 83       	std	Y+5, r24	; 0x05
    28e4:	9e 83       	std	Y+6, r25	; 0x06
    28e6:	af 83       	std	Y+7, r26	; 0x07
    28e8:	b8 87       	std	Y+8, r27	; 0x08
    28ea:	83 e0       	ldi	r24, 0x03	; 3
    28ec:	89 83       	std	Y+1, r24	; 0x01
    28ee:	ce 01       	movw	r24, r28
    28f0:	01 96       	adiw	r24, 0x01	; 1
    28f2:	02 c0       	rjmp	.+4      	; 0x28f8 <__mulsf3+0x1ba>
    28f4:	86 ec       	ldi	r24, 0xC6	; 198
    28f6:	90 e2       	ldi	r25, 0x20	; 32
    28f8:	1a d2       	rcall	.+1076   	; 0x2d2e <__pack_f>
    28fa:	a0 96       	adiw	r28, 0x20	; 32
    28fc:	e0 e1       	ldi	r30, 0x10	; 16
    28fe:	0c 94 f7 72 	jmp	0xe5ee	; 0xe5ee <__epilogue_restores__+0x4>

00002902 <__divsf3>:
    2902:	a8 e1       	ldi	r26, 0x18	; 24
    2904:	b0 e0       	ldi	r27, 0x00	; 0
    2906:	e7 e8       	ldi	r30, 0x87	; 135
    2908:	f4 e1       	ldi	r31, 0x14	; 20
    290a:	0c 94 e6 72 	jmp	0xe5cc	; 0xe5cc <__prologue_saves__+0x14>
    290e:	6d 8b       	std	Y+21, r22	; 0x15
    2910:	7e 8b       	std	Y+22, r23	; 0x16
    2912:	8f 8b       	std	Y+23, r24	; 0x17
    2914:	98 8f       	std	Y+24, r25	; 0x18
    2916:	29 8b       	std	Y+17, r18	; 0x11
    2918:	3a 8b       	std	Y+18, r19	; 0x12
    291a:	4b 8b       	std	Y+19, r20	; 0x13
    291c:	5c 8b       	std	Y+20, r21	; 0x14
    291e:	be 01       	movw	r22, r28
    2920:	67 5f       	subi	r22, 0xF7	; 247
    2922:	7f 4f       	sbci	r23, 0xFF	; 255
    2924:	ce 01       	movw	r24, r28
    2926:	45 96       	adiw	r24, 0x15	; 21
    2928:	cc d2       	rcall	.+1432   	; 0x2ec2 <__unpack_f>
    292a:	be 01       	movw	r22, r28
    292c:	6f 5f       	subi	r22, 0xFF	; 255
    292e:	7f 4f       	sbci	r23, 0xFF	; 255
    2930:	ce 01       	movw	r24, r28
    2932:	41 96       	adiw	r24, 0x11	; 17
    2934:	c6 d2       	rcall	.+1420   	; 0x2ec2 <__unpack_f>
    2936:	99 85       	ldd	r25, Y+9	; 0x09
    2938:	92 30       	cpi	r25, 0x02	; 2
    293a:	08 f4       	brcc	.+2      	; 0x293e <__divsf3+0x3c>
    293c:	75 c0       	rjmp	.+234    	; 0x2a28 <__divsf3+0x126>
    293e:	89 81       	ldd	r24, Y+1	; 0x01
    2940:	82 30       	cpi	r24, 0x02	; 2
    2942:	08 f4       	brcc	.+2      	; 0x2946 <__divsf3+0x44>
    2944:	74 c0       	rjmp	.+232    	; 0x2a2e <__divsf3+0x12c>
    2946:	2a 85       	ldd	r18, Y+10	; 0x0a
    2948:	3a 81       	ldd	r19, Y+2	; 0x02
    294a:	23 27       	eor	r18, r19
    294c:	2a 87       	std	Y+10, r18	; 0x0a
    294e:	94 30       	cpi	r25, 0x04	; 4
    2950:	11 f0       	breq	.+4      	; 0x2956 <__divsf3+0x54>
    2952:	92 30       	cpi	r25, 0x02	; 2
    2954:	19 f4       	brne	.+6      	; 0x295c <__divsf3+0x5a>
    2956:	98 13       	cpse	r25, r24
    2958:	67 c0       	rjmp	.+206    	; 0x2a28 <__divsf3+0x126>
    295a:	6c c0       	rjmp	.+216    	; 0x2a34 <__divsf3+0x132>
    295c:	84 30       	cpi	r24, 0x04	; 4
    295e:	39 f4       	brne	.+14     	; 0x296e <__divsf3+0x6c>
    2960:	1d 86       	std	Y+13, r1	; 0x0d
    2962:	1e 86       	std	Y+14, r1	; 0x0e
    2964:	1f 86       	std	Y+15, r1	; 0x0f
    2966:	18 8a       	std	Y+16, r1	; 0x10
    2968:	1b 86       	std	Y+11, r1	; 0x0b
    296a:	1c 86       	std	Y+12, r1	; 0x0c
    296c:	04 c0       	rjmp	.+8      	; 0x2976 <__divsf3+0x74>
    296e:	82 30       	cpi	r24, 0x02	; 2
    2970:	29 f4       	brne	.+10     	; 0x297c <__divsf3+0x7a>
    2972:	84 e0       	ldi	r24, 0x04	; 4
    2974:	89 87       	std	Y+9, r24	; 0x09
    2976:	ce 01       	movw	r24, r28
    2978:	09 96       	adiw	r24, 0x09	; 9
    297a:	5e c0       	rjmp	.+188    	; 0x2a38 <__divsf3+0x136>
    297c:	8b 85       	ldd	r24, Y+11	; 0x0b
    297e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2980:	2b 81       	ldd	r18, Y+3	; 0x03
    2982:	3c 81       	ldd	r19, Y+4	; 0x04
    2984:	82 1b       	sub	r24, r18
    2986:	93 0b       	sbc	r25, r19
    2988:	8b 87       	std	Y+11, r24	; 0x0b
    298a:	9c 87       	std	Y+12, r25	; 0x0c
    298c:	4d 85       	ldd	r20, Y+13	; 0x0d
    298e:	5e 85       	ldd	r21, Y+14	; 0x0e
    2990:	6f 85       	ldd	r22, Y+15	; 0x0f
    2992:	78 89       	ldd	r23, Y+16	; 0x10
    2994:	cd 80       	ldd	r12, Y+5	; 0x05
    2996:	de 80       	ldd	r13, Y+6	; 0x06
    2998:	ef 80       	ldd	r14, Y+7	; 0x07
    299a:	f8 84       	ldd	r15, Y+8	; 0x08
    299c:	4c 15       	cp	r20, r12
    299e:	5d 05       	cpc	r21, r13
    29a0:	6e 05       	cpc	r22, r14
    29a2:	7f 05       	cpc	r23, r15
    29a4:	38 f4       	brcc	.+14     	; 0x29b4 <__divsf3+0xb2>
    29a6:	44 0f       	add	r20, r20
    29a8:	55 1f       	adc	r21, r21
    29aa:	66 1f       	adc	r22, r22
    29ac:	77 1f       	adc	r23, r23
    29ae:	01 97       	sbiw	r24, 0x01	; 1
    29b0:	8b 87       	std	Y+11, r24	; 0x0b
    29b2:	9c 87       	std	Y+12, r25	; 0x0c
    29b4:	ef e1       	ldi	r30, 0x1F	; 31
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	00 e0       	ldi	r16, 0x00	; 0
    29ba:	10 e0       	ldi	r17, 0x00	; 0
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	30 e4       	ldi	r19, 0x40	; 64
    29c0:	80 e0       	ldi	r24, 0x00	; 0
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	dc 01       	movw	r26, r24
    29c6:	4c 15       	cp	r20, r12
    29c8:	5d 05       	cpc	r21, r13
    29ca:	6e 05       	cpc	r22, r14
    29cc:	7f 05       	cpc	r23, r15
    29ce:	40 f0       	brcs	.+16     	; 0x29e0 <__divsf3+0xde>
    29d0:	80 2b       	or	r24, r16
    29d2:	91 2b       	or	r25, r17
    29d4:	a2 2b       	or	r26, r18
    29d6:	b3 2b       	or	r27, r19
    29d8:	4c 19       	sub	r20, r12
    29da:	5d 09       	sbc	r21, r13
    29dc:	6e 09       	sbc	r22, r14
    29de:	7f 09       	sbc	r23, r15
    29e0:	36 95       	lsr	r19
    29e2:	27 95       	ror	r18
    29e4:	17 95       	ror	r17
    29e6:	07 95       	ror	r16
    29e8:	44 0f       	add	r20, r20
    29ea:	55 1f       	adc	r21, r21
    29ec:	66 1f       	adc	r22, r22
    29ee:	77 1f       	adc	r23, r23
    29f0:	31 97       	sbiw	r30, 0x01	; 1
    29f2:	49 f7       	brne	.-46     	; 0x29c6 <__divsf3+0xc4>
    29f4:	8c 01       	movw	r16, r24
    29f6:	9d 01       	movw	r18, r26
    29f8:	0f 77       	andi	r16, 0x7F	; 127
    29fa:	11 27       	eor	r17, r17
    29fc:	22 27       	eor	r18, r18
    29fe:	33 27       	eor	r19, r19
    2a00:	00 34       	cpi	r16, 0x40	; 64
    2a02:	11 05       	cpc	r17, r1
    2a04:	21 05       	cpc	r18, r1
    2a06:	31 05       	cpc	r19, r1
    2a08:	59 f4       	brne	.+22     	; 0x2a20 <__divsf3+0x11e>
    2a0a:	87 fd       	sbrc	r24, 7
    2a0c:	09 c0       	rjmp	.+18     	; 0x2a20 <__divsf3+0x11e>
    2a0e:	45 2b       	or	r20, r21
    2a10:	46 2b       	or	r20, r22
    2a12:	47 2b       	or	r20, r23
    2a14:	29 f0       	breq	.+10     	; 0x2a20 <__divsf3+0x11e>
    2a16:	80 5c       	subi	r24, 0xC0	; 192
    2a18:	9f 4f       	sbci	r25, 0xFF	; 255
    2a1a:	af 4f       	sbci	r26, 0xFF	; 255
    2a1c:	bf 4f       	sbci	r27, 0xFF	; 255
    2a1e:	80 78       	andi	r24, 0x80	; 128
    2a20:	8d 87       	std	Y+13, r24	; 0x0d
    2a22:	9e 87       	std	Y+14, r25	; 0x0e
    2a24:	af 87       	std	Y+15, r26	; 0x0f
    2a26:	b8 8b       	std	Y+16, r27	; 0x10
    2a28:	ce 01       	movw	r24, r28
    2a2a:	09 96       	adiw	r24, 0x09	; 9
    2a2c:	05 c0       	rjmp	.+10     	; 0x2a38 <__divsf3+0x136>
    2a2e:	ce 01       	movw	r24, r28
    2a30:	01 96       	adiw	r24, 0x01	; 1
    2a32:	02 c0       	rjmp	.+4      	; 0x2a38 <__divsf3+0x136>
    2a34:	86 ec       	ldi	r24, 0xC6	; 198
    2a36:	90 e2       	ldi	r25, 0x20	; 32
    2a38:	7a d1       	rcall	.+756    	; 0x2d2e <__pack_f>
    2a3a:	68 96       	adiw	r28, 0x18	; 24
    2a3c:	e8 e0       	ldi	r30, 0x08	; 8
    2a3e:	0c 94 ff 72 	jmp	0xe5fe	; 0xe5fe <__epilogue_restores__+0x14>

00002a42 <__gesf2>:
    2a42:	a8 e1       	ldi	r26, 0x18	; 24
    2a44:	b0 e0       	ldi	r27, 0x00	; 0
    2a46:	e7 e2       	ldi	r30, 0x27	; 39
    2a48:	f5 e1       	ldi	r31, 0x15	; 21
    2a4a:	0c 94 ec 72 	jmp	0xe5d8	; 0xe5d8 <__prologue_saves__+0x20>
    2a4e:	6d 8b       	std	Y+21, r22	; 0x15
    2a50:	7e 8b       	std	Y+22, r23	; 0x16
    2a52:	8f 8b       	std	Y+23, r24	; 0x17
    2a54:	98 8f       	std	Y+24, r25	; 0x18
    2a56:	29 8b       	std	Y+17, r18	; 0x11
    2a58:	3a 8b       	std	Y+18, r19	; 0x12
    2a5a:	4b 8b       	std	Y+19, r20	; 0x13
    2a5c:	5c 8b       	std	Y+20, r21	; 0x14
    2a5e:	be 01       	movw	r22, r28
    2a60:	67 5f       	subi	r22, 0xF7	; 247
    2a62:	7f 4f       	sbci	r23, 0xFF	; 255
    2a64:	ce 01       	movw	r24, r28
    2a66:	45 96       	adiw	r24, 0x15	; 21
    2a68:	2c d2       	rcall	.+1112   	; 0x2ec2 <__unpack_f>
    2a6a:	be 01       	movw	r22, r28
    2a6c:	6f 5f       	subi	r22, 0xFF	; 255
    2a6e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a70:	ce 01       	movw	r24, r28
    2a72:	41 96       	adiw	r24, 0x11	; 17
    2a74:	26 d2       	rcall	.+1100   	; 0x2ec2 <__unpack_f>
    2a76:	89 85       	ldd	r24, Y+9	; 0x09
    2a78:	82 30       	cpi	r24, 0x02	; 2
    2a7a:	50 f0       	brcs	.+20     	; 0x2a90 <__gesf2+0x4e>
    2a7c:	89 81       	ldd	r24, Y+1	; 0x01
    2a7e:	82 30       	cpi	r24, 0x02	; 2
    2a80:	38 f0       	brcs	.+14     	; 0x2a90 <__gesf2+0x4e>
    2a82:	be 01       	movw	r22, r28
    2a84:	6f 5f       	subi	r22, 0xFF	; 255
    2a86:	7f 4f       	sbci	r23, 0xFF	; 255
    2a88:	ce 01       	movw	r24, r28
    2a8a:	09 96       	adiw	r24, 0x09	; 9
    2a8c:	89 d2       	rcall	.+1298   	; 0x2fa0 <__fpcmp_parts_f>
    2a8e:	01 c0       	rjmp	.+2      	; 0x2a92 <__gesf2+0x50>
    2a90:	8f ef       	ldi	r24, 0xFF	; 255
    2a92:	68 96       	adiw	r28, 0x18	; 24
    2a94:	e2 e0       	ldi	r30, 0x02	; 2
    2a96:	0c 94 05 73 	jmp	0xe60a	; 0xe60a <__epilogue_restores__+0x20>

00002a9a <__ltsf2>:
    2a9a:	a8 e1       	ldi	r26, 0x18	; 24
    2a9c:	b0 e0       	ldi	r27, 0x00	; 0
    2a9e:	e3 e5       	ldi	r30, 0x53	; 83
    2aa0:	f5 e1       	ldi	r31, 0x15	; 21
    2aa2:	0c 94 ec 72 	jmp	0xe5d8	; 0xe5d8 <__prologue_saves__+0x20>
    2aa6:	6d 8b       	std	Y+21, r22	; 0x15
    2aa8:	7e 8b       	std	Y+22, r23	; 0x16
    2aaa:	8f 8b       	std	Y+23, r24	; 0x17
    2aac:	98 8f       	std	Y+24, r25	; 0x18
    2aae:	29 8b       	std	Y+17, r18	; 0x11
    2ab0:	3a 8b       	std	Y+18, r19	; 0x12
    2ab2:	4b 8b       	std	Y+19, r20	; 0x13
    2ab4:	5c 8b       	std	Y+20, r21	; 0x14
    2ab6:	be 01       	movw	r22, r28
    2ab8:	67 5f       	subi	r22, 0xF7	; 247
    2aba:	7f 4f       	sbci	r23, 0xFF	; 255
    2abc:	ce 01       	movw	r24, r28
    2abe:	45 96       	adiw	r24, 0x15	; 21
    2ac0:	00 d2       	rcall	.+1024   	; 0x2ec2 <__unpack_f>
    2ac2:	be 01       	movw	r22, r28
    2ac4:	6f 5f       	subi	r22, 0xFF	; 255
    2ac6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ac8:	ce 01       	movw	r24, r28
    2aca:	41 96       	adiw	r24, 0x11	; 17
    2acc:	fa d1       	rcall	.+1012   	; 0x2ec2 <__unpack_f>
    2ace:	89 85       	ldd	r24, Y+9	; 0x09
    2ad0:	82 30       	cpi	r24, 0x02	; 2
    2ad2:	50 f0       	brcs	.+20     	; 0x2ae8 <__ltsf2+0x4e>
    2ad4:	89 81       	ldd	r24, Y+1	; 0x01
    2ad6:	82 30       	cpi	r24, 0x02	; 2
    2ad8:	38 f0       	brcs	.+14     	; 0x2ae8 <__ltsf2+0x4e>
    2ada:	be 01       	movw	r22, r28
    2adc:	6f 5f       	subi	r22, 0xFF	; 255
    2ade:	7f 4f       	sbci	r23, 0xFF	; 255
    2ae0:	ce 01       	movw	r24, r28
    2ae2:	09 96       	adiw	r24, 0x09	; 9
    2ae4:	5d d2       	rcall	.+1210   	; 0x2fa0 <__fpcmp_parts_f>
    2ae6:	01 c0       	rjmp	.+2      	; 0x2aea <__ltsf2+0x50>
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	68 96       	adiw	r28, 0x18	; 24
    2aec:	e2 e0       	ldi	r30, 0x02	; 2
    2aee:	0c 94 05 73 	jmp	0xe60a	; 0xe60a <__epilogue_restores__+0x20>

00002af2 <__floatsisf>:
    2af2:	a8 e0       	ldi	r26, 0x08	; 8
    2af4:	b0 e0       	ldi	r27, 0x00	; 0
    2af6:	ef e7       	ldi	r30, 0x7F	; 127
    2af8:	f5 e1       	ldi	r31, 0x15	; 21
    2afa:	0c 94 ea 72 	jmp	0xe5d4	; 0xe5d4 <__prologue_saves__+0x1c>
    2afe:	23 e0       	ldi	r18, 0x03	; 3
    2b00:	29 83       	std	Y+1, r18	; 0x01
    2b02:	8b 01       	movw	r16, r22
    2b04:	9c 01       	movw	r18, r24
    2b06:	00 27       	eor	r16, r16
    2b08:	37 fd       	sbrc	r19, 7
    2b0a:	03 95       	inc	r16
    2b0c:	11 27       	eor	r17, r17
    2b0e:	22 27       	eor	r18, r18
    2b10:	33 27       	eor	r19, r19
    2b12:	40 2f       	mov	r20, r16
    2b14:	0a 83       	std	Y+2, r16	; 0x02
    2b16:	61 15       	cp	r22, r1
    2b18:	71 05       	cpc	r23, r1
    2b1a:	81 05       	cpc	r24, r1
    2b1c:	91 05       	cpc	r25, r1
    2b1e:	19 f4       	brne	.+6      	; 0x2b26 <__floatsisf+0x34>
    2b20:	82 e0       	ldi	r24, 0x02	; 2
    2b22:	89 83       	std	Y+1, r24	; 0x01
    2b24:	35 c0       	rjmp	.+106    	; 0x2b90 <__floatsisf+0x9e>
    2b26:	2e e1       	ldi	r18, 0x1E	; 30
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	2b 83       	std	Y+3, r18	; 0x03
    2b2c:	3c 83       	std	Y+4, r19	; 0x04
    2b2e:	44 23       	and	r20, r20
    2b30:	71 f0       	breq	.+28     	; 0x2b4e <__floatsisf+0x5c>
    2b32:	61 15       	cp	r22, r1
    2b34:	71 05       	cpc	r23, r1
    2b36:	81 05       	cpc	r24, r1
    2b38:	20 e8       	ldi	r18, 0x80	; 128
    2b3a:	92 07       	cpc	r25, r18
    2b3c:	69 f1       	breq	.+90     	; 0x2b98 <__floatsisf+0xa6>
    2b3e:	00 27       	eor	r16, r16
    2b40:	11 27       	eor	r17, r17
    2b42:	98 01       	movw	r18, r16
    2b44:	06 1b       	sub	r16, r22
    2b46:	17 0b       	sbc	r17, r23
    2b48:	28 0b       	sbc	r18, r24
    2b4a:	39 0b       	sbc	r19, r25
    2b4c:	02 c0       	rjmp	.+4      	; 0x2b52 <__floatsisf+0x60>
    2b4e:	8b 01       	movw	r16, r22
    2b50:	9c 01       	movw	r18, r24
    2b52:	c9 01       	movw	r24, r18
    2b54:	b8 01       	movw	r22, r16
    2b56:	0e 94 c3 72 	call	0xe586	; 0xe586 <__clzsi2>
    2b5a:	01 97       	sbiw	r24, 0x01	; 1
    2b5c:	18 16       	cp	r1, r24
    2b5e:	19 06       	cpc	r1, r25
    2b60:	2c f0       	brlt	.+10     	; 0x2b6c <__floatsisf+0x7a>
    2b62:	0d 83       	std	Y+5, r16	; 0x05
    2b64:	1e 83       	std	Y+6, r17	; 0x06
    2b66:	2f 83       	std	Y+7, r18	; 0x07
    2b68:	38 87       	std	Y+8, r19	; 0x08
    2b6a:	12 c0       	rjmp	.+36     	; 0x2b90 <__floatsisf+0x9e>
    2b6c:	08 2e       	mov	r0, r24
    2b6e:	04 c0       	rjmp	.+8      	; 0x2b78 <__floatsisf+0x86>
    2b70:	00 0f       	add	r16, r16
    2b72:	11 1f       	adc	r17, r17
    2b74:	22 1f       	adc	r18, r18
    2b76:	33 1f       	adc	r19, r19
    2b78:	0a 94       	dec	r0
    2b7a:	d2 f7       	brpl	.-12     	; 0x2b70 <__floatsisf+0x7e>
    2b7c:	0d 83       	std	Y+5, r16	; 0x05
    2b7e:	1e 83       	std	Y+6, r17	; 0x06
    2b80:	2f 83       	std	Y+7, r18	; 0x07
    2b82:	38 87       	std	Y+8, r19	; 0x08
    2b84:	2e e1       	ldi	r18, 0x1E	; 30
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	28 1b       	sub	r18, r24
    2b8a:	39 0b       	sbc	r19, r25
    2b8c:	2b 83       	std	Y+3, r18	; 0x03
    2b8e:	3c 83       	std	Y+4, r19	; 0x04
    2b90:	ce 01       	movw	r24, r28
    2b92:	01 96       	adiw	r24, 0x01	; 1
    2b94:	cc d0       	rcall	.+408    	; 0x2d2e <__pack_f>
    2b96:	04 c0       	rjmp	.+8      	; 0x2ba0 <__floatsisf+0xae>
    2b98:	60 e0       	ldi	r22, 0x00	; 0
    2b9a:	70 e0       	ldi	r23, 0x00	; 0
    2b9c:	80 e0       	ldi	r24, 0x00	; 0
    2b9e:	9f ec       	ldi	r25, 0xCF	; 207
    2ba0:	28 96       	adiw	r28, 0x08	; 8
    2ba2:	e4 e0       	ldi	r30, 0x04	; 4
    2ba4:	0c 94 03 73 	jmp	0xe606	; 0xe606 <__epilogue_restores__+0x1c>

00002ba8 <__fixsfsi>:
    2ba8:	ac e0       	ldi	r26, 0x0C	; 12
    2baa:	b0 e0       	ldi	r27, 0x00	; 0
    2bac:	ea ed       	ldi	r30, 0xDA	; 218
    2bae:	f5 e1       	ldi	r31, 0x15	; 21
    2bb0:	0c 94 ea 72 	jmp	0xe5d4	; 0xe5d4 <__prologue_saves__+0x1c>
    2bb4:	69 87       	std	Y+9, r22	; 0x09
    2bb6:	7a 87       	std	Y+10, r23	; 0x0a
    2bb8:	8b 87       	std	Y+11, r24	; 0x0b
    2bba:	9c 87       	std	Y+12, r25	; 0x0c
    2bbc:	be 01       	movw	r22, r28
    2bbe:	6f 5f       	subi	r22, 0xFF	; 255
    2bc0:	7f 4f       	sbci	r23, 0xFF	; 255
    2bc2:	ce 01       	movw	r24, r28
    2bc4:	09 96       	adiw	r24, 0x09	; 9
    2bc6:	7d d1       	rcall	.+762    	; 0x2ec2 <__unpack_f>
    2bc8:	89 81       	ldd	r24, Y+1	; 0x01
    2bca:	82 30       	cpi	r24, 0x02	; 2
    2bcc:	91 f1       	breq	.+100    	; 0x2c32 <__fixsfsi+0x8a>
    2bce:	82 30       	cpi	r24, 0x02	; 2
    2bd0:	80 f1       	brcs	.+96     	; 0x2c32 <__fixsfsi+0x8a>
    2bd2:	84 30       	cpi	r24, 0x04	; 4
    2bd4:	41 f4       	brne	.+16     	; 0x2be6 <__fixsfsi+0x3e>
    2bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd8:	88 23       	and	r24, r24
    2bda:	31 f1       	breq	.+76     	; 0x2c28 <__fixsfsi+0x80>
    2bdc:	00 e0       	ldi	r16, 0x00	; 0
    2bde:	10 e0       	ldi	r17, 0x00	; 0
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	30 e8       	ldi	r19, 0x80	; 128
    2be4:	29 c0       	rjmp	.+82     	; 0x2c38 <__fixsfsi+0x90>
    2be6:	2b 81       	ldd	r18, Y+3	; 0x03
    2be8:	3c 81       	ldd	r19, Y+4	; 0x04
    2bea:	37 fd       	sbrc	r19, 7
    2bec:	22 c0       	rjmp	.+68     	; 0x2c32 <__fixsfsi+0x8a>
    2bee:	2f 31       	cpi	r18, 0x1F	; 31
    2bf0:	31 05       	cpc	r19, r1
    2bf2:	8c f7       	brge	.-30     	; 0x2bd6 <__fixsfsi+0x2e>
    2bf4:	8e e1       	ldi	r24, 0x1E	; 30
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	82 1b       	sub	r24, r18
    2bfa:	93 0b       	sbc	r25, r19
    2bfc:	0d 81       	ldd	r16, Y+5	; 0x05
    2bfe:	1e 81       	ldd	r17, Y+6	; 0x06
    2c00:	2f 81       	ldd	r18, Y+7	; 0x07
    2c02:	38 85       	ldd	r19, Y+8	; 0x08
    2c04:	04 c0       	rjmp	.+8      	; 0x2c0e <__fixsfsi+0x66>
    2c06:	36 95       	lsr	r19
    2c08:	27 95       	ror	r18
    2c0a:	17 95       	ror	r17
    2c0c:	07 95       	ror	r16
    2c0e:	8a 95       	dec	r24
    2c10:	d2 f7       	brpl	.-12     	; 0x2c06 <__fixsfsi+0x5e>
    2c12:	8a 81       	ldd	r24, Y+2	; 0x02
    2c14:	88 23       	and	r24, r24
    2c16:	81 f0       	breq	.+32     	; 0x2c38 <__fixsfsi+0x90>
    2c18:	30 95       	com	r19
    2c1a:	20 95       	com	r18
    2c1c:	10 95       	com	r17
    2c1e:	01 95       	neg	r16
    2c20:	1f 4f       	sbci	r17, 0xFF	; 255
    2c22:	2f 4f       	sbci	r18, 0xFF	; 255
    2c24:	3f 4f       	sbci	r19, 0xFF	; 255
    2c26:	08 c0       	rjmp	.+16     	; 0x2c38 <__fixsfsi+0x90>
    2c28:	0f ef       	ldi	r16, 0xFF	; 255
    2c2a:	1f ef       	ldi	r17, 0xFF	; 255
    2c2c:	2f ef       	ldi	r18, 0xFF	; 255
    2c2e:	3f e7       	ldi	r19, 0x7F	; 127
    2c30:	03 c0       	rjmp	.+6      	; 0x2c38 <__fixsfsi+0x90>
    2c32:	00 e0       	ldi	r16, 0x00	; 0
    2c34:	10 e0       	ldi	r17, 0x00	; 0
    2c36:	98 01       	movw	r18, r16
    2c38:	b8 01       	movw	r22, r16
    2c3a:	c9 01       	movw	r24, r18
    2c3c:	2c 96       	adiw	r28, 0x0c	; 12
    2c3e:	e4 e0       	ldi	r30, 0x04	; 4
    2c40:	0c 94 03 73 	jmp	0xe606	; 0xe606 <__epilogue_restores__+0x1c>

00002c44 <__floatunsisf>:
    2c44:	a8 e0       	ldi	r26, 0x08	; 8
    2c46:	b0 e0       	ldi	r27, 0x00	; 0
    2c48:	e8 e2       	ldi	r30, 0x28	; 40
    2c4a:	f6 e1       	ldi	r31, 0x16	; 22
    2c4c:	0c 94 e6 72 	jmp	0xe5cc	; 0xe5cc <__prologue_saves__+0x14>
    2c50:	8b 01       	movw	r16, r22
    2c52:	9c 01       	movw	r18, r24
    2c54:	1a 82       	std	Y+2, r1	; 0x02
    2c56:	61 15       	cp	r22, r1
    2c58:	71 05       	cpc	r23, r1
    2c5a:	81 05       	cpc	r24, r1
    2c5c:	91 05       	cpc	r25, r1
    2c5e:	19 f4       	brne	.+6      	; 0x2c66 <__floatunsisf+0x22>
    2c60:	82 e0       	ldi	r24, 0x02	; 2
    2c62:	89 83       	std	Y+1, r24	; 0x01
    2c64:	5d c0       	rjmp	.+186    	; 0x2d20 <__floatunsisf+0xdc>
    2c66:	83 e0       	ldi	r24, 0x03	; 3
    2c68:	89 83       	std	Y+1, r24	; 0x01
    2c6a:	4e e1       	ldi	r20, 0x1E	; 30
    2c6c:	50 e0       	ldi	r21, 0x00	; 0
    2c6e:	4b 83       	std	Y+3, r20	; 0x03
    2c70:	5c 83       	std	Y+4, r21	; 0x04
    2c72:	c9 01       	movw	r24, r18
    2c74:	b8 01       	movw	r22, r16
    2c76:	0e 94 c3 72 	call	0xe586	; 0xe586 <__clzsi2>
    2c7a:	01 97       	sbiw	r24, 0x01	; 1
    2c7c:	97 ff       	sbrs	r25, 7
    2c7e:	39 c0       	rjmp	.+114    	; 0x2cf2 <__floatunsisf+0xae>
    2c80:	ee 27       	eor	r30, r30
    2c82:	ff 27       	eor	r31, r31
    2c84:	e8 1b       	sub	r30, r24
    2c86:	f9 0b       	sbc	r31, r25
    2c88:	41 e0       	ldi	r20, 0x01	; 1
    2c8a:	50 e0       	ldi	r21, 0x00	; 0
    2c8c:	60 e0       	ldi	r22, 0x00	; 0
    2c8e:	70 e0       	ldi	r23, 0x00	; 0
    2c90:	0e 2e       	mov	r0, r30
    2c92:	04 c0       	rjmp	.+8      	; 0x2c9c <__floatunsisf+0x58>
    2c94:	44 0f       	add	r20, r20
    2c96:	55 1f       	adc	r21, r21
    2c98:	66 1f       	adc	r22, r22
    2c9a:	77 1f       	adc	r23, r23
    2c9c:	0a 94       	dec	r0
    2c9e:	d2 f7       	brpl	.-12     	; 0x2c94 <__floatunsisf+0x50>
    2ca0:	41 50       	subi	r20, 0x01	; 1
    2ca2:	51 09       	sbc	r21, r1
    2ca4:	61 09       	sbc	r22, r1
    2ca6:	71 09       	sbc	r23, r1
    2ca8:	40 23       	and	r20, r16
    2caa:	51 23       	and	r21, r17
    2cac:	62 23       	and	r22, r18
    2cae:	73 23       	and	r23, r19
    2cb0:	c1 2c       	mov	r12, r1
    2cb2:	d1 2c       	mov	r13, r1
    2cb4:	76 01       	movw	r14, r12
    2cb6:	c3 94       	inc	r12
    2cb8:	45 2b       	or	r20, r21
    2cba:	46 2b       	or	r20, r22
    2cbc:	47 2b       	or	r20, r23
    2cbe:	19 f4       	brne	.+6      	; 0x2cc6 <__floatunsisf+0x82>
    2cc0:	c1 2c       	mov	r12, r1
    2cc2:	d1 2c       	mov	r13, r1
    2cc4:	76 01       	movw	r14, r12
    2cc6:	04 c0       	rjmp	.+8      	; 0x2cd0 <__floatunsisf+0x8c>
    2cc8:	36 95       	lsr	r19
    2cca:	27 95       	ror	r18
    2ccc:	17 95       	ror	r17
    2cce:	07 95       	ror	r16
    2cd0:	ea 95       	dec	r30
    2cd2:	d2 f7       	brpl	.-12     	; 0x2cc8 <__floatunsisf+0x84>
    2cd4:	0c 29       	or	r16, r12
    2cd6:	1d 29       	or	r17, r13
    2cd8:	2e 29       	or	r18, r14
    2cda:	3f 29       	or	r19, r15
    2cdc:	0d 83       	std	Y+5, r16	; 0x05
    2cde:	1e 83       	std	Y+6, r17	; 0x06
    2ce0:	2f 83       	std	Y+7, r18	; 0x07
    2ce2:	38 87       	std	Y+8, r19	; 0x08
    2ce4:	2e e1       	ldi	r18, 0x1E	; 30
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	28 1b       	sub	r18, r24
    2cea:	39 0b       	sbc	r19, r25
    2cec:	2b 83       	std	Y+3, r18	; 0x03
    2cee:	3c 83       	std	Y+4, r19	; 0x04
    2cf0:	17 c0       	rjmp	.+46     	; 0x2d20 <__floatunsisf+0xdc>
    2cf2:	00 97       	sbiw	r24, 0x00	; 0
    2cf4:	29 f4       	brne	.+10     	; 0x2d00 <__floatunsisf+0xbc>
    2cf6:	0d 83       	std	Y+5, r16	; 0x05
    2cf8:	1e 83       	std	Y+6, r17	; 0x06
    2cfa:	2f 83       	std	Y+7, r18	; 0x07
    2cfc:	38 87       	std	Y+8, r19	; 0x08
    2cfe:	10 c0       	rjmp	.+32     	; 0x2d20 <__floatunsisf+0xdc>
    2d00:	08 2e       	mov	r0, r24
    2d02:	04 c0       	rjmp	.+8      	; 0x2d0c <__floatunsisf+0xc8>
    2d04:	00 0f       	add	r16, r16
    2d06:	11 1f       	adc	r17, r17
    2d08:	22 1f       	adc	r18, r18
    2d0a:	33 1f       	adc	r19, r19
    2d0c:	0a 94       	dec	r0
    2d0e:	d2 f7       	brpl	.-12     	; 0x2d04 <__floatunsisf+0xc0>
    2d10:	0d 83       	std	Y+5, r16	; 0x05
    2d12:	1e 83       	std	Y+6, r17	; 0x06
    2d14:	2f 83       	std	Y+7, r18	; 0x07
    2d16:	38 87       	std	Y+8, r19	; 0x08
    2d18:	48 1b       	sub	r20, r24
    2d1a:	59 0b       	sbc	r21, r25
    2d1c:	4b 83       	std	Y+3, r20	; 0x03
    2d1e:	5c 83       	std	Y+4, r21	; 0x04
    2d20:	ce 01       	movw	r24, r28
    2d22:	01 96       	adiw	r24, 0x01	; 1
    2d24:	04 d0       	rcall	.+8      	; 0x2d2e <__pack_f>
    2d26:	28 96       	adiw	r28, 0x08	; 8
    2d28:	e8 e0       	ldi	r30, 0x08	; 8
    2d2a:	0c 94 ff 72 	jmp	0xe5fe	; 0xe5fe <__epilogue_restores__+0x14>

00002d2e <__pack_f>:
    2d2e:	0f 93       	push	r16
    2d30:	1f 93       	push	r17
    2d32:	cf 93       	push	r28
    2d34:	df 93       	push	r29
    2d36:	dc 01       	movw	r26, r24
    2d38:	14 96       	adiw	r26, 0x04	; 4
    2d3a:	4d 91       	ld	r20, X+
    2d3c:	5d 91       	ld	r21, X+
    2d3e:	6d 91       	ld	r22, X+
    2d40:	7c 91       	ld	r23, X
    2d42:	17 97       	sbiw	r26, 0x07	; 7
    2d44:	11 96       	adiw	r26, 0x01	; 1
    2d46:	ec 91       	ld	r30, X
    2d48:	11 97       	sbiw	r26, 0x01	; 1
    2d4a:	8c 91       	ld	r24, X
    2d4c:	82 30       	cpi	r24, 0x02	; 2
    2d4e:	20 f4       	brcc	.+8      	; 0x2d58 <__pack_f+0x2a>
    2d50:	60 61       	ori	r22, 0x10	; 16
    2d52:	8f ef       	ldi	r24, 0xFF	; 255
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	a6 c0       	rjmp	.+332    	; 0x2ea4 <__pack_f+0x176>
    2d58:	84 30       	cpi	r24, 0x04	; 4
    2d5a:	09 f4       	brne	.+2      	; 0x2d5e <__pack_f+0x30>
    2d5c:	9e c0       	rjmp	.+316    	; 0x2e9a <__pack_f+0x16c>
    2d5e:	82 30       	cpi	r24, 0x02	; 2
    2d60:	09 f4       	brne	.+2      	; 0x2d64 <__pack_f+0x36>
    2d62:	95 c0       	rjmp	.+298    	; 0x2e8e <__pack_f+0x160>
    2d64:	41 15       	cp	r20, r1
    2d66:	51 05       	cpc	r21, r1
    2d68:	61 05       	cpc	r22, r1
    2d6a:	71 05       	cpc	r23, r1
    2d6c:	09 f4       	brne	.+2      	; 0x2d70 <__pack_f+0x42>
    2d6e:	92 c0       	rjmp	.+292    	; 0x2e94 <__pack_f+0x166>
    2d70:	12 96       	adiw	r26, 0x02	; 2
    2d72:	2d 91       	ld	r18, X+
    2d74:	3c 91       	ld	r19, X
    2d76:	13 97       	sbiw	r26, 0x03	; 3
    2d78:	22 38       	cpi	r18, 0x82	; 130
    2d7a:	8f ef       	ldi	r24, 0xFF	; 255
    2d7c:	38 07       	cpc	r19, r24
    2d7e:	0c f0       	brlt	.+2      	; 0x2d82 <__pack_f+0x54>
    2d80:	58 c0       	rjmp	.+176    	; 0x2e32 <__pack_f+0x104>
    2d82:	c2 e8       	ldi	r28, 0x82	; 130
    2d84:	df ef       	ldi	r29, 0xFF	; 255
    2d86:	c2 1b       	sub	r28, r18
    2d88:	d3 0b       	sbc	r29, r19
    2d8a:	ca 31       	cpi	r28, 0x1A	; 26
    2d8c:	d1 05       	cpc	r29, r1
    2d8e:	6c f5       	brge	.+90     	; 0x2dea <__pack_f+0xbc>
    2d90:	8a 01       	movw	r16, r20
    2d92:	9b 01       	movw	r18, r22
    2d94:	0c 2e       	mov	r0, r28
    2d96:	04 c0       	rjmp	.+8      	; 0x2da0 <__pack_f+0x72>
    2d98:	36 95       	lsr	r19
    2d9a:	27 95       	ror	r18
    2d9c:	17 95       	ror	r17
    2d9e:	07 95       	ror	r16
    2da0:	0a 94       	dec	r0
    2da2:	d2 f7       	brpl	.-12     	; 0x2d98 <__pack_f+0x6a>
    2da4:	81 e0       	ldi	r24, 0x01	; 1
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	a0 e0       	ldi	r26, 0x00	; 0
    2daa:	b0 e0       	ldi	r27, 0x00	; 0
    2dac:	0c 2e       	mov	r0, r28
    2dae:	04 c0       	rjmp	.+8      	; 0x2db8 <__pack_f+0x8a>
    2db0:	88 0f       	add	r24, r24
    2db2:	99 1f       	adc	r25, r25
    2db4:	aa 1f       	adc	r26, r26
    2db6:	bb 1f       	adc	r27, r27
    2db8:	0a 94       	dec	r0
    2dba:	d2 f7       	brpl	.-12     	; 0x2db0 <__pack_f+0x82>
    2dbc:	01 97       	sbiw	r24, 0x01	; 1
    2dbe:	a1 09       	sbc	r26, r1
    2dc0:	b1 09       	sbc	r27, r1
    2dc2:	84 23       	and	r24, r20
    2dc4:	95 23       	and	r25, r21
    2dc6:	a6 23       	and	r26, r22
    2dc8:	b7 23       	and	r27, r23
    2dca:	41 e0       	ldi	r20, 0x01	; 1
    2dcc:	50 e0       	ldi	r21, 0x00	; 0
    2dce:	60 e0       	ldi	r22, 0x00	; 0
    2dd0:	70 e0       	ldi	r23, 0x00	; 0
    2dd2:	89 2b       	or	r24, r25
    2dd4:	8a 2b       	or	r24, r26
    2dd6:	8b 2b       	or	r24, r27
    2dd8:	19 f4       	brne	.+6      	; 0x2de0 <__pack_f+0xb2>
    2dda:	40 e0       	ldi	r20, 0x00	; 0
    2ddc:	50 e0       	ldi	r21, 0x00	; 0
    2dde:	ba 01       	movw	r22, r20
    2de0:	40 2b       	or	r20, r16
    2de2:	51 2b       	or	r21, r17
    2de4:	62 2b       	or	r22, r18
    2de6:	73 2b       	or	r23, r19
    2de8:	03 c0       	rjmp	.+6      	; 0x2df0 <__pack_f+0xc2>
    2dea:	40 e0       	ldi	r20, 0x00	; 0
    2dec:	50 e0       	ldi	r21, 0x00	; 0
    2dee:	ba 01       	movw	r22, r20
    2df0:	db 01       	movw	r26, r22
    2df2:	ca 01       	movw	r24, r20
    2df4:	8f 77       	andi	r24, 0x7F	; 127
    2df6:	99 27       	eor	r25, r25
    2df8:	aa 27       	eor	r26, r26
    2dfa:	bb 27       	eor	r27, r27
    2dfc:	80 34       	cpi	r24, 0x40	; 64
    2dfe:	91 05       	cpc	r25, r1
    2e00:	a1 05       	cpc	r26, r1
    2e02:	b1 05       	cpc	r27, r1
    2e04:	39 f4       	brne	.+14     	; 0x2e14 <__pack_f+0xe6>
    2e06:	47 ff       	sbrs	r20, 7
    2e08:	09 c0       	rjmp	.+18     	; 0x2e1c <__pack_f+0xee>
    2e0a:	40 5c       	subi	r20, 0xC0	; 192
    2e0c:	5f 4f       	sbci	r21, 0xFF	; 255
    2e0e:	6f 4f       	sbci	r22, 0xFF	; 255
    2e10:	7f 4f       	sbci	r23, 0xFF	; 255
    2e12:	04 c0       	rjmp	.+8      	; 0x2e1c <__pack_f+0xee>
    2e14:	41 5c       	subi	r20, 0xC1	; 193
    2e16:	5f 4f       	sbci	r21, 0xFF	; 255
    2e18:	6f 4f       	sbci	r22, 0xFF	; 255
    2e1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	41 15       	cp	r20, r1
    2e22:	51 05       	cpc	r21, r1
    2e24:	61 05       	cpc	r22, r1
    2e26:	20 e4       	ldi	r18, 0x40	; 64
    2e28:	72 07       	cpc	r23, r18
    2e2a:	48 f5       	brcc	.+82     	; 0x2e7e <__pack_f+0x150>
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	26 c0       	rjmp	.+76     	; 0x2e7e <__pack_f+0x150>
    2e32:	20 38       	cpi	r18, 0x80	; 128
    2e34:	31 05       	cpc	r19, r1
    2e36:	8c f5       	brge	.+98     	; 0x2e9a <__pack_f+0x16c>
    2e38:	db 01       	movw	r26, r22
    2e3a:	ca 01       	movw	r24, r20
    2e3c:	8f 77       	andi	r24, 0x7F	; 127
    2e3e:	99 27       	eor	r25, r25
    2e40:	aa 27       	eor	r26, r26
    2e42:	bb 27       	eor	r27, r27
    2e44:	80 34       	cpi	r24, 0x40	; 64
    2e46:	91 05       	cpc	r25, r1
    2e48:	a1 05       	cpc	r26, r1
    2e4a:	b1 05       	cpc	r27, r1
    2e4c:	39 f4       	brne	.+14     	; 0x2e5c <__pack_f+0x12e>
    2e4e:	47 ff       	sbrs	r20, 7
    2e50:	09 c0       	rjmp	.+18     	; 0x2e64 <__pack_f+0x136>
    2e52:	40 5c       	subi	r20, 0xC0	; 192
    2e54:	5f 4f       	sbci	r21, 0xFF	; 255
    2e56:	6f 4f       	sbci	r22, 0xFF	; 255
    2e58:	7f 4f       	sbci	r23, 0xFF	; 255
    2e5a:	04 c0       	rjmp	.+8      	; 0x2e64 <__pack_f+0x136>
    2e5c:	41 5c       	subi	r20, 0xC1	; 193
    2e5e:	5f 4f       	sbci	r21, 0xFF	; 255
    2e60:	6f 4f       	sbci	r22, 0xFF	; 255
    2e62:	7f 4f       	sbci	r23, 0xFF	; 255
    2e64:	77 fd       	sbrc	r23, 7
    2e66:	04 c0       	rjmp	.+8      	; 0x2e70 <__pack_f+0x142>
    2e68:	c9 01       	movw	r24, r18
    2e6a:	81 58       	subi	r24, 0x81	; 129
    2e6c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e6e:	07 c0       	rjmp	.+14     	; 0x2e7e <__pack_f+0x150>
    2e70:	76 95       	lsr	r23
    2e72:	67 95       	ror	r22
    2e74:	57 95       	ror	r21
    2e76:	47 95       	ror	r20
    2e78:	c9 01       	movw	r24, r18
    2e7a:	80 58       	subi	r24, 0x80	; 128
    2e7c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e7e:	97 e0       	ldi	r25, 0x07	; 7
    2e80:	76 95       	lsr	r23
    2e82:	67 95       	ror	r22
    2e84:	57 95       	ror	r21
    2e86:	47 95       	ror	r20
    2e88:	9a 95       	dec	r25
    2e8a:	d1 f7       	brne	.-12     	; 0x2e80 <__pack_f+0x152>
    2e8c:	0b c0       	rjmp	.+22     	; 0x2ea4 <__pack_f+0x176>
    2e8e:	80 e0       	ldi	r24, 0x00	; 0
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	05 c0       	rjmp	.+10     	; 0x2e9e <__pack_f+0x170>
    2e94:	80 e0       	ldi	r24, 0x00	; 0
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	05 c0       	rjmp	.+10     	; 0x2ea4 <__pack_f+0x176>
    2e9a:	8f ef       	ldi	r24, 0xFF	; 255
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	40 e0       	ldi	r20, 0x00	; 0
    2ea0:	50 e0       	ldi	r21, 0x00	; 0
    2ea2:	ba 01       	movw	r22, r20
    2ea4:	98 2f       	mov	r25, r24
    2ea6:	96 95       	lsr	r25
    2ea8:	e0 fb       	bst	r30, 0
    2eaa:	97 f9       	bld	r25, 7
    2eac:	36 2f       	mov	r19, r22
    2eae:	80 fb       	bst	r24, 0
    2eb0:	37 f9       	bld	r19, 7
    2eb2:	64 2f       	mov	r22, r20
    2eb4:	75 2f       	mov	r23, r21
    2eb6:	83 2f       	mov	r24, r19
    2eb8:	df 91       	pop	r29
    2eba:	cf 91       	pop	r28
    2ebc:	1f 91       	pop	r17
    2ebe:	0f 91       	pop	r16
    2ec0:	08 95       	ret

00002ec2 <__unpack_f>:
    2ec2:	cf 92       	push	r12
    2ec4:	df 92       	push	r13
    2ec6:	ef 92       	push	r14
    2ec8:	dc 01       	movw	r26, r24
    2eca:	fb 01       	movw	r30, r22
    2ecc:	cc 90       	ld	r12, X
    2ece:	11 96       	adiw	r26, 0x01	; 1
    2ed0:	dc 90       	ld	r13, X
    2ed2:	11 97       	sbiw	r26, 0x01	; 1
    2ed4:	12 96       	adiw	r26, 0x02	; 2
    2ed6:	8c 91       	ld	r24, X
    2ed8:	12 97       	sbiw	r26, 0x02	; 2
    2eda:	3f e7       	ldi	r19, 0x7F	; 127
    2edc:	e3 2e       	mov	r14, r19
    2ede:	e8 22       	and	r14, r24
    2ee0:	6e 2d       	mov	r22, r14
    2ee2:	a6 01       	movw	r20, r12
    2ee4:	70 e0       	ldi	r23, 0x00	; 0
    2ee6:	98 2f       	mov	r25, r24
    2ee8:	99 1f       	adc	r25, r25
    2eea:	99 27       	eor	r25, r25
    2eec:	99 1f       	adc	r25, r25
    2eee:	13 96       	adiw	r26, 0x03	; 3
    2ef0:	2c 91       	ld	r18, X
    2ef2:	82 2f       	mov	r24, r18
    2ef4:	88 0f       	add	r24, r24
    2ef6:	89 2b       	or	r24, r25
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	27 fb       	bst	r18, 7
    2efc:	22 27       	eor	r18, r18
    2efe:	20 f9       	bld	r18, 0
    2f00:	21 83       	std	Z+1, r18	; 0x01
    2f02:	00 97       	sbiw	r24, 0x00	; 0
    2f04:	29 f5       	brne	.+74     	; 0x2f50 <__unpack_f+0x8e>
    2f06:	41 15       	cp	r20, r1
    2f08:	51 05       	cpc	r21, r1
    2f0a:	61 05       	cpc	r22, r1
    2f0c:	71 05       	cpc	r23, r1
    2f0e:	11 f4       	brne	.+4      	; 0x2f14 <__unpack_f+0x52>
    2f10:	82 e0       	ldi	r24, 0x02	; 2
    2f12:	27 c0       	rjmp	.+78     	; 0x2f62 <__unpack_f+0xa0>
    2f14:	82 e8       	ldi	r24, 0x82	; 130
    2f16:	9f ef       	ldi	r25, 0xFF	; 255
    2f18:	82 83       	std	Z+2, r24	; 0x02
    2f1a:	93 83       	std	Z+3, r25	; 0x03
    2f1c:	27 e0       	ldi	r18, 0x07	; 7
    2f1e:	44 0f       	add	r20, r20
    2f20:	55 1f       	adc	r21, r21
    2f22:	66 1f       	adc	r22, r22
    2f24:	77 1f       	adc	r23, r23
    2f26:	2a 95       	dec	r18
    2f28:	d1 f7       	brne	.-12     	; 0x2f1e <__unpack_f+0x5c>
    2f2a:	83 e0       	ldi	r24, 0x03	; 3
    2f2c:	80 83       	st	Z, r24
    2f2e:	09 c0       	rjmp	.+18     	; 0x2f42 <__unpack_f+0x80>
    2f30:	44 0f       	add	r20, r20
    2f32:	55 1f       	adc	r21, r21
    2f34:	66 1f       	adc	r22, r22
    2f36:	77 1f       	adc	r23, r23
    2f38:	82 81       	ldd	r24, Z+2	; 0x02
    2f3a:	93 81       	ldd	r25, Z+3	; 0x03
    2f3c:	01 97       	sbiw	r24, 0x01	; 1
    2f3e:	82 83       	std	Z+2, r24	; 0x02
    2f40:	93 83       	std	Z+3, r25	; 0x03
    2f42:	41 15       	cp	r20, r1
    2f44:	51 05       	cpc	r21, r1
    2f46:	61 05       	cpc	r22, r1
    2f48:	80 e4       	ldi	r24, 0x40	; 64
    2f4a:	78 07       	cpc	r23, r24
    2f4c:	88 f3       	brcs	.-30     	; 0x2f30 <__unpack_f+0x6e>
    2f4e:	20 c0       	rjmp	.+64     	; 0x2f90 <__unpack_f+0xce>
    2f50:	8f 3f       	cpi	r24, 0xFF	; 255
    2f52:	91 05       	cpc	r25, r1
    2f54:	79 f4       	brne	.+30     	; 0x2f74 <__unpack_f+0xb2>
    2f56:	41 15       	cp	r20, r1
    2f58:	51 05       	cpc	r21, r1
    2f5a:	61 05       	cpc	r22, r1
    2f5c:	71 05       	cpc	r23, r1
    2f5e:	19 f4       	brne	.+6      	; 0x2f66 <__unpack_f+0xa4>
    2f60:	84 e0       	ldi	r24, 0x04	; 4
    2f62:	80 83       	st	Z, r24
    2f64:	19 c0       	rjmp	.+50     	; 0x2f98 <__unpack_f+0xd6>
    2f66:	e4 fe       	sbrs	r14, 4
    2f68:	03 c0       	rjmp	.+6      	; 0x2f70 <__unpack_f+0xae>
    2f6a:	81 e0       	ldi	r24, 0x01	; 1
    2f6c:	80 83       	st	Z, r24
    2f6e:	10 c0       	rjmp	.+32     	; 0x2f90 <__unpack_f+0xce>
    2f70:	10 82       	st	Z, r1
    2f72:	0e c0       	rjmp	.+28     	; 0x2f90 <__unpack_f+0xce>
    2f74:	8f 57       	subi	r24, 0x7F	; 127
    2f76:	91 09       	sbc	r25, r1
    2f78:	82 83       	std	Z+2, r24	; 0x02
    2f7a:	93 83       	std	Z+3, r25	; 0x03
    2f7c:	83 e0       	ldi	r24, 0x03	; 3
    2f7e:	80 83       	st	Z, r24
    2f80:	87 e0       	ldi	r24, 0x07	; 7
    2f82:	44 0f       	add	r20, r20
    2f84:	55 1f       	adc	r21, r21
    2f86:	66 1f       	adc	r22, r22
    2f88:	77 1f       	adc	r23, r23
    2f8a:	8a 95       	dec	r24
    2f8c:	d1 f7       	brne	.-12     	; 0x2f82 <__unpack_f+0xc0>
    2f8e:	70 64       	ori	r23, 0x40	; 64
    2f90:	44 83       	std	Z+4, r20	; 0x04
    2f92:	55 83       	std	Z+5, r21	; 0x05
    2f94:	66 83       	std	Z+6, r22	; 0x06
    2f96:	77 83       	std	Z+7, r23	; 0x07
    2f98:	ef 90       	pop	r14
    2f9a:	df 90       	pop	r13
    2f9c:	cf 90       	pop	r12
    2f9e:	08 95       	ret

00002fa0 <__fpcmp_parts_f>:
    2fa0:	cf 93       	push	r28
    2fa2:	fc 01       	movw	r30, r24
    2fa4:	db 01       	movw	r26, r22
    2fa6:	90 81       	ld	r25, Z
    2fa8:	92 30       	cpi	r25, 0x02	; 2
    2faa:	08 f4       	brcc	.+2      	; 0x2fae <__fpcmp_parts_f+0xe>
    2fac:	52 c0       	rjmp	.+164    	; 0x3052 <__fpcmp_parts_f+0xb2>
    2fae:	8c 91       	ld	r24, X
    2fb0:	82 30       	cpi	r24, 0x02	; 2
    2fb2:	08 f4       	brcc	.+2      	; 0x2fb6 <__fpcmp_parts_f+0x16>
    2fb4:	4e c0       	rjmp	.+156    	; 0x3052 <__fpcmp_parts_f+0xb2>
    2fb6:	94 30       	cpi	r25, 0x04	; 4
    2fb8:	71 f4       	brne	.+28     	; 0x2fd6 <__fpcmp_parts_f+0x36>
    2fba:	84 30       	cpi	r24, 0x04	; 4
    2fbc:	39 f4       	brne	.+14     	; 0x2fcc <__fpcmp_parts_f+0x2c>
    2fbe:	11 96       	adiw	r26, 0x01	; 1
    2fc0:	2c 91       	ld	r18, X
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	81 81       	ldd	r24, Z+1	; 0x01
    2fc6:	28 1b       	sub	r18, r24
    2fc8:	31 09       	sbc	r19, r1
    2fca:	48 c0       	rjmp	.+144    	; 0x305c <__fpcmp_parts_f+0xbc>
    2fcc:	81 81       	ldd	r24, Z+1	; 0x01
    2fce:	88 23       	and	r24, r24
    2fd0:	09 f4       	brne	.+2      	; 0x2fd4 <__fpcmp_parts_f+0x34>
    2fd2:	3f c0       	rjmp	.+126    	; 0x3052 <__fpcmp_parts_f+0xb2>
    2fd4:	3b c0       	rjmp	.+118    	; 0x304c <__fpcmp_parts_f+0xac>
    2fd6:	84 30       	cpi	r24, 0x04	; 4
    2fd8:	29 f4       	brne	.+10     	; 0x2fe4 <__fpcmp_parts_f+0x44>
    2fda:	11 96       	adiw	r26, 0x01	; 1
    2fdc:	8c 91       	ld	r24, X
    2fde:	81 11       	cpse	r24, r1
    2fe0:	38 c0       	rjmp	.+112    	; 0x3052 <__fpcmp_parts_f+0xb2>
    2fe2:	34 c0       	rjmp	.+104    	; 0x304c <__fpcmp_parts_f+0xac>
    2fe4:	92 30       	cpi	r25, 0x02	; 2
    2fe6:	19 f4       	brne	.+6      	; 0x2fee <__fpcmp_parts_f+0x4e>
    2fe8:	82 30       	cpi	r24, 0x02	; 2
    2fea:	b9 f7       	brne	.-18     	; 0x2fda <__fpcmp_parts_f+0x3a>
    2fec:	35 c0       	rjmp	.+106    	; 0x3058 <__fpcmp_parts_f+0xb8>
    2fee:	82 30       	cpi	r24, 0x02	; 2
    2ff0:	69 f3       	breq	.-38     	; 0x2fcc <__fpcmp_parts_f+0x2c>
    2ff2:	c1 81       	ldd	r28, Z+1	; 0x01
    2ff4:	11 96       	adiw	r26, 0x01	; 1
    2ff6:	8c 91       	ld	r24, X
    2ff8:	11 97       	sbiw	r26, 0x01	; 1
    2ffa:	c8 13       	cpse	r28, r24
    2ffc:	1d c0       	rjmp	.+58     	; 0x3038 <__fpcmp_parts_f+0x98>
    2ffe:	22 81       	ldd	r18, Z+2	; 0x02
    3000:	33 81       	ldd	r19, Z+3	; 0x03
    3002:	12 96       	adiw	r26, 0x02	; 2
    3004:	8d 91       	ld	r24, X+
    3006:	9c 91       	ld	r25, X
    3008:	13 97       	sbiw	r26, 0x03	; 3
    300a:	82 17       	cp	r24, r18
    300c:	93 07       	cpc	r25, r19
    300e:	0c f4       	brge	.+2      	; 0x3012 <__fpcmp_parts_f+0x72>
    3010:	13 c0       	rjmp	.+38     	; 0x3038 <__fpcmp_parts_f+0x98>
    3012:	28 17       	cp	r18, r24
    3014:	39 07       	cpc	r19, r25
    3016:	0c f4       	brge	.+2      	; 0x301a <__fpcmp_parts_f+0x7a>
    3018:	17 c0       	rjmp	.+46     	; 0x3048 <__fpcmp_parts_f+0xa8>
    301a:	44 81       	ldd	r20, Z+4	; 0x04
    301c:	55 81       	ldd	r21, Z+5	; 0x05
    301e:	66 81       	ldd	r22, Z+6	; 0x06
    3020:	77 81       	ldd	r23, Z+7	; 0x07
    3022:	14 96       	adiw	r26, 0x04	; 4
    3024:	8d 91       	ld	r24, X+
    3026:	9d 91       	ld	r25, X+
    3028:	0d 90       	ld	r0, X+
    302a:	bc 91       	ld	r27, X
    302c:	a0 2d       	mov	r26, r0
    302e:	84 17       	cp	r24, r20
    3030:	95 07       	cpc	r25, r21
    3032:	a6 07       	cpc	r26, r22
    3034:	b7 07       	cpc	r27, r23
    3036:	18 f4       	brcc	.+6      	; 0x303e <__fpcmp_parts_f+0x9e>
    3038:	c1 11       	cpse	r28, r1
    303a:	08 c0       	rjmp	.+16     	; 0x304c <__fpcmp_parts_f+0xac>
    303c:	0a c0       	rjmp	.+20     	; 0x3052 <__fpcmp_parts_f+0xb2>
    303e:	48 17       	cp	r20, r24
    3040:	59 07       	cpc	r21, r25
    3042:	6a 07       	cpc	r22, r26
    3044:	7b 07       	cpc	r23, r27
    3046:	40 f4       	brcc	.+16     	; 0x3058 <__fpcmp_parts_f+0xb8>
    3048:	c1 11       	cpse	r28, r1
    304a:	03 c0       	rjmp	.+6      	; 0x3052 <__fpcmp_parts_f+0xb2>
    304c:	2f ef       	ldi	r18, 0xFF	; 255
    304e:	3f ef       	ldi	r19, 0xFF	; 255
    3050:	05 c0       	rjmp	.+10     	; 0x305c <__fpcmp_parts_f+0xbc>
    3052:	21 e0       	ldi	r18, 0x01	; 1
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	02 c0       	rjmp	.+4      	; 0x305c <__fpcmp_parts_f+0xbc>
    3058:	20 e0       	ldi	r18, 0x00	; 0
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	c9 01       	movw	r24, r18
    305e:	cf 91       	pop	r28
    3060:	08 95       	ret

00003062 <cpu_irq_save>:
#endif

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
    3062:	cf 93       	push	r28
    3064:	df 93       	push	r29
    3066:	1f 92       	push	r1
    3068:	cd b7       	in	r28, 0x3d	; 61
    306a:	de b7       	in	r29, 0x3e	; 62
	irqflags_t flags = SREG;
    306c:	8f e3       	ldi	r24, 0x3F	; 63
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	fc 01       	movw	r30, r24
    3072:	80 81       	ld	r24, Z
    3074:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3076:	f8 94       	cli
	return flags;
    3078:	89 81       	ldd	r24, Y+1	; 0x01
}
    307a:	0f 90       	pop	r0
    307c:	df 91       	pop	r29
    307e:	cf 91       	pop	r28
    3080:	08 95       	ret

00003082 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    3082:	cf 93       	push	r28
    3084:	df 93       	push	r29
    3086:	1f 92       	push	r1
    3088:	cd b7       	in	r28, 0x3d	; 61
    308a:	de b7       	in	r29, 0x3e	; 62
    308c:	89 83       	std	Y+1, r24	; 0x01
	barrier();
	SREG = flags;
    308e:	8f e3       	ldi	r24, 0x3F	; 63
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	29 81       	ldd	r18, Y+1	; 0x01
    3094:	fc 01       	movw	r30, r24
    3096:	20 83       	st	Z, r18
}
    3098:	0f 90       	pop	r0
    309a:	df 91       	pop	r29
    309c:	cf 91       	pop	r28
    309e:	08 95       	ret

000030a0 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
    30a0:	cf 93       	push	r28
    30a2:	df 93       	push	r29
    30a4:	1f 92       	push	r1
    30a6:	cd b7       	in	r28, 0x3d	; 61
    30a8:	de b7       	in	r29, 0x3e	; 62
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
    30aa:	19 82       	std	Y+1, r1	; 0x01
    30ac:	0a c0       	rjmp	.+20     	; 0x30c2 <sleepmgr_init+0x22>
		sleepmgr_locks[i] = 0;
    30ae:	89 81       	ldd	r24, Y+1	; 0x01
    30b0:	88 2f       	mov	r24, r24
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	8e 59       	subi	r24, 0x9E	; 158
    30b6:	98 4d       	sbci	r25, 0xD8	; 216
    30b8:	fc 01       	movw	r30, r24
    30ba:	10 82       	st	Z, r1
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
    30bc:	89 81       	ldd	r24, Y+1	; 0x01
    30be:	8f 5f       	subi	r24, 0xFF	; 255
    30c0:	89 83       	std	Y+1, r24	; 0x01
    30c2:	89 81       	ldd	r24, Y+1	; 0x01
    30c4:	85 30       	cpi	r24, 0x05	; 5
    30c6:	98 f3       	brcs	.-26     	; 0x30ae <sleepmgr_init+0xe>
		sleepmgr_locks[i] = 0;
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    30c8:	81 e0       	ldi	r24, 0x01	; 1
    30ca:	80 93 67 27 	sts	0x2767, r24
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    30ce:	0f 90       	pop	r0
    30d0:	df 91       	pop	r29
    30d2:	cf 91       	pop	r28
    30d4:	08 95       	ret

000030d6 <sysclk_get_main_hz>:
 * dynamic setups as well.
 *
 * \return Frequency of the main system clock, in Hz.
 */
static inline uint32_t sysclk_get_main_hz(void)
{
    30d6:	cf 93       	push	r28
    30d8:	df 93       	push	r29
    30da:	cd b7       	in	r28, 0x3d	; 61
    30dc:	de b7       	in	r29, 0x3e	; 62
	case SYSCLK_SRC_RC8MHZ:
		return 8000000UL;
#endif
	case SYSCLK_SRC_RC32MHZ:
#ifdef CONFIG_OSC_RC32_CAL
		return CONFIG_OSC_RC32_CAL;
    30de:	80 e0       	ldi	r24, 0x00	; 0
    30e0:	9c e6       	ldi	r25, 0x6C	; 108
    30e2:	ac ed       	ldi	r26, 0xDC	; 220
    30e4:	b2 e0       	ldi	r27, 0x02	; 2

	default:
		//unhandled_case(CONFIG_SYSCLK_SOURCE);
		return 0;
	}
}
    30e6:	bc 01       	movw	r22, r24
    30e8:	cd 01       	movw	r24, r26
    30ea:	df 91       	pop	r29
    30ec:	cf 91       	pop	r28
    30ee:	08 95       	ret

000030f0 <sysclk_get_per4_hz>:
 * This clock can run up to four times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER4 clock, in Hz.
 */
static inline uint32_t sysclk_get_per4_hz(void)
{
    30f0:	cf 93       	push	r28
    30f2:	df 93       	push	r29
    30f4:	1f 92       	push	r1
    30f6:	cd b7       	in	r28, 0x3d	; 61
    30f8:	de b7       	in	r29, 0x3e	; 62
	uint8_t shift = 0;
    30fa:	19 82       	std	Y+1, r1	; 0x01
				return 0;
		}
	}
#endif
	if (CONFIG_SYSCLK_PSADIV & (1U << CLK_PSADIV_gp)) {
		shift = (CONFIG_SYSCLK_PSADIV >> (1 + CLK_PSADIV_gp)) + 1;
    30fc:	81 e0       	ldi	r24, 0x01	; 1
    30fe:	89 83       	std	Y+1, r24	; 0x01
	}

	return sysclk_get_main_hz() >> shift;
    3100:	ea df       	rcall	.-44     	; 0x30d6 <sysclk_get_main_hz>
    3102:	dc 01       	movw	r26, r24
    3104:	cb 01       	movw	r24, r22
    3106:	29 81       	ldd	r18, Y+1	; 0x01
    3108:	22 2f       	mov	r18, r18
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	02 2e       	mov	r0, r18
    310e:	04 c0       	rjmp	.+8      	; 0x3118 <sysclk_get_per4_hz+0x28>
    3110:	b6 95       	lsr	r27
    3112:	a7 95       	ror	r26
    3114:	97 95       	ror	r25
    3116:	87 95       	ror	r24
    3118:	0a 94       	dec	r0
    311a:	d2 f7       	brpl	.-12     	; 0x3110 <sysclk_get_per4_hz+0x20>
}
    311c:	bc 01       	movw	r22, r24
    311e:	cd 01       	movw	r24, r26
    3120:	0f 90       	pop	r0
    3122:	df 91       	pop	r29
    3124:	cf 91       	pop	r28
    3126:	08 95       	ret

00003128 <sysclk_get_per2_hz>:
 * This clock can run up to two times faster than the CPU clock.
 *
 * \return Frequency of the clk_PER2 clock, in Hz.
 */
static inline uint32_t sysclk_get_per2_hz(void)
{
    3128:	cf 93       	push	r28
    312a:	df 93       	push	r29
    312c:	cd b7       	in	r28, 0x3d	; 61
    312e:	de b7       	in	r29, 0x3e	; 62
	switch (CONFIG_SYSCLK_PSBCDIV) {
	case SYSCLK_PSBCDIV_1_1: /* Fall through */
	case SYSCLK_PSBCDIV_1_2:
		return sysclk_get_per4_hz();
    3130:	df df       	rcall	.-66     	; 0x30f0 <sysclk_get_per4_hz>
    3132:	dc 01       	movw	r26, r24
    3134:	cb 01       	movw	r24, r22

	default:
		//unhandled_case(CONFIG_SYSCLK_PSBCDIV);
		return 0;
	}
}
    3136:	bc 01       	movw	r22, r24
    3138:	cd 01       	movw	r24, r26
    313a:	df 91       	pop	r29
    313c:	cf 91       	pop	r28
    313e:	08 95       	ret

00003140 <sysclk_get_per_hz>:
 * is set.
 *
 * \return Frequency of the clk_PER clock, in Hz.
 */
static inline uint32_t sysclk_get_per_hz(void)
{
    3140:	cf 93       	push	r28
    3142:	df 93       	push	r29
    3144:	cd b7       	in	r28, 0x3d	; 61
    3146:	de b7       	in	r29, 0x3e	; 62
	if (CONFIG_SYSCLK_PSBCDIV & (1U << CLK_PSBCDIV_gp))
		return sysclk_get_per2_hz() / 2;
	else
		return sysclk_get_per2_hz();
    3148:	ef df       	rcall	.-34     	; 0x3128 <sysclk_get_per2_hz>
    314a:	dc 01       	movw	r26, r24
    314c:	cb 01       	movw	r24, r22
}
    314e:	bc 01       	movw	r22, r24
    3150:	cd 01       	movw	r24, r26
    3152:	df 91       	pop	r29
    3154:	cf 91       	pop	r28
    3156:	08 95       	ret

00003158 <sysclk_get_cpu_hz>:
 * \brief Return the current rate in Hz of the CPU clock.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    3158:	cf 93       	push	r28
    315a:	df 93       	push	r29
    315c:	cd b7       	in	r28, 0x3d	; 61
    315e:	de b7       	in	r29, 0x3e	; 62
	return sysclk_get_per_hz();
    3160:	ef df       	rcall	.-34     	; 0x3140 <sysclk_get_per_hz>
    3162:	dc 01       	movw	r26, r24
    3164:	cb 01       	movw	r24, r22
}
    3166:	bc 01       	movw	r22, r24
    3168:	cd 01       	movw	r24, r26
    316a:	df 91       	pop	r29
    316c:	cf 91       	pop	r28
    316e:	08 95       	ret

00003170 <__portable_avr_delay_cycles>:
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    3170:	61 50       	subi	r22, 0x01	; 1
    3172:	71 09       	sbc	r23, r1
    3174:	81 09       	sbc	r24, r1
    3176:	91 09       	sbc	r25, r1
    3178:	d9 f7       	brne	.-10     	; 0x3170 <__portable_avr_delay_cycles>
}
    317a:	08 95       	ret

0000317c <ioport_toggle_pin>:
 * \brief Toggle the current state of a PORT pin
 *
 * \param pin A number identifying the pin to act on.
 */
static inline void ioport_toggle_pin(port_pin_t pin)
{
    317c:	cf 93       	push	r28
    317e:	df 93       	push	r29
    3180:	cd b7       	in	r28, 0x3d	; 61
    3182:	de b7       	in	r29, 0x3e	; 62
    3184:	28 97       	sbiw	r28, 0x08	; 8
    3186:	cd bf       	out	0x3d, r28	; 61
    3188:	de bf       	out	0x3e, r29	; 62
    318a:	88 87       	std	Y+8, r24	; 0x08
    318c:	88 85       	ldd	r24, Y+8	; 0x08
    318e:	89 83       	std	Y+1, r24	; 0x01
    3190:	89 81       	ldd	r24, Y+1	; 0x01
    3192:	8a 83       	std	Y+2, r24	; 0x02
    3194:	8a 81       	ldd	r24, Y+2	; 0x02
    3196:	8b 83       	std	Y+3, r24	; 0x03
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    3198:	8b 81       	ldd	r24, Y+3	; 0x03
    319a:	86 95       	lsr	r24
    319c:	86 95       	lsr	r24
    319e:	86 95       	lsr	r24
    31a0:	8c 83       	std	Y+4, r24	; 0x04
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    31a2:	8c 81       	ldd	r24, Y+4	; 0x04
    31a4:	88 2f       	mov	r24, r24
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	88 0f       	add	r24, r24
    31aa:	99 1f       	adc	r25, r25
    31ac:	82 95       	swap	r24
    31ae:	92 95       	swap	r25
    31b0:	90 7f       	andi	r25, 0xF0	; 240
    31b2:	98 27       	eor	r25, r24
    31b4:	80 7f       	andi	r24, 0xF0	; 240
    31b6:	98 27       	eor	r25, r24
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    31b8:	9a 5f       	subi	r25, 0xFA	; 250
	return base->IN & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
    31ba:	8d 83       	std	Y+5, r24	; 0x05
    31bc:	9e 83       	std	Y+6, r25	; 0x06
    31be:	89 81       	ldd	r24, Y+1	; 0x01
    31c0:	8f 83       	std	Y+7, r24	; 0x07
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    31c2:	8f 81       	ldd	r24, Y+7	; 0x07
    31c4:	88 2f       	mov	r24, r24
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	9c 01       	movw	r18, r24
    31ca:	27 70       	andi	r18, 0x07	; 7
    31cc:	33 27       	eor	r19, r19
    31ce:	81 e0       	ldi	r24, 0x01	; 1
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	02 c0       	rjmp	.+4      	; 0x31d8 <ioport_toggle_pin+0x5c>
    31d4:	88 0f       	add	r24, r24
    31d6:	99 1f       	adc	r25, r25
    31d8:	2a 95       	dec	r18
    31da:	e2 f7       	brpl	.-8      	; 0x31d4 <ioport_toggle_pin+0x58>

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    31dc:	28 2f       	mov	r18, r24
    31de:	8d 81       	ldd	r24, Y+5	; 0x05
    31e0:	9e 81       	ldd	r25, Y+6	; 0x06
    31e2:	fc 01       	movw	r30, r24
    31e4:	27 83       	std	Z+7, r18	; 0x07
	arch_ioport_toggle_pin_level(pin);
}
    31e6:	28 96       	adiw	r28, 0x08	; 8
    31e8:	cd bf       	out	0x3d, r28	; 61
    31ea:	de bf       	out	0x3e, r29	; 62
    31ec:	df 91       	pop	r29
    31ee:	cf 91       	pop	r28
    31f0:	08 95       	ret

000031f2 <pmic_init>:
 *
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
    31f2:	cf 93       	push	r28
    31f4:	df 93       	push	r29
    31f6:	cd b7       	in	r28, 0x3d	; 61
    31f8:	de b7       	in	r29, 0x3e	; 62
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    31fa:	80 ea       	ldi	r24, 0xA0	; 160
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	27 e0       	ldi	r18, 0x07	; 7
    3200:	fc 01       	movw	r30, r24
    3202:	22 83       	std	Z+2, r18	; 0x02
			PMIC_LVL_HIGH;
}
    3204:	df 91       	pop	r29
    3206:	cf 91       	pop	r28
    3208:	08 95       	ret

0000320a <usart_set_rx_interrupt_level>:
 * \param usart Pointer to the USART module.
 * \param level Interrupt level of the RXD interrupt.
 */
static inline void usart_set_rx_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
    320a:	cf 93       	push	r28
    320c:	df 93       	push	r29
    320e:	00 d0       	rcall	.+0      	; 0x3210 <usart_set_rx_interrupt_level+0x6>
    3210:	cd b7       	in	r28, 0x3d	; 61
    3212:	de b7       	in	r29, 0x3e	; 62
    3214:	89 83       	std	Y+1, r24	; 0x01
    3216:	9a 83       	std	Y+2, r25	; 0x02
    3218:	6b 83       	std	Y+3, r22	; 0x03
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_RXCINTLVL_gm) |
    321a:	89 81       	ldd	r24, Y+1	; 0x01
    321c:	9a 81       	ldd	r25, Y+2	; 0x02
    321e:	fc 01       	movw	r30, r24
    3220:	83 81       	ldd	r24, Z+3	; 0x03
    3222:	28 2f       	mov	r18, r24
    3224:	2f 7c       	andi	r18, 0xCF	; 207
			(level << USART_RXCINTLVL_gp);
    3226:	8b 81       	ldd	r24, Y+3	; 0x03
    3228:	88 2f       	mov	r24, r24
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	82 95       	swap	r24
    322e:	92 95       	swap	r25
    3230:	90 7f       	andi	r25, 0xF0	; 240
    3232:	98 27       	eor	r25, r24
    3234:	80 7f       	andi	r24, 0xF0	; 240
    3236:	98 27       	eor	r25, r24
 * \param level Interrupt level of the RXD interrupt.
 */
static inline void usart_set_rx_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_RXCINTLVL_gm) |
    3238:	82 2b       	or	r24, r18
    323a:	28 2f       	mov	r18, r24
    323c:	89 81       	ldd	r24, Y+1	; 0x01
    323e:	9a 81       	ldd	r25, Y+2	; 0x02
    3240:	fc 01       	movw	r30, r24
    3242:	23 83       	std	Z+3, r18	; 0x03
			(level << USART_RXCINTLVL_gp);
}
    3244:	23 96       	adiw	r28, 0x03	; 3
    3246:	cd bf       	out	0x3d, r28	; 61
    3248:	de bf       	out	0x3e, r29	; 62
    324a:	df 91       	pop	r29
    324c:	cf 91       	pop	r28
    324e:	08 95       	ret

00003250 <usart_set_tx_interrupt_level>:
 * \param usart Pointer to the USART module.
 * \param level Interrupt level of the TXD interrupt.
 */
static inline void usart_set_tx_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
    3250:	cf 93       	push	r28
    3252:	df 93       	push	r29
    3254:	00 d0       	rcall	.+0      	; 0x3256 <usart_set_tx_interrupt_level+0x6>
    3256:	cd b7       	in	r28, 0x3d	; 61
    3258:	de b7       	in	r29, 0x3e	; 62
    325a:	89 83       	std	Y+1, r24	; 0x01
    325c:	9a 83       	std	Y+2, r25	; 0x02
    325e:	6b 83       	std	Y+3, r22	; 0x03
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_TXCINTLVL_gm) |
    3260:	89 81       	ldd	r24, Y+1	; 0x01
    3262:	9a 81       	ldd	r25, Y+2	; 0x02
    3264:	fc 01       	movw	r30, r24
    3266:	83 81       	ldd	r24, Z+3	; 0x03
    3268:	28 2f       	mov	r18, r24
    326a:	23 7f       	andi	r18, 0xF3	; 243
			(level << USART_TXCINTLVL_gp);
    326c:	8b 81       	ldd	r24, Y+3	; 0x03
    326e:	88 2f       	mov	r24, r24
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	88 0f       	add	r24, r24
    3274:	99 1f       	adc	r25, r25
    3276:	88 0f       	add	r24, r24
    3278:	99 1f       	adc	r25, r25
 * \param level Interrupt level of the TXD interrupt.
 */
static inline void usart_set_tx_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_TXCINTLVL_gm) |
    327a:	82 2b       	or	r24, r18
    327c:	28 2f       	mov	r18, r24
    327e:	89 81       	ldd	r24, Y+1	; 0x01
    3280:	9a 81       	ldd	r25, Y+2	; 0x02
    3282:	fc 01       	movw	r30, r24
    3284:	23 83       	std	Z+3, r18	; 0x03
			(level << USART_TXCINTLVL_gp);
}
    3286:	23 96       	adiw	r28, 0x03	; 3
    3288:	cd bf       	out	0x3d, r28	; 61
    328a:	de bf       	out	0x3e, r29	; 62
    328c:	df 91       	pop	r29
    328e:	cf 91       	pop	r28
    3290:	08 95       	ret

00003292 <main>:
#include "devices/Alphasense/alphasense.h"
#include "devices/DS18B20/DS18B20.h"
#include "devices/PM10Qbit/PM10Qbit.h"

int main (void)
{
    3292:	2f 92       	push	r2
    3294:	3f 92       	push	r3
    3296:	4f 92       	push	r4
    3298:	5f 92       	push	r5
    329a:	6f 92       	push	r6
    329c:	7f 92       	push	r7
    329e:	8f 92       	push	r8
    32a0:	9f 92       	push	r9
    32a2:	af 92       	push	r10
    32a4:	bf 92       	push	r11
    32a6:	cf 92       	push	r12
    32a8:	df 92       	push	r13
    32aa:	ef 92       	push	r14
    32ac:	ff 92       	push	r15
    32ae:	0f 93       	push	r16
    32b0:	1f 93       	push	r17
    32b2:	cf 93       	push	r28
    32b4:	df 93       	push	r29
    32b6:	cd b7       	in	r28, 0x3d	; 61
    32b8:	de b7       	in	r29, 0x3e	; 62
    32ba:	c1 55       	subi	r28, 0x51	; 81
    32bc:	d1 09       	sbc	r29, r1
    32be:	cd bf       	out	0x3d, r28	; 61
    32c0:	de bf       	out	0x3e, r29	; 62

	//Setting this variable we can decide the amount of info to send
	//at the Debug facility. Compiling the firmware in Release may
	//disable it
	g_log_verbosity = VERBOSE;
    32c2:	82 e0       	ldi	r24, 0x02	; 2
    32c4:	80 93 1d 20 	sts	0x201D, r24

	/* Initialize the board.
	 * The board-specific conf_board.h file contains the configuration of
	 * the board initialization.
	 */
	sleepmgr_init();
    32c8:	eb de       	rcall	.-554    	; 0x30a0 <sleepmgr_init>
	sysclk_init();
    32ca:	0e 94 b9 5a 	call	0xb572	; 0xb572 <sysclk_init>

	board_init();
    32ce:	0e 94 7b 55 	call	0xaaf6	; 0xaaf6 <board_init>
	VBusMon_init();
    32d2:	0e 94 4b 4b 	call	0x9696	; 0x9696 <VBusMon_init>
	pmic_init(); 
    32d6:	8d df       	rcall	.-230    	; 0x31f2 <pmic_init>


	//Enables the Event module
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS); 
    32d8:	62 e0       	ldi	r22, 0x02	; 2
    32da:	80 e0       	ldi	r24, 0x00	; 0
    32dc:	0e 94 06 5b 	call	0xb60c	; 0xb60c <sysclk_enable_module>
		.stopbits = USART_STOP_BIT
	};


	//Configure the Debug facilty
	sysclk_enable_module(SYSCLK_PORT_F,PR_USART0_bm);
    32e0:	60 e1       	ldi	r22, 0x10	; 16
    32e2:	86 e0       	ldi	r24, 0x06	; 6
    32e4:	0e 94 06 5b 	call	0xb60c	; 0xb60c <sysclk_enable_module>
	usart_init_rs232(USART_DEBUG, &USART_SERIAL_OPTIONS);
    32e8:	60 e0       	ldi	r22, 0x00	; 0
    32ea:	70 e2       	ldi	r23, 0x20	; 32
    32ec:	80 ea       	ldi	r24, 0xA0	; 160
    32ee:	9b e0       	ldi	r25, 0x0B	; 11
    32f0:	0e 94 da 69 	call	0xd3b4	; 0xd3b4 <usart_init_rs232>


	//After that the Debug facilty has been configured
	//report the Power On event on it
	debug_string(NORMAL,PSTR ("Power On\r\n"),true);
    32f4:	8c ef       	ldi	r24, 0xFC	; 252
    32f6:	91 e0       	ldi	r25, 0x01	; 1
    32f8:	41 e0       	ldi	r20, 0x01	; 1
    32fa:	bc 01       	movw	r22, r24
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>


	if(g_log_verbosity>=NORMAL) {
    3302:	80 91 1d 20 	lds	r24, 0x201D
    3306:	88 23       	and	r24, r24
    3308:	c1 f0       	breq	.+48     	; 0x333a <main+0xa8>
		debug_string(NORMAL,PSTR ("MCU Revision : "),true);
    330a:	87 e0       	ldi	r24, 0x07	; 7
    330c:	92 e0       	ldi	r25, 0x02	; 2
    330e:	41 e0       	ldi	r20, 0x01	; 1
    3310:	bc 01       	movw	r22, r24
    3312:	81 e0       	ldi	r24, 0x01	; 1
    3314:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
		usart_putchar(USART_DEBUG,'A'+(MCU.REVID & 0x0F));
    3318:	80 e9       	ldi	r24, 0x90	; 144
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	fc 01       	movw	r30, r24
    331e:	83 81       	ldd	r24, Z+3	; 0x03
    3320:	8f 70       	andi	r24, 0x0F	; 15
    3322:	8f 5b       	subi	r24, 0xBF	; 191
    3324:	68 2f       	mov	r22, r24
    3326:	80 ea       	ldi	r24, 0xA0	; 160
    3328:	9b e0       	ldi	r25, 0x0B	; 11
    332a:	0e 94 f2 68 	call	0xd1e4	; 0xd1e4 <usart_putchar>
		debug_string(NORMAL,szCRLF,true);
    332e:	41 e0       	ldi	r20, 0x01	; 1
    3330:	69 e1       	ldi	r22, 0x19	; 25
    3332:	70 e2       	ldi	r23, 0x20	; 32
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
	}

	//Initialize the RTC 
	// Workaround for known issue: Enable RTC32 sysclk
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    333a:	64 e0       	ldi	r22, 0x04	; 4
    333c:	80 e0       	ldi	r24, 0x00	; 0
    333e:	0e 94 06 5b 	call	0xb60c	; 0xb60c <sysclk_enable_module>
	while (RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm) {
    3342:	00 00       	nop
    3344:	80 e2       	ldi	r24, 0x20	; 32
    3346:	94 e0       	ldi	r25, 0x04	; 4
    3348:	fc 01       	movw	r30, r24
    334a:	81 81       	ldd	r24, Z+1	; 0x01
    334c:	88 2f       	mov	r24, r24
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	81 70       	andi	r24, 0x01	; 1
    3352:	99 27       	eor	r25, r25
    3354:	00 97       	sbiw	r24, 0x00	; 0
    3356:	b1 f7       	brne	.-20     	; 0x3344 <main+0xb2>
		// Wait for RTC32 sysclk to become stable
	}

	// If we have battery power and RTC is running, don't initialize RTC32
	if (rtc_vbat_system_check(false) != VBAT_STATUS_OK) {
    3358:	80 e0       	ldi	r24, 0x00	; 0
    335a:	0e 94 8e 5f 	call	0xbf1c	; 0xbf1c <rtc_vbat_system_check>
    335e:	88 23       	and	r24, r24
    3360:	39 f0       	breq	.+14     	; 0x3370 <main+0xde>
		rtc_init();
    3362:	0e 94 b9 5f 	call	0xbf72	; 0xbf72 <rtc_init>
		// Set current time to default
		rtc_set_time(0);
    3366:	60 e0       	ldi	r22, 0x00	; 0
    3368:	70 e0       	ldi	r23, 0x00	; 0
    336a:	cb 01       	movw	r24, r22
    336c:	0e 94 56 5f 	call	0xbeac	; 0xbeac <rtc_set_time>
	}


	debug_string(NORMAL,PSTR("Enabling oscilator for DFLL\r\n"),true);
    3370:	87 e1       	ldi	r24, 0x17	; 23
    3372:	92 e0       	ldi	r25, 0x02	; 2
    3374:	41 e0       	ldi	r20, 0x01	; 1
    3376:	bc 01       	movw	r22, r24
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>

	irqflags_t flags = cpu_irq_save();
    337e:	71 de       	rcall	.-798    	; 0x3062 <cpu_irq_save>
    3380:	89 83       	std	Y+1, r24	; 0x01
	OSC.XOSCCTRL |= 0x02;
    3382:	80 e5       	ldi	r24, 0x50	; 80
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	20 e5       	ldi	r18, 0x50	; 80
    3388:	30 e0       	ldi	r19, 0x00	; 0
    338a:	f9 01       	movw	r30, r18
    338c:	22 81       	ldd	r18, Z+2	; 0x02
    338e:	22 60       	ori	r18, 0x02	; 2
    3390:	fc 01       	movw	r30, r24
    3392:	22 83       	std	Z+2, r18	; 0x02
	OSC.CTRL |= 0x08;
    3394:	80 e5       	ldi	r24, 0x50	; 80
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	20 e5       	ldi	r18, 0x50	; 80
    339a:	30 e0       	ldi	r19, 0x00	; 0
    339c:	f9 01       	movw	r30, r18
    339e:	20 81       	ld	r18, Z
    33a0:	28 60       	ori	r18, 0x08	; 8
    33a2:	fc 01       	movw	r30, r24
    33a4:	20 83       	st	Z, r18
	cpu_irq_restore(flags);
    33a6:	89 81       	ldd	r24, Y+1	; 0x01
    33a8:	6c de       	rcall	.-808    	; 0x3082 <cpu_irq_restore>

	do {} while (!(OSC.STATUS & 0x08));
    33aa:	80 e5       	ldi	r24, 0x50	; 80
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	fc 01       	movw	r30, r24
    33b0:	81 81       	ldd	r24, Z+1	; 0x01
    33b2:	88 2f       	mov	r24, r24
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	88 70       	andi	r24, 0x08	; 8
    33b8:	99 27       	eor	r25, r25
    33ba:	00 97       	sbiw	r24, 0x00	; 0
    33bc:	b1 f3       	breq	.-20     	; 0x33aa <main+0x118>
	debug_string(NORMAL,PSTR("oscilator ok\r\n"),true);
    33be:	85 e3       	ldi	r24, 0x35	; 53
    33c0:	92 e0       	ldi	r25, 0x02	; 2
    33c2:	41 e0       	ldi	r20, 0x01	; 1
    33c4:	bc 01       	movw	r22, r24
    33c6:	81 e0       	ldi	r24, 0x01	; 1
    33c8:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
//here just for testing purposes
#ifdef DEBUG

	char buf[64];
	
	debug_string(NORMAL,PSTR("\r\nsizeof(void *) = "),true);
    33cc:	84 e4       	ldi	r24, 0x44	; 68
    33ce:	92 e0       	ldi	r25, 0x02	; 2
    33d0:	41 e0       	ldi	r20, 0x01	; 1
    33d2:	bc 01       	movw	r22, r24
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
	itoa(sizeof(void *),buf,10);
    33da:	ce 01       	movw	r24, r28
    33dc:	02 96       	adiw	r24, 0x02	; 2
    33de:	4a e0       	ldi	r20, 0x0A	; 10
    33e0:	50 e0       	ldi	r21, 0x00	; 0
    33e2:	bc 01       	movw	r22, r24
    33e4:	82 e0       	ldi	r24, 0x02	; 2
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	0e 94 60 74 	call	0xe8c0	; 0xe8c0 <itoa>
	debug_string(NORMAL,buf,false);
    33ec:	ce 01       	movw	r24, r28
    33ee:	02 96       	adiw	r24, 0x02	; 2
    33f0:	40 e0       	ldi	r20, 0x00	; 0
    33f2:	bc 01       	movw	r22, r24
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>

	debug_string(NORMAL,PSTR("\r\nsizeof(flash_addr_t) = "),true);
    33fa:	88 e5       	ldi	r24, 0x58	; 88
    33fc:	92 e0       	ldi	r25, 0x02	; 2
    33fe:	41 e0       	ldi	r20, 0x01	; 1
    3400:	bc 01       	movw	r22, r24
    3402:	81 e0       	ldi	r24, 0x01	; 1
    3404:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
	itoa(sizeof(flash_addr_t),buf,10);
    3408:	ce 01       	movw	r24, r28
    340a:	02 96       	adiw	r24, 0x02	; 2
    340c:	4a e0       	ldi	r20, 0x0A	; 10
    340e:	50 e0       	ldi	r21, 0x00	; 0
    3410:	bc 01       	movw	r22, r24
    3412:	84 e0       	ldi	r24, 0x04	; 4
    3414:	90 e0       	ldi	r25, 0x00	; 0
    3416:	0e 94 60 74 	call	0xe8c0	; 0xe8c0 <itoa>
	debug_string(NORMAL,buf,false);
    341a:	ce 01       	movw	r24, r28
    341c:	02 96       	adiw	r24, 0x02	; 2
    341e:	40 e0       	ldi	r20, 0x00	; 0
    3420:	bc 01       	movw	r22, r24
    3422:	81 e0       	ldi	r24, 0x01	; 1
    3424:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>


#ifndef SIM900_USART_POLLED
	debug_string(NORMAL,PSTR ("\r\nCompiled as DEBUG, start the GPRS UART in main\r\n"),true);
    3428:	82 e7       	ldi	r24, 0x72	; 114
    342a:	92 e0       	ldi	r25, 0x02	; 2
    342c:	41 e0       	ldi	r20, 0x01	; 1
    342e:	bc 01       	movw	r22, r24
    3430:	81 e0       	ldi	r24, 0x01	; 1
    3432:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
	usart_interruptdriver_initialize(&sim900_usart_data,USART_GPRS,USART_INT_LVL_LO);
    3436:	41 e0       	ldi	r20, 0x01	; 1
    3438:	60 ea       	ldi	r22, 0xA0	; 160
    343a:	7a e0       	ldi	r23, 0x0A	; 10
    343c:	84 e3       	ldi	r24, 0x34	; 52
    343e:	97 e2       	ldi	r25, 0x27	; 39
    3440:	0e 94 52 55 	call	0xaaa4	; 0xaaa4 <usart_interruptdriver_initialize>
	//usart_set_dre_interrupt_level(USART_SERIAL_GPRS,USART_INT_LVL_LO);
	usart_set_rx_interrupt_level(USART_GPRS,USART_INT_LVL_LO);
    3444:	61 e0       	ldi	r22, 0x01	; 1
    3446:	80 ea       	ldi	r24, 0xA0	; 160
    3448:	9a e0       	ldi	r25, 0x0A	; 10
    344a:	df de       	rcall	.-578    	; 0x320a <usart_set_rx_interrupt_level>
	usart_set_tx_interrupt_level(USART_GPRS,USART_INT_LVL_OFF);
    344c:	60 e0       	ldi	r22, 0x00	; 0
    344e:	80 ea       	ldi	r24, 0xA0	; 160
    3450:	9a e0       	ldi	r25, 0x0A	; 10
    3452:	fe de       	rcall	.-516    	; 0x3250 <usart_set_tx_interrupt_level>
#endif

#endif


	cpu_irq_enable();
    3454:	78 94       	sei
	VBusMon_check();
    3456:	0e 94 59 4b 	call	0x96b2	; 0x96b2 <VBusMon_check>

	raingauge_init();
    345a:	0e 94 b4 4a 	call	0x9568	; 0x9568 <raingauge_init>
	dump_rainstats_to_log(0);
    345e:	80 e0       	ldi	r24, 0x00	; 0
    3460:	0e 94 1a 5a 	call	0xb434	; 0xb434 <dump_rainstats_to_log>
	
	

	if(0==datalogger_init()) {
    3464:	0e 94 55 28 	call	0x50aa	; 0x50aa <datalogger_init>
    3468:	88 23       	and	r24, r24
    346a:	21 f4       	brne	.+8      	; 0x3474 <main+0x1e2>
		PM10Qbit_init();
    346c:	0e 94 29 49 	call	0x9252	; 0x9252 <PM10Qbit_init>
		datalogger_run();
    3470:	0e 94 18 42 	call	0x8430	; 0x8430 <datalogger_run>
	
	
	
	while (1)
	{
		gpio_toggle_pin(STATUS_LED_PIN);
    3474:	88 e1       	ldi	r24, 0x18	; 24
    3476:	82 de       	rcall	.-764    	; 0x317c <ioport_toggle_pin>
		delay_ms(500);
    3478:	6f de       	rcall	.-802    	; 0x3158 <sysclk_get_cpu_hz>
    347a:	dc 01       	movw	r26, r24
    347c:	cb 01       	movw	r24, r22
    347e:	8c 01       	movw	r16, r24
    3480:	9d 01       	movw	r18, r26
    3482:	40 e0       	ldi	r20, 0x00	; 0
    3484:	50 e0       	ldi	r21, 0x00	; 0
    3486:	ba 01       	movw	r22, r20
    3488:	23 96       	adiw	r28, 0x03	; 3
    348a:	0f af       	std	Y+63, r16	; 0x3f
    348c:	23 97       	sbiw	r28, 0x03	; 3
    348e:	24 96       	adiw	r28, 0x04	; 4
    3490:	1f af       	std	Y+63, r17	; 0x3f
    3492:	24 97       	sbiw	r28, 0x04	; 4
    3494:	25 96       	adiw	r28, 0x05	; 5
    3496:	2f af       	std	Y+63, r18	; 0x3f
    3498:	25 97       	sbiw	r28, 0x05	; 5
    349a:	26 96       	adiw	r28, 0x06	; 6
    349c:	3f af       	std	Y+63, r19	; 0x3f
    349e:	26 97       	sbiw	r28, 0x06	; 6
    34a0:	27 96       	adiw	r28, 0x07	; 7
    34a2:	4f af       	std	Y+63, r20	; 0x3f
    34a4:	27 97       	sbiw	r28, 0x07	; 7
    34a6:	28 96       	adiw	r28, 0x08	; 8
    34a8:	5f af       	std	Y+63, r21	; 0x3f
    34aa:	28 97       	sbiw	r28, 0x08	; 8
    34ac:	29 96       	adiw	r28, 0x09	; 9
    34ae:	6f af       	std	Y+63, r22	; 0x3f
    34b0:	29 97       	sbiw	r28, 0x09	; 9
    34b2:	2a 96       	adiw	r28, 0x0a	; 10
    34b4:	7f af       	std	Y+63, r23	; 0x3f
    34b6:	2a 97       	sbiw	r28, 0x0a	; 10
    34b8:	23 96       	adiw	r28, 0x03	; 3
    34ba:	1f ad       	ldd	r17, Y+63	; 0x3f
    34bc:	23 97       	sbiw	r28, 0x03	; 3
    34be:	2b 96       	adiw	r28, 0x0b	; 11
    34c0:	1f af       	std	Y+63, r17	; 0x3f
    34c2:	2b 97       	sbiw	r28, 0x0b	; 11
    34c4:	24 96       	adiw	r28, 0x04	; 4
    34c6:	2f ad       	ldd	r18, Y+63	; 0x3f
    34c8:	24 97       	sbiw	r28, 0x04	; 4
    34ca:	2c 96       	adiw	r28, 0x0c	; 12
    34cc:	2f af       	std	Y+63, r18	; 0x3f
    34ce:	2c 97       	sbiw	r28, 0x0c	; 12
    34d0:	25 96       	adiw	r28, 0x05	; 5
    34d2:	3f ad       	ldd	r19, Y+63	; 0x3f
    34d4:	25 97       	sbiw	r28, 0x05	; 5
    34d6:	2d 96       	adiw	r28, 0x0d	; 13
    34d8:	3f af       	std	Y+63, r19	; 0x3f
    34da:	2d 97       	sbiw	r28, 0x0d	; 13
    34dc:	26 96       	adiw	r28, 0x06	; 6
    34de:	4f ad       	ldd	r20, Y+63	; 0x3f
    34e0:	26 97       	sbiw	r28, 0x06	; 6
    34e2:	2e 96       	adiw	r28, 0x0e	; 14
    34e4:	4f af       	std	Y+63, r20	; 0x3f
    34e6:	2e 97       	sbiw	r28, 0x0e	; 14
    34e8:	27 96       	adiw	r28, 0x07	; 7
    34ea:	5f ad       	ldd	r21, Y+63	; 0x3f
    34ec:	27 97       	sbiw	r28, 0x07	; 7
    34ee:	2f 96       	adiw	r28, 0x0f	; 15
    34f0:	5f af       	std	Y+63, r21	; 0x3f
    34f2:	2f 97       	sbiw	r28, 0x0f	; 15
    34f4:	28 96       	adiw	r28, 0x08	; 8
    34f6:	6f ad       	ldd	r22, Y+63	; 0x3f
    34f8:	28 97       	sbiw	r28, 0x08	; 8
    34fa:	60 96       	adiw	r28, 0x10	; 16
    34fc:	6f af       	std	Y+63, r22	; 0x3f
    34fe:	60 97       	sbiw	r28, 0x10	; 16
    3500:	29 96       	adiw	r28, 0x09	; 9
    3502:	7f ad       	ldd	r23, Y+63	; 0x3f
    3504:	29 97       	sbiw	r28, 0x09	; 9
    3506:	61 96       	adiw	r28, 0x11	; 17
    3508:	7f af       	std	Y+63, r23	; 0x3f
    350a:	61 97       	sbiw	r28, 0x11	; 17
    350c:	2a 96       	adiw	r28, 0x0a	; 10
    350e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3510:	2a 97       	sbiw	r28, 0x0a	; 10
    3512:	62 96       	adiw	r28, 0x12	; 18
    3514:	8f af       	std	Y+63, r24	; 0x3f
    3516:	62 97       	sbiw	r28, 0x12	; 18
    3518:	2b 96       	adiw	r28, 0x0b	; 11
    351a:	2f ad       	ldd	r18, Y+63	; 0x3f
    351c:	2b 97       	sbiw	r28, 0x0b	; 11
    351e:	2c 96       	adiw	r28, 0x0c	; 12
    3520:	3f ad       	ldd	r19, Y+63	; 0x3f
    3522:	2c 97       	sbiw	r28, 0x0c	; 12
    3524:	2d 96       	adiw	r28, 0x0d	; 13
    3526:	4f ad       	ldd	r20, Y+63	; 0x3f
    3528:	2d 97       	sbiw	r28, 0x0d	; 13
    352a:	2e 96       	adiw	r28, 0x0e	; 14
    352c:	5f ad       	ldd	r21, Y+63	; 0x3f
    352e:	2e 97       	sbiw	r28, 0x0e	; 14
    3530:	2f 96       	adiw	r28, 0x0f	; 15
    3532:	6f ad       	ldd	r22, Y+63	; 0x3f
    3534:	2f 97       	sbiw	r28, 0x0f	; 15
    3536:	60 96       	adiw	r28, 0x10	; 16
    3538:	7f ad       	ldd	r23, Y+63	; 0x3f
    353a:	60 97       	sbiw	r28, 0x10	; 16
    353c:	61 96       	adiw	r28, 0x11	; 17
    353e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3540:	61 97       	sbiw	r28, 0x11	; 17
    3542:	62 96       	adiw	r28, 0x12	; 18
    3544:	9f ad       	ldd	r25, Y+63	; 0x3f
    3546:	62 97       	sbiw	r28, 0x12	; 18
    3548:	02 e0       	ldi	r16, 0x02	; 2
    354a:	0e 94 a2 72 	call	0xe544	; 0xe544 <__ashldi3>
    354e:	a2 2e       	mov	r10, r18
    3550:	b3 2e       	mov	r11, r19
    3552:	c4 2e       	mov	r12, r20
    3554:	d5 2e       	mov	r13, r21
    3556:	e6 2e       	mov	r14, r22
    3558:	f7 2e       	mov	r15, r23
    355a:	08 2f       	mov	r16, r24
    355c:	19 2f       	mov	r17, r25
    355e:	2b 96       	adiw	r28, 0x0b	; 11
    3560:	af ae       	std	Y+63, r10	; 0x3f
    3562:	2b 97       	sbiw	r28, 0x0b	; 11
    3564:	2c 96       	adiw	r28, 0x0c	; 12
    3566:	bf ae       	std	Y+63, r11	; 0x3f
    3568:	2c 97       	sbiw	r28, 0x0c	; 12
    356a:	2d 96       	adiw	r28, 0x0d	; 13
    356c:	cf ae       	std	Y+63, r12	; 0x3f
    356e:	2d 97       	sbiw	r28, 0x0d	; 13
    3570:	2e 96       	adiw	r28, 0x0e	; 14
    3572:	df ae       	std	Y+63, r13	; 0x3f
    3574:	2e 97       	sbiw	r28, 0x0e	; 14
    3576:	2f 96       	adiw	r28, 0x0f	; 15
    3578:	ef ae       	std	Y+63, r14	; 0x3f
    357a:	2f 97       	sbiw	r28, 0x0f	; 15
    357c:	60 96       	adiw	r28, 0x10	; 16
    357e:	ff ae       	std	Y+63, r15	; 0x3f
    3580:	60 97       	sbiw	r28, 0x10	; 16
    3582:	61 96       	adiw	r28, 0x11	; 17
    3584:	0f af       	std	Y+63, r16	; 0x3f
    3586:	61 97       	sbiw	r28, 0x11	; 17
    3588:	62 96       	adiw	r28, 0x12	; 18
    358a:	1f af       	std	Y+63, r17	; 0x3f
    358c:	62 97       	sbiw	r28, 0x12	; 18
    358e:	2b 96       	adiw	r28, 0x0b	; 11
    3590:	2f ad       	ldd	r18, Y+63	; 0x3f
    3592:	2b 97       	sbiw	r28, 0x0b	; 11
    3594:	2c 96       	adiw	r28, 0x0c	; 12
    3596:	3f ad       	ldd	r19, Y+63	; 0x3f
    3598:	2c 97       	sbiw	r28, 0x0c	; 12
    359a:	2d 96       	adiw	r28, 0x0d	; 13
    359c:	4f ad       	ldd	r20, Y+63	; 0x3f
    359e:	2d 97       	sbiw	r28, 0x0d	; 13
    35a0:	2e 96       	adiw	r28, 0x0e	; 14
    35a2:	5f ad       	ldd	r21, Y+63	; 0x3f
    35a4:	2e 97       	sbiw	r28, 0x0e	; 14
    35a6:	2f 96       	adiw	r28, 0x0f	; 15
    35a8:	6f ad       	ldd	r22, Y+63	; 0x3f
    35aa:	2f 97       	sbiw	r28, 0x0f	; 15
    35ac:	60 96       	adiw	r28, 0x10	; 16
    35ae:	7f ad       	ldd	r23, Y+63	; 0x3f
    35b0:	60 97       	sbiw	r28, 0x10	; 16
    35b2:	61 96       	adiw	r28, 0x11	; 17
    35b4:	8f ad       	ldd	r24, Y+63	; 0x3f
    35b6:	61 97       	sbiw	r28, 0x11	; 17
    35b8:	62 96       	adiw	r28, 0x12	; 18
    35ba:	9f ad       	ldd	r25, Y+63	; 0x3f
    35bc:	62 97       	sbiw	r28, 0x12	; 18
    35be:	05 e0       	ldi	r16, 0x05	; 5
    35c0:	0e 94 a2 72 	call	0xe544	; 0xe544 <__ashldi3>
    35c4:	22 2e       	mov	r2, r18
    35c6:	33 2e       	mov	r3, r19
    35c8:	44 2e       	mov	r4, r20
    35ca:	55 2e       	mov	r5, r21
    35cc:	66 2e       	mov	r6, r22
    35ce:	77 2e       	mov	r7, r23
    35d0:	88 2e       	mov	r8, r24
    35d2:	99 2e       	mov	r9, r25
    35d4:	22 2d       	mov	r18, r2
    35d6:	33 2d       	mov	r19, r3
    35d8:	44 2d       	mov	r20, r4
    35da:	55 2d       	mov	r21, r5
    35dc:	66 2d       	mov	r22, r6
    35de:	77 2d       	mov	r23, r7
    35e0:	88 2d       	mov	r24, r8
    35e2:	99 2d       	mov	r25, r9
    35e4:	2b 96       	adiw	r28, 0x0b	; 11
    35e6:	af ac       	ldd	r10, Y+63	; 0x3f
    35e8:	2b 97       	sbiw	r28, 0x0b	; 11
    35ea:	2c 96       	adiw	r28, 0x0c	; 12
    35ec:	bf ac       	ldd	r11, Y+63	; 0x3f
    35ee:	2c 97       	sbiw	r28, 0x0c	; 12
    35f0:	2d 96       	adiw	r28, 0x0d	; 13
    35f2:	cf ac       	ldd	r12, Y+63	; 0x3f
    35f4:	2d 97       	sbiw	r28, 0x0d	; 13
    35f6:	2e 96       	adiw	r28, 0x0e	; 14
    35f8:	df ac       	ldd	r13, Y+63	; 0x3f
    35fa:	2e 97       	sbiw	r28, 0x0e	; 14
    35fc:	2f 96       	adiw	r28, 0x0f	; 15
    35fe:	ef ac       	ldd	r14, Y+63	; 0x3f
    3600:	2f 97       	sbiw	r28, 0x0f	; 15
    3602:	60 96       	adiw	r28, 0x10	; 16
    3604:	ff ac       	ldd	r15, Y+63	; 0x3f
    3606:	60 97       	sbiw	r28, 0x10	; 16
    3608:	61 96       	adiw	r28, 0x11	; 17
    360a:	0f ad       	ldd	r16, Y+63	; 0x3f
    360c:	61 97       	sbiw	r28, 0x11	; 17
    360e:	62 96       	adiw	r28, 0x12	; 18
    3610:	1f ad       	ldd	r17, Y+63	; 0x3f
    3612:	62 97       	sbiw	r28, 0x12	; 18
    3614:	0e 94 ba 72 	call	0xe574	; 0xe574 <__subdi3>
    3618:	22 2e       	mov	r2, r18
    361a:	33 2e       	mov	r3, r19
    361c:	44 2e       	mov	r4, r20
    361e:	55 2e       	mov	r5, r21
    3620:	66 2e       	mov	r6, r22
    3622:	77 2e       	mov	r7, r23
    3624:	88 2e       	mov	r8, r24
    3626:	99 2e       	mov	r9, r25
    3628:	22 2d       	mov	r18, r2
    362a:	33 2d       	mov	r19, r3
    362c:	44 2d       	mov	r20, r4
    362e:	55 2d       	mov	r21, r5
    3630:	66 2d       	mov	r22, r6
    3632:	77 2d       	mov	r23, r7
    3634:	88 2d       	mov	r24, r8
    3636:	99 2d       	mov	r25, r9
    3638:	23 96       	adiw	r28, 0x03	; 3
    363a:	af ac       	ldd	r10, Y+63	; 0x3f
    363c:	23 97       	sbiw	r28, 0x03	; 3
    363e:	24 96       	adiw	r28, 0x04	; 4
    3640:	bf ac       	ldd	r11, Y+63	; 0x3f
    3642:	24 97       	sbiw	r28, 0x04	; 4
    3644:	25 96       	adiw	r28, 0x05	; 5
    3646:	cf ac       	ldd	r12, Y+63	; 0x3f
    3648:	25 97       	sbiw	r28, 0x05	; 5
    364a:	26 96       	adiw	r28, 0x06	; 6
    364c:	df ac       	ldd	r13, Y+63	; 0x3f
    364e:	26 97       	sbiw	r28, 0x06	; 6
    3650:	27 96       	adiw	r28, 0x07	; 7
    3652:	ef ac       	ldd	r14, Y+63	; 0x3f
    3654:	27 97       	sbiw	r28, 0x07	; 7
    3656:	28 96       	adiw	r28, 0x08	; 8
    3658:	ff ac       	ldd	r15, Y+63	; 0x3f
    365a:	28 97       	sbiw	r28, 0x08	; 8
    365c:	29 96       	adiw	r28, 0x09	; 9
    365e:	0f ad       	ldd	r16, Y+63	; 0x3f
    3660:	29 97       	sbiw	r28, 0x09	; 9
    3662:	2a 96       	adiw	r28, 0x0a	; 10
    3664:	1f ad       	ldd	r17, Y+63	; 0x3f
    3666:	2a 97       	sbiw	r28, 0x0a	; 10
    3668:	0e 94 b1 72 	call	0xe562	; 0xe562 <__adddi3>
    366c:	22 2e       	mov	r2, r18
    366e:	33 2e       	mov	r3, r19
    3670:	44 2e       	mov	r4, r20
    3672:	55 2e       	mov	r5, r21
    3674:	66 2e       	mov	r6, r22
    3676:	77 2e       	mov	r7, r23
    3678:	88 2e       	mov	r8, r24
    367a:	99 2e       	mov	r9, r25
    367c:	22 2d       	mov	r18, r2
    367e:	33 2d       	mov	r19, r3
    3680:	44 2d       	mov	r20, r4
    3682:	55 2d       	mov	r21, r5
    3684:	66 2d       	mov	r22, r6
    3686:	77 2d       	mov	r23, r7
    3688:	88 2d       	mov	r24, r8
    368a:	99 2d       	mov	r25, r9
    368c:	02 e0       	ldi	r16, 0x02	; 2
    368e:	0e 94 a2 72 	call	0xe544	; 0xe544 <__ashldi3>
    3692:	a2 2e       	mov	r10, r18
    3694:	b3 2e       	mov	r11, r19
    3696:	c4 2e       	mov	r12, r20
    3698:	d5 2e       	mov	r13, r21
    369a:	e6 2e       	mov	r14, r22
    369c:	f7 2e       	mov	r15, r23
    369e:	08 2f       	mov	r16, r24
    36a0:	19 2f       	mov	r17, r25
    36a2:	2a 2c       	mov	r2, r10
    36a4:	3b 2c       	mov	r3, r11
    36a6:	4c 2c       	mov	r4, r12
    36a8:	5d 2c       	mov	r5, r13
    36aa:	6e 2c       	mov	r6, r14
    36ac:	7f 2c       	mov	r7, r15
    36ae:	80 2e       	mov	r8, r16
    36b0:	91 2e       	mov	r9, r17
    36b2:	a2 2c       	mov	r10, r2
    36b4:	b3 2c       	mov	r11, r3
    36b6:	c4 2c       	mov	r12, r4
    36b8:	d5 2c       	mov	r13, r5
    36ba:	e6 2c       	mov	r14, r6
    36bc:	f7 2c       	mov	r15, r7
    36be:	08 2d       	mov	r16, r8
    36c0:	19 2d       	mov	r17, r9
    36c2:	2a 2d       	mov	r18, r10
    36c4:	3b 2d       	mov	r19, r11
    36c6:	4c 2d       	mov	r20, r12
    36c8:	5d 2d       	mov	r21, r13
    36ca:	6e 2d       	mov	r22, r14
    36cc:	7f 2d       	mov	r23, r15
    36ce:	80 2f       	mov	r24, r16
    36d0:	91 2f       	mov	r25, r17
    36d2:	29 51       	subi	r18, 0x19	; 25
    36d4:	3c 4f       	sbci	r19, 0xFC	; 252
    36d6:	4f 4f       	sbci	r20, 0xFF	; 255
    36d8:	5f 4f       	sbci	r21, 0xFF	; 255
    36da:	6f 4f       	sbci	r22, 0xFF	; 255
    36dc:	7f 4f       	sbci	r23, 0xFF	; 255
    36de:	8f 4f       	sbci	r24, 0xFF	; 255
    36e0:	9f 4f       	sbci	r25, 0xFF	; 255
    36e2:	a2 2e       	mov	r10, r18
    36e4:	b3 2e       	mov	r11, r19
    36e6:	c4 2e       	mov	r12, r20
    36e8:	d5 2e       	mov	r13, r21
    36ea:	e6 2e       	mov	r14, r22
    36ec:	f7 2e       	mov	r15, r23
    36ee:	08 2f       	mov	r16, r24
    36f0:	19 2f       	mov	r17, r25
    36f2:	2a 2d       	mov	r18, r10
    36f4:	3b 2d       	mov	r19, r11
    36f6:	4c 2d       	mov	r20, r12
    36f8:	5d 2d       	mov	r21, r13
    36fa:	6e 2d       	mov	r22, r14
    36fc:	7f 2d       	mov	r23, r15
    36fe:	80 2f       	mov	r24, r16
    3700:	91 2f       	mov	r25, r17
    3702:	0e 94 56 11 	call	0x22ac	; 0x22ac <__floatundisf>
    3706:	dc 01       	movw	r26, r24
    3708:	cb 01       	movw	r24, r22
    370a:	20 e0       	ldi	r18, 0x00	; 0
    370c:	30 e8       	ldi	r19, 0x80	; 128
    370e:	4b eb       	ldi	r20, 0xBB	; 187
    3710:	55 e4       	ldi	r21, 0x45	; 69
    3712:	bc 01       	movw	r22, r24
    3714:	cd 01       	movw	r24, r26
    3716:	f5 d8       	rcall	.-3606   	; 0x2902 <__divsf3>
    3718:	dc 01       	movw	r26, r24
    371a:	cb 01       	movw	r24, r22
    371c:	bc 01       	movw	r22, r24
    371e:	cd 01       	movw	r24, r26
    3720:	0e 94 a5 10 	call	0x214a	; 0x214a <__fixunssfdi>
    3724:	a2 2e       	mov	r10, r18
    3726:	b3 2e       	mov	r11, r19
    3728:	c4 2e       	mov	r12, r20
    372a:	d5 2e       	mov	r13, r21
    372c:	e6 2e       	mov	r14, r22
    372e:	f7 2e       	mov	r15, r23
    3730:	08 2f       	mov	r16, r24
    3732:	19 2f       	mov	r17, r25
    3734:	d6 01       	movw	r26, r12
    3736:	c5 01       	movw	r24, r10
    3738:	bc 01       	movw	r22, r24
    373a:	cd 01       	movw	r24, r26
    373c:	19 dd       	rcall	.-1486   	; 0x3170 <__portable_avr_delay_cycles>
	}
    373e:	9a ce       	rjmp	.-716    	; 0x3474 <main+0x1e2>

00003740 <cfg_get>:
#include "devices/AT24CXX/AT24CXX.h"
#include "config.h"
#include "devices/Voltmeter/voltmeter.h"

static void cfg_get(uint8_t it, char szVal[],const uint8_t len)
{
    3740:	cf 93       	push	r28
    3742:	df 93       	push	r29
    3744:	cd b7       	in	r28, 0x3d	; 61
    3746:	de b7       	in	r29, 0x3e	; 62
    3748:	27 97       	sbiw	r28, 0x07	; 7
    374a:	cd bf       	out	0x3d, r28	; 61
    374c:	de bf       	out	0x3e, r29	; 62
    374e:	8c 83       	std	Y+4, r24	; 0x04
    3750:	6d 83       	std	Y+5, r22	; 0x05
    3752:	7e 83       	std	Y+6, r23	; 0x06
    3754:	4f 83       	std	Y+7, r20	; 0x07
	uint16_t idx;
	nvm_eeprom_read_buffer(it,&idx,sizeof(uint16_t));
    3756:	8c 81       	ldd	r24, Y+4	; 0x04
    3758:	88 2f       	mov	r24, r24
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	9e 01       	movw	r18, r28
    375e:	2e 5f       	subi	r18, 0xFE	; 254
    3760:	3f 4f       	sbci	r19, 0xFF	; 255
    3762:	42 e0       	ldi	r20, 0x02	; 2
    3764:	50 e0       	ldi	r21, 0x00	; 0
    3766:	b9 01       	movw	r22, r18
    3768:	0e 94 e0 5e 	call	0xbdc0	; 0xbdc0 <nvm_eeprom_read_buffer>
	
	uint8_t bs = min(EEPROM_SIZE-idx,len);
    376c:	8f 81       	ldd	r24, Y+7	; 0x07
    376e:	88 2f       	mov	r24, r24
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	2a 81       	ldd	r18, Y+2	; 0x02
    3774:	3b 81       	ldd	r19, Y+3	; 0x03
    3776:	40 e0       	ldi	r20, 0x00	; 0
    3778:	50 e1       	ldi	r21, 0x10	; 16
    377a:	ba 01       	movw	r22, r20
    377c:	62 1b       	sub	r22, r18
    377e:	73 0b       	sbc	r23, r19
    3780:	9b 01       	movw	r18, r22
    3782:	28 17       	cp	r18, r24
    3784:	39 07       	cpc	r19, r25
    3786:	08 f4       	brcc	.+2      	; 0x378a <cfg_get+0x4a>
    3788:	c9 01       	movw	r24, r18
    378a:	89 83       	std	Y+1, r24	; 0x01
	nvm_eeprom_read_buffer(idx,szVal,bs);
    378c:	89 81       	ldd	r24, Y+1	; 0x01
    378e:	48 2f       	mov	r20, r24
    3790:	50 e0       	ldi	r21, 0x00	; 0
    3792:	8a 81       	ldd	r24, Y+2	; 0x02
    3794:	9b 81       	ldd	r25, Y+3	; 0x03
    3796:	2d 81       	ldd	r18, Y+5	; 0x05
    3798:	3e 81       	ldd	r19, Y+6	; 0x06
    379a:	b9 01       	movw	r22, r18
    379c:	0e 94 e0 5e 	call	0xbdc0	; 0xbdc0 <nvm_eeprom_read_buffer>
}
    37a0:	27 96       	adiw	r28, 0x07	; 7
    37a2:	cd bf       	out	0x3d, r28	; 61
    37a4:	de bf       	out	0x3e, r29	; 62
    37a6:	df 91       	pop	r29
    37a8:	cf 91       	pop	r28
    37aa:	08 95       	ret

000037ac <cfg_check>:


uint8_t cfg_check(void)
{
    37ac:	cf 93       	push	r28
    37ae:	df 93       	push	r29
    37b0:	1f 92       	push	r1
    37b2:	1f 92       	push	r1
    37b4:	cd b7       	in	r28, 0x3d	; 61
    37b6:	de b7       	in	r29, 0x3e	; 62
	uint16_t v;
	nvm_eeprom_read_buffer(0,&v,sizeof(uint16_t));
    37b8:	42 e0       	ldi	r20, 0x02	; 2
    37ba:	50 e0       	ldi	r21, 0x00	; 0
    37bc:	ce 01       	movw	r24, r28
    37be:	01 96       	adiw	r24, 0x01	; 1
    37c0:	bc 01       	movw	r22, r24
    37c2:	80 e0       	ldi	r24, 0x00	; 0
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	0e 94 e0 5e 	call	0xbdc0	; 0xbdc0 <nvm_eeprom_read_buffer>
	
	return (v==0x01AC);
    37ca:	89 81       	ldd	r24, Y+1	; 0x01
    37cc:	9a 81       	ldd	r25, Y+2	; 0x02
    37ce:	21 e0       	ldi	r18, 0x01	; 1
    37d0:	8c 3a       	cpi	r24, 0xAC	; 172
    37d2:	31 e0       	ldi	r19, 0x01	; 1
    37d4:	93 07       	cpc	r25, r19
    37d6:	09 f0       	breq	.+2      	; 0x37da <cfg_check+0x2e>
    37d8:	20 e0       	ldi	r18, 0x00	; 0
    37da:	82 2f       	mov	r24, r18
}
    37dc:	0f 90       	pop	r0
    37de:	0f 90       	pop	r0
    37e0:	df 91       	pop	r29
    37e2:	cf 91       	pop	r28
    37e4:	08 95       	ret

000037e6 <cfg_get_sim_pin>:


void cfg_get_sim_pin(char szVal[],const uint8_t len)
{
    37e6:	cf 93       	push	r28
    37e8:	df 93       	push	r29
    37ea:	00 d0       	rcall	.+0      	; 0x37ec <cfg_get_sim_pin+0x6>
    37ec:	cd b7       	in	r28, 0x3d	; 61
    37ee:	de b7       	in	r29, 0x3e	; 62
    37f0:	89 83       	std	Y+1, r24	; 0x01
    37f2:	9a 83       	std	Y+2, r25	; 0x02
    37f4:	6b 83       	std	Y+3, r22	; 0x03
	cfg_get(8,szVal,len);
    37f6:	89 81       	ldd	r24, Y+1	; 0x01
    37f8:	9a 81       	ldd	r25, Y+2	; 0x02
    37fa:	4b 81       	ldd	r20, Y+3	; 0x03
    37fc:	bc 01       	movw	r22, r24
    37fe:	88 e0       	ldi	r24, 0x08	; 8
    3800:	9f df       	rcall	.-194    	; 0x3740 <cfg_get>
}
    3802:	23 96       	adiw	r28, 0x03	; 3
    3804:	cd bf       	out	0x3d, r28	; 61
    3806:	de bf       	out	0x3e, r29	; 62
    3808:	df 91       	pop	r29
    380a:	cf 91       	pop	r28
    380c:	08 95       	ret

0000380e <cfg_get_gprs_apn>:

void cfg_get_gprs_apn(char szVal[],const uint8_t len)
{
    380e:	cf 93       	push	r28
    3810:	df 93       	push	r29
    3812:	00 d0       	rcall	.+0      	; 0x3814 <cfg_get_gprs_apn+0x6>
    3814:	cd b7       	in	r28, 0x3d	; 61
    3816:	de b7       	in	r29, 0x3e	; 62
    3818:	89 83       	std	Y+1, r24	; 0x01
    381a:	9a 83       	std	Y+2, r25	; 0x02
    381c:	6b 83       	std	Y+3, r22	; 0x03
	cfg_get(6,szVal,len);
    381e:	89 81       	ldd	r24, Y+1	; 0x01
    3820:	9a 81       	ldd	r25, Y+2	; 0x02
    3822:	4b 81       	ldd	r20, Y+3	; 0x03
    3824:	bc 01       	movw	r22, r24
    3826:	86 e0       	ldi	r24, 0x06	; 6
    3828:	8b df       	rcall	.-234    	; 0x3740 <cfg_get>
}
    382a:	23 96       	adiw	r28, 0x03	; 3
    382c:	cd bf       	out	0x3d, r28	; 61
    382e:	de bf       	out	0x3e, r29	; 62
    3830:	df 91       	pop	r29
    3832:	cf 91       	pop	r28
    3834:	08 95       	ret

00003836 <cfg_get_aws_id>:

void cfg_get_aws_id(char szVal[],const uint8_t len)
{
    3836:	cf 93       	push	r28
    3838:	df 93       	push	r29
    383a:	00 d0       	rcall	.+0      	; 0x383c <cfg_get_aws_id+0x6>
    383c:	cd b7       	in	r28, 0x3d	; 61
    383e:	de b7       	in	r29, 0x3e	; 62
    3840:	89 83       	std	Y+1, r24	; 0x01
    3842:	9a 83       	std	Y+2, r25	; 0x02
    3844:	6b 83       	std	Y+3, r22	; 0x03
	cfg_get(4,szVal,len);
    3846:	89 81       	ldd	r24, Y+1	; 0x01
    3848:	9a 81       	ldd	r25, Y+2	; 0x02
    384a:	4b 81       	ldd	r20, Y+3	; 0x03
    384c:	bc 01       	movw	r22, r24
    384e:	84 e0       	ldi	r24, 0x04	; 4
    3850:	77 df       	rcall	.-274    	; 0x3740 <cfg_get>
}
    3852:	23 96       	adiw	r28, 0x03	; 3
    3854:	cd bf       	out	0x3d, r28	; 61
    3856:	de bf       	out	0x3e, r29	; 62
    3858:	df 91       	pop	r29
    385a:	cf 91       	pop	r28
    385c:	08 95       	ret

0000385e <cfg_get_service_url_time>:

void cfg_get_service_url_time(char szVal[],const uint8_t len)
{
    385e:	cf 93       	push	r28
    3860:	df 93       	push	r29
    3862:	00 d0       	rcall	.+0      	; 0x3864 <cfg_get_service_url_time+0x6>
    3864:	cd b7       	in	r28, 0x3d	; 61
    3866:	de b7       	in	r29, 0x3e	; 62
    3868:	89 83       	std	Y+1, r24	; 0x01
    386a:	9a 83       	std	Y+2, r25	; 0x02
    386c:	6b 83       	std	Y+3, r22	; 0x03
	cfg_get(10,szVal,len);
    386e:	89 81       	ldd	r24, Y+1	; 0x01
    3870:	9a 81       	ldd	r25, Y+2	; 0x02
    3872:	4b 81       	ldd	r20, Y+3	; 0x03
    3874:	bc 01       	movw	r22, r24
    3876:	8a e0       	ldi	r24, 0x0A	; 10
    3878:	63 df       	rcall	.-314    	; 0x3740 <cfg_get>
}
    387a:	23 96       	adiw	r28, 0x03	; 3
    387c:	cd bf       	out	0x3d, r28	; 61
    387e:	de bf       	out	0x3e, r29	; 62
    3880:	df 91       	pop	r29
    3882:	cf 91       	pop	r28
    3884:	08 95       	ret

00003886 <cfg_get_service_url_send>:

void cfg_get_service_url_send(char szVal[],const uint8_t len)
{
    3886:	cf 93       	push	r28
    3888:	df 93       	push	r29
    388a:	00 d0       	rcall	.+0      	; 0x388c <cfg_get_service_url_send+0x6>
    388c:	cd b7       	in	r28, 0x3d	; 61
    388e:	de b7       	in	r29, 0x3e	; 62
    3890:	89 83       	std	Y+1, r24	; 0x01
    3892:	9a 83       	std	Y+2, r25	; 0x02
    3894:	6b 83       	std	Y+3, r22	; 0x03
	cfg_get(12,szVal,len);
    3896:	89 81       	ldd	r24, Y+1	; 0x01
    3898:	9a 81       	ldd	r25, Y+2	; 0x02
    389a:	4b 81       	ldd	r20, Y+3	; 0x03
    389c:	bc 01       	movw	r22, r24
    389e:	8c e0       	ldi	r24, 0x0C	; 12
    38a0:	4f df       	rcall	.-354    	; 0x3740 <cfg_get>
}
    38a2:	23 96       	adiw	r28, 0x03	; 3
    38a4:	cd bf       	out	0x3d, r28	; 61
    38a6:	de bf       	out	0x3e, r29	; 62
    38a8:	df 91       	pop	r29
    38aa:	cf 91       	pop	r28
    38ac:	08 95       	ret

000038ae <cfg_get_datalogger_timings>:

void cfg_get_datalogger_timings(uint32_t * const sendDT,uint32_t * const storeDT,uint32_t * const syncDT,uint32_t * const tickDT)
{
    38ae:	cf 93       	push	r28
    38b0:	df 93       	push	r29
    38b2:	cd b7       	in	r28, 0x3d	; 61
    38b4:	de b7       	in	r29, 0x3e	; 62
    38b6:	68 97       	sbiw	r28, 0x18	; 24
    38b8:	cd bf       	out	0x3d, r28	; 61
    38ba:	de bf       	out	0x3e, r29	; 62
    38bc:	89 8b       	std	Y+17, r24	; 0x11
    38be:	9a 8b       	std	Y+18, r25	; 0x12
    38c0:	6b 8b       	std	Y+19, r22	; 0x13
    38c2:	7c 8b       	std	Y+20, r23	; 0x14
    38c4:	4d 8b       	std	Y+21, r20	; 0x15
    38c6:	5e 8b       	std	Y+22, r21	; 0x16
    38c8:	2f 8b       	std	Y+23, r18	; 0x17
    38ca:	38 8f       	std	Y+24, r19	; 0x18
	struct {uint32_t a,b,c,d;} buf;
	cfg_get(0x0e,&buf,sizeof(buf));
    38cc:	40 e1       	ldi	r20, 0x10	; 16
    38ce:	ce 01       	movw	r24, r28
    38d0:	01 96       	adiw	r24, 0x01	; 1
    38d2:	bc 01       	movw	r22, r24
    38d4:	8e e0       	ldi	r24, 0x0E	; 14
    38d6:	34 df       	rcall	.-408    	; 0x3740 <cfg_get>
	*sendDT  = buf.a;
    38d8:	89 81       	ldd	r24, Y+1	; 0x01
    38da:	9a 81       	ldd	r25, Y+2	; 0x02
    38dc:	ab 81       	ldd	r26, Y+3	; 0x03
    38de:	bc 81       	ldd	r27, Y+4	; 0x04
    38e0:	29 89       	ldd	r18, Y+17	; 0x11
    38e2:	3a 89       	ldd	r19, Y+18	; 0x12
    38e4:	f9 01       	movw	r30, r18
    38e6:	80 83       	st	Z, r24
    38e8:	91 83       	std	Z+1, r25	; 0x01
    38ea:	a2 83       	std	Z+2, r26	; 0x02
    38ec:	b3 83       	std	Z+3, r27	; 0x03
	*storeDT = buf.b;
    38ee:	8d 81       	ldd	r24, Y+5	; 0x05
    38f0:	9e 81       	ldd	r25, Y+6	; 0x06
    38f2:	af 81       	ldd	r26, Y+7	; 0x07
    38f4:	b8 85       	ldd	r27, Y+8	; 0x08
    38f6:	2b 89       	ldd	r18, Y+19	; 0x13
    38f8:	3c 89       	ldd	r19, Y+20	; 0x14
    38fa:	f9 01       	movw	r30, r18
    38fc:	80 83       	st	Z, r24
    38fe:	91 83       	std	Z+1, r25	; 0x01
    3900:	a2 83       	std	Z+2, r26	; 0x02
    3902:	b3 83       	std	Z+3, r27	; 0x03
	*syncDT  = buf.c;
    3904:	89 85       	ldd	r24, Y+9	; 0x09
    3906:	9a 85       	ldd	r25, Y+10	; 0x0a
    3908:	ab 85       	ldd	r26, Y+11	; 0x0b
    390a:	bc 85       	ldd	r27, Y+12	; 0x0c
    390c:	2d 89       	ldd	r18, Y+21	; 0x15
    390e:	3e 89       	ldd	r19, Y+22	; 0x16
    3910:	f9 01       	movw	r30, r18
    3912:	80 83       	st	Z, r24
    3914:	91 83       	std	Z+1, r25	; 0x01
    3916:	a2 83       	std	Z+2, r26	; 0x02
    3918:	b3 83       	std	Z+3, r27	; 0x03
	*tickDT  = buf.d;
    391a:	8d 85       	ldd	r24, Y+13	; 0x0d
    391c:	9e 85       	ldd	r25, Y+14	; 0x0e
    391e:	af 85       	ldd	r26, Y+15	; 0x0f
    3920:	b8 89       	ldd	r27, Y+16	; 0x10
    3922:	2f 89       	ldd	r18, Y+23	; 0x17
    3924:	38 8d       	ldd	r19, Y+24	; 0x18
    3926:	f9 01       	movw	r30, r18
    3928:	80 83       	st	Z, r24
    392a:	91 83       	std	Z+1, r25	; 0x01
    392c:	a2 83       	std	Z+2, r26	; 0x02
    392e:	b3 83       	std	Z+3, r27	; 0x03
}
    3930:	68 96       	adiw	r28, 0x18	; 24
    3932:	cd bf       	out	0x3d, r28	; 61
    3934:	de bf       	out	0x3e, r29	; 62
    3936:	df 91       	pop	r29
    3938:	cf 91       	pop	r28
    393a:	08 95       	ret

0000393c <sleep_set_mode>:
		(*idx)=(SNAPSHOT_SIZE-1);
	} else {
		(*idx)--;
	}
	
}
    393c:	cf 93       	push	r28
    393e:	df 93       	push	r29
    3940:	1f 92       	push	r1
    3942:	cd b7       	in	r28, 0x3d	; 61
    3944:	de b7       	in	r29, 0x3e	; 62
    3946:	89 83       	std	Y+1, r24	; 0x01
    3948:	88 e4       	ldi	r24, 0x48	; 72
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	28 e4       	ldi	r18, 0x48	; 72
    394e:	30 e0       	ldi	r19, 0x00	; 0
    3950:	f9 01       	movw	r30, r18
    3952:	20 81       	ld	r18, Z
    3954:	32 2f       	mov	r19, r18
    3956:	31 7f       	andi	r19, 0xF1	; 241
    3958:	29 81       	ldd	r18, Y+1	; 0x01
    395a:	23 2b       	or	r18, r19
    395c:	fc 01       	movw	r30, r24
    395e:	20 83       	st	Z, r18
    3960:	0f 90       	pop	r0
    3962:	df 91       	pop	r29
    3964:	cf 91       	pop	r28
    3966:	08 95       	ret

00003968 <sleepmgr_sleep>:
    3968:	cf 93       	push	r28
    396a:	df 93       	push	r29
    396c:	1f 92       	push	r1
    396e:	cd b7       	in	r28, 0x3d	; 61
    3970:	de b7       	in	r29, 0x3e	; 62
    3972:	89 83       	std	Y+1, r24	; 0x01
    3974:	89 81       	ldd	r24, Y+1	; 0x01
    3976:	88 2f       	mov	r24, r24
    3978:	90 e0       	ldi	r25, 0x00	; 0
    397a:	01 97       	sbiw	r24, 0x01	; 1
    397c:	82 5e       	subi	r24, 0xE2	; 226
    397e:	9f 4d       	sbci	r25, 0xDF	; 223
    3980:	fc 01       	movw	r30, r24
    3982:	80 81       	ld	r24, Z
    3984:	db df       	rcall	.-74     	; 0x393c <sleep_set_mode>
    3986:	88 e4       	ldi	r24, 0x48	; 72
    3988:	90 e0       	ldi	r25, 0x00	; 0
    398a:	28 e4       	ldi	r18, 0x48	; 72
    398c:	30 e0       	ldi	r19, 0x00	; 0
    398e:	f9 01       	movw	r30, r18
    3990:	20 81       	ld	r18, Z
    3992:	21 60       	ori	r18, 0x01	; 1
    3994:	fc 01       	movw	r30, r24
    3996:	20 83       	st	Z, r18
    3998:	78 94       	sei
    399a:	88 95       	sleep
    399c:	88 e4       	ldi	r24, 0x48	; 72
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	28 e4       	ldi	r18, 0x48	; 72
    39a2:	30 e0       	ldi	r19, 0x00	; 0
    39a4:	f9 01       	movw	r30, r18
    39a6:	20 81       	ld	r18, Z
    39a8:	2e 7f       	andi	r18, 0xFE	; 254
    39aa:	fc 01       	movw	r30, r24
    39ac:	20 83       	st	Z, r18
    39ae:	0f 90       	pop	r0
    39b0:	df 91       	pop	r29
    39b2:	cf 91       	pop	r28
    39b4:	08 95       	ret

000039b6 <sleepmgr_get_sleep_mode>:
    39b6:	cf 93       	push	r28
    39b8:	df 93       	push	r29
    39ba:	00 d0       	rcall	.+0      	; 0x39bc <sleepmgr_get_sleep_mode+0x6>
    39bc:	cd b7       	in	r28, 0x3d	; 61
    39be:	de b7       	in	r29, 0x3e	; 62
    39c0:	19 82       	std	Y+1, r1	; 0x01
    39c2:	82 e6       	ldi	r24, 0x62	; 98
    39c4:	97 e2       	ldi	r25, 0x27	; 39
    39c6:	8a 83       	std	Y+2, r24	; 0x02
    39c8:	9b 83       	std	Y+3, r25	; 0x03
    39ca:	08 c0       	rjmp	.+16     	; 0x39dc <sleepmgr_get_sleep_mode+0x26>
    39cc:	8a 81       	ldd	r24, Y+2	; 0x02
    39ce:	9b 81       	ldd	r25, Y+3	; 0x03
    39d0:	01 96       	adiw	r24, 0x01	; 1
    39d2:	8a 83       	std	Y+2, r24	; 0x02
    39d4:	9b 83       	std	Y+3, r25	; 0x03
    39d6:	89 81       	ldd	r24, Y+1	; 0x01
    39d8:	8f 5f       	subi	r24, 0xFF	; 255
    39da:	89 83       	std	Y+1, r24	; 0x01
    39dc:	8a 81       	ldd	r24, Y+2	; 0x02
    39de:	9b 81       	ldd	r25, Y+3	; 0x03
    39e0:	fc 01       	movw	r30, r24
    39e2:	80 81       	ld	r24, Z
    39e4:	88 23       	and	r24, r24
    39e6:	91 f3       	breq	.-28     	; 0x39cc <sleepmgr_get_sleep_mode+0x16>
    39e8:	89 81       	ldd	r24, Y+1	; 0x01
    39ea:	23 96       	adiw	r28, 0x03	; 3
    39ec:	cd bf       	out	0x3d, r28	; 61
    39ee:	de bf       	out	0x3e, r29	; 62
    39f0:	df 91       	pop	r29
    39f2:	cf 91       	pop	r28
    39f4:	08 95       	ret

000039f6 <sleepmgr_enter_sleep>:
    39f6:	cf 93       	push	r28
    39f8:	df 93       	push	r29
    39fa:	1f 92       	push	r1
    39fc:	cd b7       	in	r28, 0x3d	; 61
    39fe:	de b7       	in	r29, 0x3e	; 62
    3a00:	f8 94       	cli
    3a02:	d9 df       	rcall	.-78     	; 0x39b6 <sleepmgr_get_sleep_mode>
    3a04:	89 83       	std	Y+1, r24	; 0x01
    3a06:	89 81       	ldd	r24, Y+1	; 0x01
    3a08:	88 23       	and	r24, r24
    3a0a:	11 f4       	brne	.+4      	; 0x3a10 <sleepmgr_enter_sleep+0x1a>
    3a0c:	78 94       	sei
    3a0e:	02 c0       	rjmp	.+4      	; 0x3a14 <sleepmgr_enter_sleep+0x1e>
    3a10:	89 81       	ldd	r24, Y+1	; 0x01
    3a12:	aa df       	rcall	.-172    	; 0x3968 <sleepmgr_sleep>
    3a14:	0f 90       	pop	r0
    3a16:	df 91       	pop	r29
    3a18:	cf 91       	pop	r28
    3a1a:	08 95       	ret

00003a1c <sysclk_get_main_hz>:
    3a1c:	cf 93       	push	r28
    3a1e:	df 93       	push	r29
    3a20:	cd b7       	in	r28, 0x3d	; 61
    3a22:	de b7       	in	r29, 0x3e	; 62
    3a24:	80 e0       	ldi	r24, 0x00	; 0
    3a26:	9c e6       	ldi	r25, 0x6C	; 108
    3a28:	ac ed       	ldi	r26, 0xDC	; 220
    3a2a:	b2 e0       	ldi	r27, 0x02	; 2
    3a2c:	bc 01       	movw	r22, r24
    3a2e:	cd 01       	movw	r24, r26
    3a30:	df 91       	pop	r29
    3a32:	cf 91       	pop	r28
    3a34:	08 95       	ret

00003a36 <sysclk_get_per4_hz>:
    3a36:	cf 93       	push	r28
    3a38:	df 93       	push	r29
    3a3a:	1f 92       	push	r1
    3a3c:	cd b7       	in	r28, 0x3d	; 61
    3a3e:	de b7       	in	r29, 0x3e	; 62
    3a40:	19 82       	std	Y+1, r1	; 0x01
    3a42:	81 e0       	ldi	r24, 0x01	; 1
    3a44:	89 83       	std	Y+1, r24	; 0x01
    3a46:	ea df       	rcall	.-44     	; 0x3a1c <sysclk_get_main_hz>
    3a48:	dc 01       	movw	r26, r24
    3a4a:	cb 01       	movw	r24, r22
    3a4c:	29 81       	ldd	r18, Y+1	; 0x01
    3a4e:	22 2f       	mov	r18, r18
    3a50:	30 e0       	ldi	r19, 0x00	; 0
    3a52:	02 2e       	mov	r0, r18
    3a54:	04 c0       	rjmp	.+8      	; 0x3a5e <sysclk_get_per4_hz+0x28>
    3a56:	b6 95       	lsr	r27
    3a58:	a7 95       	ror	r26
    3a5a:	97 95       	ror	r25
    3a5c:	87 95       	ror	r24
    3a5e:	0a 94       	dec	r0
    3a60:	d2 f7       	brpl	.-12     	; 0x3a56 <sysclk_get_per4_hz+0x20>
    3a62:	bc 01       	movw	r22, r24
    3a64:	cd 01       	movw	r24, r26
    3a66:	0f 90       	pop	r0
    3a68:	df 91       	pop	r29
    3a6a:	cf 91       	pop	r28
    3a6c:	08 95       	ret

00003a6e <sysclk_get_per2_hz>:
    3a6e:	cf 93       	push	r28
    3a70:	df 93       	push	r29
    3a72:	cd b7       	in	r28, 0x3d	; 61
    3a74:	de b7       	in	r29, 0x3e	; 62
    3a76:	df df       	rcall	.-66     	; 0x3a36 <sysclk_get_per4_hz>
    3a78:	dc 01       	movw	r26, r24
    3a7a:	cb 01       	movw	r24, r22
    3a7c:	bc 01       	movw	r22, r24
    3a7e:	cd 01       	movw	r24, r26
    3a80:	df 91       	pop	r29
    3a82:	cf 91       	pop	r28
    3a84:	08 95       	ret

00003a86 <sysclk_get_per_hz>:
    3a86:	cf 93       	push	r28
    3a88:	df 93       	push	r29
    3a8a:	cd b7       	in	r28, 0x3d	; 61
    3a8c:	de b7       	in	r29, 0x3e	; 62
    3a8e:	ef df       	rcall	.-34     	; 0x3a6e <sysclk_get_per2_hz>
    3a90:	dc 01       	movw	r26, r24
    3a92:	cb 01       	movw	r24, r22
    3a94:	bc 01       	movw	r22, r24
    3a96:	cd 01       	movw	r24, r26
    3a98:	df 91       	pop	r29
    3a9a:	cf 91       	pop	r28
    3a9c:	08 95       	ret

00003a9e <sysclk_get_cpu_hz>:
    3a9e:	cf 93       	push	r28
    3aa0:	df 93       	push	r29
    3aa2:	cd b7       	in	r28, 0x3d	; 61
    3aa4:	de b7       	in	r29, 0x3e	; 62
    3aa6:	ef df       	rcall	.-34     	; 0x3a86 <sysclk_get_per_hz>
    3aa8:	dc 01       	movw	r26, r24
    3aaa:	cb 01       	movw	r24, r22
    3aac:	bc 01       	movw	r22, r24
    3aae:	cd 01       	movw	r24, r26
    3ab0:	df 91       	pop	r29
    3ab2:	cf 91       	pop	r28
    3ab4:	08 95       	ret

00003ab6 <__portable_avr_delay_cycles>:
    3ab6:	61 50       	subi	r22, 0x01	; 1
    3ab8:	71 09       	sbc	r23, r1
    3aba:	81 09       	sbc	r24, r1
    3abc:	91 09       	sbc	r25, r1
    3abe:	d9 f7       	brne	.-10     	; 0x3ab6 <__portable_avr_delay_cycles>
    3ac0:	08 95       	ret

00003ac2 <ioport_toggle_pin>:
    3ac2:	cf 93       	push	r28
    3ac4:	df 93       	push	r29
    3ac6:	cd b7       	in	r28, 0x3d	; 61
    3ac8:	de b7       	in	r29, 0x3e	; 62
    3aca:	28 97       	sbiw	r28, 0x08	; 8
    3acc:	cd bf       	out	0x3d, r28	; 61
    3ace:	de bf       	out	0x3e, r29	; 62
    3ad0:	88 87       	std	Y+8, r24	; 0x08
    3ad2:	88 85       	ldd	r24, Y+8	; 0x08
    3ad4:	89 83       	std	Y+1, r24	; 0x01
    3ad6:	89 81       	ldd	r24, Y+1	; 0x01
    3ad8:	8a 83       	std	Y+2, r24	; 0x02
    3ada:	8a 81       	ldd	r24, Y+2	; 0x02
    3adc:	8b 83       	std	Y+3, r24	; 0x03
    3ade:	8b 81       	ldd	r24, Y+3	; 0x03
    3ae0:	86 95       	lsr	r24
    3ae2:	86 95       	lsr	r24
    3ae4:	86 95       	lsr	r24
    3ae6:	8c 83       	std	Y+4, r24	; 0x04
    3ae8:	8c 81       	ldd	r24, Y+4	; 0x04
    3aea:	88 2f       	mov	r24, r24
    3aec:	90 e0       	ldi	r25, 0x00	; 0
    3aee:	88 0f       	add	r24, r24
    3af0:	99 1f       	adc	r25, r25
    3af2:	82 95       	swap	r24
    3af4:	92 95       	swap	r25
    3af6:	90 7f       	andi	r25, 0xF0	; 240
    3af8:	98 27       	eor	r25, r24
    3afa:	80 7f       	andi	r24, 0xF0	; 240
    3afc:	98 27       	eor	r25, r24
    3afe:	9a 5f       	subi	r25, 0xFA	; 250
    3b00:	8d 83       	std	Y+5, r24	; 0x05
    3b02:	9e 83       	std	Y+6, r25	; 0x06
    3b04:	89 81       	ldd	r24, Y+1	; 0x01
    3b06:	8f 83       	std	Y+7, r24	; 0x07
    3b08:	8f 81       	ldd	r24, Y+7	; 0x07
    3b0a:	88 2f       	mov	r24, r24
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	9c 01       	movw	r18, r24
    3b10:	27 70       	andi	r18, 0x07	; 7
    3b12:	33 27       	eor	r19, r19
    3b14:	81 e0       	ldi	r24, 0x01	; 1
    3b16:	90 e0       	ldi	r25, 0x00	; 0
    3b18:	02 c0       	rjmp	.+4      	; 0x3b1e <ioport_toggle_pin+0x5c>
    3b1a:	88 0f       	add	r24, r24
    3b1c:	99 1f       	adc	r25, r25
    3b1e:	2a 95       	dec	r18
    3b20:	e2 f7       	brpl	.-8      	; 0x3b1a <ioport_toggle_pin+0x58>
    3b22:	28 2f       	mov	r18, r24
    3b24:	8d 81       	ldd	r24, Y+5	; 0x05
    3b26:	9e 81       	ldd	r25, Y+6	; 0x06
    3b28:	fc 01       	movw	r30, r24
    3b2a:	27 83       	std	Z+7, r18	; 0x07
    3b2c:	28 96       	adiw	r28, 0x08	; 8
    3b2e:	cd bf       	out	0x3d, r28	; 61
    3b30:	de bf       	out	0x3e, r29	; 62
    3b32:	df 91       	pop	r29
    3b34:	cf 91       	pop	r28
    3b36:	08 95       	ret

00003b38 <rtc_set_alarm_relative>:
    3b38:	cf 93       	push	r28
    3b3a:	df 93       	push	r29
    3b3c:	00 d0       	rcall	.+0      	; 0x3b3e <rtc_set_alarm_relative+0x6>
    3b3e:	1f 92       	push	r1
    3b40:	cd b7       	in	r28, 0x3d	; 61
    3b42:	de b7       	in	r29, 0x3e	; 62
    3b44:	69 83       	std	Y+1, r22	; 0x01
    3b46:	7a 83       	std	Y+2, r23	; 0x02
    3b48:	8b 83       	std	Y+3, r24	; 0x03
    3b4a:	9c 83       	std	Y+4, r25	; 0x04
    3b4c:	0e 94 68 5f 	call	0xbed0	; 0xbed0 <rtc_get_time>
    3b50:	9b 01       	movw	r18, r22
    3b52:	ac 01       	movw	r20, r24
    3b54:	89 81       	ldd	r24, Y+1	; 0x01
    3b56:	9a 81       	ldd	r25, Y+2	; 0x02
    3b58:	ab 81       	ldd	r26, Y+3	; 0x03
    3b5a:	bc 81       	ldd	r27, Y+4	; 0x04
    3b5c:	82 0f       	add	r24, r18
    3b5e:	93 1f       	adc	r25, r19
    3b60:	a4 1f       	adc	r26, r20
    3b62:	b5 1f       	adc	r27, r21
    3b64:	bc 01       	movw	r22, r24
    3b66:	cd 01       	movw	r24, r26
    3b68:	0e 94 7e 5f 	call	0xbefc	; 0xbefc <rtc_set_alarm>
    3b6c:	24 96       	adiw	r28, 0x04	; 4
    3b6e:	cd bf       	out	0x3d, r28	; 61
    3b70:	de bf       	out	0x3e, r29	; 62
    3b72:	df 91       	pop	r29
    3b74:	cf 91       	pop	r28
    3b76:	08 95       	ret

00003b78 <tc_write_clock_source>:
    3b78:	cf 93       	push	r28
    3b7a:	df 93       	push	r29
    3b7c:	00 d0       	rcall	.+0      	; 0x3b7e <tc_write_clock_source+0x6>
    3b7e:	cd b7       	in	r28, 0x3d	; 61
    3b80:	de b7       	in	r29, 0x3e	; 62
    3b82:	89 83       	std	Y+1, r24	; 0x01
    3b84:	9a 83       	std	Y+2, r25	; 0x02
    3b86:	6b 83       	std	Y+3, r22	; 0x03
    3b88:	89 81       	ldd	r24, Y+1	; 0x01
    3b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b8c:	fc 01       	movw	r30, r24
    3b8e:	80 81       	ld	r24, Z
    3b90:	98 2f       	mov	r25, r24
    3b92:	90 7f       	andi	r25, 0xF0	; 240
    3b94:	8b 81       	ldd	r24, Y+3	; 0x03
    3b96:	89 2b       	or	r24, r25
    3b98:	28 2f       	mov	r18, r24
    3b9a:	89 81       	ldd	r24, Y+1	; 0x01
    3b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b9e:	fc 01       	movw	r30, r24
    3ba0:	20 83       	st	Z, r18
    3ba2:	23 96       	adiw	r28, 0x03	; 3
    3ba4:	cd bf       	out	0x3d, r28	; 61
    3ba6:	de bf       	out	0x3e, r29	; 62
    3ba8:	df 91       	pop	r29
    3baa:	cf 91       	pop	r28
    3bac:	08 95       	ret

00003bae <tc_read_clock_source>:
    3bae:	cf 93       	push	r28
    3bb0:	df 93       	push	r29
    3bb2:	1f 92       	push	r1
    3bb4:	1f 92       	push	r1
    3bb6:	cd b7       	in	r28, 0x3d	; 61
    3bb8:	de b7       	in	r29, 0x3e	; 62
    3bba:	89 83       	std	Y+1, r24	; 0x01
    3bbc:	9a 83       	std	Y+2, r25	; 0x02
    3bbe:	89 81       	ldd	r24, Y+1	; 0x01
    3bc0:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc2:	fc 01       	movw	r30, r24
    3bc4:	80 81       	ld	r24, Z
    3bc6:	8f 70       	andi	r24, 0x0F	; 15
    3bc8:	0f 90       	pop	r0
    3bca:	0f 90       	pop	r0
    3bcc:	df 91       	pop	r29
    3bce:	cf 91       	pop	r28
    3bd0:	08 95       	ret

00003bd2 <tc_get_resolution>:
    3bd2:	cf 93       	push	r28
    3bd4:	df 93       	push	r29
    3bd6:	00 d0       	rcall	.+0      	; 0x3bd8 <tc_get_resolution+0x6>
    3bd8:	00 d0       	rcall	.+0      	; 0x3bda <tc_get_resolution+0x8>
    3bda:	cd b7       	in	r28, 0x3d	; 61
    3bdc:	de b7       	in	r29, 0x3e	; 62
    3bde:	8d 83       	std	Y+5, r24	; 0x05
    3be0:	9e 83       	std	Y+6, r25	; 0x06
    3be2:	51 df       	rcall	.-350    	; 0x3a86 <sysclk_get_per_hz>
    3be4:	dc 01       	movw	r26, r24
    3be6:	cb 01       	movw	r24, r22
    3be8:	89 83       	std	Y+1, r24	; 0x01
    3bea:	9a 83       	std	Y+2, r25	; 0x02
    3bec:	ab 83       	std	Y+3, r26	; 0x03
    3bee:	bc 83       	std	Y+4, r27	; 0x04
    3bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    3bf2:	9e 81       	ldd	r25, Y+6	; 0x06
    3bf4:	dc df       	rcall	.-72     	; 0x3bae <tc_read_clock_source>
    3bf6:	88 2f       	mov	r24, r24
    3bf8:	90 e0       	ldi	r25, 0x00	; 0
    3bfa:	83 30       	cpi	r24, 0x03	; 3
    3bfc:	91 05       	cpc	r25, r1
    3bfe:	09 f4       	brne	.+2      	; 0x3c02 <tc_get_resolution+0x30>
    3c00:	61 c0       	rjmp	.+194    	; 0x3cc4 <tc_get_resolution+0xf2>
    3c02:	84 30       	cpi	r24, 0x04	; 4
    3c04:	91 05       	cpc	r25, r1
    3c06:	5c f4       	brge	.+22     	; 0x3c1e <tc_get_resolution+0x4c>
    3c08:	81 30       	cpi	r24, 0x01	; 1
    3c0a:	91 05       	cpc	r25, r1
    3c0c:	09 f4       	brne	.+2      	; 0x3c10 <tc_get_resolution+0x3e>
    3c0e:	7d c0       	rjmp	.+250    	; 0x3d0a <tc_get_resolution+0x138>
    3c10:	82 30       	cpi	r24, 0x02	; 2
    3c12:	91 05       	cpc	r25, r1
    3c14:	0c f0       	brlt	.+2      	; 0x3c18 <tc_get_resolution+0x46>
    3c16:	67 c0       	rjmp	.+206    	; 0x3ce6 <tc_get_resolution+0x114>
    3c18:	00 97       	sbiw	r24, 0x00	; 0
    3c1a:	71 f0       	breq	.+28     	; 0x3c38 <tc_get_resolution+0x66>
    3c1c:	71 c0       	rjmp	.+226    	; 0x3d00 <tc_get_resolution+0x12e>
    3c1e:	85 30       	cpi	r24, 0x05	; 5
    3c20:	91 05       	cpc	r25, r1
    3c22:	71 f1       	breq	.+92     	; 0x3c80 <tc_get_resolution+0xae>
    3c24:	85 30       	cpi	r24, 0x05	; 5
    3c26:	91 05       	cpc	r25, r1
    3c28:	e4 f1       	brlt	.+120    	; 0x3ca2 <tc_get_resolution+0xd0>
    3c2a:	86 30       	cpi	r24, 0x06	; 6
    3c2c:	91 05       	cpc	r25, r1
    3c2e:	d9 f0       	breq	.+54     	; 0x3c66 <tc_get_resolution+0x94>
    3c30:	87 30       	cpi	r24, 0x07	; 7
    3c32:	91 05       	cpc	r25, r1
    3c34:	31 f0       	breq	.+12     	; 0x3c42 <tc_get_resolution+0x70>
    3c36:	64 c0       	rjmp	.+200    	; 0x3d00 <tc_get_resolution+0x12e>
    3c38:	19 82       	std	Y+1, r1	; 0x01
    3c3a:	1a 82       	std	Y+2, r1	; 0x02
    3c3c:	1b 82       	std	Y+3, r1	; 0x03
    3c3e:	1c 82       	std	Y+4, r1	; 0x04
    3c40:	65 c0       	rjmp	.+202    	; 0x3d0c <tc_get_resolution+0x13a>
    3c42:	89 81       	ldd	r24, Y+1	; 0x01
    3c44:	9a 81       	ldd	r25, Y+2	; 0x02
    3c46:	ab 81       	ldd	r26, Y+3	; 0x03
    3c48:	bc 81       	ldd	r27, Y+4	; 0x04
    3c4a:	07 2e       	mov	r0, r23
    3c4c:	7a e0       	ldi	r23, 0x0A	; 10
    3c4e:	b6 95       	lsr	r27
    3c50:	a7 95       	ror	r26
    3c52:	97 95       	ror	r25
    3c54:	87 95       	ror	r24
    3c56:	7a 95       	dec	r23
    3c58:	d1 f7       	brne	.-12     	; 0x3c4e <tc_get_resolution+0x7c>
    3c5a:	70 2d       	mov	r23, r0
    3c5c:	89 83       	std	Y+1, r24	; 0x01
    3c5e:	9a 83       	std	Y+2, r25	; 0x02
    3c60:	ab 83       	std	Y+3, r26	; 0x03
    3c62:	bc 83       	std	Y+4, r27	; 0x04
    3c64:	53 c0       	rjmp	.+166    	; 0x3d0c <tc_get_resolution+0x13a>
    3c66:	89 81       	ldd	r24, Y+1	; 0x01
    3c68:	9a 81       	ldd	r25, Y+2	; 0x02
    3c6a:	ab 81       	ldd	r26, Y+3	; 0x03
    3c6c:	bc 81       	ldd	r27, Y+4	; 0x04
    3c6e:	89 2f       	mov	r24, r25
    3c70:	9a 2f       	mov	r25, r26
    3c72:	ab 2f       	mov	r26, r27
    3c74:	bb 27       	eor	r27, r27
    3c76:	89 83       	std	Y+1, r24	; 0x01
    3c78:	9a 83       	std	Y+2, r25	; 0x02
    3c7a:	ab 83       	std	Y+3, r26	; 0x03
    3c7c:	bc 83       	std	Y+4, r27	; 0x04
    3c7e:	46 c0       	rjmp	.+140    	; 0x3d0c <tc_get_resolution+0x13a>
    3c80:	89 81       	ldd	r24, Y+1	; 0x01
    3c82:	9a 81       	ldd	r25, Y+2	; 0x02
    3c84:	ab 81       	ldd	r26, Y+3	; 0x03
    3c86:	bc 81       	ldd	r27, Y+4	; 0x04
    3c88:	68 94       	set
    3c8a:	15 f8       	bld	r1, 5
    3c8c:	b6 95       	lsr	r27
    3c8e:	a7 95       	ror	r26
    3c90:	97 95       	ror	r25
    3c92:	87 95       	ror	r24
    3c94:	16 94       	lsr	r1
    3c96:	d1 f7       	brne	.-12     	; 0x3c8c <tc_get_resolution+0xba>
    3c98:	89 83       	std	Y+1, r24	; 0x01
    3c9a:	9a 83       	std	Y+2, r25	; 0x02
    3c9c:	ab 83       	std	Y+3, r26	; 0x03
    3c9e:	bc 83       	std	Y+4, r27	; 0x04
    3ca0:	35 c0       	rjmp	.+106    	; 0x3d0c <tc_get_resolution+0x13a>
    3ca2:	89 81       	ldd	r24, Y+1	; 0x01
    3ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ca6:	ab 81       	ldd	r26, Y+3	; 0x03
    3ca8:	bc 81       	ldd	r27, Y+4	; 0x04
    3caa:	68 94       	set
    3cac:	12 f8       	bld	r1, 2
    3cae:	b6 95       	lsr	r27
    3cb0:	a7 95       	ror	r26
    3cb2:	97 95       	ror	r25
    3cb4:	87 95       	ror	r24
    3cb6:	16 94       	lsr	r1
    3cb8:	d1 f7       	brne	.-12     	; 0x3cae <tc_get_resolution+0xdc>
    3cba:	89 83       	std	Y+1, r24	; 0x01
    3cbc:	9a 83       	std	Y+2, r25	; 0x02
    3cbe:	ab 83       	std	Y+3, r26	; 0x03
    3cc0:	bc 83       	std	Y+4, r27	; 0x04
    3cc2:	24 c0       	rjmp	.+72     	; 0x3d0c <tc_get_resolution+0x13a>
    3cc4:	89 81       	ldd	r24, Y+1	; 0x01
    3cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    3cc8:	ab 81       	ldd	r26, Y+3	; 0x03
    3cca:	bc 81       	ldd	r27, Y+4	; 0x04
    3ccc:	b6 95       	lsr	r27
    3cce:	a7 95       	ror	r26
    3cd0:	97 95       	ror	r25
    3cd2:	87 95       	ror	r24
    3cd4:	b6 95       	lsr	r27
    3cd6:	a7 95       	ror	r26
    3cd8:	97 95       	ror	r25
    3cda:	87 95       	ror	r24
    3cdc:	89 83       	std	Y+1, r24	; 0x01
    3cde:	9a 83       	std	Y+2, r25	; 0x02
    3ce0:	ab 83       	std	Y+3, r26	; 0x03
    3ce2:	bc 83       	std	Y+4, r27	; 0x04
    3ce4:	13 c0       	rjmp	.+38     	; 0x3d0c <tc_get_resolution+0x13a>
    3ce6:	89 81       	ldd	r24, Y+1	; 0x01
    3ce8:	9a 81       	ldd	r25, Y+2	; 0x02
    3cea:	ab 81       	ldd	r26, Y+3	; 0x03
    3cec:	bc 81       	ldd	r27, Y+4	; 0x04
    3cee:	b6 95       	lsr	r27
    3cf0:	a7 95       	ror	r26
    3cf2:	97 95       	ror	r25
    3cf4:	87 95       	ror	r24
    3cf6:	89 83       	std	Y+1, r24	; 0x01
    3cf8:	9a 83       	std	Y+2, r25	; 0x02
    3cfa:	ab 83       	std	Y+3, r26	; 0x03
    3cfc:	bc 83       	std	Y+4, r27	; 0x04
    3cfe:	06 c0       	rjmp	.+12     	; 0x3d0c <tc_get_resolution+0x13a>
    3d00:	19 82       	std	Y+1, r1	; 0x01
    3d02:	1a 82       	std	Y+2, r1	; 0x02
    3d04:	1b 82       	std	Y+3, r1	; 0x03
    3d06:	1c 82       	std	Y+4, r1	; 0x04
    3d08:	01 c0       	rjmp	.+2      	; 0x3d0c <tc_get_resolution+0x13a>
    3d0a:	00 00       	nop
    3d0c:	89 81       	ldd	r24, Y+1	; 0x01
    3d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d10:	ab 81       	ldd	r26, Y+3	; 0x03
    3d12:	bc 81       	ldd	r27, Y+4	; 0x04
    3d14:	bc 01       	movw	r22, r24
    3d16:	cd 01       	movw	r24, r26
    3d18:	26 96       	adiw	r28, 0x06	; 6
    3d1a:	cd bf       	out	0x3d, r28	; 61
    3d1c:	de bf       	out	0x3e, r29	; 62
    3d1e:	df 91       	pop	r29
    3d20:	cf 91       	pop	r28
    3d22:	08 95       	ret

00003d24 <tc_set_direction>:
    3d24:	cf 93       	push	r28
    3d26:	df 93       	push	r29
    3d28:	00 d0       	rcall	.+0      	; 0x3d2a <tc_set_direction+0x6>
    3d2a:	cd b7       	in	r28, 0x3d	; 61
    3d2c:	de b7       	in	r29, 0x3e	; 62
    3d2e:	89 83       	std	Y+1, r24	; 0x01
    3d30:	9a 83       	std	Y+2, r25	; 0x02
    3d32:	6b 83       	std	Y+3, r22	; 0x03
    3d34:	8b 81       	ldd	r24, Y+3	; 0x03
    3d36:	88 23       	and	r24, r24
    3d38:	59 f4       	brne	.+22     	; 0x3d50 <tc_set_direction+0x2c>
    3d3a:	89 81       	ldd	r24, Y+1	; 0x01
    3d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d3e:	fc 01       	movw	r30, r24
    3d40:	80 85       	ldd	r24, Z+8	; 0x08
    3d42:	8e 6f       	ori	r24, 0xFE	; 254
    3d44:	28 2f       	mov	r18, r24
    3d46:	89 81       	ldd	r24, Y+1	; 0x01
    3d48:	9a 81       	ldd	r25, Y+2	; 0x02
    3d4a:	fc 01       	movw	r30, r24
    3d4c:	20 87       	std	Z+8, r18	; 0x08
    3d4e:	0a c0       	rjmp	.+20     	; 0x3d64 <tc_set_direction+0x40>
    3d50:	89 81       	ldd	r24, Y+1	; 0x01
    3d52:	9a 81       	ldd	r25, Y+2	; 0x02
    3d54:	fc 01       	movw	r30, r24
    3d56:	81 85       	ldd	r24, Z+9	; 0x09
    3d58:	28 2f       	mov	r18, r24
    3d5a:	21 60       	ori	r18, 0x01	; 1
    3d5c:	89 81       	ldd	r24, Y+1	; 0x01
    3d5e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d60:	fc 01       	movw	r30, r24
    3d62:	21 87       	std	Z+9, r18	; 0x09
    3d64:	23 96       	adiw	r28, 0x03	; 3
    3d66:	cd bf       	out	0x3d, r28	; 61
    3d68:	de bf       	out	0x3e, r29	; 62
    3d6a:	df 91       	pop	r29
    3d6c:	cf 91       	pop	r28
    3d6e:	08 95       	ret

00003d70 <tc_write_period>:
    3d70:	cf 93       	push	r28
    3d72:	df 93       	push	r29
    3d74:	00 d0       	rcall	.+0      	; 0x3d76 <tc_write_period+0x6>
    3d76:	1f 92       	push	r1
    3d78:	cd b7       	in	r28, 0x3d	; 61
    3d7a:	de b7       	in	r29, 0x3e	; 62
    3d7c:	89 83       	std	Y+1, r24	; 0x01
    3d7e:	9a 83       	std	Y+2, r25	; 0x02
    3d80:	6b 83       	std	Y+3, r22	; 0x03
    3d82:	7c 83       	std	Y+4, r23	; 0x04
    3d84:	89 81       	ldd	r24, Y+1	; 0x01
    3d86:	9a 81       	ldd	r25, Y+2	; 0x02
    3d88:	2b 81       	ldd	r18, Y+3	; 0x03
    3d8a:	3c 81       	ldd	r19, Y+4	; 0x04
    3d8c:	fc 01       	movw	r30, r24
    3d8e:	26 a3       	std	Z+38, r18	; 0x26
    3d90:	37 a3       	std	Z+39, r19	; 0x27
    3d92:	24 96       	adiw	r28, 0x04	; 4
    3d94:	cd bf       	out	0x3d, r28	; 61
    3d96:	de bf       	out	0x3e, r29	; 62
    3d98:	df 91       	pop	r29
    3d9a:	cf 91       	pop	r28
    3d9c:	08 95       	ret

00003d9e <usart_serial_init>:
    3d9e:	cf 93       	push	r28
    3da0:	df 93       	push	r29
    3da2:	cd b7       	in	r28, 0x3d	; 61
    3da4:	de b7       	in	r29, 0x3e	; 62
    3da6:	2b 97       	sbiw	r28, 0x0b	; 11
    3da8:	cd bf       	out	0x3d, r28	; 61
    3daa:	de bf       	out	0x3e, r29	; 62
    3dac:	88 87       	std	Y+8, r24	; 0x08
    3dae:	99 87       	std	Y+9, r25	; 0x09
    3db0:	6a 87       	std	Y+10, r22	; 0x0a
    3db2:	7b 87       	std	Y+11, r23	; 0x0b
    3db4:	8a 85       	ldd	r24, Y+10	; 0x0a
    3db6:	9b 85       	ldd	r25, Y+11	; 0x0b
    3db8:	fc 01       	movw	r30, r24
    3dba:	84 81       	ldd	r24, Z+4	; 0x04
    3dbc:	8d 83       	std	Y+5, r24	; 0x05
    3dbe:	8a 85       	ldd	r24, Y+10	; 0x0a
    3dc0:	9b 85       	ldd	r25, Y+11	; 0x0b
    3dc2:	fc 01       	movw	r30, r24
    3dc4:	85 81       	ldd	r24, Z+5	; 0x05
    3dc6:	8e 83       	std	Y+6, r24	; 0x06
    3dc8:	8a 85       	ldd	r24, Y+10	; 0x0a
    3dca:	9b 85       	ldd	r25, Y+11	; 0x0b
    3dcc:	fc 01       	movw	r30, r24
    3dce:	86 81       	ldd	r24, Z+6	; 0x06
    3dd0:	8f 83       	std	Y+7, r24	; 0x07
    3dd2:	8a 85       	ldd	r24, Y+10	; 0x0a
    3dd4:	9b 85       	ldd	r25, Y+11	; 0x0b
    3dd6:	fc 01       	movw	r30, r24
    3dd8:	80 81       	ld	r24, Z
    3dda:	91 81       	ldd	r25, Z+1	; 0x01
    3ddc:	a2 81       	ldd	r26, Z+2	; 0x02
    3dde:	b3 81       	ldd	r27, Z+3	; 0x03
    3de0:	89 83       	std	Y+1, r24	; 0x01
    3de2:	9a 83       	std	Y+2, r25	; 0x02
    3de4:	ab 83       	std	Y+3, r26	; 0x03
    3de6:	bc 83       	std	Y+4, r27	; 0x04
    3de8:	88 85       	ldd	r24, Y+8	; 0x08
    3dea:	99 85       	ldd	r25, Y+9	; 0x09
    3dec:	80 3a       	cpi	r24, 0xA0	; 160
    3dee:	f8 e0       	ldi	r31, 0x08	; 8
    3df0:	9f 07       	cpc	r25, r31
    3df2:	21 f4       	brne	.+8      	; 0x3dfc <usart_serial_init+0x5e>
    3df4:	60 e1       	ldi	r22, 0x10	; 16
    3df6:	83 e0       	ldi	r24, 0x03	; 3
    3df8:	0e 94 06 5b 	call	0xb60c	; 0xb60c <sysclk_enable_module>
    3dfc:	88 85       	ldd	r24, Y+8	; 0x08
    3dfe:	99 85       	ldd	r25, Y+9	; 0x09
    3e00:	80 3b       	cpi	r24, 0xB0	; 176
    3e02:	28 e0       	ldi	r18, 0x08	; 8
    3e04:	92 07       	cpc	r25, r18
    3e06:	21 f4       	brne	.+8      	; 0x3e10 <usart_serial_init+0x72>
    3e08:	60 e2       	ldi	r22, 0x20	; 32
    3e0a:	83 e0       	ldi	r24, 0x03	; 3
    3e0c:	0e 94 06 5b 	call	0xb60c	; 0xb60c <sysclk_enable_module>
    3e10:	88 85       	ldd	r24, Y+8	; 0x08
    3e12:	99 85       	ldd	r25, Y+9	; 0x09
    3e14:	80 3a       	cpi	r24, 0xA0	; 160
    3e16:	e9 e0       	ldi	r30, 0x09	; 9
    3e18:	9e 07       	cpc	r25, r30
    3e1a:	21 f4       	brne	.+8      	; 0x3e24 <usart_serial_init+0x86>
    3e1c:	60 e1       	ldi	r22, 0x10	; 16
    3e1e:	84 e0       	ldi	r24, 0x04	; 4
    3e20:	0e 94 06 5b 	call	0xb60c	; 0xb60c <sysclk_enable_module>
    3e24:	88 85       	ldd	r24, Y+8	; 0x08
    3e26:	99 85       	ldd	r25, Y+9	; 0x09
    3e28:	80 3b       	cpi	r24, 0xB0	; 176
    3e2a:	f9 e0       	ldi	r31, 0x09	; 9
    3e2c:	9f 07       	cpc	r25, r31
    3e2e:	21 f4       	brne	.+8      	; 0x3e38 <usart_serial_init+0x9a>
    3e30:	60 e2       	ldi	r22, 0x20	; 32
    3e32:	84 e0       	ldi	r24, 0x04	; 4
    3e34:	0e 94 06 5b 	call	0xb60c	; 0xb60c <sysclk_enable_module>
    3e38:	88 85       	ldd	r24, Y+8	; 0x08
    3e3a:	99 85       	ldd	r25, Y+9	; 0x09
    3e3c:	80 3a       	cpi	r24, 0xA0	; 160
    3e3e:	2a e0       	ldi	r18, 0x0A	; 10
    3e40:	92 07       	cpc	r25, r18
    3e42:	21 f4       	brne	.+8      	; 0x3e4c <usart_serial_init+0xae>
    3e44:	60 e1       	ldi	r22, 0x10	; 16
    3e46:	85 e0       	ldi	r24, 0x05	; 5
    3e48:	0e 94 06 5b 	call	0xb60c	; 0xb60c <sysclk_enable_module>
    3e4c:	88 85       	ldd	r24, Y+8	; 0x08
    3e4e:	99 85       	ldd	r25, Y+9	; 0x09
    3e50:	80 3a       	cpi	r24, 0xA0	; 160
    3e52:	eb e0       	ldi	r30, 0x0B	; 11
    3e54:	9e 07       	cpc	r25, r30
    3e56:	21 f4       	brne	.+8      	; 0x3e60 <usart_serial_init+0xc2>
    3e58:	60 e1       	ldi	r22, 0x10	; 16
    3e5a:	86 e0       	ldi	r24, 0x06	; 6
    3e5c:	0e 94 06 5b 	call	0xb60c	; 0xb60c <sysclk_enable_module>
    3e60:	88 85       	ldd	r24, Y+8	; 0x08
    3e62:	99 85       	ldd	r25, Y+9	; 0x09
    3e64:	9e 01       	movw	r18, r28
    3e66:	2f 5f       	subi	r18, 0xFF	; 255
    3e68:	3f 4f       	sbci	r19, 0xFF	; 255
    3e6a:	b9 01       	movw	r22, r18
    3e6c:	0e 94 da 69 	call	0xd3b4	; 0xd3b4 <usart_init_rs232>
    3e70:	88 23       	and	r24, r24
    3e72:	11 f0       	breq	.+4      	; 0x3e78 <usart_serial_init+0xda>
    3e74:	81 e0       	ldi	r24, 0x01	; 1
    3e76:	01 c0       	rjmp	.+2      	; 0x3e7a <usart_serial_init+0xdc>
    3e78:	80 e0       	ldi	r24, 0x00	; 0
    3e7a:	2b 96       	adiw	r28, 0x0b	; 11
    3e7c:	cd bf       	out	0x3d, r28	; 61
    3e7e:	de bf       	out	0x3e, r29	; 62
    3e80:	df 91       	pop	r29
    3e82:	cf 91       	pop	r28
    3e84:	08 95       	ret

00003e86 <AT24CXX_iterator_to_address>:
    3e86:	cf 93       	push	r28
    3e88:	df 93       	push	r29
    3e8a:	cd b7       	in	r28, 0x3d	; 61
    3e8c:	de b7       	in	r29, 0x3e	; 62
    3e8e:	28 97       	sbiw	r28, 0x08	; 8
    3e90:	cd bf       	out	0x3d, r28	; 61
    3e92:	de bf       	out	0x3e, r29	; 62
    3e94:	89 83       	std	Y+1, r24	; 0x01
    3e96:	9a 83       	std	Y+2, r25	; 0x02
    3e98:	6b 83       	std	Y+3, r22	; 0x03
    3e9a:	7c 83       	std	Y+4, r23	; 0x04
    3e9c:	4d 83       	std	Y+5, r20	; 0x05
    3e9e:	5e 83       	std	Y+6, r21	; 0x06
    3ea0:	2f 83       	std	Y+7, r18	; 0x07
    3ea2:	38 87       	std	Y+8, r19	; 0x08
    3ea4:	89 81       	ldd	r24, Y+1	; 0x01
    3ea6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ea8:	fc 01       	movw	r30, r24
    3eaa:	22 81       	ldd	r18, Z+2	; 0x02
    3eac:	8b 81       	ldd	r24, Y+3	; 0x03
    3eae:	9c 81       	ldd	r25, Y+4	; 0x04
    3eb0:	fc 01       	movw	r30, r24
    3eb2:	20 83       	st	Z, r18
    3eb4:	89 81       	ldd	r24, Y+1	; 0x01
    3eb6:	9a 81       	ldd	r25, Y+2	; 0x02
    3eb8:	fc 01       	movw	r30, r24
    3eba:	21 81       	ldd	r18, Z+1	; 0x01
    3ebc:	8d 81       	ldd	r24, Y+5	; 0x05
    3ebe:	9e 81       	ldd	r25, Y+6	; 0x06
    3ec0:	fc 01       	movw	r30, r24
    3ec2:	20 83       	st	Z, r18
    3ec4:	89 81       	ldd	r24, Y+1	; 0x01
    3ec6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ec8:	fc 01       	movw	r30, r24
    3eca:	20 81       	ld	r18, Z
    3ecc:	8f 81       	ldd	r24, Y+7	; 0x07
    3ece:	98 85       	ldd	r25, Y+8	; 0x08
    3ed0:	fc 01       	movw	r30, r24
    3ed2:	20 83       	st	Z, r18
    3ed4:	28 96       	adiw	r28, 0x08	; 8
    3ed6:	cd bf       	out	0x3d, r28	; 61
    3ed8:	de bf       	out	0x3e, r29	; 62
    3eda:	df 91       	pop	r29
    3edc:	cf 91       	pop	r28
    3ede:	08 95       	ret

00003ee0 <datalogger_tick>:
    3ee0:	ef 92       	push	r14
    3ee2:	ff 92       	push	r15
    3ee4:	0f 93       	push	r16
    3ee6:	1f 93       	push	r17
    3ee8:	cf 93       	push	r28
    3eea:	df 93       	push	r29
    3eec:	cd b7       	in	r28, 0x3d	; 61
    3eee:	de b7       	in	r29, 0x3e	; 62
    3ef0:	28 97       	sbiw	r28, 0x08	; 8
    3ef2:	cd bf       	out	0x3d, r28	; 61
    3ef4:	de bf       	out	0x3e, r29	; 62
    3ef6:	6d 83       	std	Y+5, r22	; 0x05
    3ef8:	7e 83       	std	Y+6, r23	; 0x06
    3efa:	8f 83       	std	Y+7, r24	; 0x07
    3efc:	98 87       	std	Y+8, r25	; 0x08
    3efe:	20 91 b9 21 	lds	r18, 0x21B9
    3f02:	30 91 ba 21 	lds	r19, 0x21BA
    3f06:	40 91 bb 21 	lds	r20, 0x21BB
    3f0a:	50 91 bc 21 	lds	r21, 0x21BC
    3f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f10:	9e 81       	ldd	r25, Y+6	; 0x06
    3f12:	af 81       	ldd	r26, Y+7	; 0x07
    3f14:	b8 85       	ldd	r27, Y+8	; 0x08
    3f16:	82 0f       	add	r24, r18
    3f18:	93 1f       	adc	r25, r19
    3f1a:	a4 1f       	adc	r26, r20
    3f1c:	b5 1f       	adc	r27, r21
    3f1e:	bc 01       	movw	r22, r24
    3f20:	cd 01       	movw	r24, r26
    3f22:	0e 94 7e 5f 	call	0xbefc	; 0xbefc <rtc_set_alarm>
    3f26:	88 e1       	ldi	r24, 0x18	; 24
    3f28:	cc dd       	rcall	.-1128   	; 0x3ac2 <ioport_toggle_pin>
    3f2a:	10 92 07 20 	sts	0x2007, r1
    3f2e:	a8 95       	wdr
    3f30:	80 91 08 20 	lds	r24, 0x2008
    3f34:	90 91 09 20 	lds	r25, 0x2009
    3f38:	a0 91 0a 20 	lds	r26, 0x200A
    3f3c:	b0 91 0b 20 	lds	r27, 0x200B
    3f40:	2d 81       	ldd	r18, Y+5	; 0x05
    3f42:	3e 81       	ldd	r19, Y+6	; 0x06
    3f44:	4f 81       	ldd	r20, Y+7	; 0x07
    3f46:	58 85       	ldd	r21, Y+8	; 0x08
    3f48:	79 01       	movw	r14, r18
    3f4a:	8a 01       	movw	r16, r20
    3f4c:	e8 1a       	sub	r14, r24
    3f4e:	f9 0a       	sbc	r15, r25
    3f50:	0a 0b       	sbc	r16, r26
    3f52:	1b 0b       	sbc	r17, r27
    3f54:	d8 01       	movw	r26, r16
    3f56:	c7 01       	movw	r24, r14
    3f58:	89 83       	std	Y+1, r24	; 0x01
    3f5a:	9a 83       	std	Y+2, r25	; 0x02
    3f5c:	ab 83       	std	Y+3, r26	; 0x03
    3f5e:	bc 83       	std	Y+4, r27	; 0x04
    3f60:	8d 81       	ldd	r24, Y+5	; 0x05
    3f62:	9e 81       	ldd	r25, Y+6	; 0x06
    3f64:	af 81       	ldd	r26, Y+7	; 0x07
    3f66:	b8 85       	ldd	r27, Y+8	; 0x08
    3f68:	80 93 08 20 	sts	0x2008, r24
    3f6c:	90 93 09 20 	sts	0x2009, r25
    3f70:	a0 93 0a 20 	sts	0x200A, r26
    3f74:	b0 93 0b 20 	sts	0x200B, r27
    3f78:	20 91 a1 21 	lds	r18, 0x21A1
    3f7c:	30 91 a2 21 	lds	r19, 0x21A2
    3f80:	40 91 a3 21 	lds	r20, 0x21A3
    3f84:	50 91 a4 21 	lds	r21, 0x21A4
    3f88:	89 81       	ldd	r24, Y+1	; 0x01
    3f8a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f8c:	ab 81       	ldd	r26, Y+3	; 0x03
    3f8e:	bc 81       	ldd	r27, Y+4	; 0x04
    3f90:	82 0f       	add	r24, r18
    3f92:	93 1f       	adc	r25, r19
    3f94:	a4 1f       	adc	r26, r20
    3f96:	b5 1f       	adc	r27, r21
    3f98:	80 93 a1 21 	sts	0x21A1, r24
    3f9c:	90 93 a2 21 	sts	0x21A2, r25
    3fa0:	a0 93 a3 21 	sts	0x21A3, r26
    3fa4:	b0 93 a4 21 	sts	0x21A4, r27
    3fa8:	80 91 84 21 	lds	r24, 0x2184
    3fac:	88 23       	and	r24, r24
    3fae:	01 f5       	brne	.+64     	; 0x3ff0 <datalogger_tick+0x110>
    3fb0:	20 91 a1 21 	lds	r18, 0x21A1
    3fb4:	30 91 a2 21 	lds	r19, 0x21A2
    3fb8:	40 91 a3 21 	lds	r20, 0x21A3
    3fbc:	50 91 a4 21 	lds	r21, 0x21A4
    3fc0:	80 91 b5 21 	lds	r24, 0x21B5
    3fc4:	90 91 b6 21 	lds	r25, 0x21B6
    3fc8:	a0 91 b7 21 	lds	r26, 0x21B7
    3fcc:	b0 91 b8 21 	lds	r27, 0x21B8
    3fd0:	28 17       	cp	r18, r24
    3fd2:	39 07       	cpc	r19, r25
    3fd4:	4a 07       	cpc	r20, r26
    3fd6:	5b 07       	cpc	r21, r27
    3fd8:	58 f0       	brcs	.+22     	; 0x3ff0 <datalogger_tick+0x110>
    3fda:	10 92 a1 21 	sts	0x21A1, r1
    3fde:	10 92 a2 21 	sts	0x21A2, r1
    3fe2:	10 92 a3 21 	sts	0x21A3, r1
    3fe6:	10 92 a4 21 	sts	0x21A4, r1
    3fea:	81 e0       	ldi	r24, 0x01	; 1
    3fec:	80 93 84 21 	sts	0x2184, r24
    3ff0:	20 91 a5 21 	lds	r18, 0x21A5
    3ff4:	30 91 a6 21 	lds	r19, 0x21A6
    3ff8:	40 91 a7 21 	lds	r20, 0x21A7
    3ffc:	50 91 a8 21 	lds	r21, 0x21A8
    4000:	89 81       	ldd	r24, Y+1	; 0x01
    4002:	9a 81       	ldd	r25, Y+2	; 0x02
    4004:	ab 81       	ldd	r26, Y+3	; 0x03
    4006:	bc 81       	ldd	r27, Y+4	; 0x04
    4008:	82 0f       	add	r24, r18
    400a:	93 1f       	adc	r25, r19
    400c:	a4 1f       	adc	r26, r20
    400e:	b5 1f       	adc	r27, r21
    4010:	80 93 a5 21 	sts	0x21A5, r24
    4014:	90 93 a6 21 	sts	0x21A6, r25
    4018:	a0 93 a7 21 	sts	0x21A7, r26
    401c:	b0 93 a8 21 	sts	0x21A8, r27
    4020:	80 91 83 21 	lds	r24, 0x2183
    4024:	88 23       	and	r24, r24
    4026:	41 f5       	brne	.+80     	; 0x4078 <datalogger_tick+0x198>
    4028:	20 91 a5 21 	lds	r18, 0x21A5
    402c:	30 91 a6 21 	lds	r19, 0x21A6
    4030:	40 91 a7 21 	lds	r20, 0x21A7
    4034:	50 91 a8 21 	lds	r21, 0x21A8
    4038:	80 91 ad 21 	lds	r24, 0x21AD
    403c:	90 91 ae 21 	lds	r25, 0x21AE
    4040:	a0 91 af 21 	lds	r26, 0x21AF
    4044:	b0 91 b0 21 	lds	r27, 0x21B0
    4048:	28 17       	cp	r18, r24
    404a:	39 07       	cpc	r19, r25
    404c:	4a 07       	cpc	r20, r26
    404e:	5b 07       	cpc	r21, r27
    4050:	98 f0       	brcs	.+38     	; 0x4078 <datalogger_tick+0x198>
    4052:	10 92 a5 21 	sts	0x21A5, r1
    4056:	10 92 a6 21 	sts	0x21A6, r1
    405a:	10 92 a7 21 	sts	0x21A7, r1
    405e:	10 92 a8 21 	sts	0x21A8, r1
    4062:	8d 81       	ldd	r24, Y+5	; 0x05
    4064:	9e 81       	ldd	r25, Y+6	; 0x06
    4066:	af 81       	ldd	r26, Y+7	; 0x07
    4068:	b8 85       	ldd	r27, Y+8	; 0x08
    406a:	bc 01       	movw	r22, r24
    406c:	cd 01       	movw	r24, r26
    406e:	0e 94 0b 3e 	call	0x7c16	; 0x7c16 <dl_snapshot_make>
    4072:	81 e0       	ldi	r24, 0x01	; 1
    4074:	80 93 83 21 	sts	0x2183, r24
    4078:	20 91 a9 21 	lds	r18, 0x21A9
    407c:	30 91 aa 21 	lds	r19, 0x21AA
    4080:	40 91 ab 21 	lds	r20, 0x21AB
    4084:	50 91 ac 21 	lds	r21, 0x21AC
    4088:	89 81       	ldd	r24, Y+1	; 0x01
    408a:	9a 81       	ldd	r25, Y+2	; 0x02
    408c:	ab 81       	ldd	r26, Y+3	; 0x03
    408e:	bc 81       	ldd	r27, Y+4	; 0x04
    4090:	82 0f       	add	r24, r18
    4092:	93 1f       	adc	r25, r19
    4094:	a4 1f       	adc	r26, r20
    4096:	b5 1f       	adc	r27, r21
    4098:	80 93 a9 21 	sts	0x21A9, r24
    409c:	90 93 aa 21 	sts	0x21AA, r25
    40a0:	a0 93 ab 21 	sts	0x21AB, r26
    40a4:	b0 93 ac 21 	sts	0x21AC, r27
    40a8:	80 91 82 21 	lds	r24, 0x2182
    40ac:	88 23       	and	r24, r24
    40ae:	01 f5       	brne	.+64     	; 0x40f0 <datalogger_tick+0x210>
    40b0:	20 91 a9 21 	lds	r18, 0x21A9
    40b4:	30 91 aa 21 	lds	r19, 0x21AA
    40b8:	40 91 ab 21 	lds	r20, 0x21AB
    40bc:	50 91 ac 21 	lds	r21, 0x21AC
    40c0:	80 91 b1 21 	lds	r24, 0x21B1
    40c4:	90 91 b2 21 	lds	r25, 0x21B2
    40c8:	a0 91 b3 21 	lds	r26, 0x21B3
    40cc:	b0 91 b4 21 	lds	r27, 0x21B4
    40d0:	28 17       	cp	r18, r24
    40d2:	39 07       	cpc	r19, r25
    40d4:	4a 07       	cpc	r20, r26
    40d6:	5b 07       	cpc	r21, r27
    40d8:	58 f0       	brcs	.+22     	; 0x40f0 <datalogger_tick+0x210>
    40da:	10 92 a9 21 	sts	0x21A9, r1
    40de:	10 92 aa 21 	sts	0x21AA, r1
    40e2:	10 92 ab 21 	sts	0x21AB, r1
    40e6:	10 92 ac 21 	sts	0x21AC, r1
    40ea:	81 e0       	ldi	r24, 0x01	; 1
    40ec:	80 93 81 21 	sts	0x2181, r24
    40f0:	20 91 b1 21 	lds	r18, 0x21B1
    40f4:	30 91 b2 21 	lds	r19, 0x21B2
    40f8:	40 91 b3 21 	lds	r20, 0x21B3
    40fc:	50 91 b4 21 	lds	r21, 0x21B4
    4100:	da 01       	movw	r26, r20
    4102:	c9 01       	movw	r24, r18
    4104:	88 0f       	add	r24, r24
    4106:	99 1f       	adc	r25, r25
    4108:	aa 1f       	adc	r26, r26
    410a:	bb 1f       	adc	r27, r27
    410c:	28 0f       	add	r18, r24
    410e:	39 1f       	adc	r19, r25
    4110:	4a 1f       	adc	r20, r26
    4112:	5b 1f       	adc	r21, r27
    4114:	80 91 a9 21 	lds	r24, 0x21A9
    4118:	90 91 aa 21 	lds	r25, 0x21AA
    411c:	a0 91 ab 21 	lds	r26, 0x21AB
    4120:	b0 91 ac 21 	lds	r27, 0x21AC
    4124:	28 17       	cp	r18, r24
    4126:	39 07       	cpc	r19, r25
    4128:	4a 07       	cpc	r20, r26
    412a:	5b 07       	cpc	r21, r27
    412c:	10 f4       	brcc	.+4      	; 0x4132 <datalogger_tick+0x252>
    412e:	0e 94 92 59 	call	0xb324	; 0xb324 <wdt_reset_mcu>
    4132:	28 96       	adiw	r28, 0x08	; 8
    4134:	cd bf       	out	0x3d, r28	; 61
    4136:	de bf       	out	0x3e, r29	; 62
    4138:	df 91       	pop	r29
    413a:	cf 91       	pop	r28
    413c:	1f 91       	pop	r17
    413e:	0f 91       	pop	r16
    4140:	ff 90       	pop	r15
    4142:	ef 90       	pop	r14
    4144:	08 95       	ret

00004146 <datalogger_read_iterators_from_eeprom>:
    4146:	2f 92       	push	r2
    4148:	3f 92       	push	r3
    414a:	4f 92       	push	r4
    414c:	5f 92       	push	r5
    414e:	6f 92       	push	r6
    4150:	7f 92       	push	r7
    4152:	8f 92       	push	r8
    4154:	9f 92       	push	r9
    4156:	af 92       	push	r10
    4158:	bf 92       	push	r11
    415a:	cf 92       	push	r12
    415c:	df 92       	push	r13
    415e:	ef 92       	push	r14
    4160:	ff 92       	push	r15
    4162:	0f 93       	push	r16
    4164:	1f 93       	push	r17
    4166:	cf 93       	push	r28
    4168:	df 93       	push	r29
    416a:	cd b7       	in	r28, 0x3d	; 61
    416c:	de b7       	in	r29, 0x3e	; 62
    416e:	a4 97       	sbiw	r28, 0x24	; 36
    4170:	cd bf       	out	0x3d, r28	; 61
    4172:	de bf       	out	0x3e, r29	; 62
    4174:	0e 94 55 45 	call	0x8aaa	; 0x8aaa <AT24CXX_Init>
    4178:	1a 82       	std	Y+2, r1	; 0x02
    417a:	a3 c1       	rjmp	.+838    	; 0x44c2 <datalogger_read_iterators_from_eeprom+0x37c>
    417c:	8a 81       	ldd	r24, Y+2	; 0x02
    417e:	88 2f       	mov	r24, r24
    4180:	90 e0       	ldi	r25, 0x00	; 0
    4182:	88 0f       	add	r24, r24
    4184:	99 1f       	adc	r25, r25
    4186:	88 0f       	add	r24, r24
    4188:	99 1f       	adc	r25, r25
    418a:	88 0f       	add	r24, r24
    418c:	99 1f       	adc	r25, r25
    418e:	8b 83       	std	Y+3, r24	; 0x03
    4190:	9c 83       	std	Y+4, r25	; 0x04
    4192:	19 82       	std	Y+1, r1	; 0x01
    4194:	8f c1       	rjmp	.+798    	; 0x44b4 <datalogger_read_iterators_from_eeprom+0x36e>
    4196:	89 81       	ldd	r24, Y+1	; 0x01
    4198:	48 2f       	mov	r20, r24
    419a:	50 e0       	ldi	r21, 0x00	; 0
    419c:	80 91 4e 21 	lds	r24, 0x214E
    41a0:	28 2f       	mov	r18, r24
    41a2:	30 e0       	ldi	r19, 0x00	; 0
    41a4:	42 9f       	mul	r20, r18
    41a6:	c0 01       	movw	r24, r0
    41a8:	43 9f       	mul	r20, r19
    41aa:	90 0d       	add	r25, r0
    41ac:	52 9f       	mul	r21, r18
    41ae:	90 0d       	add	r25, r0
    41b0:	11 24       	eor	r1, r1
    41b2:	9c 01       	movw	r18, r24
    41b4:	8b 81       	ldd	r24, Y+3	; 0x03
    41b6:	9c 81       	ldd	r25, Y+4	; 0x04
    41b8:	82 0f       	add	r24, r18
    41ba:	93 1f       	adc	r25, r19
    41bc:	04 96       	adiw	r24, 0x04	; 4
    41be:	cc 01       	movw	r24, r24
    41c0:	a0 e0       	ldi	r26, 0x00	; 0
    41c2:	b0 e0       	ldi	r27, 0x00	; 0
    41c4:	8a 87       	std	Y+10, r24	; 0x0a
    41c6:	9b 87       	std	Y+11, r25	; 0x0b
    41c8:	ac 87       	std	Y+12, r26	; 0x0c
    41ca:	bd 87       	std	Y+13, r27	; 0x0d
    41cc:	9e 01       	movw	r18, r28
    41ce:	21 5f       	subi	r18, 0xF1	; 241
    41d0:	3f 4f       	sbci	r19, 0xFF	; 255
    41d2:	ae 01       	movw	r20, r28
    41d4:	42 5f       	subi	r20, 0xF2	; 242
    41d6:	5f 4f       	sbci	r21, 0xFF	; 255
    41d8:	be 01       	movw	r22, r28
    41da:	60 5f       	subi	r22, 0xF0	; 240
    41dc:	7f 4f       	sbci	r23, 0xFF	; 255
    41de:	ce 01       	movw	r24, r28
    41e0:	0a 96       	adiw	r24, 0x0a	; 10
    41e2:	51 de       	rcall	.-862    	; 0x3e86 <AT24CXX_iterator_to_address>
    41e4:	20 91 4e 21 	lds	r18, 0x214E
    41e8:	4f 85       	ldd	r20, Y+15	; 0x0f
    41ea:	6e 85       	ldd	r22, Y+14	; 0x0e
    41ec:	58 89       	ldd	r21, Y+16	; 0x10
    41ee:	ce 01       	movw	r24, r28
    41f0:	06 96       	adiw	r24, 0x06	; 6
    41f2:	02 2f       	mov	r16, r18
    41f4:	9c 01       	movw	r18, r24
    41f6:	85 2f       	mov	r24, r21
    41f8:	0e 94 ae 45 	call	0x8b5c	; 0x8b5c <AT24CXX_ReadBlockA>
    41fc:	50 dc       	rcall	.-1888   	; 0x3a9e <sysclk_get_cpu_hz>
    41fe:	dc 01       	movw	r26, r24
    4200:	cb 01       	movw	r24, r22
    4202:	1c 01       	movw	r2, r24
    4204:	2d 01       	movw	r4, r26
    4206:	61 2c       	mov	r6, r1
    4208:	71 2c       	mov	r7, r1
    420a:	43 01       	movw	r8, r6
    420c:	a2 2c       	mov	r10, r2
    420e:	b3 2c       	mov	r11, r3
    4210:	c4 2c       	mov	r12, r4
    4212:	d5 2c       	mov	r13, r5
    4214:	e6 2c       	mov	r14, r6
    4216:	f7 2c       	mov	r15, r7
    4218:	08 2d       	mov	r16, r8
    421a:	19 2d       	mov	r17, r9
    421c:	2a 2d       	mov	r18, r10
    421e:	3b 2d       	mov	r19, r11
    4220:	4c 2d       	mov	r20, r12
    4222:	5d 2d       	mov	r21, r13
    4224:	6e 2d       	mov	r22, r14
    4226:	7f 2d       	mov	r23, r15
    4228:	80 2f       	mov	r24, r16
    422a:	91 2f       	mov	r25, r17
    422c:	02 e0       	ldi	r16, 0x02	; 2
    422e:	0e 94 a2 72 	call	0xe544	; 0xe544 <__ashldi3>
    4232:	2d 8b       	std	Y+21, r18	; 0x15
    4234:	3e 8b       	std	Y+22, r19	; 0x16
    4236:	4f 8b       	std	Y+23, r20	; 0x17
    4238:	58 8f       	std	Y+24, r21	; 0x18
    423a:	69 8f       	std	Y+25, r22	; 0x19
    423c:	7a 8f       	std	Y+26, r23	; 0x1a
    423e:	8b 8f       	std	Y+27, r24	; 0x1b
    4240:	9c 8f       	std	Y+28, r25	; 0x1c
    4242:	ad 88       	ldd	r10, Y+21	; 0x15
    4244:	be 88       	ldd	r11, Y+22	; 0x16
    4246:	cf 88       	ldd	r12, Y+23	; 0x17
    4248:	d8 8c       	ldd	r13, Y+24	; 0x18
    424a:	e9 8c       	ldd	r14, Y+25	; 0x19
    424c:	fa 8c       	ldd	r15, Y+26	; 0x1a
    424e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    4250:	1c 8d       	ldd	r17, Y+28	; 0x1c
    4252:	2a 2d       	mov	r18, r10
    4254:	3b 2d       	mov	r19, r11
    4256:	4c 2d       	mov	r20, r12
    4258:	5d 2d       	mov	r21, r13
    425a:	6e 2d       	mov	r22, r14
    425c:	7f 2d       	mov	r23, r15
    425e:	80 2f       	mov	r24, r16
    4260:	91 2f       	mov	r25, r17
    4262:	a2 2c       	mov	r10, r2
    4264:	b3 2c       	mov	r11, r3
    4266:	c4 2c       	mov	r12, r4
    4268:	d5 2c       	mov	r13, r5
    426a:	e6 2c       	mov	r14, r6
    426c:	f7 2c       	mov	r15, r7
    426e:	08 2d       	mov	r16, r8
    4270:	19 2d       	mov	r17, r9
    4272:	0e 94 b1 72 	call	0xe562	; 0xe562 <__adddi3>
    4276:	a2 2e       	mov	r10, r18
    4278:	b3 2e       	mov	r11, r19
    427a:	c4 2e       	mov	r12, r20
    427c:	d5 2e       	mov	r13, r21
    427e:	e6 2e       	mov	r14, r22
    4280:	f7 2e       	mov	r15, r23
    4282:	08 2f       	mov	r16, r24
    4284:	19 2f       	mov	r17, r25
    4286:	2a 2d       	mov	r18, r10
    4288:	3b 2d       	mov	r19, r11
    428a:	4c 2d       	mov	r20, r12
    428c:	5d 2d       	mov	r21, r13
    428e:	6e 2d       	mov	r22, r14
    4290:	7f 2d       	mov	r23, r15
    4292:	80 2f       	mov	r24, r16
    4294:	91 2f       	mov	r25, r17
    4296:	29 51       	subi	r18, 0x19	; 25
    4298:	3c 4f       	sbci	r19, 0xFC	; 252
    429a:	4f 4f       	sbci	r20, 0xFF	; 255
    429c:	5f 4f       	sbci	r21, 0xFF	; 255
    429e:	6f 4f       	sbci	r22, 0xFF	; 255
    42a0:	7f 4f       	sbci	r23, 0xFF	; 255
    42a2:	8f 4f       	sbci	r24, 0xFF	; 255
    42a4:	9f 4f       	sbci	r25, 0xFF	; 255
    42a6:	a2 2e       	mov	r10, r18
    42a8:	b3 2e       	mov	r11, r19
    42aa:	c4 2e       	mov	r12, r20
    42ac:	d5 2e       	mov	r13, r21
    42ae:	e6 2e       	mov	r14, r22
    42b0:	f7 2e       	mov	r15, r23
    42b2:	08 2f       	mov	r16, r24
    42b4:	19 2f       	mov	r17, r25
    42b6:	2a 2d       	mov	r18, r10
    42b8:	3b 2d       	mov	r19, r11
    42ba:	4c 2d       	mov	r20, r12
    42bc:	5d 2d       	mov	r21, r13
    42be:	6e 2d       	mov	r22, r14
    42c0:	7f 2d       	mov	r23, r15
    42c2:	80 2f       	mov	r24, r16
    42c4:	91 2f       	mov	r25, r17
    42c6:	0e 94 56 11 	call	0x22ac	; 0x22ac <__floatundisf>
    42ca:	dc 01       	movw	r26, r24
    42cc:	cb 01       	movw	r24, r22
    42ce:	20 e0       	ldi	r18, 0x00	; 0
    42d0:	30 e8       	ldi	r19, 0x80	; 128
    42d2:	4b eb       	ldi	r20, 0xBB	; 187
    42d4:	55 e4       	ldi	r21, 0x45	; 69
    42d6:	bc 01       	movw	r22, r24
    42d8:	cd 01       	movw	r24, r26
    42da:	0e 94 81 14 	call	0x2902	; 0x2902 <__divsf3>
    42de:	dc 01       	movw	r26, r24
    42e0:	cb 01       	movw	r24, r22
    42e2:	bc 01       	movw	r22, r24
    42e4:	cd 01       	movw	r24, r26
    42e6:	0e 94 a5 10 	call	0x214a	; 0x214a <__fixunssfdi>
    42ea:	a2 2e       	mov	r10, r18
    42ec:	b3 2e       	mov	r11, r19
    42ee:	c4 2e       	mov	r12, r20
    42f0:	d5 2e       	mov	r13, r21
    42f2:	e6 2e       	mov	r14, r22
    42f4:	f7 2e       	mov	r15, r23
    42f6:	08 2f       	mov	r16, r24
    42f8:	19 2f       	mov	r17, r25
    42fa:	d6 01       	movw	r26, r12
    42fc:	c5 01       	movw	r24, r10
    42fe:	bc 01       	movw	r22, r24
    4300:	cd 01       	movw	r24, r26
    4302:	d9 db       	rcall	.-2126   	; 0x3ab6 <__portable_avr_delay_cycles>
    4304:	2e 81       	ldd	r18, Y+6	; 0x06
    4306:	3f 81       	ldd	r19, Y+7	; 0x07
    4308:	48 85       	ldd	r20, Y+8	; 0x08
    430a:	59 85       	ldd	r21, Y+9	; 0x09
    430c:	80 91 4f 21 	lds	r24, 0x214F
    4310:	90 91 50 21 	lds	r25, 0x2150
    4314:	a0 91 51 21 	lds	r26, 0x2151
    4318:	b0 91 52 21 	lds	r27, 0x2152
    431c:	28 17       	cp	r18, r24
    431e:	39 07       	cpc	r19, r25
    4320:	4a 07       	cpc	r20, r26
    4322:	5b 07       	cpc	r21, r27
    4324:	09 f0       	breq	.+2      	; 0x4328 <datalogger_read_iterators_from_eeprom+0x1e2>
    4326:	c3 c0       	rjmp	.+390    	; 0x44ae <datalogger_read_iterators_from_eeprom+0x368>
    4328:	89 81       	ldd	r24, Y+1	; 0x01
    432a:	81 50       	subi	r24, 0x01	; 1
    432c:	87 70       	andi	r24, 0x07	; 7
    432e:	8d 83       	std	Y+5, r24	; 0x05
    4330:	8d 81       	ldd	r24, Y+5	; 0x05
    4332:	48 2f       	mov	r20, r24
    4334:	50 e0       	ldi	r21, 0x00	; 0
    4336:	80 91 4e 21 	lds	r24, 0x214E
    433a:	28 2f       	mov	r18, r24
    433c:	30 e0       	ldi	r19, 0x00	; 0
    433e:	42 9f       	mul	r20, r18
    4340:	c0 01       	movw	r24, r0
    4342:	43 9f       	mul	r20, r19
    4344:	90 0d       	add	r25, r0
    4346:	52 9f       	mul	r21, r18
    4348:	90 0d       	add	r25, r0
    434a:	11 24       	eor	r1, r1
    434c:	9c 01       	movw	r18, r24
    434e:	8b 81       	ldd	r24, Y+3	; 0x03
    4350:	9c 81       	ldd	r25, Y+4	; 0x04
    4352:	82 0f       	add	r24, r18
    4354:	93 1f       	adc	r25, r19
    4356:	04 96       	adiw	r24, 0x04	; 4
    4358:	cc 01       	movw	r24, r24
    435a:	a0 e0       	ldi	r26, 0x00	; 0
    435c:	b0 e0       	ldi	r27, 0x00	; 0
    435e:	89 8b       	std	Y+17, r24	; 0x11
    4360:	9a 8b       	std	Y+18, r25	; 0x12
    4362:	ab 8b       	std	Y+19, r26	; 0x13
    4364:	bc 8b       	std	Y+20, r27	; 0x14
    4366:	9e 01       	movw	r18, r28
    4368:	21 5f       	subi	r18, 0xF1	; 241
    436a:	3f 4f       	sbci	r19, 0xFF	; 255
    436c:	ae 01       	movw	r20, r28
    436e:	42 5f       	subi	r20, 0xF2	; 242
    4370:	5f 4f       	sbci	r21, 0xFF	; 255
    4372:	be 01       	movw	r22, r28
    4374:	60 5f       	subi	r22, 0xF0	; 240
    4376:	7f 4f       	sbci	r23, 0xFF	; 255
    4378:	ce 01       	movw	r24, r28
    437a:	41 96       	adiw	r24, 0x11	; 17
    437c:	84 dd       	rcall	.-1272   	; 0x3e86 <AT24CXX_iterator_to_address>
    437e:	20 91 4e 21 	lds	r18, 0x214E
    4382:	8a 81       	ldd	r24, Y+2	; 0x02
    4384:	88 2f       	mov	r24, r24
    4386:	90 e0       	ldi	r25, 0x00	; 0
    4388:	88 0f       	add	r24, r24
    438a:	99 1f       	adc	r25, r25
    438c:	88 0f       	add	r24, r24
    438e:	99 1f       	adc	r25, r25
    4390:	8a 57       	subi	r24, 0x7A	; 122
    4392:	9e 4d       	sbci	r25, 0xDE	; 222
    4394:	4f 85       	ldd	r20, Y+15	; 0x0f
    4396:	6e 85       	ldd	r22, Y+14	; 0x0e
    4398:	58 89       	ldd	r21, Y+16	; 0x10
    439a:	02 2f       	mov	r16, r18
    439c:	9c 01       	movw	r18, r24
    439e:	85 2f       	mov	r24, r21
    43a0:	0e 94 ae 45 	call	0x8b5c	; 0x8b5c <AT24CXX_ReadBlockA>
    43a4:	7c db       	rcall	.-2312   	; 0x3a9e <sysclk_get_cpu_hz>
    43a6:	dc 01       	movw	r26, r24
    43a8:	cb 01       	movw	r24, r22
    43aa:	1c 01       	movw	r2, r24
    43ac:	2d 01       	movw	r4, r26
    43ae:	61 2c       	mov	r6, r1
    43b0:	71 2c       	mov	r7, r1
    43b2:	43 01       	movw	r8, r6
    43b4:	a2 2c       	mov	r10, r2
    43b6:	b3 2c       	mov	r11, r3
    43b8:	c4 2c       	mov	r12, r4
    43ba:	d5 2c       	mov	r13, r5
    43bc:	e6 2c       	mov	r14, r6
    43be:	f7 2c       	mov	r15, r7
    43c0:	08 2d       	mov	r16, r8
    43c2:	19 2d       	mov	r17, r9
    43c4:	2a 2d       	mov	r18, r10
    43c6:	3b 2d       	mov	r19, r11
    43c8:	4c 2d       	mov	r20, r12
    43ca:	5d 2d       	mov	r21, r13
    43cc:	6e 2d       	mov	r22, r14
    43ce:	7f 2d       	mov	r23, r15
    43d0:	80 2f       	mov	r24, r16
    43d2:	91 2f       	mov	r25, r17
    43d4:	02 e0       	ldi	r16, 0x02	; 2
    43d6:	0e 94 a2 72 	call	0xe544	; 0xe544 <__ashldi3>
    43da:	2d 8f       	std	Y+29, r18	; 0x1d
    43dc:	3e 8f       	std	Y+30, r19	; 0x1e
    43de:	4f 8f       	std	Y+31, r20	; 0x1f
    43e0:	58 a3       	std	Y+32, r21	; 0x20
    43e2:	69 a3       	std	Y+33, r22	; 0x21
    43e4:	7a a3       	std	Y+34, r23	; 0x22
    43e6:	8b a3       	std	Y+35, r24	; 0x23
    43e8:	9c a3       	std	Y+36, r25	; 0x24
    43ea:	ad 8c       	ldd	r10, Y+29	; 0x1d
    43ec:	be 8c       	ldd	r11, Y+30	; 0x1e
    43ee:	cf 8c       	ldd	r12, Y+31	; 0x1f
    43f0:	d8 a0       	ldd	r13, Y+32	; 0x20
    43f2:	e9 a0       	ldd	r14, Y+33	; 0x21
    43f4:	fa a0       	ldd	r15, Y+34	; 0x22
    43f6:	0b a1       	ldd	r16, Y+35	; 0x23
    43f8:	1c a1       	ldd	r17, Y+36	; 0x24
    43fa:	2a 2d       	mov	r18, r10
    43fc:	3b 2d       	mov	r19, r11
    43fe:	4c 2d       	mov	r20, r12
    4400:	5d 2d       	mov	r21, r13
    4402:	6e 2d       	mov	r22, r14
    4404:	7f 2d       	mov	r23, r15
    4406:	80 2f       	mov	r24, r16
    4408:	91 2f       	mov	r25, r17
    440a:	a2 2c       	mov	r10, r2
    440c:	b3 2c       	mov	r11, r3
    440e:	c4 2c       	mov	r12, r4
    4410:	d5 2c       	mov	r13, r5
    4412:	e6 2c       	mov	r14, r6
    4414:	f7 2c       	mov	r15, r7
    4416:	08 2d       	mov	r16, r8
    4418:	19 2d       	mov	r17, r9
    441a:	0e 94 b1 72 	call	0xe562	; 0xe562 <__adddi3>
    441e:	a2 2e       	mov	r10, r18
    4420:	b3 2e       	mov	r11, r19
    4422:	c4 2e       	mov	r12, r20
    4424:	d5 2e       	mov	r13, r21
    4426:	e6 2e       	mov	r14, r22
    4428:	f7 2e       	mov	r15, r23
    442a:	08 2f       	mov	r16, r24
    442c:	19 2f       	mov	r17, r25
    442e:	2a 2d       	mov	r18, r10
    4430:	3b 2d       	mov	r19, r11
    4432:	4c 2d       	mov	r20, r12
    4434:	5d 2d       	mov	r21, r13
    4436:	6e 2d       	mov	r22, r14
    4438:	7f 2d       	mov	r23, r15
    443a:	80 2f       	mov	r24, r16
    443c:	91 2f       	mov	r25, r17
    443e:	29 51       	subi	r18, 0x19	; 25
    4440:	3c 4f       	sbci	r19, 0xFC	; 252
    4442:	4f 4f       	sbci	r20, 0xFF	; 255
    4444:	5f 4f       	sbci	r21, 0xFF	; 255
    4446:	6f 4f       	sbci	r22, 0xFF	; 255
    4448:	7f 4f       	sbci	r23, 0xFF	; 255
    444a:	8f 4f       	sbci	r24, 0xFF	; 255
    444c:	9f 4f       	sbci	r25, 0xFF	; 255
    444e:	a2 2e       	mov	r10, r18
    4450:	b3 2e       	mov	r11, r19
    4452:	c4 2e       	mov	r12, r20
    4454:	d5 2e       	mov	r13, r21
    4456:	e6 2e       	mov	r14, r22
    4458:	f7 2e       	mov	r15, r23
    445a:	08 2f       	mov	r16, r24
    445c:	19 2f       	mov	r17, r25
    445e:	2a 2d       	mov	r18, r10
    4460:	3b 2d       	mov	r19, r11
    4462:	4c 2d       	mov	r20, r12
    4464:	5d 2d       	mov	r21, r13
    4466:	6e 2d       	mov	r22, r14
    4468:	7f 2d       	mov	r23, r15
    446a:	80 2f       	mov	r24, r16
    446c:	91 2f       	mov	r25, r17
    446e:	0e 94 56 11 	call	0x22ac	; 0x22ac <__floatundisf>
    4472:	dc 01       	movw	r26, r24
    4474:	cb 01       	movw	r24, r22
    4476:	20 e0       	ldi	r18, 0x00	; 0
    4478:	30 e8       	ldi	r19, 0x80	; 128
    447a:	4b eb       	ldi	r20, 0xBB	; 187
    447c:	55 e4       	ldi	r21, 0x45	; 69
    447e:	bc 01       	movw	r22, r24
    4480:	cd 01       	movw	r24, r26
    4482:	0e 94 81 14 	call	0x2902	; 0x2902 <__divsf3>
    4486:	dc 01       	movw	r26, r24
    4488:	cb 01       	movw	r24, r22
    448a:	bc 01       	movw	r22, r24
    448c:	cd 01       	movw	r24, r26
    448e:	0e 94 a5 10 	call	0x214a	; 0x214a <__fixunssfdi>
    4492:	a2 2e       	mov	r10, r18
    4494:	b3 2e       	mov	r11, r19
    4496:	c4 2e       	mov	r12, r20
    4498:	d5 2e       	mov	r13, r21
    449a:	e6 2e       	mov	r14, r22
    449c:	f7 2e       	mov	r15, r23
    449e:	08 2f       	mov	r16, r24
    44a0:	19 2f       	mov	r17, r25
    44a2:	d6 01       	movw	r26, r12
    44a4:	c5 01       	movw	r24, r10
    44a6:	bc 01       	movw	r22, r24
    44a8:	cd 01       	movw	r24, r26
    44aa:	05 db       	rcall	.-2550   	; 0x3ab6 <__portable_avr_delay_cycles>
    44ac:	07 c0       	rjmp	.+14     	; 0x44bc <datalogger_read_iterators_from_eeprom+0x376>
    44ae:	89 81       	ldd	r24, Y+1	; 0x01
    44b0:	8f 5f       	subi	r24, 0xFF	; 255
    44b2:	89 83       	std	Y+1, r24	; 0x01
    44b4:	89 81       	ldd	r24, Y+1	; 0x01
    44b6:	88 30       	cpi	r24, 0x08	; 8
    44b8:	08 f4       	brcc	.+2      	; 0x44bc <datalogger_read_iterators_from_eeprom+0x376>
    44ba:	6d ce       	rjmp	.-806    	; 0x4196 <datalogger_read_iterators_from_eeprom+0x50>
    44bc:	8a 81       	ldd	r24, Y+2	; 0x02
    44be:	8f 5f       	subi	r24, 0xFF	; 255
    44c0:	8a 83       	std	Y+2, r24	; 0x02
    44c2:	8a 81       	ldd	r24, Y+2	; 0x02
    44c4:	82 30       	cpi	r24, 0x02	; 2
    44c6:	08 f4       	brcc	.+2      	; 0x44ca <datalogger_read_iterators_from_eeprom+0x384>
    44c8:	59 ce       	rjmp	.-846    	; 0x417c <datalogger_read_iterators_from_eeprom+0x36>
    44ca:	81 e0       	ldi	r24, 0x01	; 1
    44cc:	a4 96       	adiw	r28, 0x24	; 36
    44ce:	cd bf       	out	0x3d, r28	; 61
    44d0:	de bf       	out	0x3e, r29	; 62
    44d2:	df 91       	pop	r29
    44d4:	cf 91       	pop	r28
    44d6:	1f 91       	pop	r17
    44d8:	0f 91       	pop	r16
    44da:	ff 90       	pop	r15
    44dc:	ef 90       	pop	r14
    44de:	df 90       	pop	r13
    44e0:	cf 90       	pop	r12
    44e2:	bf 90       	pop	r11
    44e4:	af 90       	pop	r10
    44e6:	9f 90       	pop	r9
    44e8:	8f 90       	pop	r8
    44ea:	7f 90       	pop	r7
    44ec:	6f 90       	pop	r6
    44ee:	5f 90       	pop	r5
    44f0:	4f 90       	pop	r4
    44f2:	3f 90       	pop	r3
    44f4:	2f 90       	pop	r2
    44f6:	08 95       	ret

000044f8 <datalogger_write_iterators_to_eeprom>:
    44f8:	2f 92       	push	r2
    44fa:	3f 92       	push	r3
    44fc:	4f 92       	push	r4
    44fe:	5f 92       	push	r5
    4500:	6f 92       	push	r6
    4502:	7f 92       	push	r7
    4504:	8f 92       	push	r8
    4506:	9f 92       	push	r9
    4508:	af 92       	push	r10
    450a:	bf 92       	push	r11
    450c:	cf 92       	push	r12
    450e:	df 92       	push	r13
    4510:	ef 92       	push	r14
    4512:	ff 92       	push	r15
    4514:	0f 93       	push	r16
    4516:	1f 93       	push	r17
    4518:	cf 93       	push	r28
    451a:	df 93       	push	r29
    451c:	cd b7       	in	r28, 0x3d	; 61
    451e:	de b7       	in	r29, 0x3e	; 62
    4520:	e5 97       	sbiw	r28, 0x35	; 53
    4522:	cd bf       	out	0x3d, r28	; 61
    4524:	de bf       	out	0x3e, r29	; 62
    4526:	0e 94 55 45 	call	0x8aaa	; 0x8aaa <AT24CXX_Init>
    452a:	1a 82       	std	Y+2, r1	; 0x02
    452c:	06 c3       	rjmp	.+1548   	; 0x4b3a <datalogger_write_iterators_to_eeprom+0x642>
    452e:	8a 81       	ldd	r24, Y+2	; 0x02
    4530:	88 2f       	mov	r24, r24
    4532:	90 e0       	ldi	r25, 0x00	; 0
    4534:	88 0f       	add	r24, r24
    4536:	99 1f       	adc	r25, r25
    4538:	88 0f       	add	r24, r24
    453a:	99 1f       	adc	r25, r25
    453c:	88 0f       	add	r24, r24
    453e:	99 1f       	adc	r25, r25
    4540:	8b 83       	std	Y+3, r24	; 0x03
    4542:	9c 83       	std	Y+4, r25	; 0x04
    4544:	19 82       	std	Y+1, r1	; 0x01
    4546:	f2 c2       	rjmp	.+1508   	; 0x4b2c <datalogger_write_iterators_to_eeprom+0x634>
    4548:	89 81       	ldd	r24, Y+1	; 0x01
    454a:	48 2f       	mov	r20, r24
    454c:	50 e0       	ldi	r21, 0x00	; 0
    454e:	80 91 49 21 	lds	r24, 0x2149
    4552:	28 2f       	mov	r18, r24
    4554:	30 e0       	ldi	r19, 0x00	; 0
    4556:	42 9f       	mul	r20, r18
    4558:	c0 01       	movw	r24, r0
    455a:	43 9f       	mul	r20, r19
    455c:	90 0d       	add	r25, r0
    455e:	52 9f       	mul	r21, r18
    4560:	90 0d       	add	r25, r0
    4562:	11 24       	eor	r1, r1
    4564:	9c 01       	movw	r18, r24
    4566:	8b 81       	ldd	r24, Y+3	; 0x03
    4568:	9c 81       	ldd	r25, Y+4	; 0x04
    456a:	82 0f       	add	r24, r18
    456c:	93 1f       	adc	r25, r19
    456e:	04 96       	adiw	r24, 0x04	; 4
    4570:	cc 01       	movw	r24, r24
    4572:	a0 e0       	ldi	r26, 0x00	; 0
    4574:	b0 e0       	ldi	r27, 0x00	; 0
    4576:	8b 87       	std	Y+11, r24	; 0x0b
    4578:	9c 87       	std	Y+12, r25	; 0x0c
    457a:	ad 87       	std	Y+13, r26	; 0x0d
    457c:	be 87       	std	Y+14, r27	; 0x0e
    457e:	9e 01       	movw	r18, r28
    4580:	20 5f       	subi	r18, 0xF0	; 240
    4582:	3f 4f       	sbci	r19, 0xFF	; 255
    4584:	ae 01       	movw	r20, r28
    4586:	41 5f       	subi	r20, 0xF1	; 241
    4588:	5f 4f       	sbci	r21, 0xFF	; 255
    458a:	be 01       	movw	r22, r28
    458c:	6f 5e       	subi	r22, 0xEF	; 239
    458e:	7f 4f       	sbci	r23, 0xFF	; 255
    4590:	ce 01       	movw	r24, r28
    4592:	0b 96       	adiw	r24, 0x0b	; 11
    4594:	78 dc       	rcall	.-1808   	; 0x3e86 <AT24CXX_iterator_to_address>
    4596:	20 91 49 21 	lds	r18, 0x2149
    459a:	48 89       	ldd	r20, Y+16	; 0x10
    459c:	6f 85       	ldd	r22, Y+15	; 0x0f
    459e:	59 89       	ldd	r21, Y+17	; 0x11
    45a0:	ce 01       	movw	r24, r28
    45a2:	07 96       	adiw	r24, 0x07	; 7
    45a4:	02 2f       	mov	r16, r18
    45a6:	9c 01       	movw	r18, r24
    45a8:	85 2f       	mov	r24, r21
    45aa:	0e 94 ae 45 	call	0x8b5c	; 0x8b5c <AT24CXX_ReadBlockA>
    45ae:	77 da       	rcall	.-2834   	; 0x3a9e <sysclk_get_cpu_hz>
    45b0:	dc 01       	movw	r26, r24
    45b2:	cb 01       	movw	r24, r22
    45b4:	1c 01       	movw	r2, r24
    45b6:	2d 01       	movw	r4, r26
    45b8:	61 2c       	mov	r6, r1
    45ba:	71 2c       	mov	r7, r1
    45bc:	43 01       	movw	r8, r6
    45be:	a2 2c       	mov	r10, r2
    45c0:	b3 2c       	mov	r11, r3
    45c2:	c4 2c       	mov	r12, r4
    45c4:	d5 2c       	mov	r13, r5
    45c6:	e6 2c       	mov	r14, r6
    45c8:	f7 2c       	mov	r15, r7
    45ca:	08 2d       	mov	r16, r8
    45cc:	19 2d       	mov	r17, r9
    45ce:	2a 2d       	mov	r18, r10
    45d0:	3b 2d       	mov	r19, r11
    45d2:	4c 2d       	mov	r20, r12
    45d4:	5d 2d       	mov	r21, r13
    45d6:	6e 2d       	mov	r22, r14
    45d8:	7f 2d       	mov	r23, r15
    45da:	80 2f       	mov	r24, r16
    45dc:	91 2f       	mov	r25, r17
    45de:	02 e0       	ldi	r16, 0x02	; 2
    45e0:	0e 94 a2 72 	call	0xe544	; 0xe544 <__ashldi3>
    45e4:	2e 8b       	std	Y+22, r18	; 0x16
    45e6:	3f 8b       	std	Y+23, r19	; 0x17
    45e8:	48 8f       	std	Y+24, r20	; 0x18
    45ea:	59 8f       	std	Y+25, r21	; 0x19
    45ec:	6a 8f       	std	Y+26, r22	; 0x1a
    45ee:	7b 8f       	std	Y+27, r23	; 0x1b
    45f0:	8c 8f       	std	Y+28, r24	; 0x1c
    45f2:	9d 8f       	std	Y+29, r25	; 0x1d
    45f4:	ae 88       	ldd	r10, Y+22	; 0x16
    45f6:	bf 88       	ldd	r11, Y+23	; 0x17
    45f8:	c8 8c       	ldd	r12, Y+24	; 0x18
    45fa:	d9 8c       	ldd	r13, Y+25	; 0x19
    45fc:	ea 8c       	ldd	r14, Y+26	; 0x1a
    45fe:	fb 8c       	ldd	r15, Y+27	; 0x1b
    4600:	0c 8d       	ldd	r16, Y+28	; 0x1c
    4602:	1d 8d       	ldd	r17, Y+29	; 0x1d
    4604:	2a 2d       	mov	r18, r10
    4606:	3b 2d       	mov	r19, r11
    4608:	4c 2d       	mov	r20, r12
    460a:	5d 2d       	mov	r21, r13
    460c:	6e 2d       	mov	r22, r14
    460e:	7f 2d       	mov	r23, r15
    4610:	80 2f       	mov	r24, r16
    4612:	91 2f       	mov	r25, r17
    4614:	a2 2c       	mov	r10, r2
    4616:	b3 2c       	mov	r11, r3
    4618:	c4 2c       	mov	r12, r4
    461a:	d5 2c       	mov	r13, r5
    461c:	e6 2c       	mov	r14, r6
    461e:	f7 2c       	mov	r15, r7
    4620:	08 2d       	mov	r16, r8
    4622:	19 2d       	mov	r17, r9
    4624:	0e 94 b1 72 	call	0xe562	; 0xe562 <__adddi3>
    4628:	a2 2e       	mov	r10, r18
    462a:	b3 2e       	mov	r11, r19
    462c:	c4 2e       	mov	r12, r20
    462e:	d5 2e       	mov	r13, r21
    4630:	e6 2e       	mov	r14, r22
    4632:	f7 2e       	mov	r15, r23
    4634:	08 2f       	mov	r16, r24
    4636:	19 2f       	mov	r17, r25
    4638:	2a 2d       	mov	r18, r10
    463a:	3b 2d       	mov	r19, r11
    463c:	4c 2d       	mov	r20, r12
    463e:	5d 2d       	mov	r21, r13
    4640:	6e 2d       	mov	r22, r14
    4642:	7f 2d       	mov	r23, r15
    4644:	80 2f       	mov	r24, r16
    4646:	91 2f       	mov	r25, r17
    4648:	29 51       	subi	r18, 0x19	; 25
    464a:	3c 4f       	sbci	r19, 0xFC	; 252
    464c:	4f 4f       	sbci	r20, 0xFF	; 255
    464e:	5f 4f       	sbci	r21, 0xFF	; 255
    4650:	6f 4f       	sbci	r22, 0xFF	; 255
    4652:	7f 4f       	sbci	r23, 0xFF	; 255
    4654:	8f 4f       	sbci	r24, 0xFF	; 255
    4656:	9f 4f       	sbci	r25, 0xFF	; 255
    4658:	a2 2e       	mov	r10, r18
    465a:	b3 2e       	mov	r11, r19
    465c:	c4 2e       	mov	r12, r20
    465e:	d5 2e       	mov	r13, r21
    4660:	e6 2e       	mov	r14, r22
    4662:	f7 2e       	mov	r15, r23
    4664:	08 2f       	mov	r16, r24
    4666:	19 2f       	mov	r17, r25
    4668:	2a 2d       	mov	r18, r10
    466a:	3b 2d       	mov	r19, r11
    466c:	4c 2d       	mov	r20, r12
    466e:	5d 2d       	mov	r21, r13
    4670:	6e 2d       	mov	r22, r14
    4672:	7f 2d       	mov	r23, r15
    4674:	80 2f       	mov	r24, r16
    4676:	91 2f       	mov	r25, r17
    4678:	0e 94 56 11 	call	0x22ac	; 0x22ac <__floatundisf>
    467c:	dc 01       	movw	r26, r24
    467e:	cb 01       	movw	r24, r22
    4680:	20 e0       	ldi	r18, 0x00	; 0
    4682:	30 e8       	ldi	r19, 0x80	; 128
    4684:	4b eb       	ldi	r20, 0xBB	; 187
    4686:	55 e4       	ldi	r21, 0x45	; 69
    4688:	bc 01       	movw	r22, r24
    468a:	cd 01       	movw	r24, r26
    468c:	0e 94 81 14 	call	0x2902	; 0x2902 <__divsf3>
    4690:	dc 01       	movw	r26, r24
    4692:	cb 01       	movw	r24, r22
    4694:	bc 01       	movw	r22, r24
    4696:	cd 01       	movw	r24, r26
    4698:	0e 94 a5 10 	call	0x214a	; 0x214a <__fixunssfdi>
    469c:	a2 2e       	mov	r10, r18
    469e:	b3 2e       	mov	r11, r19
    46a0:	c4 2e       	mov	r12, r20
    46a2:	d5 2e       	mov	r13, r21
    46a4:	e6 2e       	mov	r14, r22
    46a6:	f7 2e       	mov	r15, r23
    46a8:	08 2f       	mov	r16, r24
    46aa:	19 2f       	mov	r17, r25
    46ac:	d6 01       	movw	r26, r12
    46ae:	c5 01       	movw	r24, r10
    46b0:	bc 01       	movw	r22, r24
    46b2:	cd 01       	movw	r24, r26
    46b4:	00 da       	rcall	.-3072   	; 0x3ab6 <__portable_avr_delay_cycles>
    46b6:	2f 81       	ldd	r18, Y+7	; 0x07
    46b8:	38 85       	ldd	r19, Y+8	; 0x08
    46ba:	49 85       	ldd	r20, Y+9	; 0x09
    46bc:	5a 85       	ldd	r21, Y+10	; 0x0a
    46be:	80 91 4a 21 	lds	r24, 0x214A
    46c2:	90 91 4b 21 	lds	r25, 0x214B
    46c6:	a0 91 4c 21 	lds	r26, 0x214C
    46ca:	b0 91 4d 21 	lds	r27, 0x214D
    46ce:	28 17       	cp	r18, r24
    46d0:	39 07       	cpc	r19, r25
    46d2:	4a 07       	cpc	r20, r26
    46d4:	5b 07       	cpc	r21, r27
    46d6:	09 f0       	breq	.+2      	; 0x46da <datalogger_write_iterators_to_eeprom+0x1e2>
    46d8:	26 c2       	rjmp	.+1100   	; 0x4b26 <datalogger_write_iterators_to_eeprom+0x62e>
    46da:	89 81       	ldd	r24, Y+1	; 0x01
    46dc:	81 50       	subi	r24, 0x01	; 1
    46de:	87 70       	andi	r24, 0x07	; 7
    46e0:	8d 83       	std	Y+5, r24	; 0x05
    46e2:	8d 81       	ldd	r24, Y+5	; 0x05
    46e4:	48 2f       	mov	r20, r24
    46e6:	50 e0       	ldi	r21, 0x00	; 0
    46e8:	80 91 49 21 	lds	r24, 0x2149
    46ec:	28 2f       	mov	r18, r24
    46ee:	30 e0       	ldi	r19, 0x00	; 0
    46f0:	42 9f       	mul	r20, r18
    46f2:	c0 01       	movw	r24, r0
    46f4:	43 9f       	mul	r20, r19
    46f6:	90 0d       	add	r25, r0
    46f8:	52 9f       	mul	r21, r18
    46fa:	90 0d       	add	r25, r0
    46fc:	11 24       	eor	r1, r1
    46fe:	9c 01       	movw	r18, r24
    4700:	8b 81       	ldd	r24, Y+3	; 0x03
    4702:	9c 81       	ldd	r25, Y+4	; 0x04
    4704:	82 0f       	add	r24, r18
    4706:	93 1f       	adc	r25, r19
    4708:	04 96       	adiw	r24, 0x04	; 4
    470a:	cc 01       	movw	r24, r24
    470c:	a0 e0       	ldi	r26, 0x00	; 0
    470e:	b0 e0       	ldi	r27, 0x00	; 0
    4710:	8a 8b       	std	Y+18, r24	; 0x12
    4712:	9b 8b       	std	Y+19, r25	; 0x13
    4714:	ac 8b       	std	Y+20, r26	; 0x14
    4716:	bd 8b       	std	Y+21, r27	; 0x15
    4718:	9e 01       	movw	r18, r28
    471a:	20 5f       	subi	r18, 0xF0	; 240
    471c:	3f 4f       	sbci	r19, 0xFF	; 255
    471e:	ae 01       	movw	r20, r28
    4720:	41 5f       	subi	r20, 0xF1	; 241
    4722:	5f 4f       	sbci	r21, 0xFF	; 255
    4724:	be 01       	movw	r22, r28
    4726:	6f 5e       	subi	r22, 0xEF	; 239
    4728:	7f 4f       	sbci	r23, 0xFF	; 255
    472a:	ce 01       	movw	r24, r28
    472c:	42 96       	adiw	r24, 0x12	; 18
    472e:	ab db       	rcall	.-2218   	; 0x3e86 <AT24CXX_iterator_to_address>
    4730:	20 91 49 21 	lds	r18, 0x2149
    4734:	48 89       	ldd	r20, Y+16	; 0x10
    4736:	6f 85       	ldd	r22, Y+15	; 0x0f
    4738:	59 89       	ldd	r21, Y+17	; 0x11
    473a:	ce 01       	movw	r24, r28
    473c:	07 96       	adiw	r24, 0x07	; 7
    473e:	02 2f       	mov	r16, r18
    4740:	9c 01       	movw	r18, r24
    4742:	85 2f       	mov	r24, r21
    4744:	0e 94 ae 45 	call	0x8b5c	; 0x8b5c <AT24CXX_ReadBlockA>
    4748:	aa d9       	rcall	.-3244   	; 0x3a9e <sysclk_get_cpu_hz>
    474a:	dc 01       	movw	r26, r24
    474c:	cb 01       	movw	r24, r22
    474e:	1c 01       	movw	r2, r24
    4750:	2d 01       	movw	r4, r26
    4752:	61 2c       	mov	r6, r1
    4754:	71 2c       	mov	r7, r1
    4756:	43 01       	movw	r8, r6
    4758:	a2 2c       	mov	r10, r2
    475a:	b3 2c       	mov	r11, r3
    475c:	c4 2c       	mov	r12, r4
    475e:	d5 2c       	mov	r13, r5
    4760:	e6 2c       	mov	r14, r6
    4762:	f7 2c       	mov	r15, r7
    4764:	08 2d       	mov	r16, r8
    4766:	19 2d       	mov	r17, r9
    4768:	2a 2d       	mov	r18, r10
    476a:	3b 2d       	mov	r19, r11
    476c:	4c 2d       	mov	r20, r12
    476e:	5d 2d       	mov	r21, r13
    4770:	6e 2d       	mov	r22, r14
    4772:	7f 2d       	mov	r23, r15
    4774:	80 2f       	mov	r24, r16
    4776:	91 2f       	mov	r25, r17
    4778:	02 e0       	ldi	r16, 0x02	; 2
    477a:	0e 94 a2 72 	call	0xe544	; 0xe544 <__ashldi3>
    477e:	2e 8f       	std	Y+30, r18	; 0x1e
    4780:	3f 8f       	std	Y+31, r19	; 0x1f
    4782:	48 a3       	std	Y+32, r20	; 0x20
    4784:	59 a3       	std	Y+33, r21	; 0x21
    4786:	6a a3       	std	Y+34, r22	; 0x22
    4788:	7b a3       	std	Y+35, r23	; 0x23
    478a:	8c a3       	std	Y+36, r24	; 0x24
    478c:	9d a3       	std	Y+37, r25	; 0x25
    478e:	ae 8c       	ldd	r10, Y+30	; 0x1e
    4790:	bf 8c       	ldd	r11, Y+31	; 0x1f
    4792:	c8 a0       	ldd	r12, Y+32	; 0x20
    4794:	d9 a0       	ldd	r13, Y+33	; 0x21
    4796:	ea a0       	ldd	r14, Y+34	; 0x22
    4798:	fb a0       	ldd	r15, Y+35	; 0x23
    479a:	0c a1       	ldd	r16, Y+36	; 0x24
    479c:	1d a1       	ldd	r17, Y+37	; 0x25
    479e:	2a 2d       	mov	r18, r10
    47a0:	3b 2d       	mov	r19, r11
    47a2:	4c 2d       	mov	r20, r12
    47a4:	5d 2d       	mov	r21, r13
    47a6:	6e 2d       	mov	r22, r14
    47a8:	7f 2d       	mov	r23, r15
    47aa:	80 2f       	mov	r24, r16
    47ac:	91 2f       	mov	r25, r17
    47ae:	a2 2c       	mov	r10, r2
    47b0:	b3 2c       	mov	r11, r3
    47b2:	c4 2c       	mov	r12, r4
    47b4:	d5 2c       	mov	r13, r5
    47b6:	e6 2c       	mov	r14, r6
    47b8:	f7 2c       	mov	r15, r7
    47ba:	08 2d       	mov	r16, r8
    47bc:	19 2d       	mov	r17, r9
    47be:	0e 94 b1 72 	call	0xe562	; 0xe562 <__adddi3>
    47c2:	a2 2e       	mov	r10, r18
    47c4:	b3 2e       	mov	r11, r19
    47c6:	c4 2e       	mov	r12, r20
    47c8:	d5 2e       	mov	r13, r21
    47ca:	e6 2e       	mov	r14, r22
    47cc:	f7 2e       	mov	r15, r23
    47ce:	08 2f       	mov	r16, r24
    47d0:	19 2f       	mov	r17, r25
    47d2:	2a 2d       	mov	r18, r10
    47d4:	3b 2d       	mov	r19, r11
    47d6:	4c 2d       	mov	r20, r12
    47d8:	5d 2d       	mov	r21, r13
    47da:	6e 2d       	mov	r22, r14
    47dc:	7f 2d       	mov	r23, r15
    47de:	80 2f       	mov	r24, r16
    47e0:	91 2f       	mov	r25, r17
    47e2:	29 51       	subi	r18, 0x19	; 25
    47e4:	3c 4f       	sbci	r19, 0xFC	; 252
    47e6:	4f 4f       	sbci	r20, 0xFF	; 255
    47e8:	5f 4f       	sbci	r21, 0xFF	; 255
    47ea:	6f 4f       	sbci	r22, 0xFF	; 255
    47ec:	7f 4f       	sbci	r23, 0xFF	; 255
    47ee:	8f 4f       	sbci	r24, 0xFF	; 255
    47f0:	9f 4f       	sbci	r25, 0xFF	; 255
    47f2:	a2 2e       	mov	r10, r18
    47f4:	b3 2e       	mov	r11, r19
    47f6:	c4 2e       	mov	r12, r20
    47f8:	d5 2e       	mov	r13, r21
    47fa:	e6 2e       	mov	r14, r22
    47fc:	f7 2e       	mov	r15, r23
    47fe:	08 2f       	mov	r16, r24
    4800:	19 2f       	mov	r17, r25
    4802:	2a 2d       	mov	r18, r10
    4804:	3b 2d       	mov	r19, r11
    4806:	4c 2d       	mov	r20, r12
    4808:	5d 2d       	mov	r21, r13
    480a:	6e 2d       	mov	r22, r14
    480c:	7f 2d       	mov	r23, r15
    480e:	80 2f       	mov	r24, r16
    4810:	91 2f       	mov	r25, r17
    4812:	0e 94 56 11 	call	0x22ac	; 0x22ac <__floatundisf>
    4816:	dc 01       	movw	r26, r24
    4818:	cb 01       	movw	r24, r22
    481a:	20 e0       	ldi	r18, 0x00	; 0
    481c:	30 e8       	ldi	r19, 0x80	; 128
    481e:	4b eb       	ldi	r20, 0xBB	; 187
    4820:	55 e4       	ldi	r21, 0x45	; 69
    4822:	bc 01       	movw	r22, r24
    4824:	cd 01       	movw	r24, r26
    4826:	0e 94 81 14 	call	0x2902	; 0x2902 <__divsf3>
    482a:	dc 01       	movw	r26, r24
    482c:	cb 01       	movw	r24, r22
    482e:	bc 01       	movw	r22, r24
    4830:	cd 01       	movw	r24, r26
    4832:	0e 94 a5 10 	call	0x214a	; 0x214a <__fixunssfdi>
    4836:	a2 2e       	mov	r10, r18
    4838:	b3 2e       	mov	r11, r19
    483a:	c4 2e       	mov	r12, r20
    483c:	d5 2e       	mov	r13, r21
    483e:	e6 2e       	mov	r14, r22
    4840:	f7 2e       	mov	r15, r23
    4842:	08 2f       	mov	r16, r24
    4844:	19 2f       	mov	r17, r25
    4846:	d6 01       	movw	r26, r12
    4848:	c5 01       	movw	r24, r10
    484a:	bc 01       	movw	r22, r24
    484c:	cd 01       	movw	r24, r26
    484e:	33 d9       	rcall	.-3482   	; 0x3ab6 <__portable_avr_delay_cycles>
    4850:	2f 81       	ldd	r18, Y+7	; 0x07
    4852:	38 85       	ldd	r19, Y+8	; 0x08
    4854:	49 85       	ldd	r20, Y+9	; 0x09
    4856:	5a 85       	ldd	r21, Y+10	; 0x0a
    4858:	8a 81       	ldd	r24, Y+2	; 0x02
    485a:	88 2f       	mov	r24, r24
    485c:	90 e0       	ldi	r25, 0x00	; 0
    485e:	88 0f       	add	r24, r24
    4860:	99 1f       	adc	r25, r25
    4862:	88 0f       	add	r24, r24
    4864:	99 1f       	adc	r25, r25
    4866:	8a 57       	subi	r24, 0x7A	; 122
    4868:	9e 4d       	sbci	r25, 0xDE	; 222
    486a:	fc 01       	movw	r30, r24
    486c:	80 81       	ld	r24, Z
    486e:	91 81       	ldd	r25, Z+1	; 0x01
    4870:	a2 81       	ldd	r26, Z+2	; 0x02
    4872:	b3 81       	ldd	r27, Z+3	; 0x03
    4874:	28 17       	cp	r18, r24
    4876:	39 07       	cpc	r19, r25
    4878:	4a 07       	cpc	r20, r26
    487a:	5b 07       	cpc	r21, r27
    487c:	09 f4       	brne	.+2      	; 0x4880 <datalogger_write_iterators_to_eeprom+0x388>
    487e:	5a c1       	rjmp	.+692    	; 0x4b34 <datalogger_write_iterators_to_eeprom+0x63c>
    4880:	20 91 49 21 	lds	r18, 0x2149
    4884:	8a 81       	ldd	r24, Y+2	; 0x02
    4886:	88 2f       	mov	r24, r24
    4888:	90 e0       	ldi	r25, 0x00	; 0
    488a:	88 0f       	add	r24, r24
    488c:	99 1f       	adc	r25, r25
    488e:	88 0f       	add	r24, r24
    4890:	99 1f       	adc	r25, r25
    4892:	8a 57       	subi	r24, 0x7A	; 122
    4894:	9e 4d       	sbci	r25, 0xDE	; 222
    4896:	48 89       	ldd	r20, Y+16	; 0x10
    4898:	6f 85       	ldd	r22, Y+15	; 0x0f
    489a:	59 89       	ldd	r21, Y+17	; 0x11
    489c:	02 2f       	mov	r16, r18
    489e:	9c 01       	movw	r18, r24
    48a0:	85 2f       	mov	r24, r21
    48a2:	0e 94 8a 45 	call	0x8b14	; 0x8b14 <AT24CXX_WriteBlockA>
    48a6:	fb d8       	rcall	.-3594   	; 0x3a9e <sysclk_get_cpu_hz>
    48a8:	dc 01       	movw	r26, r24
    48aa:	cb 01       	movw	r24, r22
    48ac:	1c 01       	movw	r2, r24
    48ae:	2d 01       	movw	r4, r26
    48b0:	61 2c       	mov	r6, r1
    48b2:	71 2c       	mov	r7, r1
    48b4:	43 01       	movw	r8, r6
    48b6:	a2 2c       	mov	r10, r2
    48b8:	b3 2c       	mov	r11, r3
    48ba:	c4 2c       	mov	r12, r4
    48bc:	d5 2c       	mov	r13, r5
    48be:	e6 2c       	mov	r14, r6
    48c0:	f7 2c       	mov	r15, r7
    48c2:	08 2d       	mov	r16, r8
    48c4:	19 2d       	mov	r17, r9
    48c6:	2a 2d       	mov	r18, r10
    48c8:	3b 2d       	mov	r19, r11
    48ca:	4c 2d       	mov	r20, r12
    48cc:	5d 2d       	mov	r21, r13
    48ce:	6e 2d       	mov	r22, r14
    48d0:	7f 2d       	mov	r23, r15
    48d2:	80 2f       	mov	r24, r16
    48d4:	91 2f       	mov	r25, r17
    48d6:	02 e0       	ldi	r16, 0x02	; 2
    48d8:	0e 94 a2 72 	call	0xe544	; 0xe544 <__ashldi3>
    48dc:	2e a3       	std	Y+38, r18	; 0x26
    48de:	3f a3       	std	Y+39, r19	; 0x27
    48e0:	48 a7       	std	Y+40, r20	; 0x28
    48e2:	59 a7       	std	Y+41, r21	; 0x29
    48e4:	6a a7       	std	Y+42, r22	; 0x2a
    48e6:	7b a7       	std	Y+43, r23	; 0x2b
    48e8:	8c a7       	std	Y+44, r24	; 0x2c
    48ea:	9d a7       	std	Y+45, r25	; 0x2d
    48ec:	ae a0       	ldd	r10, Y+38	; 0x26
    48ee:	bf a0       	ldd	r11, Y+39	; 0x27
    48f0:	c8 a4       	ldd	r12, Y+40	; 0x28
    48f2:	d9 a4       	ldd	r13, Y+41	; 0x29
    48f4:	ea a4       	ldd	r14, Y+42	; 0x2a
    48f6:	fb a4       	ldd	r15, Y+43	; 0x2b
    48f8:	0c a5       	ldd	r16, Y+44	; 0x2c
    48fa:	1d a5       	ldd	r17, Y+45	; 0x2d
    48fc:	2a 2d       	mov	r18, r10
    48fe:	3b 2d       	mov	r19, r11
    4900:	4c 2d       	mov	r20, r12
    4902:	5d 2d       	mov	r21, r13
    4904:	6e 2d       	mov	r22, r14
    4906:	7f 2d       	mov	r23, r15
    4908:	80 2f       	mov	r24, r16
    490a:	91 2f       	mov	r25, r17
    490c:	a2 2c       	mov	r10, r2
    490e:	b3 2c       	mov	r11, r3
    4910:	c4 2c       	mov	r12, r4
    4912:	d5 2c       	mov	r13, r5
    4914:	e6 2c       	mov	r14, r6
    4916:	f7 2c       	mov	r15, r7
    4918:	08 2d       	mov	r16, r8
    491a:	19 2d       	mov	r17, r9
    491c:	0e 94 b1 72 	call	0xe562	; 0xe562 <__adddi3>
    4920:	a2 2e       	mov	r10, r18
    4922:	b3 2e       	mov	r11, r19
    4924:	c4 2e       	mov	r12, r20
    4926:	d5 2e       	mov	r13, r21
    4928:	e6 2e       	mov	r14, r22
    492a:	f7 2e       	mov	r15, r23
    492c:	08 2f       	mov	r16, r24
    492e:	19 2f       	mov	r17, r25
    4930:	2a 2d       	mov	r18, r10
    4932:	3b 2d       	mov	r19, r11
    4934:	4c 2d       	mov	r20, r12
    4936:	5d 2d       	mov	r21, r13
    4938:	6e 2d       	mov	r22, r14
    493a:	7f 2d       	mov	r23, r15
    493c:	80 2f       	mov	r24, r16
    493e:	91 2f       	mov	r25, r17
    4940:	29 51       	subi	r18, 0x19	; 25
    4942:	3c 4f       	sbci	r19, 0xFC	; 252
    4944:	4f 4f       	sbci	r20, 0xFF	; 255
    4946:	5f 4f       	sbci	r21, 0xFF	; 255
    4948:	6f 4f       	sbci	r22, 0xFF	; 255
    494a:	7f 4f       	sbci	r23, 0xFF	; 255
    494c:	8f 4f       	sbci	r24, 0xFF	; 255
    494e:	9f 4f       	sbci	r25, 0xFF	; 255
    4950:	a2 2e       	mov	r10, r18
    4952:	b3 2e       	mov	r11, r19
    4954:	c4 2e       	mov	r12, r20
    4956:	d5 2e       	mov	r13, r21
    4958:	e6 2e       	mov	r14, r22
    495a:	f7 2e       	mov	r15, r23
    495c:	08 2f       	mov	r16, r24
    495e:	19 2f       	mov	r17, r25
    4960:	2a 2d       	mov	r18, r10
    4962:	3b 2d       	mov	r19, r11
    4964:	4c 2d       	mov	r20, r12
    4966:	5d 2d       	mov	r21, r13
    4968:	6e 2d       	mov	r22, r14
    496a:	7f 2d       	mov	r23, r15
    496c:	80 2f       	mov	r24, r16
    496e:	91 2f       	mov	r25, r17
    4970:	0e 94 56 11 	call	0x22ac	; 0x22ac <__floatundisf>
    4974:	dc 01       	movw	r26, r24
    4976:	cb 01       	movw	r24, r22
    4978:	20 e0       	ldi	r18, 0x00	; 0
    497a:	30 e8       	ldi	r19, 0x80	; 128
    497c:	4b eb       	ldi	r20, 0xBB	; 187
    497e:	55 e4       	ldi	r21, 0x45	; 69
    4980:	bc 01       	movw	r22, r24
    4982:	cd 01       	movw	r24, r26
    4984:	0e 94 81 14 	call	0x2902	; 0x2902 <__divsf3>
    4988:	dc 01       	movw	r26, r24
    498a:	cb 01       	movw	r24, r22
    498c:	bc 01       	movw	r22, r24
    498e:	cd 01       	movw	r24, r26
    4990:	0e 94 a5 10 	call	0x214a	; 0x214a <__fixunssfdi>
    4994:	a2 2e       	mov	r10, r18
    4996:	b3 2e       	mov	r11, r19
    4998:	c4 2e       	mov	r12, r20
    499a:	d5 2e       	mov	r13, r21
    499c:	e6 2e       	mov	r14, r22
    499e:	f7 2e       	mov	r15, r23
    49a0:	08 2f       	mov	r16, r24
    49a2:	19 2f       	mov	r17, r25
    49a4:	d6 01       	movw	r26, r12
    49a6:	c5 01       	movw	r24, r10
    49a8:	bc 01       	movw	r22, r24
    49aa:	cd 01       	movw	r24, r26
    49ac:	84 d8       	rcall	.-3832   	; 0x3ab6 <__portable_avr_delay_cycles>
    49ae:	8d 81       	ldd	r24, Y+5	; 0x05
    49b0:	8f 5f       	subi	r24, 0xFF	; 255
    49b2:	87 70       	andi	r24, 0x07	; 7
    49b4:	8e 83       	std	Y+6, r24	; 0x06
    49b6:	8e 81       	ldd	r24, Y+6	; 0x06
    49b8:	48 2f       	mov	r20, r24
    49ba:	50 e0       	ldi	r21, 0x00	; 0
    49bc:	80 91 49 21 	lds	r24, 0x2149
    49c0:	28 2f       	mov	r18, r24
    49c2:	30 e0       	ldi	r19, 0x00	; 0
    49c4:	42 9f       	mul	r20, r18
    49c6:	c0 01       	movw	r24, r0
    49c8:	43 9f       	mul	r20, r19
    49ca:	90 0d       	add	r25, r0
    49cc:	52 9f       	mul	r21, r18
    49ce:	90 0d       	add	r25, r0
    49d0:	11 24       	eor	r1, r1
    49d2:	9c 01       	movw	r18, r24
    49d4:	8b 81       	ldd	r24, Y+3	; 0x03
    49d6:	9c 81       	ldd	r25, Y+4	; 0x04
    49d8:	82 0f       	add	r24, r18
    49da:	93 1f       	adc	r25, r19
    49dc:	04 96       	adiw	r24, 0x04	; 4
    49de:	cc 01       	movw	r24, r24
    49e0:	a0 e0       	ldi	r26, 0x00	; 0
    49e2:	b0 e0       	ldi	r27, 0x00	; 0
    49e4:	8a 8b       	std	Y+18, r24	; 0x12
    49e6:	9b 8b       	std	Y+19, r25	; 0x13
    49e8:	ac 8b       	std	Y+20, r26	; 0x14
    49ea:	bd 8b       	std	Y+21, r27	; 0x15
    49ec:	9e 01       	movw	r18, r28
    49ee:	20 5f       	subi	r18, 0xF0	; 240
    49f0:	3f 4f       	sbci	r19, 0xFF	; 255
    49f2:	ae 01       	movw	r20, r28
    49f4:	41 5f       	subi	r20, 0xF1	; 241
    49f6:	5f 4f       	sbci	r21, 0xFF	; 255
    49f8:	be 01       	movw	r22, r28
    49fa:	6f 5e       	subi	r22, 0xEF	; 239
    49fc:	7f 4f       	sbci	r23, 0xFF	; 255
    49fe:	ce 01       	movw	r24, r28
    4a00:	42 96       	adiw	r24, 0x12	; 18
    4a02:	41 da       	rcall	.-2942   	; 0x3e86 <AT24CXX_iterator_to_address>
    4a04:	20 91 49 21 	lds	r18, 0x2149
    4a08:	48 89       	ldd	r20, Y+16	; 0x10
    4a0a:	9f 85       	ldd	r25, Y+15	; 0x0f
    4a0c:	89 89       	ldd	r24, Y+17	; 0x11
    4a0e:	02 2f       	mov	r16, r18
    4a10:	2a e4       	ldi	r18, 0x4A	; 74
    4a12:	31 e2       	ldi	r19, 0x21	; 33
    4a14:	69 2f       	mov	r22, r25
    4a16:	0e 94 8a 45 	call	0x8b14	; 0x8b14 <AT24CXX_WriteBlockA>
    4a1a:	41 d8       	rcall	.-3966   	; 0x3a9e <sysclk_get_cpu_hz>
    4a1c:	dc 01       	movw	r26, r24
    4a1e:	cb 01       	movw	r24, r22
    4a20:	1c 01       	movw	r2, r24
    4a22:	2d 01       	movw	r4, r26
    4a24:	61 2c       	mov	r6, r1
    4a26:	71 2c       	mov	r7, r1
    4a28:	43 01       	movw	r8, r6
    4a2a:	a2 2c       	mov	r10, r2
    4a2c:	b3 2c       	mov	r11, r3
    4a2e:	c4 2c       	mov	r12, r4
    4a30:	d5 2c       	mov	r13, r5
    4a32:	e6 2c       	mov	r14, r6
    4a34:	f7 2c       	mov	r15, r7
    4a36:	08 2d       	mov	r16, r8
    4a38:	19 2d       	mov	r17, r9
    4a3a:	2a 2d       	mov	r18, r10
    4a3c:	3b 2d       	mov	r19, r11
    4a3e:	4c 2d       	mov	r20, r12
    4a40:	5d 2d       	mov	r21, r13
    4a42:	6e 2d       	mov	r22, r14
    4a44:	7f 2d       	mov	r23, r15
    4a46:	80 2f       	mov	r24, r16
    4a48:	91 2f       	mov	r25, r17
    4a4a:	02 e0       	ldi	r16, 0x02	; 2
    4a4c:	0e 94 a2 72 	call	0xe544	; 0xe544 <__ashldi3>
    4a50:	2e a7       	std	Y+46, r18	; 0x2e
    4a52:	3f a7       	std	Y+47, r19	; 0x2f
    4a54:	48 ab       	std	Y+48, r20	; 0x30
    4a56:	59 ab       	std	Y+49, r21	; 0x31
    4a58:	6a ab       	std	Y+50, r22	; 0x32
    4a5a:	7b ab       	std	Y+51, r23	; 0x33
    4a5c:	8c ab       	std	Y+52, r24	; 0x34
    4a5e:	9d ab       	std	Y+53, r25	; 0x35
    4a60:	ae a4       	ldd	r10, Y+46	; 0x2e
    4a62:	bf a4       	ldd	r11, Y+47	; 0x2f
    4a64:	c8 a8       	ldd	r12, Y+48	; 0x30
    4a66:	d9 a8       	ldd	r13, Y+49	; 0x31
    4a68:	ea a8       	ldd	r14, Y+50	; 0x32
    4a6a:	fb a8       	ldd	r15, Y+51	; 0x33
    4a6c:	0c a9       	ldd	r16, Y+52	; 0x34
    4a6e:	1d a9       	ldd	r17, Y+53	; 0x35
    4a70:	2a 2d       	mov	r18, r10
    4a72:	3b 2d       	mov	r19, r11
    4a74:	4c 2d       	mov	r20, r12
    4a76:	5d 2d       	mov	r21, r13
    4a78:	6e 2d       	mov	r22, r14
    4a7a:	7f 2d       	mov	r23, r15
    4a7c:	80 2f       	mov	r24, r16
    4a7e:	91 2f       	mov	r25, r17
    4a80:	a2 2c       	mov	r10, r2
    4a82:	b3 2c       	mov	r11, r3
    4a84:	c4 2c       	mov	r12, r4
    4a86:	d5 2c       	mov	r13, r5
    4a88:	e6 2c       	mov	r14, r6
    4a8a:	f7 2c       	mov	r15, r7
    4a8c:	08 2d       	mov	r16, r8
    4a8e:	19 2d       	mov	r17, r9
    4a90:	0e 94 b1 72 	call	0xe562	; 0xe562 <__adddi3>
    4a94:	a2 2e       	mov	r10, r18
    4a96:	b3 2e       	mov	r11, r19
    4a98:	c4 2e       	mov	r12, r20
    4a9a:	d5 2e       	mov	r13, r21
    4a9c:	e6 2e       	mov	r14, r22
    4a9e:	f7 2e       	mov	r15, r23
    4aa0:	08 2f       	mov	r16, r24
    4aa2:	19 2f       	mov	r17, r25
    4aa4:	2a 2d       	mov	r18, r10
    4aa6:	3b 2d       	mov	r19, r11
    4aa8:	4c 2d       	mov	r20, r12
    4aaa:	5d 2d       	mov	r21, r13
    4aac:	6e 2d       	mov	r22, r14
    4aae:	7f 2d       	mov	r23, r15
    4ab0:	80 2f       	mov	r24, r16
    4ab2:	91 2f       	mov	r25, r17
    4ab4:	29 51       	subi	r18, 0x19	; 25
    4ab6:	3c 4f       	sbci	r19, 0xFC	; 252
    4ab8:	4f 4f       	sbci	r20, 0xFF	; 255
    4aba:	5f 4f       	sbci	r21, 0xFF	; 255
    4abc:	6f 4f       	sbci	r22, 0xFF	; 255
    4abe:	7f 4f       	sbci	r23, 0xFF	; 255
    4ac0:	8f 4f       	sbci	r24, 0xFF	; 255
    4ac2:	9f 4f       	sbci	r25, 0xFF	; 255
    4ac4:	a2 2e       	mov	r10, r18
    4ac6:	b3 2e       	mov	r11, r19
    4ac8:	c4 2e       	mov	r12, r20
    4aca:	d5 2e       	mov	r13, r21
    4acc:	e6 2e       	mov	r14, r22
    4ace:	f7 2e       	mov	r15, r23
    4ad0:	08 2f       	mov	r16, r24
    4ad2:	19 2f       	mov	r17, r25
    4ad4:	2a 2d       	mov	r18, r10
    4ad6:	3b 2d       	mov	r19, r11
    4ad8:	4c 2d       	mov	r20, r12
    4ada:	5d 2d       	mov	r21, r13
    4adc:	6e 2d       	mov	r22, r14
    4ade:	7f 2d       	mov	r23, r15
    4ae0:	80 2f       	mov	r24, r16
    4ae2:	91 2f       	mov	r25, r17
    4ae4:	0e 94 56 11 	call	0x22ac	; 0x22ac <__floatundisf>
    4ae8:	dc 01       	movw	r26, r24
    4aea:	cb 01       	movw	r24, r22
    4aec:	20 e0       	ldi	r18, 0x00	; 0
    4aee:	30 e8       	ldi	r19, 0x80	; 128
    4af0:	4b eb       	ldi	r20, 0xBB	; 187
    4af2:	55 e4       	ldi	r21, 0x45	; 69
    4af4:	bc 01       	movw	r22, r24
    4af6:	cd 01       	movw	r24, r26
    4af8:	0e 94 81 14 	call	0x2902	; 0x2902 <__divsf3>
    4afc:	dc 01       	movw	r26, r24
    4afe:	cb 01       	movw	r24, r22
    4b00:	bc 01       	movw	r22, r24
    4b02:	cd 01       	movw	r24, r26
    4b04:	0e 94 a5 10 	call	0x214a	; 0x214a <__fixunssfdi>
    4b08:	a2 2e       	mov	r10, r18
    4b0a:	b3 2e       	mov	r11, r19
    4b0c:	c4 2e       	mov	r12, r20
    4b0e:	d5 2e       	mov	r13, r21
    4b10:	e6 2e       	mov	r14, r22
    4b12:	f7 2e       	mov	r15, r23
    4b14:	08 2f       	mov	r16, r24
    4b16:	19 2f       	mov	r17, r25
    4b18:	d6 01       	movw	r26, r12
    4b1a:	c5 01       	movw	r24, r10
    4b1c:	bc 01       	movw	r22, r24
    4b1e:	cd 01       	movw	r24, r26
    4b20:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__portable_avr_delay_cycles>
    4b24:	07 c0       	rjmp	.+14     	; 0x4b34 <datalogger_write_iterators_to_eeprom+0x63c>
    4b26:	89 81       	ldd	r24, Y+1	; 0x01
    4b28:	8f 5f       	subi	r24, 0xFF	; 255
    4b2a:	89 83       	std	Y+1, r24	; 0x01
    4b2c:	89 81       	ldd	r24, Y+1	; 0x01
    4b2e:	88 30       	cpi	r24, 0x08	; 8
    4b30:	08 f4       	brcc	.+2      	; 0x4b34 <datalogger_write_iterators_to_eeprom+0x63c>
    4b32:	0a cd       	rjmp	.-1516   	; 0x4548 <datalogger_write_iterators_to_eeprom+0x50>
    4b34:	8a 81       	ldd	r24, Y+2	; 0x02
    4b36:	8f 5f       	subi	r24, 0xFF	; 255
    4b38:	8a 83       	std	Y+2, r24	; 0x02
    4b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    4b3c:	82 30       	cpi	r24, 0x02	; 2
    4b3e:	08 f4       	brcc	.+2      	; 0x4b42 <datalogger_write_iterators_to_eeprom+0x64a>
    4b40:	f6 cc       	rjmp	.-1556   	; 0x452e <datalogger_write_iterators_to_eeprom+0x36>
    4b42:	80 e0       	ldi	r24, 0x00	; 0
    4b44:	e5 96       	adiw	r28, 0x35	; 53
    4b46:	cd bf       	out	0x3d, r28	; 61
    4b48:	de bf       	out	0x3e, r29	; 62
    4b4a:	df 91       	pop	r29
    4b4c:	cf 91       	pop	r28
    4b4e:	1f 91       	pop	r17
    4b50:	0f 91       	pop	r16
    4b52:	ff 90       	pop	r15
    4b54:	ef 90       	pop	r14
    4b56:	df 90       	pop	r13
    4b58:	cf 90       	pop	r12
    4b5a:	bf 90       	pop	r11
    4b5c:	af 90       	pop	r10
    4b5e:	9f 90       	pop	r9
    4b60:	8f 90       	pop	r8
    4b62:	7f 90       	pop	r7
    4b64:	6f 90       	pop	r6
    4b66:	5f 90       	pop	r5
    4b68:	4f 90       	pop	r4
    4b6a:	3f 90       	pop	r3
    4b6c:	2f 90       	pop	r2
    4b6e:	08 95       	ret

00004b70 <datalogger_init_iterators_to_eeprom>:
    4b70:	2f 92       	push	r2
    4b72:	3f 92       	push	r3
    4b74:	4f 92       	push	r4
    4b76:	5f 92       	push	r5
    4b78:	6f 92       	push	r6
    4b7a:	7f 92       	push	r7
    4b7c:	8f 92       	push	r8
    4b7e:	9f 92       	push	r9
    4b80:	af 92       	push	r10
    4b82:	bf 92       	push	r11
    4b84:	cf 92       	push	r12
    4b86:	df 92       	push	r13
    4b88:	ef 92       	push	r14
    4b8a:	ff 92       	push	r15
    4b8c:	0f 93       	push	r16
    4b8e:	1f 93       	push	r17
    4b90:	cf 93       	push	r28
    4b92:	df 93       	push	r29
    4b94:	cd b7       	in	r28, 0x3d	; 61
    4b96:	de b7       	in	r29, 0x3e	; 62
    4b98:	a2 97       	sbiw	r28, 0x22	; 34
    4b9a:	cd bf       	out	0x3d, r28	; 61
    4b9c:	de bf       	out	0x3e, r29	; 62
    4b9e:	0e 94 55 45 	call	0x8aaa	; 0x8aaa <AT24CXX_Init>
    4ba2:	1a 82       	std	Y+2, r1	; 0x02
    4ba4:	7f c1       	rjmp	.+766    	; 0x4ea4 <datalogger_init_iterators_to_eeprom+0x334>
    4ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ba8:	88 2f       	mov	r24, r24
    4baa:	90 e0       	ldi	r25, 0x00	; 0
    4bac:	88 0f       	add	r24, r24
    4bae:	99 1f       	adc	r25, r25
    4bb0:	88 0f       	add	r24, r24
    4bb2:	99 1f       	adc	r25, r25
    4bb4:	88 0f       	add	r24, r24
    4bb6:	99 1f       	adc	r25, r25
    4bb8:	8b 83       	std	Y+3, r24	; 0x03
    4bba:	9c 83       	std	Y+4, r25	; 0x04
    4bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    4bbe:	9c 81       	ldd	r25, Y+4	; 0x04
    4bc0:	04 96       	adiw	r24, 0x04	; 4
    4bc2:	cc 01       	movw	r24, r24
    4bc4:	a0 e0       	ldi	r26, 0x00	; 0
    4bc6:	b0 e0       	ldi	r27, 0x00	; 0
    4bc8:	8d 83       	std	Y+5, r24	; 0x05
    4bca:	9e 83       	std	Y+6, r25	; 0x06
    4bcc:	af 83       	std	Y+7, r26	; 0x07
    4bce:	b8 87       	std	Y+8, r27	; 0x08
    4bd0:	9e 01       	movw	r18, r28
    4bd2:	26 5f       	subi	r18, 0xF6	; 246
    4bd4:	3f 4f       	sbci	r19, 0xFF	; 255
    4bd6:	ae 01       	movw	r20, r28
    4bd8:	47 5f       	subi	r20, 0xF7	; 247
    4bda:	5f 4f       	sbci	r21, 0xFF	; 255
    4bdc:	be 01       	movw	r22, r28
    4bde:	65 5f       	subi	r22, 0xF5	; 245
    4be0:	7f 4f       	sbci	r23, 0xFF	; 255
    4be2:	ce 01       	movw	r24, r28
    4be4:	05 96       	adiw	r24, 0x05	; 5
    4be6:	4f d9       	rcall	.-3426   	; 0x3e86 <AT24CXX_iterator_to_address>
    4be8:	20 91 44 21 	lds	r18, 0x2144
    4bec:	8a 81       	ldd	r24, Y+2	; 0x02
    4bee:	88 2f       	mov	r24, r24
    4bf0:	90 e0       	ldi	r25, 0x00	; 0
    4bf2:	88 0f       	add	r24, r24
    4bf4:	99 1f       	adc	r25, r25
    4bf6:	88 0f       	add	r24, r24
    4bf8:	99 1f       	adc	r25, r25
    4bfa:	8a 57       	subi	r24, 0x7A	; 122
    4bfc:	9e 4d       	sbci	r25, 0xDE	; 222
    4bfe:	4a 85       	ldd	r20, Y+10	; 0x0a
    4c00:	69 85       	ldd	r22, Y+9	; 0x09
    4c02:	5b 85       	ldd	r21, Y+11	; 0x0b
    4c04:	02 2f       	mov	r16, r18
    4c06:	9c 01       	movw	r18, r24
    4c08:	85 2f       	mov	r24, r21
    4c0a:	0e 94 8a 45 	call	0x8b14	; 0x8b14 <AT24CXX_WriteBlockA>
    4c0e:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <sysclk_get_cpu_hz>
    4c12:	dc 01       	movw	r26, r24
    4c14:	cb 01       	movw	r24, r22
    4c16:	1c 01       	movw	r2, r24
    4c18:	2d 01       	movw	r4, r26
    4c1a:	61 2c       	mov	r6, r1
    4c1c:	71 2c       	mov	r7, r1
    4c1e:	43 01       	movw	r8, r6
    4c20:	a2 2c       	mov	r10, r2
    4c22:	b3 2c       	mov	r11, r3
    4c24:	c4 2c       	mov	r12, r4
    4c26:	d5 2c       	mov	r13, r5
    4c28:	e6 2c       	mov	r14, r6
    4c2a:	f7 2c       	mov	r15, r7
    4c2c:	08 2d       	mov	r16, r8
    4c2e:	19 2d       	mov	r17, r9
    4c30:	2a 2d       	mov	r18, r10
    4c32:	3b 2d       	mov	r19, r11
    4c34:	4c 2d       	mov	r20, r12
    4c36:	5d 2d       	mov	r21, r13
    4c38:	6e 2d       	mov	r22, r14
    4c3a:	7f 2d       	mov	r23, r15
    4c3c:	80 2f       	mov	r24, r16
    4c3e:	91 2f       	mov	r25, r17
    4c40:	02 e0       	ldi	r16, 0x02	; 2
    4c42:	0e 94 a2 72 	call	0xe544	; 0xe544 <__ashldi3>
    4c46:	2b 8b       	std	Y+19, r18	; 0x13
    4c48:	3c 8b       	std	Y+20, r19	; 0x14
    4c4a:	4d 8b       	std	Y+21, r20	; 0x15
    4c4c:	5e 8b       	std	Y+22, r21	; 0x16
    4c4e:	6f 8b       	std	Y+23, r22	; 0x17
    4c50:	78 8f       	std	Y+24, r23	; 0x18
    4c52:	89 8f       	std	Y+25, r24	; 0x19
    4c54:	9a 8f       	std	Y+26, r25	; 0x1a
    4c56:	ab 88       	ldd	r10, Y+19	; 0x13
    4c58:	bc 88       	ldd	r11, Y+20	; 0x14
    4c5a:	cd 88       	ldd	r12, Y+21	; 0x15
    4c5c:	de 88       	ldd	r13, Y+22	; 0x16
    4c5e:	ef 88       	ldd	r14, Y+23	; 0x17
    4c60:	f8 8c       	ldd	r15, Y+24	; 0x18
    4c62:	09 8d       	ldd	r16, Y+25	; 0x19
    4c64:	1a 8d       	ldd	r17, Y+26	; 0x1a
    4c66:	2a 2d       	mov	r18, r10
    4c68:	3b 2d       	mov	r19, r11
    4c6a:	4c 2d       	mov	r20, r12
    4c6c:	5d 2d       	mov	r21, r13
    4c6e:	6e 2d       	mov	r22, r14
    4c70:	7f 2d       	mov	r23, r15
    4c72:	80 2f       	mov	r24, r16
    4c74:	91 2f       	mov	r25, r17
    4c76:	a2 2c       	mov	r10, r2
    4c78:	b3 2c       	mov	r11, r3
    4c7a:	c4 2c       	mov	r12, r4
    4c7c:	d5 2c       	mov	r13, r5
    4c7e:	e6 2c       	mov	r14, r6
    4c80:	f7 2c       	mov	r15, r7
    4c82:	08 2d       	mov	r16, r8
    4c84:	19 2d       	mov	r17, r9
    4c86:	0e 94 b1 72 	call	0xe562	; 0xe562 <__adddi3>
    4c8a:	a2 2e       	mov	r10, r18
    4c8c:	b3 2e       	mov	r11, r19
    4c8e:	c4 2e       	mov	r12, r20
    4c90:	d5 2e       	mov	r13, r21
    4c92:	e6 2e       	mov	r14, r22
    4c94:	f7 2e       	mov	r15, r23
    4c96:	08 2f       	mov	r16, r24
    4c98:	19 2f       	mov	r17, r25
    4c9a:	2a 2d       	mov	r18, r10
    4c9c:	3b 2d       	mov	r19, r11
    4c9e:	4c 2d       	mov	r20, r12
    4ca0:	5d 2d       	mov	r21, r13
    4ca2:	6e 2d       	mov	r22, r14
    4ca4:	7f 2d       	mov	r23, r15
    4ca6:	80 2f       	mov	r24, r16
    4ca8:	91 2f       	mov	r25, r17
    4caa:	29 51       	subi	r18, 0x19	; 25
    4cac:	3c 4f       	sbci	r19, 0xFC	; 252
    4cae:	4f 4f       	sbci	r20, 0xFF	; 255
    4cb0:	5f 4f       	sbci	r21, 0xFF	; 255
    4cb2:	6f 4f       	sbci	r22, 0xFF	; 255
    4cb4:	7f 4f       	sbci	r23, 0xFF	; 255
    4cb6:	8f 4f       	sbci	r24, 0xFF	; 255
    4cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    4cba:	a2 2e       	mov	r10, r18
    4cbc:	b3 2e       	mov	r11, r19
    4cbe:	c4 2e       	mov	r12, r20
    4cc0:	d5 2e       	mov	r13, r21
    4cc2:	e6 2e       	mov	r14, r22
    4cc4:	f7 2e       	mov	r15, r23
    4cc6:	08 2f       	mov	r16, r24
    4cc8:	19 2f       	mov	r17, r25
    4cca:	2a 2d       	mov	r18, r10
    4ccc:	3b 2d       	mov	r19, r11
    4cce:	4c 2d       	mov	r20, r12
    4cd0:	5d 2d       	mov	r21, r13
    4cd2:	6e 2d       	mov	r22, r14
    4cd4:	7f 2d       	mov	r23, r15
    4cd6:	80 2f       	mov	r24, r16
    4cd8:	91 2f       	mov	r25, r17
    4cda:	0e 94 56 11 	call	0x22ac	; 0x22ac <__floatundisf>
    4cde:	dc 01       	movw	r26, r24
    4ce0:	cb 01       	movw	r24, r22
    4ce2:	20 e0       	ldi	r18, 0x00	; 0
    4ce4:	30 e8       	ldi	r19, 0x80	; 128
    4ce6:	4b eb       	ldi	r20, 0xBB	; 187
    4ce8:	55 e4       	ldi	r21, 0x45	; 69
    4cea:	bc 01       	movw	r22, r24
    4cec:	cd 01       	movw	r24, r26
    4cee:	0e 94 81 14 	call	0x2902	; 0x2902 <__divsf3>
    4cf2:	dc 01       	movw	r26, r24
    4cf4:	cb 01       	movw	r24, r22
    4cf6:	bc 01       	movw	r22, r24
    4cf8:	cd 01       	movw	r24, r26
    4cfa:	0e 94 a5 10 	call	0x214a	; 0x214a <__fixunssfdi>
    4cfe:	a2 2e       	mov	r10, r18
    4d00:	b3 2e       	mov	r11, r19
    4d02:	c4 2e       	mov	r12, r20
    4d04:	d5 2e       	mov	r13, r21
    4d06:	e6 2e       	mov	r14, r22
    4d08:	f7 2e       	mov	r15, r23
    4d0a:	08 2f       	mov	r16, r24
    4d0c:	19 2f       	mov	r17, r25
    4d0e:	d6 01       	movw	r26, r12
    4d10:	c5 01       	movw	r24, r10
    4d12:	bc 01       	movw	r22, r24
    4d14:	cd 01       	movw	r24, r26
    4d16:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__portable_avr_delay_cycles>
    4d1a:	81 e0       	ldi	r24, 0x01	; 1
    4d1c:	89 83       	std	Y+1, r24	; 0x01
    4d1e:	bb c0       	rjmp	.+374    	; 0x4e96 <datalogger_init_iterators_to_eeprom+0x326>
    4d20:	89 81       	ldd	r24, Y+1	; 0x01
    4d22:	48 2f       	mov	r20, r24
    4d24:	50 e0       	ldi	r21, 0x00	; 0
    4d26:	80 91 44 21 	lds	r24, 0x2144
    4d2a:	28 2f       	mov	r18, r24
    4d2c:	30 e0       	ldi	r19, 0x00	; 0
    4d2e:	42 9f       	mul	r20, r18
    4d30:	c0 01       	movw	r24, r0
    4d32:	43 9f       	mul	r20, r19
    4d34:	90 0d       	add	r25, r0
    4d36:	52 9f       	mul	r21, r18
    4d38:	90 0d       	add	r25, r0
    4d3a:	11 24       	eor	r1, r1
    4d3c:	9c 01       	movw	r18, r24
    4d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    4d40:	9c 81       	ldd	r25, Y+4	; 0x04
    4d42:	82 0f       	add	r24, r18
    4d44:	93 1f       	adc	r25, r19
    4d46:	04 96       	adiw	r24, 0x04	; 4
    4d48:	cc 01       	movw	r24, r24
    4d4a:	a0 e0       	ldi	r26, 0x00	; 0
    4d4c:	b0 e0       	ldi	r27, 0x00	; 0
    4d4e:	8c 87       	std	Y+12, r24	; 0x0c
    4d50:	9d 87       	std	Y+13, r25	; 0x0d
    4d52:	ae 87       	std	Y+14, r26	; 0x0e
    4d54:	bf 87       	std	Y+15, r27	; 0x0f
    4d56:	9e 01       	movw	r18, r28
    4d58:	2f 5e       	subi	r18, 0xEF	; 239
    4d5a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d5c:	ae 01       	movw	r20, r28
    4d5e:	40 5f       	subi	r20, 0xF0	; 240
    4d60:	5f 4f       	sbci	r21, 0xFF	; 255
    4d62:	be 01       	movw	r22, r28
    4d64:	6e 5e       	subi	r22, 0xEE	; 238
    4d66:	7f 4f       	sbci	r23, 0xFF	; 255
    4d68:	ce 01       	movw	r24, r28
    4d6a:	0c 96       	adiw	r24, 0x0c	; 12
    4d6c:	8c d8       	rcall	.-3816   	; 0x3e86 <AT24CXX_iterator_to_address>
    4d6e:	20 91 44 21 	lds	r18, 0x2144
    4d72:	49 89       	ldd	r20, Y+17	; 0x11
    4d74:	98 89       	ldd	r25, Y+16	; 0x10
    4d76:	8a 89       	ldd	r24, Y+18	; 0x12
    4d78:	02 2f       	mov	r16, r18
    4d7a:	25 e4       	ldi	r18, 0x45	; 69
    4d7c:	31 e2       	ldi	r19, 0x21	; 33
    4d7e:	69 2f       	mov	r22, r25
    4d80:	0e 94 8a 45 	call	0x8b14	; 0x8b14 <AT24CXX_WriteBlockA>
    4d84:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <sysclk_get_cpu_hz>
    4d88:	dc 01       	movw	r26, r24
    4d8a:	cb 01       	movw	r24, r22
    4d8c:	1c 01       	movw	r2, r24
    4d8e:	2d 01       	movw	r4, r26
    4d90:	61 2c       	mov	r6, r1
    4d92:	71 2c       	mov	r7, r1
    4d94:	43 01       	movw	r8, r6
    4d96:	a2 2c       	mov	r10, r2
    4d98:	b3 2c       	mov	r11, r3
    4d9a:	c4 2c       	mov	r12, r4
    4d9c:	d5 2c       	mov	r13, r5
    4d9e:	e6 2c       	mov	r14, r6
    4da0:	f7 2c       	mov	r15, r7
    4da2:	08 2d       	mov	r16, r8
    4da4:	19 2d       	mov	r17, r9
    4da6:	2a 2d       	mov	r18, r10
    4da8:	3b 2d       	mov	r19, r11
    4daa:	4c 2d       	mov	r20, r12
    4dac:	5d 2d       	mov	r21, r13
    4dae:	6e 2d       	mov	r22, r14
    4db0:	7f 2d       	mov	r23, r15
    4db2:	80 2f       	mov	r24, r16
    4db4:	91 2f       	mov	r25, r17
    4db6:	02 e0       	ldi	r16, 0x02	; 2
    4db8:	0e 94 a2 72 	call	0xe544	; 0xe544 <__ashldi3>
    4dbc:	2b 8f       	std	Y+27, r18	; 0x1b
    4dbe:	3c 8f       	std	Y+28, r19	; 0x1c
    4dc0:	4d 8f       	std	Y+29, r20	; 0x1d
    4dc2:	5e 8f       	std	Y+30, r21	; 0x1e
    4dc4:	6f 8f       	std	Y+31, r22	; 0x1f
    4dc6:	78 a3       	std	Y+32, r23	; 0x20
    4dc8:	89 a3       	std	Y+33, r24	; 0x21
    4dca:	9a a3       	std	Y+34, r25	; 0x22
    4dcc:	ab 8c       	ldd	r10, Y+27	; 0x1b
    4dce:	bc 8c       	ldd	r11, Y+28	; 0x1c
    4dd0:	cd 8c       	ldd	r12, Y+29	; 0x1d
    4dd2:	de 8c       	ldd	r13, Y+30	; 0x1e
    4dd4:	ef 8c       	ldd	r14, Y+31	; 0x1f
    4dd6:	f8 a0       	ldd	r15, Y+32	; 0x20
    4dd8:	09 a1       	ldd	r16, Y+33	; 0x21
    4dda:	1a a1       	ldd	r17, Y+34	; 0x22
    4ddc:	2a 2d       	mov	r18, r10
    4dde:	3b 2d       	mov	r19, r11
    4de0:	4c 2d       	mov	r20, r12
    4de2:	5d 2d       	mov	r21, r13
    4de4:	6e 2d       	mov	r22, r14
    4de6:	7f 2d       	mov	r23, r15
    4de8:	80 2f       	mov	r24, r16
    4dea:	91 2f       	mov	r25, r17
    4dec:	a2 2c       	mov	r10, r2
    4dee:	b3 2c       	mov	r11, r3
    4df0:	c4 2c       	mov	r12, r4
    4df2:	d5 2c       	mov	r13, r5
    4df4:	e6 2c       	mov	r14, r6
    4df6:	f7 2c       	mov	r15, r7
    4df8:	08 2d       	mov	r16, r8
    4dfa:	19 2d       	mov	r17, r9
    4dfc:	0e 94 b1 72 	call	0xe562	; 0xe562 <__adddi3>
    4e00:	a2 2e       	mov	r10, r18
    4e02:	b3 2e       	mov	r11, r19
    4e04:	c4 2e       	mov	r12, r20
    4e06:	d5 2e       	mov	r13, r21
    4e08:	e6 2e       	mov	r14, r22
    4e0a:	f7 2e       	mov	r15, r23
    4e0c:	08 2f       	mov	r16, r24
    4e0e:	19 2f       	mov	r17, r25
    4e10:	2a 2d       	mov	r18, r10
    4e12:	3b 2d       	mov	r19, r11
    4e14:	4c 2d       	mov	r20, r12
    4e16:	5d 2d       	mov	r21, r13
    4e18:	6e 2d       	mov	r22, r14
    4e1a:	7f 2d       	mov	r23, r15
    4e1c:	80 2f       	mov	r24, r16
    4e1e:	91 2f       	mov	r25, r17
    4e20:	29 51       	subi	r18, 0x19	; 25
    4e22:	3c 4f       	sbci	r19, 0xFC	; 252
    4e24:	4f 4f       	sbci	r20, 0xFF	; 255
    4e26:	5f 4f       	sbci	r21, 0xFF	; 255
    4e28:	6f 4f       	sbci	r22, 0xFF	; 255
    4e2a:	7f 4f       	sbci	r23, 0xFF	; 255
    4e2c:	8f 4f       	sbci	r24, 0xFF	; 255
    4e2e:	9f 4f       	sbci	r25, 0xFF	; 255
    4e30:	a2 2e       	mov	r10, r18
    4e32:	b3 2e       	mov	r11, r19
    4e34:	c4 2e       	mov	r12, r20
    4e36:	d5 2e       	mov	r13, r21
    4e38:	e6 2e       	mov	r14, r22
    4e3a:	f7 2e       	mov	r15, r23
    4e3c:	08 2f       	mov	r16, r24
    4e3e:	19 2f       	mov	r17, r25
    4e40:	2a 2d       	mov	r18, r10
    4e42:	3b 2d       	mov	r19, r11
    4e44:	4c 2d       	mov	r20, r12
    4e46:	5d 2d       	mov	r21, r13
    4e48:	6e 2d       	mov	r22, r14
    4e4a:	7f 2d       	mov	r23, r15
    4e4c:	80 2f       	mov	r24, r16
    4e4e:	91 2f       	mov	r25, r17
    4e50:	0e 94 56 11 	call	0x22ac	; 0x22ac <__floatundisf>
    4e54:	dc 01       	movw	r26, r24
    4e56:	cb 01       	movw	r24, r22
    4e58:	20 e0       	ldi	r18, 0x00	; 0
    4e5a:	30 e8       	ldi	r19, 0x80	; 128
    4e5c:	4b eb       	ldi	r20, 0xBB	; 187
    4e5e:	55 e4       	ldi	r21, 0x45	; 69
    4e60:	bc 01       	movw	r22, r24
    4e62:	cd 01       	movw	r24, r26
    4e64:	0e 94 81 14 	call	0x2902	; 0x2902 <__divsf3>
    4e68:	dc 01       	movw	r26, r24
    4e6a:	cb 01       	movw	r24, r22
    4e6c:	bc 01       	movw	r22, r24
    4e6e:	cd 01       	movw	r24, r26
    4e70:	0e 94 a5 10 	call	0x214a	; 0x214a <__fixunssfdi>
    4e74:	a2 2e       	mov	r10, r18
    4e76:	b3 2e       	mov	r11, r19
    4e78:	c4 2e       	mov	r12, r20
    4e7a:	d5 2e       	mov	r13, r21
    4e7c:	e6 2e       	mov	r14, r22
    4e7e:	f7 2e       	mov	r15, r23
    4e80:	08 2f       	mov	r16, r24
    4e82:	19 2f       	mov	r17, r25
    4e84:	d6 01       	movw	r26, r12
    4e86:	c5 01       	movw	r24, r10
    4e88:	bc 01       	movw	r22, r24
    4e8a:	cd 01       	movw	r24, r26
    4e8c:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__portable_avr_delay_cycles>
    4e90:	89 81       	ldd	r24, Y+1	; 0x01
    4e92:	8f 5f       	subi	r24, 0xFF	; 255
    4e94:	89 83       	std	Y+1, r24	; 0x01
    4e96:	89 81       	ldd	r24, Y+1	; 0x01
    4e98:	88 30       	cpi	r24, 0x08	; 8
    4e9a:	08 f4       	brcc	.+2      	; 0x4e9e <datalogger_init_iterators_to_eeprom+0x32e>
    4e9c:	41 cf       	rjmp	.-382    	; 0x4d20 <datalogger_init_iterators_to_eeprom+0x1b0>
    4e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    4ea0:	8f 5f       	subi	r24, 0xFF	; 255
    4ea2:	8a 83       	std	Y+2, r24	; 0x02
    4ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ea6:	82 30       	cpi	r24, 0x02	; 2
    4ea8:	08 f4       	brcc	.+2      	; 0x4eac <datalogger_init_iterators_to_eeprom+0x33c>
    4eaa:	7d ce       	rjmp	.-774    	; 0x4ba6 <datalogger_init_iterators_to_eeprom+0x36>
    4eac:	80 e0       	ldi	r24, 0x00	; 0
    4eae:	a2 96       	adiw	r28, 0x22	; 34
    4eb0:	cd bf       	out	0x3d, r28	; 61
    4eb2:	de bf       	out	0x3e, r29	; 62
    4eb4:	df 91       	pop	r29
    4eb6:	cf 91       	pop	r28
    4eb8:	1f 91       	pop	r17
    4eba:	0f 91       	pop	r16
    4ebc:	ff 90       	pop	r15
    4ebe:	ef 90       	pop	r14
    4ec0:	df 90       	pop	r13
    4ec2:	cf 90       	pop	r12
    4ec4:	bf 90       	pop	r11
    4ec6:	af 90       	pop	r10
    4ec8:	9f 90       	pop	r9
    4eca:	8f 90       	pop	r8
    4ecc:	7f 90       	pop	r7
    4ece:	6f 90       	pop	r6
    4ed0:	5f 90       	pop	r5
    4ed2:	4f 90       	pop	r4
    4ed4:	3f 90       	pop	r3
    4ed6:	2f 90       	pop	r2
    4ed8:	08 95       	ret

00004eda <datalogger_reset_eeprom>:
    4eda:	2f 92       	push	r2
    4edc:	3f 92       	push	r3
    4ede:	4f 92       	push	r4
    4ee0:	5f 92       	push	r5
    4ee2:	6f 92       	push	r6
    4ee4:	7f 92       	push	r7
    4ee6:	8f 92       	push	r8
    4ee8:	9f 92       	push	r9
    4eea:	af 92       	push	r10
    4eec:	bf 92       	push	r11
    4eee:	cf 92       	push	r12
    4ef0:	df 92       	push	r13
    4ef2:	ef 92       	push	r14
    4ef4:	ff 92       	push	r15
    4ef6:	0f 93       	push	r16
    4ef8:	1f 93       	push	r17
    4efa:	cf 93       	push	r28
    4efc:	df 93       	push	r29
    4efe:	cd b7       	in	r28, 0x3d	; 61
    4f00:	de b7       	in	r29, 0x3e	; 62
    4f02:	2d 97       	sbiw	r28, 0x0d	; 13
    4f04:	cd bf       	out	0x3d, r28	; 61
    4f06:	de bf       	out	0x3e, r29	; 62
    4f08:	8f ee       	ldi	r24, 0xEF	; 239
    4f0a:	9a e0       	ldi	r25, 0x0A	; 10
    4f0c:	41 e0       	ldi	r20, 0x01	; 1
    4f0e:	bc 01       	movw	r22, r24
    4f10:	81 e0       	ldi	r24, 0x01	; 1
    4f12:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    4f16:	81 e4       	ldi	r24, 0x41	; 65
    4f18:	8a 83       	std	Y+2, r24	; 0x02
    4f1a:	83 e4       	ldi	r24, 0x43	; 67
    4f1c:	8b 83       	std	Y+3, r24	; 0x03
    4f1e:	80 e3       	ldi	r24, 0x30	; 48
    4f20:	8c 83       	std	Y+4, r24	; 0x04
    4f22:	81 e3       	ldi	r24, 0x31	; 49
    4f24:	8d 83       	std	Y+5, r24	; 0x05
    4f26:	ce 01       	movw	r24, r28
    4f28:	02 96       	adiw	r24, 0x02	; 2
    4f2a:	04 e0       	ldi	r16, 0x04	; 4
    4f2c:	9c 01       	movw	r18, r24
    4f2e:	40 e0       	ldi	r20, 0x00	; 0
    4f30:	60 e0       	ldi	r22, 0x00	; 0
    4f32:	80 e0       	ldi	r24, 0x00	; 0
    4f34:	0e 94 8a 45 	call	0x8b14	; 0x8b14 <AT24CXX_WriteBlockA>
    4f38:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <sysclk_get_cpu_hz>
    4f3c:	dc 01       	movw	r26, r24
    4f3e:	cb 01       	movw	r24, r22
    4f40:	1c 01       	movw	r2, r24
    4f42:	2d 01       	movw	r4, r26
    4f44:	61 2c       	mov	r6, r1
    4f46:	71 2c       	mov	r7, r1
    4f48:	43 01       	movw	r8, r6
    4f4a:	a2 2c       	mov	r10, r2
    4f4c:	b3 2c       	mov	r11, r3
    4f4e:	c4 2c       	mov	r12, r4
    4f50:	d5 2c       	mov	r13, r5
    4f52:	e6 2c       	mov	r14, r6
    4f54:	f7 2c       	mov	r15, r7
    4f56:	08 2d       	mov	r16, r8
    4f58:	19 2d       	mov	r17, r9
    4f5a:	2a 2d       	mov	r18, r10
    4f5c:	3b 2d       	mov	r19, r11
    4f5e:	4c 2d       	mov	r20, r12
    4f60:	5d 2d       	mov	r21, r13
    4f62:	6e 2d       	mov	r22, r14
    4f64:	7f 2d       	mov	r23, r15
    4f66:	80 2f       	mov	r24, r16
    4f68:	91 2f       	mov	r25, r17
    4f6a:	02 e0       	ldi	r16, 0x02	; 2
    4f6c:	0e 94 a2 72 	call	0xe544	; 0xe544 <__ashldi3>
    4f70:	2e 83       	std	Y+6, r18	; 0x06
    4f72:	3f 83       	std	Y+7, r19	; 0x07
    4f74:	48 87       	std	Y+8, r20	; 0x08
    4f76:	59 87       	std	Y+9, r21	; 0x09
    4f78:	6a 87       	std	Y+10, r22	; 0x0a
    4f7a:	7b 87       	std	Y+11, r23	; 0x0b
    4f7c:	8c 87       	std	Y+12, r24	; 0x0c
    4f7e:	9d 87       	std	Y+13, r25	; 0x0d
    4f80:	ae 80       	ldd	r10, Y+6	; 0x06
    4f82:	bf 80       	ldd	r11, Y+7	; 0x07
    4f84:	c8 84       	ldd	r12, Y+8	; 0x08
    4f86:	d9 84       	ldd	r13, Y+9	; 0x09
    4f88:	ea 84       	ldd	r14, Y+10	; 0x0a
    4f8a:	fb 84       	ldd	r15, Y+11	; 0x0b
    4f8c:	0c 85       	ldd	r16, Y+12	; 0x0c
    4f8e:	1d 85       	ldd	r17, Y+13	; 0x0d
    4f90:	2a 2d       	mov	r18, r10
    4f92:	3b 2d       	mov	r19, r11
    4f94:	4c 2d       	mov	r20, r12
    4f96:	5d 2d       	mov	r21, r13
    4f98:	6e 2d       	mov	r22, r14
    4f9a:	7f 2d       	mov	r23, r15
    4f9c:	80 2f       	mov	r24, r16
    4f9e:	91 2f       	mov	r25, r17
    4fa0:	a2 2c       	mov	r10, r2
    4fa2:	b3 2c       	mov	r11, r3
    4fa4:	c4 2c       	mov	r12, r4
    4fa6:	d5 2c       	mov	r13, r5
    4fa8:	e6 2c       	mov	r14, r6
    4faa:	f7 2c       	mov	r15, r7
    4fac:	08 2d       	mov	r16, r8
    4fae:	19 2d       	mov	r17, r9
    4fb0:	0e 94 b1 72 	call	0xe562	; 0xe562 <__adddi3>
    4fb4:	a2 2e       	mov	r10, r18
    4fb6:	b3 2e       	mov	r11, r19
    4fb8:	c4 2e       	mov	r12, r20
    4fba:	d5 2e       	mov	r13, r21
    4fbc:	e6 2e       	mov	r14, r22
    4fbe:	f7 2e       	mov	r15, r23
    4fc0:	08 2f       	mov	r16, r24
    4fc2:	19 2f       	mov	r17, r25
    4fc4:	2a 2d       	mov	r18, r10
    4fc6:	3b 2d       	mov	r19, r11
    4fc8:	4c 2d       	mov	r20, r12
    4fca:	5d 2d       	mov	r21, r13
    4fcc:	6e 2d       	mov	r22, r14
    4fce:	7f 2d       	mov	r23, r15
    4fd0:	80 2f       	mov	r24, r16
    4fd2:	91 2f       	mov	r25, r17
    4fd4:	29 51       	subi	r18, 0x19	; 25
    4fd6:	3c 4f       	sbci	r19, 0xFC	; 252
    4fd8:	4f 4f       	sbci	r20, 0xFF	; 255
    4fda:	5f 4f       	sbci	r21, 0xFF	; 255
    4fdc:	6f 4f       	sbci	r22, 0xFF	; 255
    4fde:	7f 4f       	sbci	r23, 0xFF	; 255
    4fe0:	8f 4f       	sbci	r24, 0xFF	; 255
    4fe2:	9f 4f       	sbci	r25, 0xFF	; 255
    4fe4:	a2 2e       	mov	r10, r18
    4fe6:	b3 2e       	mov	r11, r19
    4fe8:	c4 2e       	mov	r12, r20
    4fea:	d5 2e       	mov	r13, r21
    4fec:	e6 2e       	mov	r14, r22
    4fee:	f7 2e       	mov	r15, r23
    4ff0:	08 2f       	mov	r16, r24
    4ff2:	19 2f       	mov	r17, r25
    4ff4:	2a 2d       	mov	r18, r10
    4ff6:	3b 2d       	mov	r19, r11
    4ff8:	4c 2d       	mov	r20, r12
    4ffa:	5d 2d       	mov	r21, r13
    4ffc:	6e 2d       	mov	r22, r14
    4ffe:	7f 2d       	mov	r23, r15
    5000:	80 2f       	mov	r24, r16
    5002:	91 2f       	mov	r25, r17
    5004:	0e 94 56 11 	call	0x22ac	; 0x22ac <__floatundisf>
    5008:	dc 01       	movw	r26, r24
    500a:	cb 01       	movw	r24, r22
    500c:	20 e0       	ldi	r18, 0x00	; 0
    500e:	30 e8       	ldi	r19, 0x80	; 128
    5010:	4b eb       	ldi	r20, 0xBB	; 187
    5012:	55 e4       	ldi	r21, 0x45	; 69
    5014:	bc 01       	movw	r22, r24
    5016:	cd 01       	movw	r24, r26
    5018:	0e 94 81 14 	call	0x2902	; 0x2902 <__divsf3>
    501c:	dc 01       	movw	r26, r24
    501e:	cb 01       	movw	r24, r22
    5020:	bc 01       	movw	r22, r24
    5022:	cd 01       	movw	r24, r26
    5024:	0e 94 a5 10 	call	0x214a	; 0x214a <__fixunssfdi>
    5028:	a2 2e       	mov	r10, r18
    502a:	b3 2e       	mov	r11, r19
    502c:	c4 2e       	mov	r12, r20
    502e:	d5 2e       	mov	r13, r21
    5030:	e6 2e       	mov	r14, r22
    5032:	f7 2e       	mov	r15, r23
    5034:	08 2f       	mov	r16, r24
    5036:	19 2f       	mov	r17, r25
    5038:	d6 01       	movw	r26, r12
    503a:	c5 01       	movw	r24, r10
    503c:	bc 01       	movw	r22, r24
    503e:	cd 01       	movw	r24, r26
    5040:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__portable_avr_delay_cycles>
    5044:	19 82       	std	Y+1, r1	; 0x01
    5046:	16 c0       	rjmp	.+44     	; 0x5074 <datalogger_reset_eeprom+0x19a>
    5048:	89 81       	ldd	r24, Y+1	; 0x01
    504a:	88 2f       	mov	r24, r24
    504c:	90 e0       	ldi	r25, 0x00	; 0
    504e:	88 0f       	add	r24, r24
    5050:	99 1f       	adc	r25, r25
    5052:	88 0f       	add	r24, r24
    5054:	99 1f       	adc	r25, r25
    5056:	9c 01       	movw	r18, r24
    5058:	2a 57       	subi	r18, 0x7A	; 122
    505a:	3e 4d       	sbci	r19, 0xDE	; 222
    505c:	80 e0       	ldi	r24, 0x00	; 0
    505e:	91 e0       	ldi	r25, 0x01	; 1
    5060:	a0 e0       	ldi	r26, 0x00	; 0
    5062:	b0 e0       	ldi	r27, 0x00	; 0
    5064:	f9 01       	movw	r30, r18
    5066:	80 83       	st	Z, r24
    5068:	91 83       	std	Z+1, r25	; 0x01
    506a:	a2 83       	std	Z+2, r26	; 0x02
    506c:	b3 83       	std	Z+3, r27	; 0x03
    506e:	89 81       	ldd	r24, Y+1	; 0x01
    5070:	8f 5f       	subi	r24, 0xFF	; 255
    5072:	89 83       	std	Y+1, r24	; 0x01
    5074:	89 81       	ldd	r24, Y+1	; 0x01
    5076:	82 30       	cpi	r24, 0x02	; 2
    5078:	38 f3       	brcs	.-50     	; 0x5048 <datalogger_reset_eeprom+0x16e>
    507a:	7a dd       	rcall	.-1292   	; 0x4b70 <datalogger_init_iterators_to_eeprom>
    507c:	80 e0       	ldi	r24, 0x00	; 0
    507e:	2d 96       	adiw	r28, 0x0d	; 13
    5080:	cd bf       	out	0x3d, r28	; 61
    5082:	de bf       	out	0x3e, r29	; 62
    5084:	df 91       	pop	r29
    5086:	cf 91       	pop	r28
    5088:	1f 91       	pop	r17
    508a:	0f 91       	pop	r16
    508c:	ff 90       	pop	r15
    508e:	ef 90       	pop	r14
    5090:	df 90       	pop	r13
    5092:	cf 90       	pop	r12
    5094:	bf 90       	pop	r11
    5096:	af 90       	pop	r10
    5098:	9f 90       	pop	r9
    509a:	8f 90       	pop	r8
    509c:	7f 90       	pop	r7
    509e:	6f 90       	pop	r6
    50a0:	5f 90       	pop	r5
    50a2:	4f 90       	pop	r4
    50a4:	3f 90       	pop	r3
    50a6:	2f 90       	pop	r2
    50a8:	08 95       	ret

000050aa <datalogger_init>:
    50aa:	2f 92       	push	r2
    50ac:	3f 92       	push	r3
    50ae:	4f 92       	push	r4
    50b0:	5f 92       	push	r5
    50b2:	6f 92       	push	r6
    50b4:	7f 92       	push	r7
    50b6:	8f 92       	push	r8
    50b8:	9f 92       	push	r9
    50ba:	af 92       	push	r10
    50bc:	bf 92       	push	r11
    50be:	cf 92       	push	r12
    50c0:	df 92       	push	r13
    50c2:	ef 92       	push	r14
    50c4:	ff 92       	push	r15
    50c6:	0f 93       	push	r16
    50c8:	1f 93       	push	r17
    50ca:	cf 93       	push	r28
    50cc:	df 93       	push	r29
    50ce:	cd b7       	in	r28, 0x3d	; 61
    50d0:	de b7       	in	r29, 0x3e	; 62
    50d2:	c1 57       	subi	r28, 0x71	; 113
    50d4:	d1 09       	sbc	r29, r1
    50d6:	cd bf       	out	0x3d, r28	; 61
    50d8:	de bf       	out	0x3e, r29	; 62
    50da:	82 ed       	ldi	r24, 0xD2	; 210
    50dc:	99 e0       	ldi	r25, 0x09	; 9
    50de:	41 e0       	ldi	r20, 0x01	; 1
    50e0:	bc 01       	movw	r22, r24
    50e2:	82 e0       	ldi	r24, 0x02	; 2
    50e4:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    50e8:	68 e8       	ldi	r22, 0x88	; 136
    50ea:	74 e7       	ldi	r23, 0x74	; 116
    50ec:	85 e8       	ldi	r24, 0x85	; 133
    50ee:	90 e5       	ldi	r25, 0x50	; 80
    50f0:	0e 94 56 5f 	call	0xbeac	; 0xbeac <rtc_set_time>
    50f4:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <cfg_check>
    50f8:	88 23       	and	r24, r24
    50fa:	49 f4       	brne	.+18     	; 0x510e <datalogger_init+0x64>
    50fc:	84 ee       	ldi	r24, 0xE4	; 228
    50fe:	99 e0       	ldi	r25, 0x09	; 9
    5100:	41 e0       	ldi	r20, 0x01	; 1
    5102:	bc 01       	movw	r22, r24
    5104:	81 e0       	ldi	r24, 0x01	; 1
    5106:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    510a:	81 e0       	ldi	r24, 0x01	; 1
    510c:	7d c5       	rjmp	.+2810   	; 0x5c08 <datalogger_init+0xb5e>
    510e:	29 eb       	ldi	r18, 0xB9	; 185
    5110:	31 e2       	ldi	r19, 0x21	; 33
    5112:	45 eb       	ldi	r20, 0xB5	; 181
    5114:	51 e2       	ldi	r21, 0x21	; 33
    5116:	6d ea       	ldi	r22, 0xAD	; 173
    5118:	71 e2       	ldi	r23, 0x21	; 33
    511a:	81 eb       	ldi	r24, 0xB1	; 177
    511c:	91 e2       	ldi	r25, 0x21	; 33
    511e:	0e 94 57 1c 	call	0x38ae	; 0x38ae <cfg_get_datalogger_timings>
    5122:	80 91 ad 21 	lds	r24, 0x21AD
    5126:	90 91 ae 21 	lds	r25, 0x21AE
    512a:	a0 91 af 21 	lds	r26, 0x21AF
    512e:	b0 91 b0 21 	lds	r27, 0x21B0
    5132:	2c e2       	ldi	r18, 0x2C	; 44
    5134:	3a e0       	ldi	r19, 0x0A	; 10
    5136:	4b 2f       	mov	r20, r27
    5138:	4f 93       	push	r20
    513a:	4a 2f       	mov	r20, r26
    513c:	4f 93       	push	r20
    513e:	49 2f       	mov	r20, r25
    5140:	4f 93       	push	r20
    5142:	8f 93       	push	r24
    5144:	83 2f       	mov	r24, r19
    5146:	8f 93       	push	r24
    5148:	82 2f       	mov	r24, r18
    514a:	8f 93       	push	r24
    514c:	ce 01       	movw	r24, r28
    514e:	0a 96       	adiw	r24, 0x0a	; 10
    5150:	29 2f       	mov	r18, r25
    5152:	2f 93       	push	r18
    5154:	8f 93       	push	r24
    5156:	0e 94 b5 74 	call	0xe96a	; 0xe96a <sprintf_P>
    515a:	0d b7       	in	r16, 0x3d	; 61
    515c:	1e b7       	in	r17, 0x3e	; 62
    515e:	08 5f       	subi	r16, 0xF8	; 248
    5160:	1f 4f       	sbci	r17, 0xFF	; 255
    5162:	cd bf       	out	0x3d, r28	; 61
    5164:	de bf       	out	0x3e, r29	; 62
    5166:	ce 01       	movw	r24, r28
    5168:	0a 96       	adiw	r24, 0x0a	; 10
    516a:	40 e0       	ldi	r20, 0x00	; 0
    516c:	bc 01       	movw	r22, r24
    516e:	81 e0       	ldi	r24, 0x01	; 1
    5170:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    5174:	80 91 b1 21 	lds	r24, 0x21B1
    5178:	90 91 b2 21 	lds	r25, 0x21B2
    517c:	a0 91 b3 21 	lds	r26, 0x21B3
    5180:	b0 91 b4 21 	lds	r27, 0x21B4
    5184:	24 e4       	ldi	r18, 0x44	; 68
    5186:	3a e0       	ldi	r19, 0x0A	; 10
    5188:	4b 2f       	mov	r20, r27
    518a:	4f 93       	push	r20
    518c:	4a 2f       	mov	r20, r26
    518e:	4f 93       	push	r20
    5190:	49 2f       	mov	r20, r25
    5192:	4f 93       	push	r20
    5194:	8f 93       	push	r24
    5196:	83 2f       	mov	r24, r19
    5198:	8f 93       	push	r24
    519a:	82 2f       	mov	r24, r18
    519c:	8f 93       	push	r24
    519e:	ce 01       	movw	r24, r28
    51a0:	0a 96       	adiw	r24, 0x0a	; 10
    51a2:	29 2f       	mov	r18, r25
    51a4:	2f 93       	push	r18
    51a6:	8f 93       	push	r24
    51a8:	0e 94 b5 74 	call	0xe96a	; 0xe96a <sprintf_P>
    51ac:	2d b7       	in	r18, 0x3d	; 61
    51ae:	3e b7       	in	r19, 0x3e	; 62
    51b0:	28 5f       	subi	r18, 0xF8	; 248
    51b2:	3f 4f       	sbci	r19, 0xFF	; 255
    51b4:	cd bf       	out	0x3d, r28	; 61
    51b6:	de bf       	out	0x3e, r29	; 62
    51b8:	ce 01       	movw	r24, r28
    51ba:	0a 96       	adiw	r24, 0x0a	; 10
    51bc:	40 e0       	ldi	r20, 0x00	; 0
    51be:	bc 01       	movw	r22, r24
    51c0:	81 e0       	ldi	r24, 0x01	; 1
    51c2:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    51c6:	80 91 b5 21 	lds	r24, 0x21B5
    51ca:	90 91 b6 21 	lds	r25, 0x21B6
    51ce:	a0 91 b7 21 	lds	r26, 0x21B7
    51d2:	b0 91 b8 21 	lds	r27, 0x21B8
    51d6:	2b e5       	ldi	r18, 0x5B	; 91
    51d8:	3a e0       	ldi	r19, 0x0A	; 10
    51da:	4b 2f       	mov	r20, r27
    51dc:	4f 93       	push	r20
    51de:	4a 2f       	mov	r20, r26
    51e0:	4f 93       	push	r20
    51e2:	49 2f       	mov	r20, r25
    51e4:	4f 93       	push	r20
    51e6:	8f 93       	push	r24
    51e8:	83 2f       	mov	r24, r19
    51ea:	8f 93       	push	r24
    51ec:	82 2f       	mov	r24, r18
    51ee:	8f 93       	push	r24
    51f0:	ce 01       	movw	r24, r28
    51f2:	0a 96       	adiw	r24, 0x0a	; 10
    51f4:	29 2f       	mov	r18, r25
    51f6:	2f 93       	push	r18
    51f8:	8f 93       	push	r24
    51fa:	0e 94 b5 74 	call	0xe96a	; 0xe96a <sprintf_P>
    51fe:	4d b7       	in	r20, 0x3d	; 61
    5200:	5e b7       	in	r21, 0x3e	; 62
    5202:	48 5f       	subi	r20, 0xF8	; 248
    5204:	5f 4f       	sbci	r21, 0xFF	; 255
    5206:	cd bf       	out	0x3d, r28	; 61
    5208:	de bf       	out	0x3e, r29	; 62
    520a:	ce 01       	movw	r24, r28
    520c:	0a 96       	adiw	r24, 0x0a	; 10
    520e:	40 e0       	ldi	r20, 0x00	; 0
    5210:	bc 01       	movw	r22, r24
    5212:	81 e0       	ldi	r24, 0x01	; 1
    5214:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    5218:	80 91 b9 21 	lds	r24, 0x21B9
    521c:	90 91 ba 21 	lds	r25, 0x21BA
    5220:	a0 91 bb 21 	lds	r26, 0x21BB
    5224:	b0 91 bc 21 	lds	r27, 0x21BC
    5228:	22 e7       	ldi	r18, 0x72	; 114
    522a:	3a e0       	ldi	r19, 0x0A	; 10
    522c:	4b 2f       	mov	r20, r27
    522e:	4f 93       	push	r20
    5230:	4a 2f       	mov	r20, r26
    5232:	4f 93       	push	r20
    5234:	49 2f       	mov	r20, r25
    5236:	4f 93       	push	r20
    5238:	8f 93       	push	r24
    523a:	83 2f       	mov	r24, r19
    523c:	8f 93       	push	r24
    523e:	82 2f       	mov	r24, r18
    5240:	8f 93       	push	r24
    5242:	ce 01       	movw	r24, r28
    5244:	0a 96       	adiw	r24, 0x0a	; 10
    5246:	29 2f       	mov	r18, r25
    5248:	2f 93       	push	r18
    524a:	8f 93       	push	r24
    524c:	0e 94 b5 74 	call	0xe96a	; 0xe96a <sprintf_P>
    5250:	6d b7       	in	r22, 0x3d	; 61
    5252:	7e b7       	in	r23, 0x3e	; 62
    5254:	68 5f       	subi	r22, 0xF8	; 248
    5256:	7f 4f       	sbci	r23, 0xFF	; 255
    5258:	cd bf       	out	0x3d, r28	; 61
    525a:	de bf       	out	0x3e, r29	; 62
    525c:	ce 01       	movw	r24, r28
    525e:	0a 96       	adiw	r24, 0x0a	; 10
    5260:	40 e0       	ldi	r20, 0x00	; 0
    5262:	bc 01       	movw	r22, r24
    5264:	81 e0       	ldi	r24, 0x01	; 1
    5266:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    526a:	80 91 b1 21 	lds	r24, 0x21B1
    526e:	90 91 b2 21 	lds	r25, 0x21B2
    5272:	a0 91 b3 21 	lds	r26, 0x21B3
    5276:	b0 91 b4 21 	lds	r27, 0x21B4
    527a:	8d 33       	cpi	r24, 0x3D	; 61
    527c:	91 05       	cpc	r25, r1
    527e:	a1 05       	cpc	r26, r1
    5280:	b1 05       	cpc	r27, r1
    5282:	a0 f0       	brcs	.+40     	; 0x52ac <datalogger_init+0x202>
    5284:	80 91 b1 21 	lds	r24, 0x21B1
    5288:	90 91 b2 21 	lds	r25, 0x21B2
    528c:	a0 91 b3 21 	lds	r26, 0x21B3
    5290:	b0 91 b4 21 	lds	r27, 0x21B4
    5294:	44 97       	sbiw	r24, 0x14	; 20
    5296:	a1 09       	sbc	r26, r1
    5298:	b1 09       	sbc	r27, r1
    529a:	80 93 a9 21 	sts	0x21A9, r24
    529e:	90 93 aa 21 	sts	0x21AA, r25
    52a2:	a0 93 ab 21 	sts	0x21AB, r26
    52a6:	b0 93 ac 21 	sts	0x21AC, r27
    52aa:	08 c0       	rjmp	.+16     	; 0x52bc <datalogger_init+0x212>
    52ac:	10 92 a9 21 	sts	0x21A9, r1
    52b0:	10 92 aa 21 	sts	0x21AA, r1
    52b4:	10 92 ab 21 	sts	0x21AB, r1
    52b8:	10 92 ac 21 	sts	0x21AC, r1
    52bc:	6d e0       	ldi	r22, 0x0D	; 13
    52be:	70 e2       	ldi	r23, 0x20	; 32
    52c0:	80 ea       	ldi	r24, 0xA0	; 160
    52c2:	9a e0       	ldi	r25, 0x0A	; 10
    52c4:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <usart_serial_init>
    52c8:	0e 94 55 45 	call	0x8aaa	; 0x8aaa <AT24CXX_Init>
    52cc:	ce 01       	movw	r24, r28
    52ce:	0a 96       	adiw	r24, 0x0a	; 10
    52d0:	04 e0       	ldi	r16, 0x04	; 4
    52d2:	9c 01       	movw	r18, r24
    52d4:	40 e0       	ldi	r20, 0x00	; 0
    52d6:	60 e0       	ldi	r22, 0x00	; 0
    52d8:	80 e0       	ldi	r24, 0x00	; 0
    52da:	0e 94 ae 45 	call	0x8b5c	; 0x8b5c <AT24CXX_ReadBlockA>
    52de:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <sysclk_get_cpu_hz>
    52e2:	dc 01       	movw	r26, r24
    52e4:	cb 01       	movw	r24, r22
    52e6:	1c 01       	movw	r2, r24
    52e8:	2d 01       	movw	r4, r26
    52ea:	61 2c       	mov	r6, r1
    52ec:	71 2c       	mov	r7, r1
    52ee:	43 01       	movw	r8, r6
    52f0:	a2 2c       	mov	r10, r2
    52f2:	b3 2c       	mov	r11, r3
    52f4:	c4 2c       	mov	r12, r4
    52f6:	d5 2c       	mov	r13, r5
    52f8:	e6 2c       	mov	r14, r6
    52fa:	f7 2c       	mov	r15, r7
    52fc:	08 2d       	mov	r16, r8
    52fe:	19 2d       	mov	r17, r9
    5300:	2a 2d       	mov	r18, r10
    5302:	3b 2d       	mov	r19, r11
    5304:	4c 2d       	mov	r20, r12
    5306:	5d 2d       	mov	r21, r13
    5308:	6e 2d       	mov	r22, r14
    530a:	7f 2d       	mov	r23, r15
    530c:	80 2f       	mov	r24, r16
    530e:	91 2f       	mov	r25, r17
    5310:	02 e0       	ldi	r16, 0x02	; 2
    5312:	0e 94 a2 72 	call	0xe544	; 0xe544 <__ashldi3>
    5316:	6b 96       	adiw	r28, 0x1b	; 27
    5318:	2f af       	std	Y+63, r18	; 0x3f
    531a:	6b 97       	sbiw	r28, 0x1b	; 27
    531c:	6c 96       	adiw	r28, 0x1c	; 28
    531e:	3f af       	std	Y+63, r19	; 0x3f
    5320:	6c 97       	sbiw	r28, 0x1c	; 28
    5322:	6d 96       	adiw	r28, 0x1d	; 29
    5324:	4f af       	std	Y+63, r20	; 0x3f
    5326:	6d 97       	sbiw	r28, 0x1d	; 29
    5328:	6e 96       	adiw	r28, 0x1e	; 30
    532a:	5f af       	std	Y+63, r21	; 0x3f
    532c:	6e 97       	sbiw	r28, 0x1e	; 30
    532e:	6f 96       	adiw	r28, 0x1f	; 31
    5330:	6f af       	std	Y+63, r22	; 0x3f
    5332:	6f 97       	sbiw	r28, 0x1f	; 31
    5334:	a0 96       	adiw	r28, 0x20	; 32
    5336:	7f af       	std	Y+63, r23	; 0x3f
    5338:	a0 97       	sbiw	r28, 0x20	; 32
    533a:	a1 96       	adiw	r28, 0x21	; 33
    533c:	8f af       	std	Y+63, r24	; 0x3f
    533e:	a1 97       	sbiw	r28, 0x21	; 33
    5340:	a2 96       	adiw	r28, 0x22	; 34
    5342:	9f af       	std	Y+63, r25	; 0x3f
    5344:	a2 97       	sbiw	r28, 0x22	; 34
    5346:	6b 96       	adiw	r28, 0x1b	; 27
    5348:	af ac       	ldd	r10, Y+63	; 0x3f
    534a:	6b 97       	sbiw	r28, 0x1b	; 27
    534c:	6c 96       	adiw	r28, 0x1c	; 28
    534e:	bf ac       	ldd	r11, Y+63	; 0x3f
    5350:	6c 97       	sbiw	r28, 0x1c	; 28
    5352:	6d 96       	adiw	r28, 0x1d	; 29
    5354:	cf ac       	ldd	r12, Y+63	; 0x3f
    5356:	6d 97       	sbiw	r28, 0x1d	; 29
    5358:	6e 96       	adiw	r28, 0x1e	; 30
    535a:	df ac       	ldd	r13, Y+63	; 0x3f
    535c:	6e 97       	sbiw	r28, 0x1e	; 30
    535e:	6f 96       	adiw	r28, 0x1f	; 31
    5360:	ef ac       	ldd	r14, Y+63	; 0x3f
    5362:	6f 97       	sbiw	r28, 0x1f	; 31
    5364:	a0 96       	adiw	r28, 0x20	; 32
    5366:	ff ac       	ldd	r15, Y+63	; 0x3f
    5368:	a0 97       	sbiw	r28, 0x20	; 32
    536a:	a1 96       	adiw	r28, 0x21	; 33
    536c:	0f ad       	ldd	r16, Y+63	; 0x3f
    536e:	a1 97       	sbiw	r28, 0x21	; 33
    5370:	a2 96       	adiw	r28, 0x22	; 34
    5372:	1f ad       	ldd	r17, Y+63	; 0x3f
    5374:	a2 97       	sbiw	r28, 0x22	; 34
    5376:	2a 2d       	mov	r18, r10
    5378:	3b 2d       	mov	r19, r11
    537a:	4c 2d       	mov	r20, r12
    537c:	5d 2d       	mov	r21, r13
    537e:	6e 2d       	mov	r22, r14
    5380:	7f 2d       	mov	r23, r15
    5382:	80 2f       	mov	r24, r16
    5384:	91 2f       	mov	r25, r17
    5386:	a2 2c       	mov	r10, r2
    5388:	b3 2c       	mov	r11, r3
    538a:	c4 2c       	mov	r12, r4
    538c:	d5 2c       	mov	r13, r5
    538e:	e6 2c       	mov	r14, r6
    5390:	f7 2c       	mov	r15, r7
    5392:	08 2d       	mov	r16, r8
    5394:	19 2d       	mov	r17, r9
    5396:	0e 94 b1 72 	call	0xe562	; 0xe562 <__adddi3>
    539a:	a2 2e       	mov	r10, r18
    539c:	b3 2e       	mov	r11, r19
    539e:	c4 2e       	mov	r12, r20
    53a0:	d5 2e       	mov	r13, r21
    53a2:	e6 2e       	mov	r14, r22
    53a4:	f7 2e       	mov	r15, r23
    53a6:	08 2f       	mov	r16, r24
    53a8:	19 2f       	mov	r17, r25
    53aa:	2a 2d       	mov	r18, r10
    53ac:	3b 2d       	mov	r19, r11
    53ae:	4c 2d       	mov	r20, r12
    53b0:	5d 2d       	mov	r21, r13
    53b2:	6e 2d       	mov	r22, r14
    53b4:	7f 2d       	mov	r23, r15
    53b6:	80 2f       	mov	r24, r16
    53b8:	91 2f       	mov	r25, r17
    53ba:	29 51       	subi	r18, 0x19	; 25
    53bc:	3c 4f       	sbci	r19, 0xFC	; 252
    53be:	4f 4f       	sbci	r20, 0xFF	; 255
    53c0:	5f 4f       	sbci	r21, 0xFF	; 255
    53c2:	6f 4f       	sbci	r22, 0xFF	; 255
    53c4:	7f 4f       	sbci	r23, 0xFF	; 255
    53c6:	8f 4f       	sbci	r24, 0xFF	; 255
    53c8:	9f 4f       	sbci	r25, 0xFF	; 255
    53ca:	a2 2e       	mov	r10, r18
    53cc:	b3 2e       	mov	r11, r19
    53ce:	c4 2e       	mov	r12, r20
    53d0:	d5 2e       	mov	r13, r21
    53d2:	e6 2e       	mov	r14, r22
    53d4:	f7 2e       	mov	r15, r23
    53d6:	08 2f       	mov	r16, r24
    53d8:	19 2f       	mov	r17, r25
    53da:	2a 2d       	mov	r18, r10
    53dc:	3b 2d       	mov	r19, r11
    53de:	4c 2d       	mov	r20, r12
    53e0:	5d 2d       	mov	r21, r13
    53e2:	6e 2d       	mov	r22, r14
    53e4:	7f 2d       	mov	r23, r15
    53e6:	80 2f       	mov	r24, r16
    53e8:	91 2f       	mov	r25, r17
    53ea:	0e 94 56 11 	call	0x22ac	; 0x22ac <__floatundisf>
    53ee:	dc 01       	movw	r26, r24
    53f0:	cb 01       	movw	r24, r22
    53f2:	20 e0       	ldi	r18, 0x00	; 0
    53f4:	30 e8       	ldi	r19, 0x80	; 128
    53f6:	4b eb       	ldi	r20, 0xBB	; 187
    53f8:	55 e4       	ldi	r21, 0x45	; 69
    53fa:	bc 01       	movw	r22, r24
    53fc:	cd 01       	movw	r24, r26
    53fe:	0e 94 81 14 	call	0x2902	; 0x2902 <__divsf3>
    5402:	dc 01       	movw	r26, r24
    5404:	cb 01       	movw	r24, r22
    5406:	bc 01       	movw	r22, r24
    5408:	cd 01       	movw	r24, r26
    540a:	0e 94 a5 10 	call	0x214a	; 0x214a <__fixunssfdi>
    540e:	a2 2e       	mov	r10, r18
    5410:	b3 2e       	mov	r11, r19
    5412:	c4 2e       	mov	r12, r20
    5414:	d5 2e       	mov	r13, r21
    5416:	e6 2e       	mov	r14, r22
    5418:	f7 2e       	mov	r15, r23
    541a:	08 2f       	mov	r16, r24
    541c:	19 2f       	mov	r17, r25
    541e:	d6 01       	movw	r26, r12
    5420:	c5 01       	movw	r24, r10
    5422:	bc 01       	movw	r22, r24
    5424:	cd 01       	movw	r24, r26
    5426:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__portable_avr_delay_cycles>
    542a:	19 82       	std	Y+1, r1	; 0x01
    542c:	56 dd       	rcall	.-1364   	; 0x4eda <datalogger_reset_eeprom>
    542e:	1a 82       	std	Y+2, r1	; 0x02
    5430:	15 c0       	rjmp	.+42     	; 0x545c <datalogger_init+0x3b2>
    5432:	8a 81       	ldd	r24, Y+2	; 0x02
    5434:	88 2f       	mov	r24, r24
    5436:	90 e0       	ldi	r25, 0x00	; 0
    5438:	88 0f       	add	r24, r24
    543a:	99 1f       	adc	r25, r25
    543c:	88 0f       	add	r24, r24
    543e:	99 1f       	adc	r25, r25
    5440:	9c 01       	movw	r18, r24
    5442:	2a 57       	subi	r18, 0x7A	; 122
    5444:	3e 4d       	sbci	r19, 0xDE	; 222
    5446:	8f ef       	ldi	r24, 0xFF	; 255
    5448:	9f ef       	ldi	r25, 0xFF	; 255
    544a:	dc 01       	movw	r26, r24
    544c:	f9 01       	movw	r30, r18
    544e:	80 83       	st	Z, r24
    5450:	91 83       	std	Z+1, r25	; 0x01
    5452:	a2 83       	std	Z+2, r26	; 0x02
    5454:	b3 83       	std	Z+3, r27	; 0x03
    5456:	8a 81       	ldd	r24, Y+2	; 0x02
    5458:	8f 5f       	subi	r24, 0xFF	; 255
    545a:	8a 83       	std	Y+2, r24	; 0x02
    545c:	8a 81       	ldd	r24, Y+2	; 0x02
    545e:	82 30       	cpi	r24, 0x02	; 2
    5460:	40 f3       	brcs	.-48     	; 0x5432 <datalogger_init+0x388>
    5462:	0e 94 a3 20 	call	0x4146	; 0x4146 <datalogger_read_iterators_from_eeprom>
    5466:	84 e8       	ldi	r24, 0x84	; 132
    5468:	9a e0       	ldi	r25, 0x0A	; 10
    546a:	41 e0       	ldi	r20, 0x01	; 1
    546c:	bc 01       	movw	r22, r24
    546e:	81 e0       	ldi	r24, 0x01	; 1
    5470:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    5474:	1b 82       	std	Y+3, r1	; 0x03
    5476:	24 c0       	rjmp	.+72     	; 0x54c0 <datalogger_init+0x416>
    5478:	8b 81       	ldd	r24, Y+3	; 0x03
    547a:	88 2f       	mov	r24, r24
    547c:	90 e0       	ldi	r25, 0x00	; 0
    547e:	88 0f       	add	r24, r24
    5480:	99 1f       	adc	r25, r25
    5482:	88 0f       	add	r24, r24
    5484:	99 1f       	adc	r25, r25
    5486:	8a 57       	subi	r24, 0x7A	; 122
    5488:	9e 4d       	sbci	r25, 0xDE	; 222
    548a:	fc 01       	movw	r30, r24
    548c:	80 81       	ld	r24, Z
    548e:	91 81       	ldd	r25, Z+1	; 0x01
    5490:	a2 81       	ldd	r26, Z+2	; 0x02
    5492:	b3 81       	ldd	r27, Z+3	; 0x03
    5494:	8f 3f       	cpi	r24, 0xFF	; 255
    5496:	ff ef       	ldi	r31, 0xFF	; 255
    5498:	9f 07       	cpc	r25, r31
    549a:	af 07       	cpc	r26, r31
    549c:	bf 07       	cpc	r27, r31
    549e:	11 f4       	brne	.+4      	; 0x54a4 <datalogger_init+0x3fa>
    54a0:	81 e0       	ldi	r24, 0x01	; 1
    54a2:	89 83       	std	Y+1, r24	; 0x01
    54a4:	8b 81       	ldd	r24, Y+3	; 0x03
    54a6:	88 2f       	mov	r24, r24
    54a8:	90 e0       	ldi	r25, 0x00	; 0
    54aa:	88 0f       	add	r24, r24
    54ac:	99 1f       	adc	r25, r25
    54ae:	88 0f       	add	r24, r24
    54b0:	99 1f       	adc	r25, r25
    54b2:	8a 57       	subi	r24, 0x7A	; 122
    54b4:	9e 4d       	sbci	r25, 0xDE	; 222
    54b6:	0e 94 d2 45 	call	0x8ba4	; 0x8ba4 <AT24CXX_iterator_report>
    54ba:	8b 81       	ldd	r24, Y+3	; 0x03
    54bc:	8f 5f       	subi	r24, 0xFF	; 255
    54be:	8b 83       	std	Y+3, r24	; 0x03
    54c0:	8b 81       	ldd	r24, Y+3	; 0x03
    54c2:	82 30       	cpi	r24, 0x02	; 2
    54c4:	c8 f2       	brcs	.-78     	; 0x5478 <datalogger_init+0x3ce>
    54c6:	89 81       	ldd	r24, Y+1	; 0x01
    54c8:	88 23       	and	r24, r24
    54ca:	19 f1       	breq	.+70     	; 0x5512 <datalogger_init+0x468>
    54cc:	8f ea       	ldi	r24, 0xAF	; 175
    54ce:	9a e0       	ldi	r25, 0x0A	; 10
    54d0:	41 e0       	ldi	r20, 0x01	; 1
    54d2:	bc 01       	movw	r22, r24
    54d4:	81 e0       	ldi	r24, 0x01	; 1
    54d6:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    54da:	1c 82       	std	Y+4, r1	; 0x04
    54dc:	16 c0       	rjmp	.+44     	; 0x550a <datalogger_init+0x460>
    54de:	8c 81       	ldd	r24, Y+4	; 0x04
    54e0:	88 2f       	mov	r24, r24
    54e2:	90 e0       	ldi	r25, 0x00	; 0
    54e4:	88 0f       	add	r24, r24
    54e6:	99 1f       	adc	r25, r25
    54e8:	88 0f       	add	r24, r24
    54ea:	99 1f       	adc	r25, r25
    54ec:	9c 01       	movw	r18, r24
    54ee:	2a 57       	subi	r18, 0x7A	; 122
    54f0:	3e 4d       	sbci	r19, 0xDE	; 222
    54f2:	80 e0       	ldi	r24, 0x00	; 0
    54f4:	91 e0       	ldi	r25, 0x01	; 1
    54f6:	a0 e0       	ldi	r26, 0x00	; 0
    54f8:	b0 e0       	ldi	r27, 0x00	; 0
    54fa:	f9 01       	movw	r30, r18
    54fc:	80 83       	st	Z, r24
    54fe:	91 83       	std	Z+1, r25	; 0x01
    5500:	a2 83       	std	Z+2, r26	; 0x02
    5502:	b3 83       	std	Z+3, r27	; 0x03
    5504:	8c 81       	ldd	r24, Y+4	; 0x04
    5506:	8f 5f       	subi	r24, 0xFF	; 255
    5508:	8c 83       	std	Y+4, r24	; 0x04
    550a:	8c 81       	ldd	r24, Y+4	; 0x04
    550c:	82 30       	cpi	r24, 0x02	; 2
    550e:	38 f3       	brcs	.-50     	; 0x54de <datalogger_init+0x434>
    5510:	2f db       	rcall	.-2466   	; 0x4b70 <datalogger_init_iterators_to_eeprom>
    5512:	0e 94 97 42 	call	0x852e	; 0x852e <dl_test_now>
    5516:	1d 82       	std	Y+5, r1	; 0x05
    5518:	01 c0       	rjmp	.+2      	; 0x551c <datalogger_init+0x472>
    551a:	00 00       	nop
    551c:	8d 81       	ldd	r24, Y+5	; 0x05
    551e:	8f 5f       	subi	r24, 0xFF	; 255
    5520:	8d 83       	std	Y+5, r24	; 0x05
    5522:	8d 81       	ldd	r24, Y+5	; 0x05
    5524:	8a 30       	cpi	r24, 0x0A	; 10
    5526:	09 f0       	breq	.+2      	; 0x552a <datalogger_init+0x480>
    5528:	6d c1       	rjmp	.+730    	; 0x5804 <datalogger_init+0x75a>
    552a:	80 e0       	ldi	r24, 0x00	; 0
    552c:	0e 94 7e 59 	call	0xb2fc	; 0xb2fc <wdt_set_timeout_period>
    5530:	0e 94 8a 59 	call	0xb314	; 0xb314 <wdt_enable>
    5534:	0e 94 92 59 	call	0xb324	; 0xb324 <wdt_reset_mcu>
    5538:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <sysclk_get_cpu_hz>
    553c:	dc 01       	movw	r26, r24
    553e:	cb 01       	movw	r24, r22
    5540:	8c 01       	movw	r16, r24
    5542:	9d 01       	movw	r18, r26
    5544:	40 e0       	ldi	r20, 0x00	; 0
    5546:	50 e0       	ldi	r21, 0x00	; 0
    5548:	ba 01       	movw	r22, r20
    554a:	2b 96       	adiw	r28, 0x0b	; 11
    554c:	0f af       	std	Y+63, r16	; 0x3f
    554e:	2b 97       	sbiw	r28, 0x0b	; 11
    5550:	2c 96       	adiw	r28, 0x0c	; 12
    5552:	1f af       	std	Y+63, r17	; 0x3f
    5554:	2c 97       	sbiw	r28, 0x0c	; 12
    5556:	2d 96       	adiw	r28, 0x0d	; 13
    5558:	2f af       	std	Y+63, r18	; 0x3f
    555a:	2d 97       	sbiw	r28, 0x0d	; 13
    555c:	2e 96       	adiw	r28, 0x0e	; 14
    555e:	3f af       	std	Y+63, r19	; 0x3f
    5560:	2e 97       	sbiw	r28, 0x0e	; 14
    5562:	2f 96       	adiw	r28, 0x0f	; 15
    5564:	4f af       	std	Y+63, r20	; 0x3f
    5566:	2f 97       	sbiw	r28, 0x0f	; 15
    5568:	60 96       	adiw	r28, 0x10	; 16
    556a:	5f af       	std	Y+63, r21	; 0x3f
    556c:	60 97       	sbiw	r28, 0x10	; 16
    556e:	61 96       	adiw	r28, 0x11	; 17
    5570:	6f af       	std	Y+63, r22	; 0x3f
    5572:	61 97       	sbiw	r28, 0x11	; 17
    5574:	62 96       	adiw	r28, 0x12	; 18
    5576:	7f af       	std	Y+63, r23	; 0x3f
    5578:	62 97       	sbiw	r28, 0x12	; 18
    557a:	2b 96       	adiw	r28, 0x0b	; 11
    557c:	1f ad       	ldd	r17, Y+63	; 0x3f
    557e:	2b 97       	sbiw	r28, 0x0b	; 11
    5580:	a3 96       	adiw	r28, 0x23	; 35
    5582:	1f af       	std	Y+63, r17	; 0x3f
    5584:	a3 97       	sbiw	r28, 0x23	; 35
    5586:	2c 96       	adiw	r28, 0x0c	; 12
    5588:	2f ad       	ldd	r18, Y+63	; 0x3f
    558a:	2c 97       	sbiw	r28, 0x0c	; 12
    558c:	a4 96       	adiw	r28, 0x24	; 36
    558e:	2f af       	std	Y+63, r18	; 0x3f
    5590:	a4 97       	sbiw	r28, 0x24	; 36
    5592:	2d 96       	adiw	r28, 0x0d	; 13
    5594:	3f ad       	ldd	r19, Y+63	; 0x3f
    5596:	2d 97       	sbiw	r28, 0x0d	; 13
    5598:	a5 96       	adiw	r28, 0x25	; 37
    559a:	3f af       	std	Y+63, r19	; 0x3f
    559c:	a5 97       	sbiw	r28, 0x25	; 37
    559e:	2e 96       	adiw	r28, 0x0e	; 14
    55a0:	4f ad       	ldd	r20, Y+63	; 0x3f
    55a2:	2e 97       	sbiw	r28, 0x0e	; 14
    55a4:	a6 96       	adiw	r28, 0x26	; 38
    55a6:	4f af       	std	Y+63, r20	; 0x3f
    55a8:	a6 97       	sbiw	r28, 0x26	; 38
    55aa:	2f 96       	adiw	r28, 0x0f	; 15
    55ac:	5f ad       	ldd	r21, Y+63	; 0x3f
    55ae:	2f 97       	sbiw	r28, 0x0f	; 15
    55b0:	a7 96       	adiw	r28, 0x27	; 39
    55b2:	5f af       	std	Y+63, r21	; 0x3f
    55b4:	a7 97       	sbiw	r28, 0x27	; 39
    55b6:	60 96       	adiw	r28, 0x10	; 16
    55b8:	6f ad       	ldd	r22, Y+63	; 0x3f
    55ba:	60 97       	sbiw	r28, 0x10	; 16
    55bc:	a8 96       	adiw	r28, 0x28	; 40
    55be:	6f af       	std	Y+63, r22	; 0x3f
    55c0:	a8 97       	sbiw	r28, 0x28	; 40
    55c2:	61 96       	adiw	r28, 0x11	; 17
    55c4:	7f ad       	ldd	r23, Y+63	; 0x3f
    55c6:	61 97       	sbiw	r28, 0x11	; 17
    55c8:	a9 96       	adiw	r28, 0x29	; 41
    55ca:	7f af       	std	Y+63, r23	; 0x3f
    55cc:	a9 97       	sbiw	r28, 0x29	; 41
    55ce:	62 96       	adiw	r28, 0x12	; 18
    55d0:	8f ad       	ldd	r24, Y+63	; 0x3f
    55d2:	62 97       	sbiw	r28, 0x12	; 18
    55d4:	aa 96       	adiw	r28, 0x2a	; 42
    55d6:	8f af       	std	Y+63, r24	; 0x3f
    55d8:	aa 97       	sbiw	r28, 0x2a	; 42
    55da:	a3 96       	adiw	r28, 0x23	; 35
    55dc:	2f ad       	ldd	r18, Y+63	; 0x3f
    55de:	a3 97       	sbiw	r28, 0x23	; 35
    55e0:	a4 96       	adiw	r28, 0x24	; 36
    55e2:	3f ad       	ldd	r19, Y+63	; 0x3f
    55e4:	a4 97       	sbiw	r28, 0x24	; 36
    55e6:	a5 96       	adiw	r28, 0x25	; 37
    55e8:	4f ad       	ldd	r20, Y+63	; 0x3f
    55ea:	a5 97       	sbiw	r28, 0x25	; 37
    55ec:	a6 96       	adiw	r28, 0x26	; 38
    55ee:	5f ad       	ldd	r21, Y+63	; 0x3f
    55f0:	a6 97       	sbiw	r28, 0x26	; 38
    55f2:	a7 96       	adiw	r28, 0x27	; 39
    55f4:	6f ad       	ldd	r22, Y+63	; 0x3f
    55f6:	a7 97       	sbiw	r28, 0x27	; 39
    55f8:	a8 96       	adiw	r28, 0x28	; 40
    55fa:	7f ad       	ldd	r23, Y+63	; 0x3f
    55fc:	a8 97       	sbiw	r28, 0x28	; 40
    55fe:	a9 96       	adiw	r28, 0x29	; 41
    5600:	8f ad       	ldd	r24, Y+63	; 0x3f
    5602:	a9 97       	sbiw	r28, 0x29	; 41
    5604:	aa 96       	adiw	r28, 0x2a	; 42
    5606:	9f ad       	ldd	r25, Y+63	; 0x3f
    5608:	aa 97       	sbiw	r28, 0x2a	; 42
    560a:	02 e0       	ldi	r16, 0x02	; 2
    560c:	0e 94 a2 72 	call	0xe544	; 0xe544 <__ashldi3>
    5610:	a2 2e       	mov	r10, r18
    5612:	b3 2e       	mov	r11, r19
    5614:	c4 2e       	mov	r12, r20
    5616:	d5 2e       	mov	r13, r21
    5618:	e6 2e       	mov	r14, r22
    561a:	f7 2e       	mov	r15, r23
    561c:	08 2f       	mov	r16, r24
    561e:	19 2f       	mov	r17, r25
    5620:	a3 96       	adiw	r28, 0x23	; 35
    5622:	af ae       	std	Y+63, r10	; 0x3f
    5624:	a3 97       	sbiw	r28, 0x23	; 35
    5626:	a4 96       	adiw	r28, 0x24	; 36
    5628:	bf ae       	std	Y+63, r11	; 0x3f
    562a:	a4 97       	sbiw	r28, 0x24	; 36
    562c:	a5 96       	adiw	r28, 0x25	; 37
    562e:	cf ae       	std	Y+63, r12	; 0x3f
    5630:	a5 97       	sbiw	r28, 0x25	; 37
    5632:	a6 96       	adiw	r28, 0x26	; 38
    5634:	df ae       	std	Y+63, r13	; 0x3f
    5636:	a6 97       	sbiw	r28, 0x26	; 38
    5638:	a7 96       	adiw	r28, 0x27	; 39
    563a:	ef ae       	std	Y+63, r14	; 0x3f
    563c:	a7 97       	sbiw	r28, 0x27	; 39
    563e:	a8 96       	adiw	r28, 0x28	; 40
    5640:	ff ae       	std	Y+63, r15	; 0x3f
    5642:	a8 97       	sbiw	r28, 0x28	; 40
    5644:	a9 96       	adiw	r28, 0x29	; 41
    5646:	0f af       	std	Y+63, r16	; 0x3f
    5648:	a9 97       	sbiw	r28, 0x29	; 41
    564a:	aa 96       	adiw	r28, 0x2a	; 42
    564c:	1f af       	std	Y+63, r17	; 0x3f
    564e:	aa 97       	sbiw	r28, 0x2a	; 42
    5650:	a3 96       	adiw	r28, 0x23	; 35
    5652:	2f ad       	ldd	r18, Y+63	; 0x3f
    5654:	a3 97       	sbiw	r28, 0x23	; 35
    5656:	a4 96       	adiw	r28, 0x24	; 36
    5658:	3f ad       	ldd	r19, Y+63	; 0x3f
    565a:	a4 97       	sbiw	r28, 0x24	; 36
    565c:	a5 96       	adiw	r28, 0x25	; 37
    565e:	4f ad       	ldd	r20, Y+63	; 0x3f
    5660:	a5 97       	sbiw	r28, 0x25	; 37
    5662:	a6 96       	adiw	r28, 0x26	; 38
    5664:	5f ad       	ldd	r21, Y+63	; 0x3f
    5666:	a6 97       	sbiw	r28, 0x26	; 38
    5668:	a7 96       	adiw	r28, 0x27	; 39
    566a:	6f ad       	ldd	r22, Y+63	; 0x3f
    566c:	a7 97       	sbiw	r28, 0x27	; 39
    566e:	a8 96       	adiw	r28, 0x28	; 40
    5670:	7f ad       	ldd	r23, Y+63	; 0x3f
    5672:	a8 97       	sbiw	r28, 0x28	; 40
    5674:	a9 96       	adiw	r28, 0x29	; 41
    5676:	8f ad       	ldd	r24, Y+63	; 0x3f
    5678:	a9 97       	sbiw	r28, 0x29	; 41
    567a:	aa 96       	adiw	r28, 0x2a	; 42
    567c:	9f ad       	ldd	r25, Y+63	; 0x3f
    567e:	aa 97       	sbiw	r28, 0x2a	; 42
    5680:	05 e0       	ldi	r16, 0x05	; 5
    5682:	0e 94 a2 72 	call	0xe544	; 0xe544 <__ashldi3>
    5686:	22 2e       	mov	r2, r18
    5688:	33 2e       	mov	r3, r19
    568a:	44 2e       	mov	r4, r20
    568c:	55 2e       	mov	r5, r21
    568e:	66 2e       	mov	r6, r22
    5690:	77 2e       	mov	r7, r23
    5692:	88 2e       	mov	r8, r24
    5694:	99 2e       	mov	r9, r25
    5696:	22 2d       	mov	r18, r2
    5698:	33 2d       	mov	r19, r3
    569a:	44 2d       	mov	r20, r4
    569c:	55 2d       	mov	r21, r5
    569e:	66 2d       	mov	r22, r6
    56a0:	77 2d       	mov	r23, r7
    56a2:	88 2d       	mov	r24, r8
    56a4:	99 2d       	mov	r25, r9
    56a6:	a3 96       	adiw	r28, 0x23	; 35
    56a8:	af ac       	ldd	r10, Y+63	; 0x3f
    56aa:	a3 97       	sbiw	r28, 0x23	; 35
    56ac:	a4 96       	adiw	r28, 0x24	; 36
    56ae:	bf ac       	ldd	r11, Y+63	; 0x3f
    56b0:	a4 97       	sbiw	r28, 0x24	; 36
    56b2:	a5 96       	adiw	r28, 0x25	; 37
    56b4:	cf ac       	ldd	r12, Y+63	; 0x3f
    56b6:	a5 97       	sbiw	r28, 0x25	; 37
    56b8:	a6 96       	adiw	r28, 0x26	; 38
    56ba:	df ac       	ldd	r13, Y+63	; 0x3f
    56bc:	a6 97       	sbiw	r28, 0x26	; 38
    56be:	a7 96       	adiw	r28, 0x27	; 39
    56c0:	ef ac       	ldd	r14, Y+63	; 0x3f
    56c2:	a7 97       	sbiw	r28, 0x27	; 39
    56c4:	a8 96       	adiw	r28, 0x28	; 40
    56c6:	ff ac       	ldd	r15, Y+63	; 0x3f
    56c8:	a8 97       	sbiw	r28, 0x28	; 40
    56ca:	a9 96       	adiw	r28, 0x29	; 41
    56cc:	0f ad       	ldd	r16, Y+63	; 0x3f
    56ce:	a9 97       	sbiw	r28, 0x29	; 41
    56d0:	aa 96       	adiw	r28, 0x2a	; 42
    56d2:	1f ad       	ldd	r17, Y+63	; 0x3f
    56d4:	aa 97       	sbiw	r28, 0x2a	; 42
    56d6:	0e 94 ba 72 	call	0xe574	; 0xe574 <__subdi3>
    56da:	22 2e       	mov	r2, r18
    56dc:	33 2e       	mov	r3, r19
    56de:	44 2e       	mov	r4, r20
    56e0:	55 2e       	mov	r5, r21
    56e2:	66 2e       	mov	r6, r22
    56e4:	77 2e       	mov	r7, r23
    56e6:	88 2e       	mov	r8, r24
    56e8:	99 2e       	mov	r9, r25
    56ea:	22 2d       	mov	r18, r2
    56ec:	33 2d       	mov	r19, r3
    56ee:	44 2d       	mov	r20, r4
    56f0:	55 2d       	mov	r21, r5
    56f2:	66 2d       	mov	r22, r6
    56f4:	77 2d       	mov	r23, r7
    56f6:	88 2d       	mov	r24, r8
    56f8:	99 2d       	mov	r25, r9
    56fa:	2b 96       	adiw	r28, 0x0b	; 11
    56fc:	af ac       	ldd	r10, Y+63	; 0x3f
    56fe:	2b 97       	sbiw	r28, 0x0b	; 11
    5700:	2c 96       	adiw	r28, 0x0c	; 12
    5702:	bf ac       	ldd	r11, Y+63	; 0x3f
    5704:	2c 97       	sbiw	r28, 0x0c	; 12
    5706:	2d 96       	adiw	r28, 0x0d	; 13
    5708:	cf ac       	ldd	r12, Y+63	; 0x3f
    570a:	2d 97       	sbiw	r28, 0x0d	; 13
    570c:	2e 96       	adiw	r28, 0x0e	; 14
    570e:	df ac       	ldd	r13, Y+63	; 0x3f
    5710:	2e 97       	sbiw	r28, 0x0e	; 14
    5712:	2f 96       	adiw	r28, 0x0f	; 15
    5714:	ef ac       	ldd	r14, Y+63	; 0x3f
    5716:	2f 97       	sbiw	r28, 0x0f	; 15
    5718:	60 96       	adiw	r28, 0x10	; 16
    571a:	ff ac       	ldd	r15, Y+63	; 0x3f
    571c:	60 97       	sbiw	r28, 0x10	; 16
    571e:	61 96       	adiw	r28, 0x11	; 17
    5720:	0f ad       	ldd	r16, Y+63	; 0x3f
    5722:	61 97       	sbiw	r28, 0x11	; 17
    5724:	62 96       	adiw	r28, 0x12	; 18
    5726:	1f ad       	ldd	r17, Y+63	; 0x3f
    5728:	62 97       	sbiw	r28, 0x12	; 18
    572a:	0e 94 b1 72 	call	0xe562	; 0xe562 <__adddi3>
    572e:	22 2e       	mov	r2, r18
    5730:	33 2e       	mov	r3, r19
    5732:	44 2e       	mov	r4, r20
    5734:	55 2e       	mov	r5, r21
    5736:	66 2e       	mov	r6, r22
    5738:	77 2e       	mov	r7, r23
    573a:	88 2e       	mov	r8, r24
    573c:	99 2e       	mov	r9, r25
    573e:	22 2d       	mov	r18, r2
    5740:	33 2d       	mov	r19, r3
    5742:	44 2d       	mov	r20, r4
    5744:	55 2d       	mov	r21, r5
    5746:	66 2d       	mov	r22, r6
    5748:	77 2d       	mov	r23, r7
    574a:	88 2d       	mov	r24, r8
    574c:	99 2d       	mov	r25, r9
    574e:	03 e0       	ldi	r16, 0x03	; 3
    5750:	0e 94 a2 72 	call	0xe544	; 0xe544 <__ashldi3>
    5754:	a2 2e       	mov	r10, r18
    5756:	b3 2e       	mov	r11, r19
    5758:	c4 2e       	mov	r12, r20
    575a:	d5 2e       	mov	r13, r21
    575c:	e6 2e       	mov	r14, r22
    575e:	f7 2e       	mov	r15, r23
    5760:	08 2f       	mov	r16, r24
    5762:	19 2f       	mov	r17, r25
    5764:	2a 2c       	mov	r2, r10
    5766:	3b 2c       	mov	r3, r11
    5768:	4c 2c       	mov	r4, r12
    576a:	5d 2c       	mov	r5, r13
    576c:	6e 2c       	mov	r6, r14
    576e:	7f 2c       	mov	r7, r15
    5770:	80 2e       	mov	r8, r16
    5772:	91 2e       	mov	r9, r17
    5774:	a2 2c       	mov	r10, r2
    5776:	b3 2c       	mov	r11, r3
    5778:	c4 2c       	mov	r12, r4
    577a:	d5 2c       	mov	r13, r5
    577c:	e6 2c       	mov	r14, r6
    577e:	f7 2c       	mov	r15, r7
    5780:	08 2d       	mov	r16, r8
    5782:	19 2d       	mov	r17, r9
    5784:	2a 2d       	mov	r18, r10
    5786:	3b 2d       	mov	r19, r11
    5788:	4c 2d       	mov	r20, r12
    578a:	5d 2d       	mov	r21, r13
    578c:	6e 2d       	mov	r22, r14
    578e:	7f 2d       	mov	r23, r15
    5790:	80 2f       	mov	r24, r16
    5792:	91 2f       	mov	r25, r17
    5794:	29 51       	subi	r18, 0x19	; 25
    5796:	3c 4f       	sbci	r19, 0xFC	; 252
    5798:	4f 4f       	sbci	r20, 0xFF	; 255
    579a:	5f 4f       	sbci	r21, 0xFF	; 255
    579c:	6f 4f       	sbci	r22, 0xFF	; 255
    579e:	7f 4f       	sbci	r23, 0xFF	; 255
    57a0:	8f 4f       	sbci	r24, 0xFF	; 255
    57a2:	9f 4f       	sbci	r25, 0xFF	; 255
    57a4:	a2 2e       	mov	r10, r18
    57a6:	b3 2e       	mov	r11, r19
    57a8:	c4 2e       	mov	r12, r20
    57aa:	d5 2e       	mov	r13, r21
    57ac:	e6 2e       	mov	r14, r22
    57ae:	f7 2e       	mov	r15, r23
    57b0:	08 2f       	mov	r16, r24
    57b2:	19 2f       	mov	r17, r25
    57b4:	2a 2d       	mov	r18, r10
    57b6:	3b 2d       	mov	r19, r11
    57b8:	4c 2d       	mov	r20, r12
    57ba:	5d 2d       	mov	r21, r13
    57bc:	6e 2d       	mov	r22, r14
    57be:	7f 2d       	mov	r23, r15
    57c0:	80 2f       	mov	r24, r16
    57c2:	91 2f       	mov	r25, r17
    57c4:	0e 94 56 11 	call	0x22ac	; 0x22ac <__floatundisf>
    57c8:	dc 01       	movw	r26, r24
    57ca:	cb 01       	movw	r24, r22
    57cc:	20 e0       	ldi	r18, 0x00	; 0
    57ce:	30 e8       	ldi	r19, 0x80	; 128
    57d0:	4b eb       	ldi	r20, 0xBB	; 187
    57d2:	55 e4       	ldi	r21, 0x45	; 69
    57d4:	bc 01       	movw	r22, r24
    57d6:	cd 01       	movw	r24, r26
    57d8:	0e 94 81 14 	call	0x2902	; 0x2902 <__divsf3>
    57dc:	dc 01       	movw	r26, r24
    57de:	cb 01       	movw	r24, r22
    57e0:	bc 01       	movw	r22, r24
    57e2:	cd 01       	movw	r24, r26
    57e4:	0e 94 a5 10 	call	0x214a	; 0x214a <__fixunssfdi>
    57e8:	a2 2e       	mov	r10, r18
    57ea:	b3 2e       	mov	r11, r19
    57ec:	c4 2e       	mov	r12, r20
    57ee:	d5 2e       	mov	r13, r21
    57f0:	e6 2e       	mov	r14, r22
    57f2:	f7 2e       	mov	r15, r23
    57f4:	08 2f       	mov	r16, r24
    57f6:	19 2f       	mov	r17, r25
    57f8:	d6 01       	movw	r26, r12
    57fa:	c5 01       	movw	r24, r10
    57fc:	bc 01       	movw	r22, r24
    57fe:	cd 01       	movw	r24, r26
    5800:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__portable_avr_delay_cycles>
    5804:	0e 94 e9 4f 	call	0x9fd2	; 0x9fd2 <sim900_init>
    5808:	88 23       	and	r24, r24
    580a:	09 f0       	breq	.+2      	; 0x580e <datalogger_init+0x764>
    580c:	86 ce       	rjmp	.-756    	; 0x551a <datalogger_init+0x470>
    580e:	00 00       	nop
    5810:	81 e0       	ldi	r24, 0x01	; 1
    5812:	80 93 a0 21 	sts	0x21A0, r24
    5816:	1d 82       	std	Y+5, r1	; 0x05
    5818:	01 c0       	rjmp	.+2      	; 0x581c <datalogger_init+0x772>
    581a:	00 00       	nop
    581c:	8d 81       	ldd	r24, Y+5	; 0x05
    581e:	8f 5f       	subi	r24, 0xFF	; 255
    5820:	8d 83       	std	Y+5, r24	; 0x05
    5822:	8d 81       	ldd	r24, Y+5	; 0x05
    5824:	8a 30       	cpi	r24, 0x0A	; 10
    5826:	09 f0       	breq	.+2      	; 0x582a <datalogger_init+0x780>
    5828:	6d c1       	rjmp	.+730    	; 0x5b04 <datalogger_init+0xa5a>
    582a:	80 e0       	ldi	r24, 0x00	; 0
    582c:	0e 94 7e 59 	call	0xb2fc	; 0xb2fc <wdt_set_timeout_period>
    5830:	0e 94 8a 59 	call	0xb314	; 0xb314 <wdt_enable>
    5834:	0e 94 92 59 	call	0xb324	; 0xb324 <wdt_reset_mcu>
    5838:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <sysclk_get_cpu_hz>
    583c:	dc 01       	movw	r26, r24
    583e:	cb 01       	movw	r24, r22
    5840:	8c 01       	movw	r16, r24
    5842:	9d 01       	movw	r18, r26
    5844:	40 e0       	ldi	r20, 0x00	; 0
    5846:	50 e0       	ldi	r21, 0x00	; 0
    5848:	ba 01       	movw	r22, r20
    584a:	63 96       	adiw	r28, 0x13	; 19
    584c:	0f af       	std	Y+63, r16	; 0x3f
    584e:	63 97       	sbiw	r28, 0x13	; 19
    5850:	64 96       	adiw	r28, 0x14	; 20
    5852:	1f af       	std	Y+63, r17	; 0x3f
    5854:	64 97       	sbiw	r28, 0x14	; 20
    5856:	65 96       	adiw	r28, 0x15	; 21
    5858:	2f af       	std	Y+63, r18	; 0x3f
    585a:	65 97       	sbiw	r28, 0x15	; 21
    585c:	66 96       	adiw	r28, 0x16	; 22
    585e:	3f af       	std	Y+63, r19	; 0x3f
    5860:	66 97       	sbiw	r28, 0x16	; 22
    5862:	67 96       	adiw	r28, 0x17	; 23
    5864:	4f af       	std	Y+63, r20	; 0x3f
    5866:	67 97       	sbiw	r28, 0x17	; 23
    5868:	68 96       	adiw	r28, 0x18	; 24
    586a:	5f af       	std	Y+63, r21	; 0x3f
    586c:	68 97       	sbiw	r28, 0x18	; 24
    586e:	69 96       	adiw	r28, 0x19	; 25
    5870:	6f af       	std	Y+63, r22	; 0x3f
    5872:	69 97       	sbiw	r28, 0x19	; 25
    5874:	6a 96       	adiw	r28, 0x1a	; 26
    5876:	7f af       	std	Y+63, r23	; 0x3f
    5878:	6a 97       	sbiw	r28, 0x1a	; 26
    587a:	63 96       	adiw	r28, 0x13	; 19
    587c:	1f ad       	ldd	r17, Y+63	; 0x3f
    587e:	63 97       	sbiw	r28, 0x13	; 19
    5880:	ab 96       	adiw	r28, 0x2b	; 43
    5882:	1f af       	std	Y+63, r17	; 0x3f
    5884:	ab 97       	sbiw	r28, 0x2b	; 43
    5886:	64 96       	adiw	r28, 0x14	; 20
    5888:	2f ad       	ldd	r18, Y+63	; 0x3f
    588a:	64 97       	sbiw	r28, 0x14	; 20
    588c:	ac 96       	adiw	r28, 0x2c	; 44
    588e:	2f af       	std	Y+63, r18	; 0x3f
    5890:	ac 97       	sbiw	r28, 0x2c	; 44
    5892:	65 96       	adiw	r28, 0x15	; 21
    5894:	3f ad       	ldd	r19, Y+63	; 0x3f
    5896:	65 97       	sbiw	r28, 0x15	; 21
    5898:	ad 96       	adiw	r28, 0x2d	; 45
    589a:	3f af       	std	Y+63, r19	; 0x3f
    589c:	ad 97       	sbiw	r28, 0x2d	; 45
    589e:	66 96       	adiw	r28, 0x16	; 22
    58a0:	4f ad       	ldd	r20, Y+63	; 0x3f
    58a2:	66 97       	sbiw	r28, 0x16	; 22
    58a4:	ae 96       	adiw	r28, 0x2e	; 46
    58a6:	4f af       	std	Y+63, r20	; 0x3f
    58a8:	ae 97       	sbiw	r28, 0x2e	; 46
    58aa:	67 96       	adiw	r28, 0x17	; 23
    58ac:	5f ad       	ldd	r21, Y+63	; 0x3f
    58ae:	67 97       	sbiw	r28, 0x17	; 23
    58b0:	af 96       	adiw	r28, 0x2f	; 47
    58b2:	5f af       	std	Y+63, r21	; 0x3f
    58b4:	af 97       	sbiw	r28, 0x2f	; 47
    58b6:	68 96       	adiw	r28, 0x18	; 24
    58b8:	6f ad       	ldd	r22, Y+63	; 0x3f
    58ba:	68 97       	sbiw	r28, 0x18	; 24
    58bc:	e0 96       	adiw	r28, 0x30	; 48
    58be:	6f af       	std	Y+63, r22	; 0x3f
    58c0:	e0 97       	sbiw	r28, 0x30	; 48
    58c2:	69 96       	adiw	r28, 0x19	; 25
    58c4:	7f ad       	ldd	r23, Y+63	; 0x3f
    58c6:	69 97       	sbiw	r28, 0x19	; 25
    58c8:	e1 96       	adiw	r28, 0x31	; 49
    58ca:	7f af       	std	Y+63, r23	; 0x3f
    58cc:	e1 97       	sbiw	r28, 0x31	; 49
    58ce:	6a 96       	adiw	r28, 0x1a	; 26
    58d0:	8f ad       	ldd	r24, Y+63	; 0x3f
    58d2:	6a 97       	sbiw	r28, 0x1a	; 26
    58d4:	e2 96       	adiw	r28, 0x32	; 50
    58d6:	8f af       	std	Y+63, r24	; 0x3f
    58d8:	e2 97       	sbiw	r28, 0x32	; 50
    58da:	ab 96       	adiw	r28, 0x2b	; 43
    58dc:	2f ad       	ldd	r18, Y+63	; 0x3f
    58de:	ab 97       	sbiw	r28, 0x2b	; 43
    58e0:	ac 96       	adiw	r28, 0x2c	; 44
    58e2:	3f ad       	ldd	r19, Y+63	; 0x3f
    58e4:	ac 97       	sbiw	r28, 0x2c	; 44
    58e6:	ad 96       	adiw	r28, 0x2d	; 45
    58e8:	4f ad       	ldd	r20, Y+63	; 0x3f
    58ea:	ad 97       	sbiw	r28, 0x2d	; 45
    58ec:	ae 96       	adiw	r28, 0x2e	; 46
    58ee:	5f ad       	ldd	r21, Y+63	; 0x3f
    58f0:	ae 97       	sbiw	r28, 0x2e	; 46
    58f2:	af 96       	adiw	r28, 0x2f	; 47
    58f4:	6f ad       	ldd	r22, Y+63	; 0x3f
    58f6:	af 97       	sbiw	r28, 0x2f	; 47
    58f8:	e0 96       	adiw	r28, 0x30	; 48
    58fa:	7f ad       	ldd	r23, Y+63	; 0x3f
    58fc:	e0 97       	sbiw	r28, 0x30	; 48
    58fe:	e1 96       	adiw	r28, 0x31	; 49
    5900:	8f ad       	ldd	r24, Y+63	; 0x3f
    5902:	e1 97       	sbiw	r28, 0x31	; 49
    5904:	e2 96       	adiw	r28, 0x32	; 50
    5906:	9f ad       	ldd	r25, Y+63	; 0x3f
    5908:	e2 97       	sbiw	r28, 0x32	; 50
    590a:	02 e0       	ldi	r16, 0x02	; 2
    590c:	0e 94 a2 72 	call	0xe544	; 0xe544 <__ashldi3>
    5910:	a2 2e       	mov	r10, r18
    5912:	b3 2e       	mov	r11, r19
    5914:	c4 2e       	mov	r12, r20
    5916:	d5 2e       	mov	r13, r21
    5918:	e6 2e       	mov	r14, r22
    591a:	f7 2e       	mov	r15, r23
    591c:	08 2f       	mov	r16, r24
    591e:	19 2f       	mov	r17, r25
    5920:	ab 96       	adiw	r28, 0x2b	; 43
    5922:	af ae       	std	Y+63, r10	; 0x3f
    5924:	ab 97       	sbiw	r28, 0x2b	; 43
    5926:	ac 96       	adiw	r28, 0x2c	; 44
    5928:	bf ae       	std	Y+63, r11	; 0x3f
    592a:	ac 97       	sbiw	r28, 0x2c	; 44
    592c:	ad 96       	adiw	r28, 0x2d	; 45
    592e:	cf ae       	std	Y+63, r12	; 0x3f
    5930:	ad 97       	sbiw	r28, 0x2d	; 45
    5932:	ae 96       	adiw	r28, 0x2e	; 46
    5934:	df ae       	std	Y+63, r13	; 0x3f
    5936:	ae 97       	sbiw	r28, 0x2e	; 46
    5938:	af 96       	adiw	r28, 0x2f	; 47
    593a:	ef ae       	std	Y+63, r14	; 0x3f
    593c:	af 97       	sbiw	r28, 0x2f	; 47
    593e:	e0 96       	adiw	r28, 0x30	; 48
    5940:	ff ae       	std	Y+63, r15	; 0x3f
    5942:	e0 97       	sbiw	r28, 0x30	; 48
    5944:	e1 96       	adiw	r28, 0x31	; 49
    5946:	0f af       	std	Y+63, r16	; 0x3f
    5948:	e1 97       	sbiw	r28, 0x31	; 49
    594a:	e2 96       	adiw	r28, 0x32	; 50
    594c:	1f af       	std	Y+63, r17	; 0x3f
    594e:	e2 97       	sbiw	r28, 0x32	; 50
    5950:	ab 96       	adiw	r28, 0x2b	; 43
    5952:	2f ad       	ldd	r18, Y+63	; 0x3f
    5954:	ab 97       	sbiw	r28, 0x2b	; 43
    5956:	ac 96       	adiw	r28, 0x2c	; 44
    5958:	3f ad       	ldd	r19, Y+63	; 0x3f
    595a:	ac 97       	sbiw	r28, 0x2c	; 44
    595c:	ad 96       	adiw	r28, 0x2d	; 45
    595e:	4f ad       	ldd	r20, Y+63	; 0x3f
    5960:	ad 97       	sbiw	r28, 0x2d	; 45
    5962:	ae 96       	adiw	r28, 0x2e	; 46
    5964:	5f ad       	ldd	r21, Y+63	; 0x3f
    5966:	ae 97       	sbiw	r28, 0x2e	; 46
    5968:	af 96       	adiw	r28, 0x2f	; 47
    596a:	6f ad       	ldd	r22, Y+63	; 0x3f
    596c:	af 97       	sbiw	r28, 0x2f	; 47
    596e:	e0 96       	adiw	r28, 0x30	; 48
    5970:	7f ad       	ldd	r23, Y+63	; 0x3f
    5972:	e0 97       	sbiw	r28, 0x30	; 48
    5974:	e1 96       	adiw	r28, 0x31	; 49
    5976:	8f ad       	ldd	r24, Y+63	; 0x3f
    5978:	e1 97       	sbiw	r28, 0x31	; 49
    597a:	e2 96       	adiw	r28, 0x32	; 50
    597c:	9f ad       	ldd	r25, Y+63	; 0x3f
    597e:	e2 97       	sbiw	r28, 0x32	; 50
    5980:	05 e0       	ldi	r16, 0x05	; 5
    5982:	0e 94 a2 72 	call	0xe544	; 0xe544 <__ashldi3>
    5986:	22 2e       	mov	r2, r18
    5988:	33 2e       	mov	r3, r19
    598a:	44 2e       	mov	r4, r20
    598c:	55 2e       	mov	r5, r21
    598e:	66 2e       	mov	r6, r22
    5990:	77 2e       	mov	r7, r23
    5992:	88 2e       	mov	r8, r24
    5994:	99 2e       	mov	r9, r25
    5996:	22 2d       	mov	r18, r2
    5998:	33 2d       	mov	r19, r3
    599a:	44 2d       	mov	r20, r4
    599c:	55 2d       	mov	r21, r5
    599e:	66 2d       	mov	r22, r6
    59a0:	77 2d       	mov	r23, r7
    59a2:	88 2d       	mov	r24, r8
    59a4:	99 2d       	mov	r25, r9
    59a6:	ab 96       	adiw	r28, 0x2b	; 43
    59a8:	af ac       	ldd	r10, Y+63	; 0x3f
    59aa:	ab 97       	sbiw	r28, 0x2b	; 43
    59ac:	ac 96       	adiw	r28, 0x2c	; 44
    59ae:	bf ac       	ldd	r11, Y+63	; 0x3f
    59b0:	ac 97       	sbiw	r28, 0x2c	; 44
    59b2:	ad 96       	adiw	r28, 0x2d	; 45
    59b4:	cf ac       	ldd	r12, Y+63	; 0x3f
    59b6:	ad 97       	sbiw	r28, 0x2d	; 45
    59b8:	ae 96       	adiw	r28, 0x2e	; 46
    59ba:	df ac       	ldd	r13, Y+63	; 0x3f
    59bc:	ae 97       	sbiw	r28, 0x2e	; 46
    59be:	af 96       	adiw	r28, 0x2f	; 47
    59c0:	ef ac       	ldd	r14, Y+63	; 0x3f
    59c2:	af 97       	sbiw	r28, 0x2f	; 47
    59c4:	e0 96       	adiw	r28, 0x30	; 48
    59c6:	ff ac       	ldd	r15, Y+63	; 0x3f
    59c8:	e0 97       	sbiw	r28, 0x30	; 48
    59ca:	e1 96       	adiw	r28, 0x31	; 49
    59cc:	0f ad       	ldd	r16, Y+63	; 0x3f
    59ce:	e1 97       	sbiw	r28, 0x31	; 49
    59d0:	e2 96       	adiw	r28, 0x32	; 50
    59d2:	1f ad       	ldd	r17, Y+63	; 0x3f
    59d4:	e2 97       	sbiw	r28, 0x32	; 50
    59d6:	0e 94 ba 72 	call	0xe574	; 0xe574 <__subdi3>
    59da:	22 2e       	mov	r2, r18
    59dc:	33 2e       	mov	r3, r19
    59de:	44 2e       	mov	r4, r20
    59e0:	55 2e       	mov	r5, r21
    59e2:	66 2e       	mov	r6, r22
    59e4:	77 2e       	mov	r7, r23
    59e6:	88 2e       	mov	r8, r24
    59e8:	99 2e       	mov	r9, r25
    59ea:	22 2d       	mov	r18, r2
    59ec:	33 2d       	mov	r19, r3
    59ee:	44 2d       	mov	r20, r4
    59f0:	55 2d       	mov	r21, r5
    59f2:	66 2d       	mov	r22, r6
    59f4:	77 2d       	mov	r23, r7
    59f6:	88 2d       	mov	r24, r8
    59f8:	99 2d       	mov	r25, r9
    59fa:	63 96       	adiw	r28, 0x13	; 19
    59fc:	af ac       	ldd	r10, Y+63	; 0x3f
    59fe:	63 97       	sbiw	r28, 0x13	; 19
    5a00:	64 96       	adiw	r28, 0x14	; 20
    5a02:	bf ac       	ldd	r11, Y+63	; 0x3f
    5a04:	64 97       	sbiw	r28, 0x14	; 20
    5a06:	65 96       	adiw	r28, 0x15	; 21
    5a08:	cf ac       	ldd	r12, Y+63	; 0x3f
    5a0a:	65 97       	sbiw	r28, 0x15	; 21
    5a0c:	66 96       	adiw	r28, 0x16	; 22
    5a0e:	df ac       	ldd	r13, Y+63	; 0x3f
    5a10:	66 97       	sbiw	r28, 0x16	; 22
    5a12:	67 96       	adiw	r28, 0x17	; 23
    5a14:	ef ac       	ldd	r14, Y+63	; 0x3f
    5a16:	67 97       	sbiw	r28, 0x17	; 23
    5a18:	68 96       	adiw	r28, 0x18	; 24
    5a1a:	ff ac       	ldd	r15, Y+63	; 0x3f
    5a1c:	68 97       	sbiw	r28, 0x18	; 24
    5a1e:	69 96       	adiw	r28, 0x19	; 25
    5a20:	0f ad       	ldd	r16, Y+63	; 0x3f
    5a22:	69 97       	sbiw	r28, 0x19	; 25
    5a24:	6a 96       	adiw	r28, 0x1a	; 26
    5a26:	1f ad       	ldd	r17, Y+63	; 0x3f
    5a28:	6a 97       	sbiw	r28, 0x1a	; 26
    5a2a:	0e 94 b1 72 	call	0xe562	; 0xe562 <__adddi3>
    5a2e:	22 2e       	mov	r2, r18
    5a30:	33 2e       	mov	r3, r19
    5a32:	44 2e       	mov	r4, r20
    5a34:	55 2e       	mov	r5, r21
    5a36:	66 2e       	mov	r6, r22
    5a38:	77 2e       	mov	r7, r23
    5a3a:	88 2e       	mov	r8, r24
    5a3c:	99 2e       	mov	r9, r25
    5a3e:	22 2d       	mov	r18, r2
    5a40:	33 2d       	mov	r19, r3
    5a42:	44 2d       	mov	r20, r4
    5a44:	55 2d       	mov	r21, r5
    5a46:	66 2d       	mov	r22, r6
    5a48:	77 2d       	mov	r23, r7
    5a4a:	88 2d       	mov	r24, r8
    5a4c:	99 2d       	mov	r25, r9
    5a4e:	03 e0       	ldi	r16, 0x03	; 3
    5a50:	0e 94 a2 72 	call	0xe544	; 0xe544 <__ashldi3>
    5a54:	a2 2e       	mov	r10, r18
    5a56:	b3 2e       	mov	r11, r19
    5a58:	c4 2e       	mov	r12, r20
    5a5a:	d5 2e       	mov	r13, r21
    5a5c:	e6 2e       	mov	r14, r22
    5a5e:	f7 2e       	mov	r15, r23
    5a60:	08 2f       	mov	r16, r24
    5a62:	19 2f       	mov	r17, r25
    5a64:	2a 2c       	mov	r2, r10
    5a66:	3b 2c       	mov	r3, r11
    5a68:	4c 2c       	mov	r4, r12
    5a6a:	5d 2c       	mov	r5, r13
    5a6c:	6e 2c       	mov	r6, r14
    5a6e:	7f 2c       	mov	r7, r15
    5a70:	80 2e       	mov	r8, r16
    5a72:	91 2e       	mov	r9, r17
    5a74:	a2 2c       	mov	r10, r2
    5a76:	b3 2c       	mov	r11, r3
    5a78:	c4 2c       	mov	r12, r4
    5a7a:	d5 2c       	mov	r13, r5
    5a7c:	e6 2c       	mov	r14, r6
    5a7e:	f7 2c       	mov	r15, r7
    5a80:	08 2d       	mov	r16, r8
    5a82:	19 2d       	mov	r17, r9
    5a84:	2a 2d       	mov	r18, r10
    5a86:	3b 2d       	mov	r19, r11
    5a88:	4c 2d       	mov	r20, r12
    5a8a:	5d 2d       	mov	r21, r13
    5a8c:	6e 2d       	mov	r22, r14
    5a8e:	7f 2d       	mov	r23, r15
    5a90:	80 2f       	mov	r24, r16
    5a92:	91 2f       	mov	r25, r17
    5a94:	29 51       	subi	r18, 0x19	; 25
    5a96:	3c 4f       	sbci	r19, 0xFC	; 252
    5a98:	4f 4f       	sbci	r20, 0xFF	; 255
    5a9a:	5f 4f       	sbci	r21, 0xFF	; 255
    5a9c:	6f 4f       	sbci	r22, 0xFF	; 255
    5a9e:	7f 4f       	sbci	r23, 0xFF	; 255
    5aa0:	8f 4f       	sbci	r24, 0xFF	; 255
    5aa2:	9f 4f       	sbci	r25, 0xFF	; 255
    5aa4:	a2 2e       	mov	r10, r18
    5aa6:	b3 2e       	mov	r11, r19
    5aa8:	c4 2e       	mov	r12, r20
    5aaa:	d5 2e       	mov	r13, r21
    5aac:	e6 2e       	mov	r14, r22
    5aae:	f7 2e       	mov	r15, r23
    5ab0:	08 2f       	mov	r16, r24
    5ab2:	19 2f       	mov	r17, r25
    5ab4:	2a 2d       	mov	r18, r10
    5ab6:	3b 2d       	mov	r19, r11
    5ab8:	4c 2d       	mov	r20, r12
    5aba:	5d 2d       	mov	r21, r13
    5abc:	6e 2d       	mov	r22, r14
    5abe:	7f 2d       	mov	r23, r15
    5ac0:	80 2f       	mov	r24, r16
    5ac2:	91 2f       	mov	r25, r17
    5ac4:	0e 94 56 11 	call	0x22ac	; 0x22ac <__floatundisf>
    5ac8:	dc 01       	movw	r26, r24
    5aca:	cb 01       	movw	r24, r22
    5acc:	20 e0       	ldi	r18, 0x00	; 0
    5ace:	30 e8       	ldi	r19, 0x80	; 128
    5ad0:	4b eb       	ldi	r20, 0xBB	; 187
    5ad2:	55 e4       	ldi	r21, 0x45	; 69
    5ad4:	bc 01       	movw	r22, r24
    5ad6:	cd 01       	movw	r24, r26
    5ad8:	0e 94 81 14 	call	0x2902	; 0x2902 <__divsf3>
    5adc:	dc 01       	movw	r26, r24
    5ade:	cb 01       	movw	r24, r22
    5ae0:	bc 01       	movw	r22, r24
    5ae2:	cd 01       	movw	r24, r26
    5ae4:	0e 94 a5 10 	call	0x214a	; 0x214a <__fixunssfdi>
    5ae8:	a2 2e       	mov	r10, r18
    5aea:	b3 2e       	mov	r11, r19
    5aec:	c4 2e       	mov	r12, r20
    5aee:	d5 2e       	mov	r13, r21
    5af0:	e6 2e       	mov	r14, r22
    5af2:	f7 2e       	mov	r15, r23
    5af4:	08 2f       	mov	r16, r24
    5af6:	19 2f       	mov	r17, r25
    5af8:	d6 01       	movw	r26, r12
    5afa:	c5 01       	movw	r24, r10
    5afc:	bc 01       	movw	r22, r24
    5afe:	cd 01       	movw	r24, r26
    5b00:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__portable_avr_delay_cycles>
    5b04:	98 d0       	rcall	.+304    	; 0x5c36 <dl_task_sync_time>
    5b06:	00 97       	sbiw	r24, 0x00	; 0
    5b08:	09 f0       	breq	.+2      	; 0x5b0c <datalogger_init+0xa62>
    5b0a:	87 ce       	rjmp	.-754    	; 0x581a <datalogger_init+0x770>
    5b0c:	0e 94 68 5f 	call	0xbed0	; 0xbed0 <rtc_get_time>
    5b10:	dc 01       	movw	r26, r24
    5b12:	cb 01       	movw	r24, r22
    5b14:	80 93 08 20 	sts	0x2008, r24
    5b18:	90 93 09 20 	sts	0x2009, r25
    5b1c:	a0 93 0a 20 	sts	0x200A, r26
    5b20:	b0 93 0b 20 	sts	0x200B, r27
    5b24:	00 00       	nop
    5b26:	80 e0       	ldi	r24, 0x00	; 0
    5b28:	98 e0       	ldi	r25, 0x08	; 8
    5b2a:	0e 94 8e 66 	call	0xcd1c	; 0xcd1c <tc_enable>
    5b2e:	80 e4       	ldi	r24, 0x40	; 64
    5b30:	98 e0       	ldi	r25, 0x08	; 8
    5b32:	0e 94 8e 66 	call	0xcd1c	; 0xcd1c <tc_enable>
    5b36:	60 e0       	ldi	r22, 0x00	; 0
    5b38:	80 e0       	ldi	r24, 0x00	; 0
    5b3a:	98 e0       	ldi	r25, 0x08	; 8
    5b3c:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <tc_set_direction>
    5b40:	60 e0       	ldi	r22, 0x00	; 0
    5b42:	80 e4       	ldi	r24, 0x40	; 64
    5b44:	98 e0       	ldi	r25, 0x08	; 8
    5b46:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <tc_set_direction>
    5b4a:	80 e4       	ldi	r24, 0x40	; 64
    5b4c:	98 e0       	ldi	r25, 0x08	; 8
    5b4e:	28 e0       	ldi	r18, 0x08	; 8
    5b50:	fc 01       	movw	r30, r24
    5b52:	20 83       	st	Z, r18
    5b54:	80 e8       	ldi	r24, 0x80	; 128
    5b56:	91 e0       	ldi	r25, 0x01	; 1
    5b58:	20 ec       	ldi	r18, 0xC0	; 192
    5b5a:	fc 01       	movw	r30, r24
    5b5c:	20 83       	st	Z, r18
    5b5e:	80 e4       	ldi	r24, 0x40	; 64
    5b60:	98 e0       	ldi	r25, 0x08	; 8
    5b62:	29 e8       	ldi	r18, 0x89	; 137
    5b64:	fc 01       	movw	r30, r24
    5b66:	23 83       	std	Z+3, r18	; 0x03
    5b68:	80 e0       	ldi	r24, 0x00	; 0
    5b6a:	98 e0       	ldi	r25, 0x08	; 8
    5b6c:	29 e8       	ldi	r18, 0x89	; 137
    5b6e:	fc 01       	movw	r30, r24
    5b70:	23 83       	std	Z+3, r18	; 0x03
    5b72:	60 e3       	ldi	r22, 0x30	; 48
    5b74:	75 e7       	ldi	r23, 0x75	; 117
    5b76:	80 e0       	ldi	r24, 0x00	; 0
    5b78:	98 e0       	ldi	r25, 0x08	; 8
    5b7a:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <tc_write_period>
    5b7e:	64 e0       	ldi	r22, 0x04	; 4
    5b80:	80 e0       	ldi	r24, 0x00	; 0
    5b82:	98 e0       	ldi	r25, 0x08	; 8
    5b84:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <tc_write_clock_source>
    5b88:	80 e0       	ldi	r24, 0x00	; 0
    5b8a:	98 e0       	ldi	r25, 0x08	; 8
    5b8c:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <tc_get_resolution>
    5b90:	dc 01       	movw	r26, r24
    5b92:	cb 01       	movw	r24, r22
    5b94:	8e 83       	std	Y+6, r24	; 0x06
    5b96:	9f 83       	std	Y+7, r25	; 0x07
    5b98:	a8 87       	std	Y+8, r26	; 0x08
    5b9a:	b9 87       	std	Y+9, r27	; 0x09
    5b9c:	87 ed       	ldi	r24, 0xD7	; 215
    5b9e:	9a e0       	ldi	r25, 0x0A	; 10
    5ba0:	29 85       	ldd	r18, Y+9	; 0x09
    5ba2:	2f 93       	push	r18
    5ba4:	28 85       	ldd	r18, Y+8	; 0x08
    5ba6:	2f 93       	push	r18
    5ba8:	2f 81       	ldd	r18, Y+7	; 0x07
    5baa:	2f 93       	push	r18
    5bac:	2e 81       	ldd	r18, Y+6	; 0x06
    5bae:	2f 93       	push	r18
    5bb0:	29 2f       	mov	r18, r25
    5bb2:	2f 93       	push	r18
    5bb4:	8f 93       	push	r24
    5bb6:	ce 01       	movw	r24, r28
    5bb8:	0a 96       	adiw	r24, 0x0a	; 10
    5bba:	29 2f       	mov	r18, r25
    5bbc:	2f 93       	push	r18
    5bbe:	8f 93       	push	r24
    5bc0:	0e 94 b5 74 	call	0xe96a	; 0xe96a <sprintf_P>
    5bc4:	0d b7       	in	r16, 0x3d	; 61
    5bc6:	1e b7       	in	r17, 0x3e	; 62
    5bc8:	08 5f       	subi	r16, 0xF8	; 248
    5bca:	1f 4f       	sbci	r17, 0xFF	; 255
    5bcc:	cd bf       	out	0x3d, r28	; 61
    5bce:	de bf       	out	0x3e, r29	; 62
    5bd0:	ce 01       	movw	r24, r28
    5bd2:	0a 96       	adiw	r24, 0x0a	; 10
    5bd4:	40 e0       	ldi	r20, 0x00	; 0
    5bd6:	bc 01       	movw	r22, r24
    5bd8:	81 e0       	ldi	r24, 0x01	; 1
    5bda:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    5bde:	6f ef       	ldi	r22, 0xFF	; 255
    5be0:	7f ef       	ldi	r23, 0xFF	; 255
    5be2:	cb 01       	movw	r24, r22
    5be4:	0e 94 d5 3d 	call	0x7baa	; 0x7baa <dl_snapshot_init>
    5be8:	80 e7       	ldi	r24, 0x70	; 112
    5bea:	9f e1       	ldi	r25, 0x1F	; 31
    5bec:	0e 94 89 5f 	call	0xbf12	; 0xbf12 <rtc_set_callback>
    5bf0:	65 e0       	ldi	r22, 0x05	; 5
    5bf2:	70 e0       	ldi	r23, 0x00	; 0
    5bf4:	80 e0       	ldi	r24, 0x00	; 0
    5bf6:	90 e0       	ldi	r25, 0x00	; 0
    5bf8:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <rtc_set_alarm_relative>
    5bfc:	8a e0       	ldi	r24, 0x0A	; 10
    5bfe:	0e 94 7e 59 	call	0xb2fc	; 0xb2fc <wdt_set_timeout_period>
    5c02:	0e 94 8a 59 	call	0xb314	; 0xb314 <wdt_enable>
    5c06:	80 e0       	ldi	r24, 0x00	; 0
    5c08:	cf 58       	subi	r28, 0x8F	; 143
    5c0a:	df 4f       	sbci	r29, 0xFF	; 255
    5c0c:	cd bf       	out	0x3d, r28	; 61
    5c0e:	de bf       	out	0x3e, r29	; 62
    5c10:	df 91       	pop	r29
    5c12:	cf 91       	pop	r28
    5c14:	1f 91       	pop	r17
    5c16:	0f 91       	pop	r16
    5c18:	ff 90       	pop	r15
    5c1a:	ef 90       	pop	r14
    5c1c:	df 90       	pop	r13
    5c1e:	cf 90       	pop	r12
    5c20:	bf 90       	pop	r11
    5c22:	af 90       	pop	r10
    5c24:	9f 90       	pop	r9
    5c26:	8f 90       	pop	r8
    5c28:	7f 90       	pop	r7
    5c2a:	6f 90       	pop	r6
    5c2c:	5f 90       	pop	r5
    5c2e:	4f 90       	pop	r4
    5c30:	3f 90       	pop	r3
    5c32:	2f 90       	pop	r2
    5c34:	08 95       	ret

00005c36 <dl_task_sync_time>:
    5c36:	ff 92       	push	r15
    5c38:	0f 93       	push	r16
    5c3a:	1f 93       	push	r17
    5c3c:	cf 93       	push	r28
    5c3e:	df 93       	push	r29
    5c40:	cd b7       	in	r28, 0x3d	; 61
    5c42:	de b7       	in	r29, 0x3e	; 62
    5c44:	c3 59       	subi	r28, 0x93	; 147
    5c46:	d1 09       	sbc	r29, r1
    5c48:	cd bf       	out	0x3d, r28	; 61
    5c4a:	de bf       	out	0x3e, r29	; 62
    5c4c:	82 e0       	ldi	r24, 0x02	; 2
    5c4e:	80 93 84 21 	sts	0x2184, r24
    5c52:	19 82       	std	Y+1, r1	; 0x01
    5c54:	1a 82       	std	Y+2, r1	; 0x02
    5c56:	81 e1       	ldi	r24, 0x11	; 17
    5c58:	99 e0       	ldi	r25, 0x09	; 9
    5c5a:	8f 83       	std	Y+7, r24	; 0x07
    5c5c:	98 87       	std	Y+8, r25	; 0x08
    5c5e:	8f 81       	ldd	r24, Y+7	; 0x07
    5c60:	98 85       	ldd	r25, Y+8	; 0x08
    5c62:	bc 01       	movw	r22, r24
    5c64:	82 e0       	ldi	r24, 0x02	; 2
    5c66:	0e 94 f3 59 	call	0xb3e6	; 0xb3e6 <debug_function_in_name_print_P>
    5c6a:	80 91 a0 21 	lds	r24, 0x21A0
    5c6e:	88 23       	and	r24, r24
    5c70:	61 f4       	brne	.+24     	; 0x5c8a <dl_task_sync_time+0x54>
    5c72:	83 e2       	ldi	r24, 0x23	; 35
    5c74:	99 e0       	ldi	r25, 0x09	; 9
    5c76:	41 e0       	ldi	r20, 0x01	; 1
    5c78:	bc 01       	movw	r22, r24
    5c7a:	81 e0       	ldi	r24, 0x01	; 1
    5c7c:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    5c80:	81 e0       	ldi	r24, 0x01	; 1
    5c82:	90 e0       	ldi	r25, 0x00	; 0
    5c84:	89 83       	std	Y+1, r24	; 0x01
    5c86:	9a 83       	std	Y+2, r25	; 0x02
    5c88:	e1 c0       	rjmp	.+450    	; 0x5e4c <dl_task_sync_time+0x216>
    5c8a:	0e 94 b6 52 	call	0xa56c	; 0xa56c <sim900_GPRS_simple_open>
    5c8e:	88 2f       	mov	r24, r24
    5c90:	90 e0       	ldi	r25, 0x00	; 0
    5c92:	89 83       	std	Y+1, r24	; 0x01
    5c94:	9a 83       	std	Y+2, r25	; 0x02
    5c96:	89 81       	ldd	r24, Y+1	; 0x01
    5c98:	9a 81       	ldd	r25, Y+2	; 0x02
    5c9a:	00 97       	sbiw	r24, 0x00	; 0
    5c9c:	09 f0       	breq	.+2      	; 0x5ca0 <dl_task_sync_time+0x6a>
    5c9e:	d3 c0       	rjmp	.+422    	; 0x5e46 <dl_task_sync_time+0x210>
    5ca0:	ce 01       	movw	r24, r28
    5ca2:	09 96       	adiw	r24, 0x09	; 9
    5ca4:	60 e8       	ldi	r22, 0x80	; 128
    5ca6:	0e 94 2f 1c 	call	0x385e	; 0x385e <cfg_get_service_url_time>
    5caa:	ce 01       	movw	r24, r28
    5cac:	87 57       	subi	r24, 0x77	; 119
    5cae:	9f 4f       	sbci	r25, 0xFF	; 255
    5cb0:	2e e1       	ldi	r18, 0x1E	; 30
    5cb2:	fc 01       	movw	r30, r24
    5cb4:	20 83       	st	Z, r18
    5cb6:	9e 01       	movw	r18, r28
    5cb8:	27 57       	subi	r18, 0x77	; 119
    5cba:	3f 4f       	sbci	r19, 0xFF	; 255
    5cbc:	ae 01       	movw	r20, r28
    5cbe:	47 5f       	subi	r20, 0xF7	; 247
    5cc0:	5f 4f       	sbci	r21, 0xFF	; 255
    5cc2:	ce 01       	movw	r24, r28
    5cc4:	09 96       	adiw	r24, 0x09	; 9
    5cc6:	60 e0       	ldi	r22, 0x00	; 0
    5cc8:	0e 94 4f 53 	call	0xa69e	; 0xa69e <sim900_http_get>
    5ccc:	89 83       	std	Y+1, r24	; 0x01
    5cce:	9a 83       	std	Y+2, r25	; 0x02
    5cd0:	0e 94 1a 55 	call	0xaa34	; 0xaa34 <sim900_http_close>
    5cd4:	89 81       	ldd	r24, Y+1	; 0x01
    5cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    5cd8:	00 97       	sbiw	r24, 0x00	; 0
    5cda:	09 f0       	breq	.+2      	; 0x5cde <dl_task_sync_time+0xa8>
    5cdc:	b6 c0       	rjmp	.+364    	; 0x5e4a <dl_task_sync_time+0x214>
    5cde:	87 e7       	ldi	r24, 0x77	; 119
    5ce0:	99 e0       	ldi	r25, 0x09	; 9
    5ce2:	41 e0       	ldi	r20, 0x01	; 1
    5ce4:	bc 01       	movw	r22, r24
    5ce6:	83 e0       	ldi	r24, 0x03	; 3
    5ce8:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    5cec:	ce 01       	movw	r24, r28
    5cee:	09 96       	adiw	r24, 0x09	; 9
    5cf0:	40 e0       	ldi	r20, 0x00	; 0
    5cf2:	bc 01       	movw	r22, r24
    5cf4:	83 e0       	ldi	r24, 0x03	; 3
    5cf6:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    5cfa:	41 e0       	ldi	r20, 0x01	; 1
    5cfc:	69 e1       	ldi	r22, 0x19	; 25
    5cfe:	70 e2       	ldi	r23, 0x20	; 32
    5d00:	83 e0       	ldi	r24, 0x03	; 3
    5d02:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    5d06:	ce 01       	movw	r24, r28
    5d08:	09 96       	adiw	r24, 0x09	; 9
    5d0a:	4a e0       	ldi	r20, 0x0A	; 10
    5d0c:	50 e0       	ldi	r21, 0x00	; 0
    5d0e:	60 e0       	ldi	r22, 0x00	; 0
    5d10:	70 e0       	ldi	r23, 0x00	; 0
    5d12:	0e 94 25 73 	call	0xe64a	; 0xe64a <strtoul>
    5d16:	dc 01       	movw	r26, r24
    5d18:	cb 01       	movw	r24, r22
    5d1a:	8b 83       	std	Y+3, r24	; 0x03
    5d1c:	9c 83       	std	Y+4, r25	; 0x04
    5d1e:	ad 83       	std	Y+5, r26	; 0x05
    5d20:	be 83       	std	Y+6, r27	; 0x06
    5d22:	8b 81       	ldd	r24, Y+3	; 0x03
    5d24:	9c 81       	ldd	r25, Y+4	; 0x04
    5d26:	ad 81       	ldd	r26, Y+5	; 0x05
    5d28:	be 81       	ldd	r27, Y+6	; 0x06
    5d2a:	bc 01       	movw	r22, r24
    5d2c:	cd 01       	movw	r24, r26
    5d2e:	0e 94 56 5f 	call	0xbeac	; 0xbeac <rtc_set_time>
    5d32:	9e 01       	movw	r18, r28
    5d34:	26 57       	subi	r18, 0x76	; 118
    5d36:	3f 4f       	sbci	r19, 0xFF	; 255
    5d38:	8b 81       	ldd	r24, Y+3	; 0x03
    5d3a:	9c 81       	ldd	r25, Y+4	; 0x04
    5d3c:	ad 81       	ldd	r26, Y+5	; 0x05
    5d3e:	be 81       	ldd	r27, Y+6	; 0x06
    5d40:	a9 01       	movw	r20, r18
    5d42:	bc 01       	movw	r22, r24
    5d44:	cd 01       	movw	r24, r26
    5d46:	0e 94 ee 55 	call	0xabdc	; 0xabdc <calendar_timestamp_to_date>
    5d4a:	ce 01       	movw	r24, r28
    5d4c:	86 57       	subi	r24, 0x76	; 118
    5d4e:	9f 4f       	sbci	r25, 0xFF	; 255
    5d50:	fc 01       	movw	r30, r24
    5d52:	80 81       	ld	r24, Z
    5d54:	08 2f       	mov	r16, r24
    5d56:	10 e0       	ldi	r17, 0x00	; 0
    5d58:	ce 01       	movw	r24, r28
    5d5a:	86 57       	subi	r24, 0x76	; 118
    5d5c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d5e:	fc 01       	movw	r30, r24
    5d60:	81 81       	ldd	r24, Z+1	; 0x01
    5d62:	a8 2f       	mov	r26, r24
    5d64:	b0 e0       	ldi	r27, 0x00	; 0
    5d66:	ce 01       	movw	r24, r28
    5d68:	86 57       	subi	r24, 0x76	; 118
    5d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    5d6c:	fc 01       	movw	r30, r24
    5d6e:	82 81       	ldd	r24, Z+2	; 0x02
    5d70:	28 2f       	mov	r18, r24
    5d72:	30 e0       	ldi	r19, 0x00	; 0
    5d74:	ce 56       	subi	r28, 0x6E	; 110
    5d76:	df 4f       	sbci	r29, 0xFF	; 255
    5d78:	28 83       	st	Y, r18
    5d7a:	39 83       	std	Y+1, r19	; 0x01
    5d7c:	c2 59       	subi	r28, 0x92	; 146
    5d7e:	d0 40       	sbci	r29, 0x00	; 0
    5d80:	ce 01       	movw	r24, r28
    5d82:	86 57       	subi	r24, 0x76	; 118
    5d84:	9f 4f       	sbci	r25, 0xFF	; 255
    5d86:	fc 01       	movw	r30, r24
    5d88:	65 81       	ldd	r22, Z+5	; 0x05
    5d8a:	76 81       	ldd	r23, Z+6	; 0x06
    5d8c:	ce 01       	movw	r24, r28
    5d8e:	86 57       	subi	r24, 0x76	; 118
    5d90:	9f 4f       	sbci	r25, 0xFF	; 255
    5d92:	fc 01       	movw	r30, r24
    5d94:	84 81       	ldd	r24, Z+4	; 0x04
    5d96:	88 2f       	mov	r24, r24
    5d98:	90 e0       	ldi	r25, 0x00	; 0
    5d9a:	ac 01       	movw	r20, r24
    5d9c:	4f 5f       	subi	r20, 0xFF	; 255
    5d9e:	5f 4f       	sbci	r21, 0xFF	; 255
    5da0:	ce 01       	movw	r24, r28
    5da2:	86 57       	subi	r24, 0x76	; 118
    5da4:	9f 4f       	sbci	r25, 0xFF	; 255
    5da6:	fc 01       	movw	r30, r24
    5da8:	83 81       	ldd	r24, Z+3	; 0x03
    5daa:	88 2f       	mov	r24, r24
    5dac:	90 e0       	ldi	r25, 0x00	; 0
    5dae:	9c 01       	movw	r18, r24
    5db0:	2f 5f       	subi	r18, 0xFF	; 255
    5db2:	3f 4f       	sbci	r19, 0xFF	; 255
    5db4:	88 e9       	ldi	r24, 0x98	; 152
    5db6:	99 e0       	ldi	r25, 0x09	; 9
    5db8:	f1 2e       	mov	r15, r17
    5dba:	ff 92       	push	r15
    5dbc:	10 2f       	mov	r17, r16
    5dbe:	1f 93       	push	r17
    5dc0:	1b 2f       	mov	r17, r27
    5dc2:	1f 93       	push	r17
    5dc4:	af 93       	push	r26
    5dc6:	cd 56       	subi	r28, 0x6D	; 109
    5dc8:	df 4f       	sbci	r29, 0xFF	; 255
    5dca:	a8 81       	ld	r26, Y
    5dcc:	c3 59       	subi	r28, 0x93	; 147
    5dce:	d0 40       	sbci	r29, 0x00	; 0
    5dd0:	af 93       	push	r26
    5dd2:	ce 56       	subi	r28, 0x6E	; 110
    5dd4:	df 4f       	sbci	r29, 0xFF	; 255
    5dd6:	e8 81       	ld	r30, Y
    5dd8:	c2 59       	subi	r28, 0x92	; 146
    5dda:	d0 40       	sbci	r29, 0x00	; 0
    5ddc:	ef 93       	push	r30
    5dde:	e7 2f       	mov	r30, r23
    5de0:	ef 93       	push	r30
    5de2:	6f 93       	push	r22
    5de4:	65 2f       	mov	r22, r21
    5de6:	6f 93       	push	r22
    5de8:	4f 93       	push	r20
    5dea:	43 2f       	mov	r20, r19
    5dec:	4f 93       	push	r20
    5dee:	2f 93       	push	r18
    5df0:	29 2f       	mov	r18, r25
    5df2:	2f 93       	push	r18
    5df4:	8f 93       	push	r24
    5df6:	ce 01       	movw	r24, r28
    5df8:	09 96       	adiw	r24, 0x09	; 9
    5dfa:	29 2f       	mov	r18, r25
    5dfc:	2f 93       	push	r18
    5dfe:	8f 93       	push	r24
    5e00:	0e 94 b5 74 	call	0xe96a	; 0xe96a <sprintf_P>
    5e04:	2d b7       	in	r18, 0x3d	; 61
    5e06:	3e b7       	in	r19, 0x3e	; 62
    5e08:	20 5f       	subi	r18, 0xF0	; 240
    5e0a:	3f 4f       	sbci	r19, 0xFF	; 255
    5e0c:	cd bf       	out	0x3d, r28	; 61
    5e0e:	de bf       	out	0x3e, r29	; 62
    5e10:	86 eb       	ldi	r24, 0xB6	; 182
    5e12:	99 e0       	ldi	r25, 0x09	; 9
    5e14:	41 e0       	ldi	r20, 0x01	; 1
    5e16:	bc 01       	movw	r22, r24
    5e18:	81 e0       	ldi	r24, 0x01	; 1
    5e1a:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    5e1e:	ce 01       	movw	r24, r28
    5e20:	09 96       	adiw	r24, 0x09	; 9
    5e22:	40 e0       	ldi	r20, 0x00	; 0
    5e24:	bc 01       	movw	r22, r24
    5e26:	81 e0       	ldi	r24, 0x01	; 1
    5e28:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    5e2c:	80 91 b9 21 	lds	r24, 0x21B9
    5e30:	90 91 ba 21 	lds	r25, 0x21BA
    5e34:	a0 91 bb 21 	lds	r26, 0x21BB
    5e38:	b0 91 bc 21 	lds	r27, 0x21BC
    5e3c:	bc 01       	movw	r22, r24
    5e3e:	cd 01       	movw	r24, r26
    5e40:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <rtc_set_alarm_relative>
    5e44:	03 c0       	rjmp	.+6      	; 0x5e4c <dl_task_sync_time+0x216>
    5e46:	00 00       	nop
    5e48:	01 c0       	rjmp	.+2      	; 0x5e4c <dl_task_sync_time+0x216>
    5e4a:	00 00       	nop
    5e4c:	0e 94 eb 52 	call	0xa5d6	; 0xa5d6 <sim900_GPRS_simple_close>
    5e50:	10 92 84 21 	sts	0x2184, r1
    5e54:	09 81       	ldd	r16, Y+1	; 0x01
    5e56:	1a 81       	ldd	r17, Y+2	; 0x02
    5e58:	ce 01       	movw	r24, r28
    5e5a:	07 96       	adiw	r24, 0x07	; 7
    5e5c:	0e 94 06 5a 	call	0xb40c	; 0xb40c <debug_function_out_name_print_P>
    5e60:	c8 01       	movw	r24, r16
    5e62:	cd 56       	subi	r28, 0x6D	; 109
    5e64:	df 4f       	sbci	r29, 0xFF	; 255
    5e66:	cd bf       	out	0x3d, r28	; 61
    5e68:	de bf       	out	0x3e, r29	; 62
    5e6a:	df 91       	pop	r29
    5e6c:	cf 91       	pop	r28
    5e6e:	1f 91       	pop	r17
    5e70:	0f 91       	pop	r16
    5e72:	ff 90       	pop	r15
    5e74:	08 95       	ret

00005e76 <dl_task_cmd_check_prepare>:
    5e76:	cf 93       	push	r28
    5e78:	df 93       	push	r29
    5e7a:	cd b7       	in	r28, 0x3d	; 61
    5e7c:	de b7       	in	r29, 0x3e	; 62
    5e7e:	20 91 8a 21 	lds	r18, 0x218A
    5e82:	30 91 8b 21 	lds	r19, 0x218B
    5e86:	40 91 8c 21 	lds	r20, 0x218C
    5e8a:	50 91 8d 21 	lds	r21, 0x218D
    5e8e:	80 91 86 21 	lds	r24, 0x2186
    5e92:	90 91 87 21 	lds	r25, 0x2187
    5e96:	a0 91 88 21 	lds	r26, 0x2188
    5e9a:	b0 91 89 21 	lds	r27, 0x2189
    5e9e:	28 17       	cp	r18, r24
    5ea0:	39 07       	cpc	r19, r25
    5ea2:	4a 07       	cpc	r20, r26
    5ea4:	5b 07       	cpc	r21, r27
    5ea6:	51 f4       	brne	.+20     	; 0x5ebc <dl_task_cmd_check_prepare+0x46>
    5ea8:	8c e4       	ldi	r24, 0x4C	; 76
    5eaa:	98 e0       	ldi	r25, 0x08	; 8
    5eac:	41 e0       	ldi	r20, 0x01	; 1
    5eae:	bc 01       	movw	r22, r24
    5eb0:	81 e0       	ldi	r24, 0x01	; 1
    5eb2:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    5eb6:	80 e0       	ldi	r24, 0x00	; 0
    5eb8:	90 e0       	ldi	r25, 0x00	; 0
    5eba:	20 c0       	rjmp	.+64     	; 0x5efc <dl_task_cmd_check_prepare+0x86>
    5ebc:	80 91 a0 21 	lds	r24, 0x21A0
    5ec0:	88 23       	and	r24, r24
    5ec2:	51 f4       	brne	.+20     	; 0x5ed8 <dl_task_cmd_check_prepare+0x62>
    5ec4:	87 e8       	ldi	r24, 0x87	; 135
    5ec6:	98 e0       	ldi	r25, 0x08	; 8
    5ec8:	41 e0       	ldi	r20, 0x01	; 1
    5eca:	bc 01       	movw	r22, r24
    5ecc:	81 e0       	ldi	r24, 0x01	; 1
    5ece:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    5ed2:	8f ef       	ldi	r24, 0xFF	; 255
    5ed4:	9f ef       	ldi	r25, 0xFF	; 255
    5ed6:	12 c0       	rjmp	.+36     	; 0x5efc <dl_task_cmd_check_prepare+0x86>
    5ed8:	0e 94 55 45 	call	0x8aaa	; 0x8aaa <AT24CXX_Init>
    5edc:	00 97       	sbiw	r24, 0x00	; 0
    5ede:	51 f0       	breq	.+20     	; 0x5ef4 <dl_task_cmd_check_prepare+0x7e>
    5ee0:	8f ec       	ldi	r24, 0xCF	; 207
    5ee2:	98 e0       	ldi	r25, 0x08	; 8
    5ee4:	41 e0       	ldi	r20, 0x01	; 1
    5ee6:	bc 01       	movw	r22, r24
    5ee8:	81 e0       	ldi	r24, 0x01	; 1
    5eea:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    5eee:	8f ef       	ldi	r24, 0xFF	; 255
    5ef0:	9f ef       	ldi	r25, 0xFF	; 255
    5ef2:	04 c0       	rjmp	.+8      	; 0x5efc <dl_task_cmd_check_prepare+0x86>
    5ef4:	0e 94 b6 52 	call	0xa56c	; 0xa56c <sim900_GPRS_simple_open>
    5ef8:	88 2f       	mov	r24, r24
    5efa:	90 e0       	ldi	r25, 0x00	; 0
    5efc:	df 91       	pop	r29
    5efe:	cf 91       	pop	r28
    5f00:	08 95       	ret

00005f02 <dl_task_send_data_prepare_RT>:
    5f02:	0f 93       	push	r16
    5f04:	1f 93       	push	r17
    5f06:	cf 93       	push	r28
    5f08:	df 93       	push	r29
    5f0a:	00 d0       	rcall	.+0      	; 0x5f0c <dl_task_send_data_prepare_RT+0xa>
    5f0c:	1f 92       	push	r1
    5f0e:	cd b7       	in	r28, 0x3d	; 61
    5f10:	de b7       	in	r29, 0x3e	; 62
    5f12:	82 e0       	ldi	r24, 0x02	; 2
    5f14:	80 93 81 21 	sts	0x2181, r24
    5f18:	8f e2       	ldi	r24, 0x2F	; 47
    5f1a:	98 e0       	ldi	r25, 0x08	; 8
    5f1c:	8b 83       	std	Y+3, r24	; 0x03
    5f1e:	9c 83       	std	Y+4, r25	; 0x04
    5f20:	8b 81       	ldd	r24, Y+3	; 0x03
    5f22:	9c 81       	ldd	r25, Y+4	; 0x04
    5f24:	bc 01       	movw	r22, r24
    5f26:	82 e0       	ldi	r24, 0x02	; 2
    5f28:	0e 94 f3 59 	call	0xb3e6	; 0xb3e6 <debug_function_in_name_print_P>
    5f2c:	a4 df       	rcall	.-184    	; 0x5e76 <dl_task_cmd_check_prepare>
    5f2e:	89 83       	std	Y+1, r24	; 0x01
    5f30:	9a 83       	std	Y+2, r25	; 0x02
    5f32:	89 81       	ldd	r24, Y+1	; 0x01
    5f34:	9a 81       	ldd	r25, Y+2	; 0x02
    5f36:	00 97       	sbiw	r24, 0x00	; 0
    5f38:	31 f5       	brne	.+76     	; 0x5f86 <dl_task_send_data_prepare_RT+0x84>
    5f3a:	82 e0       	ldi	r24, 0x02	; 2
    5f3c:	80 93 0c 20 	sts	0x200C, r24
    5f40:	80 91 8a 21 	lds	r24, 0x218A
    5f44:	90 91 8b 21 	lds	r25, 0x218B
    5f48:	a0 91 8c 21 	lds	r26, 0x218C
    5f4c:	b0 91 8d 21 	lds	r27, 0x218D
    5f50:	80 93 8e 21 	sts	0x218E, r24
    5f54:	90 93 8f 21 	sts	0x218F, r25
    5f58:	a0 93 90 21 	sts	0x2190, r26
    5f5c:	b0 93 91 21 	sts	0x2191, r27
    5f60:	0e 94 68 5f 	call	0xbed0	; 0xbed0 <rtc_get_time>
    5f64:	dc 01       	movw	r26, r24
    5f66:	cb 01       	movw	r24, r22
    5f68:	80 58       	subi	r24, 0x80	; 128
    5f6a:	91 45       	sbci	r25, 0x51	; 81
    5f6c:	a1 40       	sbci	r26, 0x01	; 1
    5f6e:	b1 09       	sbc	r27, r1
    5f70:	80 93 92 21 	sts	0x2192, r24
    5f74:	90 93 93 21 	sts	0x2193, r25
    5f78:	a0 93 94 21 	sts	0x2194, r26
    5f7c:	b0 93 95 21 	sts	0x2195, r27
    5f80:	81 e0       	ldi	r24, 0x01	; 1
    5f82:	80 93 96 21 	sts	0x2196, r24
    5f86:	10 92 81 21 	sts	0x2181, r1
    5f8a:	09 81       	ldd	r16, Y+1	; 0x01
    5f8c:	1a 81       	ldd	r17, Y+2	; 0x02
    5f8e:	ce 01       	movw	r24, r28
    5f90:	03 96       	adiw	r24, 0x03	; 3
    5f92:	0e 94 06 5a 	call	0xb40c	; 0xb40c <debug_function_out_name_print_P>
    5f96:	c8 01       	movw	r24, r16
    5f98:	24 96       	adiw	r28, 0x04	; 4
    5f9a:	cd bf       	out	0x3d, r28	; 61
    5f9c:	de bf       	out	0x3e, r29	; 62
    5f9e:	df 91       	pop	r29
    5fa0:	cf 91       	pop	r28
    5fa2:	1f 91       	pop	r17
    5fa4:	0f 91       	pop	r16
    5fa6:	08 95       	ret

00005fa8 <dl_iterator_moveback_with_cap>:
    5fa8:	ef 92       	push	r14
    5faa:	ff 92       	push	r15
    5fac:	0f 93       	push	r16
    5fae:	1f 93       	push	r17
    5fb0:	cf 93       	push	r28
    5fb2:	df 93       	push	r29
    5fb4:	cd b7       	in	r28, 0x3d	; 61
    5fb6:	de b7       	in	r29, 0x3e	; 62
    5fb8:	64 97       	sbiw	r28, 0x14	; 20
    5fba:	cd bf       	out	0x3d, r28	; 61
    5fbc:	de bf       	out	0x3e, r29	; 62
    5fbe:	89 8b       	std	Y+17, r24	; 0x11
    5fc0:	9a 8b       	std	Y+18, r25	; 0x12
    5fc2:	6b 8b       	std	Y+19, r22	; 0x13
    5fc4:	7c 8b       	std	Y+20, r23	; 0x14
    5fc6:	2b 89       	ldd	r18, Y+19	; 0x13
    5fc8:	3c 89       	ldd	r19, Y+20	; 0x14
    5fca:	46 e2       	ldi	r20, 0x26	; 38
    5fcc:	42 9f       	mul	r20, r18
    5fce:	c0 01       	movw	r24, r0
    5fd0:	43 9f       	mul	r20, r19
    5fd2:	90 0d       	add	r25, r0
    5fd4:	11 24       	eor	r1, r1
    5fd6:	cc 01       	movw	r24, r24
    5fd8:	a0 e0       	ldi	r26, 0x00	; 0
    5fda:	b0 e0       	ldi	r27, 0x00	; 0
    5fdc:	89 83       	std	Y+1, r24	; 0x01
    5fde:	9a 83       	std	Y+2, r25	; 0x02
    5fe0:	ab 83       	std	Y+3, r26	; 0x03
    5fe2:	bc 83       	std	Y+4, r27	; 0x04
    5fe4:	89 89       	ldd	r24, Y+17	; 0x11
    5fe6:	9a 89       	ldd	r25, Y+18	; 0x12
    5fe8:	fc 01       	movw	r30, r24
    5fea:	80 81       	ld	r24, Z
    5fec:	91 81       	ldd	r25, Z+1	; 0x01
    5fee:	a2 81       	ldd	r26, Z+2	; 0x02
    5ff0:	b3 81       	ldd	r27, Z+3	; 0x03
    5ff2:	8d 83       	std	Y+5, r24	; 0x05
    5ff4:	9e 83       	std	Y+6, r25	; 0x06
    5ff6:	af 83       	std	Y+7, r26	; 0x07
    5ff8:	b8 87       	std	Y+8, r27	; 0x08
    5ffa:	2d 81       	ldd	r18, Y+5	; 0x05
    5ffc:	3e 81       	ldd	r19, Y+6	; 0x06
    5ffe:	4f 81       	ldd	r20, Y+7	; 0x07
    6000:	58 85       	ldd	r21, Y+8	; 0x08
    6002:	80 91 86 21 	lds	r24, 0x2186
    6006:	90 91 87 21 	lds	r25, 0x2187
    600a:	a0 91 88 21 	lds	r26, 0x2188
    600e:	b0 91 89 21 	lds	r27, 0x2189
    6012:	79 01       	movw	r14, r18
    6014:	8a 01       	movw	r16, r20
    6016:	e8 1a       	sub	r14, r24
    6018:	f9 0a       	sbc	r15, r25
    601a:	0a 0b       	sbc	r16, r26
    601c:	1b 0b       	sbc	r17, r27
    601e:	d8 01       	movw	r26, r16
    6020:	c7 01       	movw	r24, r14
    6022:	89 87       	std	Y+9, r24	; 0x09
    6024:	9a 87       	std	Y+10, r25	; 0x0a
    6026:	ab 87       	std	Y+11, r26	; 0x0b
    6028:	bc 87       	std	Y+12, r27	; 0x0c
    602a:	29 81       	ldd	r18, Y+1	; 0x01
    602c:	3a 81       	ldd	r19, Y+2	; 0x02
    602e:	4b 81       	ldd	r20, Y+3	; 0x03
    6030:	5c 81       	ldd	r21, Y+4	; 0x04
    6032:	89 85       	ldd	r24, Y+9	; 0x09
    6034:	9a 85       	ldd	r25, Y+10	; 0x0a
    6036:	ab 85       	ldd	r26, Y+11	; 0x0b
    6038:	bc 85       	ldd	r27, Y+12	; 0x0c
    603a:	82 17       	cp	r24, r18
    603c:	93 07       	cpc	r25, r19
    603e:	a4 07       	cpc	r26, r20
    6040:	b5 07       	cpc	r27, r21
    6042:	bc f4       	brge	.+46     	; 0x6072 <__stack+0x73>
    6044:	8d ea       	ldi	r24, 0xAD	; 173
    6046:	97 e0       	ldi	r25, 0x07	; 7
    6048:	41 e0       	ldi	r20, 0x01	; 1
    604a:	bc 01       	movw	r22, r24
    604c:	81 e0       	ldi	r24, 0x01	; 1
    604e:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    6052:	80 91 86 21 	lds	r24, 0x2186
    6056:	90 91 87 21 	lds	r25, 0x2187
    605a:	a0 91 88 21 	lds	r26, 0x2188
    605e:	b0 91 89 21 	lds	r27, 0x2189
    6062:	29 89       	ldd	r18, Y+17	; 0x11
    6064:	3a 89       	ldd	r19, Y+18	; 0x12
    6066:	f9 01       	movw	r30, r18
    6068:	80 83       	st	Z, r24
    606a:	91 83       	std	Z+1, r25	; 0x01
    606c:	a2 83       	std	Z+2, r26	; 0x02
    606e:	b3 83       	std	Z+3, r27	; 0x03
    6070:	4e c0       	rjmp	.+156    	; 0x610e <__stack+0x10f>
    6072:	89 81       	ldd	r24, Y+1	; 0x01
    6074:	9a 81       	ldd	r25, Y+2	; 0x02
    6076:	ab 81       	ldd	r26, Y+3	; 0x03
    6078:	bc 81       	ldd	r27, Y+4	; 0x04
    607a:	9f 5f       	subi	r25, 0xFF	; 255
    607c:	af 4f       	sbci	r26, 0xFF	; 255
    607e:	bf 4f       	sbci	r27, 0xFF	; 255
    6080:	8d 87       	std	Y+13, r24	; 0x0d
    6082:	9e 87       	std	Y+14, r25	; 0x0e
    6084:	af 87       	std	Y+15, r26	; 0x0f
    6086:	b8 8b       	std	Y+16, r27	; 0x10
    6088:	2d 81       	ldd	r18, Y+5	; 0x05
    608a:	3e 81       	ldd	r19, Y+6	; 0x06
    608c:	4f 81       	ldd	r20, Y+7	; 0x07
    608e:	58 85       	ldd	r21, Y+8	; 0x08
    6090:	8d 85       	ldd	r24, Y+13	; 0x0d
    6092:	9e 85       	ldd	r25, Y+14	; 0x0e
    6094:	af 85       	ldd	r26, Y+15	; 0x0f
    6096:	b8 89       	ldd	r27, Y+16	; 0x10
    6098:	28 17       	cp	r18, r24
    609a:	39 07       	cpc	r19, r25
    609c:	4a 07       	cpc	r20, r26
    609e:	5b 07       	cpc	r21, r27
    60a0:	fc f4       	brge	.+62     	; 0x60e0 <__stack+0xe1>
    60a2:	83 ef       	ldi	r24, 0xF3	; 243
    60a4:	97 e0       	ldi	r25, 0x07	; 7
    60a6:	bc 01       	movw	r22, r24
    60a8:	81 e0       	ldi	r24, 0x01	; 1
    60aa:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    60ae:	2d 81       	ldd	r18, Y+5	; 0x05
    60b0:	3e 81       	ldd	r19, Y+6	; 0x06
    60b2:	4f 81       	ldd	r20, Y+7	; 0x07
    60b4:	58 85       	ldd	r21, Y+8	; 0x08
    60b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    60b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    60ba:	af 85       	ldd	r26, Y+15	; 0x0f
    60bc:	b8 89       	ldd	r27, Y+16	; 0x10
    60be:	79 01       	movw	r14, r18
    60c0:	8a 01       	movw	r16, r20
    60c2:	e8 1a       	sub	r14, r24
    60c4:	f9 0a       	sbc	r15, r25
    60c6:	0a 0b       	sbc	r16, r26
    60c8:	1b 0b       	sbc	r17, r27
    60ca:	d8 01       	movw	r26, r16
    60cc:	c7 01       	movw	r24, r14
    60ce:	18 96       	adiw	r26, 0x08	; 8
    60d0:	29 89       	ldd	r18, Y+17	; 0x11
    60d2:	3a 89       	ldd	r19, Y+18	; 0x12
    60d4:	f9 01       	movw	r30, r18
    60d6:	80 83       	st	Z, r24
    60d8:	91 83       	std	Z+1, r25	; 0x01
    60da:	a2 83       	std	Z+2, r26	; 0x02
    60dc:	b3 83       	std	Z+3, r27	; 0x03
    60de:	17 c0       	rjmp	.+46     	; 0x610e <__stack+0x10f>
    60e0:	2d 81       	ldd	r18, Y+5	; 0x05
    60e2:	3e 81       	ldd	r19, Y+6	; 0x06
    60e4:	4f 81       	ldd	r20, Y+7	; 0x07
    60e6:	58 85       	ldd	r21, Y+8	; 0x08
    60e8:	89 81       	ldd	r24, Y+1	; 0x01
    60ea:	9a 81       	ldd	r25, Y+2	; 0x02
    60ec:	ab 81       	ldd	r26, Y+3	; 0x03
    60ee:	bc 81       	ldd	r27, Y+4	; 0x04
    60f0:	79 01       	movw	r14, r18
    60f2:	8a 01       	movw	r16, r20
    60f4:	e8 1a       	sub	r14, r24
    60f6:	f9 0a       	sbc	r15, r25
    60f8:	0a 0b       	sbc	r16, r26
    60fa:	1b 0b       	sbc	r17, r27
    60fc:	d8 01       	movw	r26, r16
    60fe:	c7 01       	movw	r24, r14
    6100:	29 89       	ldd	r18, Y+17	; 0x11
    6102:	3a 89       	ldd	r19, Y+18	; 0x12
    6104:	f9 01       	movw	r30, r18
    6106:	80 83       	st	Z, r24
    6108:	91 83       	std	Z+1, r25	; 0x01
    610a:	a2 83       	std	Z+2, r26	; 0x02
    610c:	b3 83       	std	Z+3, r27	; 0x03
    610e:	64 96       	adiw	r28, 0x14	; 20
    6110:	cd bf       	out	0x3d, r28	; 61
    6112:	de bf       	out	0x3e, r29	; 62
    6114:	df 91       	pop	r29
    6116:	cf 91       	pop	r28
    6118:	1f 91       	pop	r17
    611a:	0f 91       	pop	r16
    611c:	ff 90       	pop	r15
    611e:	ef 90       	pop	r14
    6120:	08 95       	ret

00006122 <dl_iterator_moveforward_with_cap>:
    6122:	ef 92       	push	r14
    6124:	ff 92       	push	r15
    6126:	0f 93       	push	r16
    6128:	1f 93       	push	r17
    612a:	cf 93       	push	r28
    612c:	df 93       	push	r29
    612e:	cd b7       	in	r28, 0x3d	; 61
    6130:	de b7       	in	r29, 0x3e	; 62
    6132:	64 97       	sbiw	r28, 0x14	; 20
    6134:	cd bf       	out	0x3d, r28	; 61
    6136:	de bf       	out	0x3e, r29	; 62
    6138:	89 8b       	std	Y+17, r24	; 0x11
    613a:	9a 8b       	std	Y+18, r25	; 0x12
    613c:	6b 8b       	std	Y+19, r22	; 0x13
    613e:	7c 8b       	std	Y+20, r23	; 0x14
    6140:	2b 89       	ldd	r18, Y+19	; 0x13
    6142:	3c 89       	ldd	r19, Y+20	; 0x14
    6144:	46 e2       	ldi	r20, 0x26	; 38
    6146:	42 9f       	mul	r20, r18
    6148:	c0 01       	movw	r24, r0
    614a:	43 9f       	mul	r20, r19
    614c:	90 0d       	add	r25, r0
    614e:	11 24       	eor	r1, r1
    6150:	cc 01       	movw	r24, r24
    6152:	a0 e0       	ldi	r26, 0x00	; 0
    6154:	b0 e0       	ldi	r27, 0x00	; 0
    6156:	89 83       	std	Y+1, r24	; 0x01
    6158:	9a 83       	std	Y+2, r25	; 0x02
    615a:	ab 83       	std	Y+3, r26	; 0x03
    615c:	bc 83       	std	Y+4, r27	; 0x04
    615e:	89 89       	ldd	r24, Y+17	; 0x11
    6160:	9a 89       	ldd	r25, Y+18	; 0x12
    6162:	fc 01       	movw	r30, r24
    6164:	80 81       	ld	r24, Z
    6166:	91 81       	ldd	r25, Z+1	; 0x01
    6168:	a2 81       	ldd	r26, Z+2	; 0x02
    616a:	b3 81       	ldd	r27, Z+3	; 0x03
    616c:	8d 83       	std	Y+5, r24	; 0x05
    616e:	9e 83       	std	Y+6, r25	; 0x06
    6170:	af 83       	std	Y+7, r26	; 0x07
    6172:	b8 87       	std	Y+8, r27	; 0x08
    6174:	20 91 8a 21 	lds	r18, 0x218A
    6178:	30 91 8b 21 	lds	r19, 0x218B
    617c:	40 91 8c 21 	lds	r20, 0x218C
    6180:	50 91 8d 21 	lds	r21, 0x218D
    6184:	8d 81       	ldd	r24, Y+5	; 0x05
    6186:	9e 81       	ldd	r25, Y+6	; 0x06
    6188:	af 81       	ldd	r26, Y+7	; 0x07
    618a:	b8 85       	ldd	r27, Y+8	; 0x08
    618c:	79 01       	movw	r14, r18
    618e:	8a 01       	movw	r16, r20
    6190:	e8 1a       	sub	r14, r24
    6192:	f9 0a       	sbc	r15, r25
    6194:	0a 0b       	sbc	r16, r26
    6196:	1b 0b       	sbc	r17, r27
    6198:	d8 01       	movw	r26, r16
    619a:	c7 01       	movw	r24, r14
    619c:	89 87       	std	Y+9, r24	; 0x09
    619e:	9a 87       	std	Y+10, r25	; 0x0a
    61a0:	ab 87       	std	Y+11, r26	; 0x0b
    61a2:	bc 87       	std	Y+12, r27	; 0x0c
    61a4:	29 81       	ldd	r18, Y+1	; 0x01
    61a6:	3a 81       	ldd	r19, Y+2	; 0x02
    61a8:	4b 81       	ldd	r20, Y+3	; 0x03
    61aa:	5c 81       	ldd	r21, Y+4	; 0x04
    61ac:	89 85       	ldd	r24, Y+9	; 0x09
    61ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    61b0:	ab 85       	ldd	r26, Y+11	; 0x0b
    61b2:	bc 85       	ldd	r27, Y+12	; 0x0c
    61b4:	82 17       	cp	r24, r18
    61b6:	93 07       	cpc	r25, r19
    61b8:	a4 07       	cpc	r26, r20
    61ba:	b5 07       	cpc	r27, r21
    61bc:	b4 f4       	brge	.+44     	; 0x61ea <dl_iterator_moveforward_with_cap+0xc8>
    61be:	87 e2       	ldi	r24, 0x27	; 39
    61c0:	97 e0       	ldi	r25, 0x07	; 7
    61c2:	bc 01       	movw	r22, r24
    61c4:	81 e0       	ldi	r24, 0x01	; 1
    61c6:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    61ca:	80 91 8a 21 	lds	r24, 0x218A
    61ce:	90 91 8b 21 	lds	r25, 0x218B
    61d2:	a0 91 8c 21 	lds	r26, 0x218C
    61d6:	b0 91 8d 21 	lds	r27, 0x218D
    61da:	29 89       	ldd	r18, Y+17	; 0x11
    61dc:	3a 89       	ldd	r19, Y+18	; 0x12
    61de:	f9 01       	movw	r30, r18
    61e0:	80 83       	st	Z, r24
    61e2:	91 83       	std	Z+1, r25	; 0x01
    61e4:	a2 83       	std	Z+2, r26	; 0x02
    61e6:	b3 83       	std	Z+3, r27	; 0x03
    61e8:	55 c0       	rjmp	.+170    	; 0x6294 <dl_iterator_moveforward_with_cap+0x172>
    61ea:	20 e0       	ldi	r18, 0x00	; 0
    61ec:	30 e0       	ldi	r19, 0x00	; 0
    61ee:	48 e0       	ldi	r20, 0x08	; 8
    61f0:	50 e0       	ldi	r21, 0x00	; 0
    61f2:	89 81       	ldd	r24, Y+1	; 0x01
    61f4:	9a 81       	ldd	r25, Y+2	; 0x02
    61f6:	ab 81       	ldd	r26, Y+3	; 0x03
    61f8:	bc 81       	ldd	r27, Y+4	; 0x04
    61fa:	79 01       	movw	r14, r18
    61fc:	8a 01       	movw	r16, r20
    61fe:	e8 1a       	sub	r14, r24
    6200:	f9 0a       	sbc	r15, r25
    6202:	0a 0b       	sbc	r16, r26
    6204:	1b 0b       	sbc	r17, r27
    6206:	d8 01       	movw	r26, r16
    6208:	c7 01       	movw	r24, r14
    620a:	8d 87       	std	Y+13, r24	; 0x0d
    620c:	9e 87       	std	Y+14, r25	; 0x0e
    620e:	af 87       	std	Y+15, r26	; 0x0f
    6210:	b8 8b       	std	Y+16, r27	; 0x10
    6212:	2d 81       	ldd	r18, Y+5	; 0x05
    6214:	3e 81       	ldd	r19, Y+6	; 0x06
    6216:	4f 81       	ldd	r20, Y+7	; 0x07
    6218:	58 85       	ldd	r21, Y+8	; 0x08
    621a:	8d 85       	ldd	r24, Y+13	; 0x0d
    621c:	9e 85       	ldd	r25, Y+14	; 0x0e
    621e:	af 85       	ldd	r26, Y+15	; 0x0f
    6220:	b8 89       	ldd	r27, Y+16	; 0x10
    6222:	82 17       	cp	r24, r18
    6224:	93 07       	cpc	r25, r19
    6226:	a4 07       	cpc	r26, r20
    6228:	b5 07       	cpc	r27, r21
    622a:	0c f5       	brge	.+66     	; 0x626e <dl_iterator_moveforward_with_cap+0x14c>
    622c:	8e e6       	ldi	r24, 0x6E	; 110
    622e:	97 e0       	ldi	r25, 0x07	; 7
    6230:	bc 01       	movw	r22, r24
    6232:	81 e0       	ldi	r24, 0x01	; 1
    6234:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    6238:	2d 81       	ldd	r18, Y+5	; 0x05
    623a:	3e 81       	ldd	r19, Y+6	; 0x06
    623c:	4f 81       	ldd	r20, Y+7	; 0x07
    623e:	58 85       	ldd	r21, Y+8	; 0x08
    6240:	8d 85       	ldd	r24, Y+13	; 0x0d
    6242:	9e 85       	ldd	r25, Y+14	; 0x0e
    6244:	af 85       	ldd	r26, Y+15	; 0x0f
    6246:	b8 89       	ldd	r27, Y+16	; 0x10
    6248:	79 01       	movw	r14, r18
    624a:	8a 01       	movw	r16, r20
    624c:	e8 1a       	sub	r14, r24
    624e:	f9 0a       	sbc	r15, r25
    6250:	0a 0b       	sbc	r16, r26
    6252:	1b 0b       	sbc	r17, r27
    6254:	d8 01       	movw	r26, r16
    6256:	c7 01       	movw	r24, r14
    6258:	9f 5f       	subi	r25, 0xFF	; 255
    625a:	af 4f       	sbci	r26, 0xFF	; 255
    625c:	bf 4f       	sbci	r27, 0xFF	; 255
    625e:	29 89       	ldd	r18, Y+17	; 0x11
    6260:	3a 89       	ldd	r19, Y+18	; 0x12
    6262:	f9 01       	movw	r30, r18
    6264:	80 83       	st	Z, r24
    6266:	91 83       	std	Z+1, r25	; 0x01
    6268:	a2 83       	std	Z+2, r26	; 0x02
    626a:	b3 83       	std	Z+3, r27	; 0x03
    626c:	13 c0       	rjmp	.+38     	; 0x6294 <dl_iterator_moveforward_with_cap+0x172>
    626e:	2d 81       	ldd	r18, Y+5	; 0x05
    6270:	3e 81       	ldd	r19, Y+6	; 0x06
    6272:	4f 81       	ldd	r20, Y+7	; 0x07
    6274:	58 85       	ldd	r21, Y+8	; 0x08
    6276:	89 81       	ldd	r24, Y+1	; 0x01
    6278:	9a 81       	ldd	r25, Y+2	; 0x02
    627a:	ab 81       	ldd	r26, Y+3	; 0x03
    627c:	bc 81       	ldd	r27, Y+4	; 0x04
    627e:	82 0f       	add	r24, r18
    6280:	93 1f       	adc	r25, r19
    6282:	a4 1f       	adc	r26, r20
    6284:	b5 1f       	adc	r27, r21
    6286:	29 89       	ldd	r18, Y+17	; 0x11
    6288:	3a 89       	ldd	r19, Y+18	; 0x12
    628a:	f9 01       	movw	r30, r18
    628c:	80 83       	st	Z, r24
    628e:	91 83       	std	Z+1, r25	; 0x01
    6290:	a2 83       	std	Z+2, r26	; 0x02
    6292:	b3 83       	std	Z+3, r27	; 0x03
    6294:	64 96       	adiw	r28, 0x14	; 20
    6296:	cd bf       	out	0x3d, r28	; 61
    6298:	de bf       	out	0x3e, r29	; 62
    629a:	df 91       	pop	r29
    629c:	cf 91       	pop	r28
    629e:	1f 91       	pop	r17
    62a0:	0f 91       	pop	r16
    62a2:	ff 90       	pop	r15
    62a4:	ef 90       	pop	r14
    62a6:	08 95       	ret

000062a8 <dl_iterator_moveback>:
    62a8:	ef 92       	push	r14
    62aa:	ff 92       	push	r15
    62ac:	0f 93       	push	r16
    62ae:	1f 93       	push	r17
    62b0:	cf 93       	push	r28
    62b2:	df 93       	push	r29
    62b4:	cd b7       	in	r28, 0x3d	; 61
    62b6:	de b7       	in	r29, 0x3e	; 62
    62b8:	60 97       	sbiw	r28, 0x10	; 16
    62ba:	cd bf       	out	0x3d, r28	; 61
    62bc:	de bf       	out	0x3e, r29	; 62
    62be:	8d 87       	std	Y+13, r24	; 0x0d
    62c0:	9e 87       	std	Y+14, r25	; 0x0e
    62c2:	6f 87       	std	Y+15, r22	; 0x0f
    62c4:	78 8b       	std	Y+16, r23	; 0x10
    62c6:	2f 85       	ldd	r18, Y+15	; 0x0f
    62c8:	38 89       	ldd	r19, Y+16	; 0x10
    62ca:	46 e2       	ldi	r20, 0x26	; 38
    62cc:	42 9f       	mul	r20, r18
    62ce:	c0 01       	movw	r24, r0
    62d0:	43 9f       	mul	r20, r19
    62d2:	90 0d       	add	r25, r0
    62d4:	11 24       	eor	r1, r1
    62d6:	cc 01       	movw	r24, r24
    62d8:	a0 e0       	ldi	r26, 0x00	; 0
    62da:	b0 e0       	ldi	r27, 0x00	; 0
    62dc:	89 83       	std	Y+1, r24	; 0x01
    62de:	9a 83       	std	Y+2, r25	; 0x02
    62e0:	ab 83       	std	Y+3, r26	; 0x03
    62e2:	bc 83       	std	Y+4, r27	; 0x04
    62e4:	89 81       	ldd	r24, Y+1	; 0x01
    62e6:	9a 81       	ldd	r25, Y+2	; 0x02
    62e8:	ab 81       	ldd	r26, Y+3	; 0x03
    62ea:	bc 81       	ldd	r27, Y+4	; 0x04
    62ec:	9f 5f       	subi	r25, 0xFF	; 255
    62ee:	af 4f       	sbci	r26, 0xFF	; 255
    62f0:	bf 4f       	sbci	r27, 0xFF	; 255
    62f2:	8d 83       	std	Y+5, r24	; 0x05
    62f4:	9e 83       	std	Y+6, r25	; 0x06
    62f6:	af 83       	std	Y+7, r26	; 0x07
    62f8:	b8 87       	std	Y+8, r27	; 0x08
    62fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    62fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    62fe:	fc 01       	movw	r30, r24
    6300:	80 81       	ld	r24, Z
    6302:	91 81       	ldd	r25, Z+1	; 0x01
    6304:	a2 81       	ldd	r26, Z+2	; 0x02
    6306:	b3 81       	ldd	r27, Z+3	; 0x03
    6308:	89 87       	std	Y+9, r24	; 0x09
    630a:	9a 87       	std	Y+10, r25	; 0x0a
    630c:	ab 87       	std	Y+11, r26	; 0x0b
    630e:	bc 87       	std	Y+12, r27	; 0x0c
    6310:	29 85       	ldd	r18, Y+9	; 0x09
    6312:	3a 85       	ldd	r19, Y+10	; 0x0a
    6314:	4b 85       	ldd	r20, Y+11	; 0x0b
    6316:	5c 85       	ldd	r21, Y+12	; 0x0c
    6318:	8d 81       	ldd	r24, Y+5	; 0x05
    631a:	9e 81       	ldd	r25, Y+6	; 0x06
    631c:	af 81       	ldd	r26, Y+7	; 0x07
    631e:	b8 85       	ldd	r27, Y+8	; 0x08
    6320:	28 17       	cp	r18, r24
    6322:	39 07       	cpc	r19, r25
    6324:	4a 07       	cpc	r20, r26
    6326:	5b 07       	cpc	r21, r27
    6328:	fc f4       	brge	.+62     	; 0x6368 <dl_iterator_moveback+0xc0>
    632a:	84 ef       	ldi	r24, 0xF4	; 244
    632c:	96 e0       	ldi	r25, 0x06	; 6
    632e:	bc 01       	movw	r22, r24
    6330:	81 e0       	ldi	r24, 0x01	; 1
    6332:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    6336:	29 85       	ldd	r18, Y+9	; 0x09
    6338:	3a 85       	ldd	r19, Y+10	; 0x0a
    633a:	4b 85       	ldd	r20, Y+11	; 0x0b
    633c:	5c 85       	ldd	r21, Y+12	; 0x0c
    633e:	8d 81       	ldd	r24, Y+5	; 0x05
    6340:	9e 81       	ldd	r25, Y+6	; 0x06
    6342:	af 81       	ldd	r26, Y+7	; 0x07
    6344:	b8 85       	ldd	r27, Y+8	; 0x08
    6346:	79 01       	movw	r14, r18
    6348:	8a 01       	movw	r16, r20
    634a:	e8 1a       	sub	r14, r24
    634c:	f9 0a       	sbc	r15, r25
    634e:	0a 0b       	sbc	r16, r26
    6350:	1b 0b       	sbc	r17, r27
    6352:	d8 01       	movw	r26, r16
    6354:	c7 01       	movw	r24, r14
    6356:	18 96       	adiw	r26, 0x08	; 8
    6358:	2d 85       	ldd	r18, Y+13	; 0x0d
    635a:	3e 85       	ldd	r19, Y+14	; 0x0e
    635c:	f9 01       	movw	r30, r18
    635e:	80 83       	st	Z, r24
    6360:	91 83       	std	Z+1, r25	; 0x01
    6362:	a2 83       	std	Z+2, r26	; 0x02
    6364:	b3 83       	std	Z+3, r27	; 0x03
    6366:	17 c0       	rjmp	.+46     	; 0x6396 <dl_iterator_moveback+0xee>
    6368:	29 85       	ldd	r18, Y+9	; 0x09
    636a:	3a 85       	ldd	r19, Y+10	; 0x0a
    636c:	4b 85       	ldd	r20, Y+11	; 0x0b
    636e:	5c 85       	ldd	r21, Y+12	; 0x0c
    6370:	89 81       	ldd	r24, Y+1	; 0x01
    6372:	9a 81       	ldd	r25, Y+2	; 0x02
    6374:	ab 81       	ldd	r26, Y+3	; 0x03
    6376:	bc 81       	ldd	r27, Y+4	; 0x04
    6378:	79 01       	movw	r14, r18
    637a:	8a 01       	movw	r16, r20
    637c:	e8 1a       	sub	r14, r24
    637e:	f9 0a       	sbc	r15, r25
    6380:	0a 0b       	sbc	r16, r26
    6382:	1b 0b       	sbc	r17, r27
    6384:	d8 01       	movw	r26, r16
    6386:	c7 01       	movw	r24, r14
    6388:	2d 85       	ldd	r18, Y+13	; 0x0d
    638a:	3e 85       	ldd	r19, Y+14	; 0x0e
    638c:	f9 01       	movw	r30, r18
    638e:	80 83       	st	Z, r24
    6390:	91 83       	std	Z+1, r25	; 0x01
    6392:	a2 83       	std	Z+2, r26	; 0x02
    6394:	b3 83       	std	Z+3, r27	; 0x03
    6396:	60 96       	adiw	r28, 0x10	; 16
    6398:	cd bf       	out	0x3d, r28	; 61
    639a:	de bf       	out	0x3e, r29	; 62
    639c:	df 91       	pop	r29
    639e:	cf 91       	pop	r28
    63a0:	1f 91       	pop	r17
    63a2:	0f 91       	pop	r16
    63a4:	ff 90       	pop	r15
    63a6:	ef 90       	pop	r14
    63a8:	08 95       	ret

000063aa <dl_iterator_moveforward>:
    63aa:	ef 92       	push	r14
    63ac:	ff 92       	push	r15
    63ae:	0f 93       	push	r16
    63b0:	1f 93       	push	r17
    63b2:	cf 93       	push	r28
    63b4:	df 93       	push	r29
    63b6:	cd b7       	in	r28, 0x3d	; 61
    63b8:	de b7       	in	r29, 0x3e	; 62
    63ba:	60 97       	sbiw	r28, 0x10	; 16
    63bc:	cd bf       	out	0x3d, r28	; 61
    63be:	de bf       	out	0x3e, r29	; 62
    63c0:	8d 87       	std	Y+13, r24	; 0x0d
    63c2:	9e 87       	std	Y+14, r25	; 0x0e
    63c4:	6f 87       	std	Y+15, r22	; 0x0f
    63c6:	78 8b       	std	Y+16, r23	; 0x10
    63c8:	2f 85       	ldd	r18, Y+15	; 0x0f
    63ca:	38 89       	ldd	r19, Y+16	; 0x10
    63cc:	46 e2       	ldi	r20, 0x26	; 38
    63ce:	42 9f       	mul	r20, r18
    63d0:	c0 01       	movw	r24, r0
    63d2:	43 9f       	mul	r20, r19
    63d4:	90 0d       	add	r25, r0
    63d6:	11 24       	eor	r1, r1
    63d8:	cc 01       	movw	r24, r24
    63da:	a0 e0       	ldi	r26, 0x00	; 0
    63dc:	b0 e0       	ldi	r27, 0x00	; 0
    63de:	89 83       	std	Y+1, r24	; 0x01
    63e0:	9a 83       	std	Y+2, r25	; 0x02
    63e2:	ab 83       	std	Y+3, r26	; 0x03
    63e4:	bc 83       	std	Y+4, r27	; 0x04
    63e6:	20 e0       	ldi	r18, 0x00	; 0
    63e8:	30 e0       	ldi	r19, 0x00	; 0
    63ea:	48 e0       	ldi	r20, 0x08	; 8
    63ec:	50 e0       	ldi	r21, 0x00	; 0
    63ee:	89 81       	ldd	r24, Y+1	; 0x01
    63f0:	9a 81       	ldd	r25, Y+2	; 0x02
    63f2:	ab 81       	ldd	r26, Y+3	; 0x03
    63f4:	bc 81       	ldd	r27, Y+4	; 0x04
    63f6:	79 01       	movw	r14, r18
    63f8:	8a 01       	movw	r16, r20
    63fa:	e8 1a       	sub	r14, r24
    63fc:	f9 0a       	sbc	r15, r25
    63fe:	0a 0b       	sbc	r16, r26
    6400:	1b 0b       	sbc	r17, r27
    6402:	d8 01       	movw	r26, r16
    6404:	c7 01       	movw	r24, r14
    6406:	8d 83       	std	Y+5, r24	; 0x05
    6408:	9e 83       	std	Y+6, r25	; 0x06
    640a:	af 83       	std	Y+7, r26	; 0x07
    640c:	b8 87       	std	Y+8, r27	; 0x08
    640e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6410:	9e 85       	ldd	r25, Y+14	; 0x0e
    6412:	fc 01       	movw	r30, r24
    6414:	80 81       	ld	r24, Z
    6416:	91 81       	ldd	r25, Z+1	; 0x01
    6418:	a2 81       	ldd	r26, Z+2	; 0x02
    641a:	b3 81       	ldd	r27, Z+3	; 0x03
    641c:	89 87       	std	Y+9, r24	; 0x09
    641e:	9a 87       	std	Y+10, r25	; 0x0a
    6420:	ab 87       	std	Y+11, r26	; 0x0b
    6422:	bc 87       	std	Y+12, r27	; 0x0c
    6424:	29 85       	ldd	r18, Y+9	; 0x09
    6426:	3a 85       	ldd	r19, Y+10	; 0x0a
    6428:	4b 85       	ldd	r20, Y+11	; 0x0b
    642a:	5c 85       	ldd	r21, Y+12	; 0x0c
    642c:	8d 81       	ldd	r24, Y+5	; 0x05
    642e:	9e 81       	ldd	r25, Y+6	; 0x06
    6430:	af 81       	ldd	r26, Y+7	; 0x07
    6432:	b8 85       	ldd	r27, Y+8	; 0x08
    6434:	82 17       	cp	r24, r18
    6436:	93 07       	cpc	r25, r19
    6438:	a4 07       	cpc	r26, r20
    643a:	b5 07       	cpc	r27, r21
    643c:	0c f5       	brge	.+66     	; 0x6480 <dl_iterator_moveforward+0xd6>
    643e:	8e eb       	ldi	r24, 0xBE	; 190
    6440:	96 e0       	ldi	r25, 0x06	; 6
    6442:	bc 01       	movw	r22, r24
    6444:	81 e0       	ldi	r24, 0x01	; 1
    6446:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    644a:	29 85       	ldd	r18, Y+9	; 0x09
    644c:	3a 85       	ldd	r19, Y+10	; 0x0a
    644e:	4b 85       	ldd	r20, Y+11	; 0x0b
    6450:	5c 85       	ldd	r21, Y+12	; 0x0c
    6452:	8d 81       	ldd	r24, Y+5	; 0x05
    6454:	9e 81       	ldd	r25, Y+6	; 0x06
    6456:	af 81       	ldd	r26, Y+7	; 0x07
    6458:	b8 85       	ldd	r27, Y+8	; 0x08
    645a:	79 01       	movw	r14, r18
    645c:	8a 01       	movw	r16, r20
    645e:	e8 1a       	sub	r14, r24
    6460:	f9 0a       	sbc	r15, r25
    6462:	0a 0b       	sbc	r16, r26
    6464:	1b 0b       	sbc	r17, r27
    6466:	d8 01       	movw	r26, r16
    6468:	c7 01       	movw	r24, r14
    646a:	9f 5f       	subi	r25, 0xFF	; 255
    646c:	af 4f       	sbci	r26, 0xFF	; 255
    646e:	bf 4f       	sbci	r27, 0xFF	; 255
    6470:	2d 85       	ldd	r18, Y+13	; 0x0d
    6472:	3e 85       	ldd	r19, Y+14	; 0x0e
    6474:	f9 01       	movw	r30, r18
    6476:	80 83       	st	Z, r24
    6478:	91 83       	std	Z+1, r25	; 0x01
    647a:	a2 83       	std	Z+2, r26	; 0x02
    647c:	b3 83       	std	Z+3, r27	; 0x03
    647e:	13 c0       	rjmp	.+38     	; 0x64a6 <dl_iterator_moveforward+0xfc>
    6480:	29 85       	ldd	r18, Y+9	; 0x09
    6482:	3a 85       	ldd	r19, Y+10	; 0x0a
    6484:	4b 85       	ldd	r20, Y+11	; 0x0b
    6486:	5c 85       	ldd	r21, Y+12	; 0x0c
    6488:	89 81       	ldd	r24, Y+1	; 0x01
    648a:	9a 81       	ldd	r25, Y+2	; 0x02
    648c:	ab 81       	ldd	r26, Y+3	; 0x03
    648e:	bc 81       	ldd	r27, Y+4	; 0x04
    6490:	82 0f       	add	r24, r18
    6492:	93 1f       	adc	r25, r19
    6494:	a4 1f       	adc	r26, r20
    6496:	b5 1f       	adc	r27, r21
    6498:	2d 85       	ldd	r18, Y+13	; 0x0d
    649a:	3e 85       	ldd	r19, Y+14	; 0x0e
    649c:	f9 01       	movw	r30, r18
    649e:	80 83       	st	Z, r24
    64a0:	91 83       	std	Z+1, r25	; 0x01
    64a2:	a2 83       	std	Z+2, r26	; 0x02
    64a4:	b3 83       	std	Z+3, r27	; 0x03
    64a6:	60 96       	adiw	r28, 0x10	; 16
    64a8:	cd bf       	out	0x3d, r28	; 61
    64aa:	de bf       	out	0x3e, r29	; 62
    64ac:	df 91       	pop	r29
    64ae:	cf 91       	pop	r28
    64b0:	1f 91       	pop	r17
    64b2:	0f 91       	pop	r16
    64b4:	ff 90       	pop	r15
    64b6:	ef 90       	pop	r14
    64b8:	08 95       	ret

000064ba <dl_get_record>:
    64ba:	2f 92       	push	r2
    64bc:	3f 92       	push	r3
    64be:	4f 92       	push	r4
    64c0:	5f 92       	push	r5
    64c2:	6f 92       	push	r6
    64c4:	7f 92       	push	r7
    64c6:	8f 92       	push	r8
    64c8:	9f 92       	push	r9
    64ca:	af 92       	push	r10
    64cc:	bf 92       	push	r11
    64ce:	cf 92       	push	r12
    64d0:	df 92       	push	r13
    64d2:	ef 92       	push	r14
    64d4:	ff 92       	push	r15
    64d6:	0f 93       	push	r16
    64d8:	1f 93       	push	r17
    64da:	cf 93       	push	r28
    64dc:	df 93       	push	r29
    64de:	cd b7       	in	r28, 0x3d	; 61
    64e0:	de b7       	in	r29, 0x3e	; 62
    64e2:	67 97       	sbiw	r28, 0x17	; 23
    64e4:	cd bf       	out	0x3d, r28	; 61
    64e6:	de bf       	out	0x3e, r29	; 62
    64e8:	8c 87       	std	Y+12, r24	; 0x0c
    64ea:	9d 87       	std	Y+13, r25	; 0x0d
    64ec:	6e 87       	std	Y+14, r22	; 0x0e
    64ee:	7f 87       	std	Y+15, r23	; 0x0f
    64f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    64f2:	9d 85       	ldd	r25, Y+13	; 0x0d
    64f4:	fc 01       	movw	r30, r24
    64f6:	80 81       	ld	r24, Z
    64f8:	91 81       	ldd	r25, Z+1	; 0x01
    64fa:	a2 81       	ldd	r26, Z+2	; 0x02
    64fc:	b3 81       	ldd	r27, Z+3	; 0x03
    64fe:	8d 83       	std	Y+5, r24	; 0x05
    6500:	9e 83       	std	Y+6, r25	; 0x06
    6502:	af 83       	std	Y+7, r26	; 0x07
    6504:	b8 87       	std	Y+8, r27	; 0x08
    6506:	9e 01       	movw	r18, r28
    6508:	25 5f       	subi	r18, 0xF5	; 245
    650a:	3f 4f       	sbci	r19, 0xFF	; 255
    650c:	ae 01       	movw	r20, r28
    650e:	46 5f       	subi	r20, 0xF6	; 246
    6510:	5f 4f       	sbci	r21, 0xFF	; 255
    6512:	be 01       	movw	r22, r28
    6514:	67 5f       	subi	r22, 0xF7	; 247
    6516:	7f 4f       	sbci	r23, 0xFF	; 255
    6518:	ce 01       	movw	r24, r28
    651a:	05 96       	adiw	r24, 0x05	; 5
    651c:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <AT24CXX_iterator_to_address>
    6520:	ce 01       	movw	r24, r28
    6522:	05 96       	adiw	r24, 0x05	; 5
    6524:	61 e0       	ldi	r22, 0x01	; 1
    6526:	70 e0       	ldi	r23, 0x00	; 0
    6528:	40 df       	rcall	.-384    	; 0x63aa <dl_iterator_moveforward>
    652a:	8e 85       	ldd	r24, Y+14	; 0x0e
    652c:	9f 85       	ldd	r25, Y+15	; 0x0f
    652e:	89 83       	std	Y+1, r24	; 0x01
    6530:	9a 83       	std	Y+2, r25	; 0x02
    6532:	8d 81       	ldd	r24, Y+5	; 0x05
    6534:	8b 83       	std	Y+3, r24	; 0x03
    6536:	8b 81       	ldd	r24, Y+3	; 0x03
    6538:	86 32       	cpi	r24, 0x26	; 38
    653a:	18 f4       	brcc	.+6      	; 0x6542 <dl_get_record+0x88>
    653c:	8b 81       	ldd	r24, Y+3	; 0x03
    653e:	88 23       	and	r24, r24
    6540:	59 f4       	brne	.+22     	; 0x6558 <dl_get_record+0x9e>
    6542:	4b 85       	ldd	r20, Y+11	; 0x0b
    6544:	6a 85       	ldd	r22, Y+10	; 0x0a
    6546:	59 85       	ldd	r21, Y+9	; 0x09
    6548:	89 81       	ldd	r24, Y+1	; 0x01
    654a:	9a 81       	ldd	r25, Y+2	; 0x02
    654c:	06 e2       	ldi	r16, 0x26	; 38
    654e:	9c 01       	movw	r18, r24
    6550:	85 2f       	mov	r24, r21
    6552:	0e 94 ae 45 	call	0x8b5c	; 0x8b5c <AT24CXX_ReadBlockA>
    6556:	ab c0       	rjmp	.+342    	; 0x66ae <dl_get_record+0x1f4>
    6558:	96 e2       	ldi	r25, 0x26	; 38
    655a:	8b 81       	ldd	r24, Y+3	; 0x03
    655c:	f9 2f       	mov	r31, r25
    655e:	f8 1b       	sub	r31, r24
    6560:	8f 2f       	mov	r24, r31
    6562:	8c 83       	std	Y+4, r24	; 0x04
    6564:	4b 85       	ldd	r20, Y+11	; 0x0b
    6566:	6a 85       	ldd	r22, Y+10	; 0x0a
    6568:	59 85       	ldd	r21, Y+9	; 0x09
    656a:	89 81       	ldd	r24, Y+1	; 0x01
    656c:	9a 81       	ldd	r25, Y+2	; 0x02
    656e:	0c 81       	ldd	r16, Y+4	; 0x04
    6570:	9c 01       	movw	r18, r24
    6572:	85 2f       	mov	r24, r21
    6574:	0e 94 ae 45 	call	0x8b5c	; 0x8b5c <AT24CXX_ReadBlockA>
    6578:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <sysclk_get_cpu_hz>
    657c:	dc 01       	movw	r26, r24
    657e:	cb 01       	movw	r24, r22
    6580:	1c 01       	movw	r2, r24
    6582:	2d 01       	movw	r4, r26
    6584:	61 2c       	mov	r6, r1
    6586:	71 2c       	mov	r7, r1
    6588:	43 01       	movw	r8, r6
    658a:	a2 2c       	mov	r10, r2
    658c:	b3 2c       	mov	r11, r3
    658e:	c4 2c       	mov	r12, r4
    6590:	d5 2c       	mov	r13, r5
    6592:	e6 2c       	mov	r14, r6
    6594:	f7 2c       	mov	r15, r7
    6596:	08 2d       	mov	r16, r8
    6598:	19 2d       	mov	r17, r9
    659a:	2a 2d       	mov	r18, r10
    659c:	3b 2d       	mov	r19, r11
    659e:	4c 2d       	mov	r20, r12
    65a0:	5d 2d       	mov	r21, r13
    65a2:	6e 2d       	mov	r22, r14
    65a4:	7f 2d       	mov	r23, r15
    65a6:	80 2f       	mov	r24, r16
    65a8:	91 2f       	mov	r25, r17
    65aa:	01 e0       	ldi	r16, 0x01	; 1
    65ac:	0e 94 a2 72 	call	0xe544	; 0xe544 <__ashldi3>
    65b0:	28 8b       	std	Y+16, r18	; 0x10
    65b2:	39 8b       	std	Y+17, r19	; 0x11
    65b4:	4a 8b       	std	Y+18, r20	; 0x12
    65b6:	5b 8b       	std	Y+19, r21	; 0x13
    65b8:	6c 8b       	std	Y+20, r22	; 0x14
    65ba:	7d 8b       	std	Y+21, r23	; 0x15
    65bc:	8e 8b       	std	Y+22, r24	; 0x16
    65be:	9f 8b       	std	Y+23, r25	; 0x17
    65c0:	a8 88       	ldd	r10, Y+16	; 0x10
    65c2:	b9 88       	ldd	r11, Y+17	; 0x11
    65c4:	ca 88       	ldd	r12, Y+18	; 0x12
    65c6:	db 88       	ldd	r13, Y+19	; 0x13
    65c8:	ec 88       	ldd	r14, Y+20	; 0x14
    65ca:	fd 88       	ldd	r15, Y+21	; 0x15
    65cc:	0e 89       	ldd	r16, Y+22	; 0x16
    65ce:	1f 89       	ldd	r17, Y+23	; 0x17
    65d0:	2a 2d       	mov	r18, r10
    65d2:	3b 2d       	mov	r19, r11
    65d4:	4c 2d       	mov	r20, r12
    65d6:	5d 2d       	mov	r21, r13
    65d8:	6e 2d       	mov	r22, r14
    65da:	7f 2d       	mov	r23, r15
    65dc:	80 2f       	mov	r24, r16
    65de:	91 2f       	mov	r25, r17
    65e0:	a2 2c       	mov	r10, r2
    65e2:	b3 2c       	mov	r11, r3
    65e4:	c4 2c       	mov	r12, r4
    65e6:	d5 2c       	mov	r13, r5
    65e8:	e6 2c       	mov	r14, r6
    65ea:	f7 2c       	mov	r15, r7
    65ec:	08 2d       	mov	r16, r8
    65ee:	19 2d       	mov	r17, r9
    65f0:	0e 94 b1 72 	call	0xe562	; 0xe562 <__adddi3>
    65f4:	a2 2e       	mov	r10, r18
    65f6:	b3 2e       	mov	r11, r19
    65f8:	c4 2e       	mov	r12, r20
    65fa:	d5 2e       	mov	r13, r21
    65fc:	e6 2e       	mov	r14, r22
    65fe:	f7 2e       	mov	r15, r23
    6600:	08 2f       	mov	r16, r24
    6602:	19 2f       	mov	r17, r25
    6604:	2a 2d       	mov	r18, r10
    6606:	3b 2d       	mov	r19, r11
    6608:	4c 2d       	mov	r20, r12
    660a:	5d 2d       	mov	r21, r13
    660c:	6e 2d       	mov	r22, r14
    660e:	7f 2d       	mov	r23, r15
    6610:	80 2f       	mov	r24, r16
    6612:	91 2f       	mov	r25, r17
    6614:	29 51       	subi	r18, 0x19	; 25
    6616:	3c 4f       	sbci	r19, 0xFC	; 252
    6618:	4f 4f       	sbci	r20, 0xFF	; 255
    661a:	5f 4f       	sbci	r21, 0xFF	; 255
    661c:	6f 4f       	sbci	r22, 0xFF	; 255
    661e:	7f 4f       	sbci	r23, 0xFF	; 255
    6620:	8f 4f       	sbci	r24, 0xFF	; 255
    6622:	9f 4f       	sbci	r25, 0xFF	; 255
    6624:	a2 2e       	mov	r10, r18
    6626:	b3 2e       	mov	r11, r19
    6628:	c4 2e       	mov	r12, r20
    662a:	d5 2e       	mov	r13, r21
    662c:	e6 2e       	mov	r14, r22
    662e:	f7 2e       	mov	r15, r23
    6630:	08 2f       	mov	r16, r24
    6632:	19 2f       	mov	r17, r25
    6634:	2a 2d       	mov	r18, r10
    6636:	3b 2d       	mov	r19, r11
    6638:	4c 2d       	mov	r20, r12
    663a:	5d 2d       	mov	r21, r13
    663c:	6e 2d       	mov	r22, r14
    663e:	7f 2d       	mov	r23, r15
    6640:	80 2f       	mov	r24, r16
    6642:	91 2f       	mov	r25, r17
    6644:	0e 94 56 11 	call	0x22ac	; 0x22ac <__floatundisf>
    6648:	dc 01       	movw	r26, r24
    664a:	cb 01       	movw	r24, r22
    664c:	20 e0       	ldi	r18, 0x00	; 0
    664e:	30 e8       	ldi	r19, 0x80	; 128
    6650:	4b eb       	ldi	r20, 0xBB	; 187
    6652:	55 e4       	ldi	r21, 0x45	; 69
    6654:	bc 01       	movw	r22, r24
    6656:	cd 01       	movw	r24, r26
    6658:	0e 94 81 14 	call	0x2902	; 0x2902 <__divsf3>
    665c:	dc 01       	movw	r26, r24
    665e:	cb 01       	movw	r24, r22
    6660:	bc 01       	movw	r22, r24
    6662:	cd 01       	movw	r24, r26
    6664:	0e 94 a5 10 	call	0x214a	; 0x214a <__fixunssfdi>
    6668:	a2 2e       	mov	r10, r18
    666a:	b3 2e       	mov	r11, r19
    666c:	c4 2e       	mov	r12, r20
    666e:	d5 2e       	mov	r13, r21
    6670:	e6 2e       	mov	r14, r22
    6672:	f7 2e       	mov	r15, r23
    6674:	08 2f       	mov	r16, r24
    6676:	19 2f       	mov	r17, r25
    6678:	d6 01       	movw	r26, r12
    667a:	c5 01       	movw	r24, r10
    667c:	bc 01       	movw	r22, r24
    667e:	cd 01       	movw	r24, r26
    6680:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__portable_avr_delay_cycles>
    6684:	8c 81       	ldd	r24, Y+4	; 0x04
    6686:	88 2f       	mov	r24, r24
    6688:	90 e0       	ldi	r25, 0x00	; 0
    668a:	29 81       	ldd	r18, Y+1	; 0x01
    668c:	3a 81       	ldd	r19, Y+2	; 0x02
    668e:	82 0f       	add	r24, r18
    6690:	93 1f       	adc	r25, r19
    6692:	2c 85       	ldd	r18, Y+12	; 0x0c
    6694:	3d 85       	ldd	r19, Y+13	; 0x0d
    6696:	f9 01       	movw	r30, r18
    6698:	61 81       	ldd	r22, Z+1	; 0x01
    669a:	2c 85       	ldd	r18, Y+12	; 0x0c
    669c:	3d 85       	ldd	r19, Y+13	; 0x0d
    669e:	f9 01       	movw	r30, r18
    66a0:	52 81       	ldd	r21, Z+2	; 0x02
    66a2:	0b 81       	ldd	r16, Y+3	; 0x03
    66a4:	9c 01       	movw	r18, r24
    66a6:	40 e0       	ldi	r20, 0x00	; 0
    66a8:	85 2f       	mov	r24, r21
    66aa:	0e 94 ae 45 	call	0x8b5c	; 0x8b5c <AT24CXX_ReadBlockA>
    66ae:	80 e0       	ldi	r24, 0x00	; 0
    66b0:	67 96       	adiw	r28, 0x17	; 23
    66b2:	cd bf       	out	0x3d, r28	; 61
    66b4:	de bf       	out	0x3e, r29	; 62
    66b6:	df 91       	pop	r29
    66b8:	cf 91       	pop	r28
    66ba:	1f 91       	pop	r17
    66bc:	0f 91       	pop	r16
    66be:	ff 90       	pop	r15
    66c0:	ef 90       	pop	r14
    66c2:	df 90       	pop	r13
    66c4:	cf 90       	pop	r12
    66c6:	bf 90       	pop	r11
    66c8:	af 90       	pop	r10
    66ca:	9f 90       	pop	r9
    66cc:	8f 90       	pop	r8
    66ce:	7f 90       	pop	r7
    66d0:	6f 90       	pop	r6
    66d2:	5f 90       	pop	r5
    66d4:	4f 90       	pop	r4
    66d6:	3f 90       	pop	r3
    66d8:	2f 90       	pop	r2
    66da:	08 95       	ret

000066dc <dl_search_record_by_date>:
    66dc:	1f 93       	push	r17
    66de:	cf 93       	push	r28
    66e0:	df 93       	push	r29
    66e2:	cd b7       	in	r28, 0x3d	; 61
    66e4:	de b7       	in	r29, 0x3e	; 62
    66e6:	c6 5b       	subi	r28, 0xB6	; 182
    66e8:	d1 09       	sbc	r29, r1
    66ea:	cd bf       	out	0x3d, r28	; 61
    66ec:	de bf       	out	0x3e, r29	; 62
    66ee:	fe 01       	movw	r30, r28
    66f0:	e0 55       	subi	r30, 0x50	; 80
    66f2:	ff 4f       	sbci	r31, 0xFF	; 255
    66f4:	60 83       	st	Z, r22
    66f6:	71 83       	std	Z+1, r23	; 0x01
    66f8:	82 83       	std	Z+2, r24	; 0x02
    66fa:	93 83       	std	Z+3, r25	; 0x03
    66fc:	ce 01       	movw	r24, r28
    66fe:	8c 54       	subi	r24, 0x4C	; 76
    6700:	9f 4f       	sbci	r25, 0xFF	; 255
    6702:	fc 01       	movw	r30, r24
    6704:	40 83       	st	Z, r20
    6706:	ce 01       	movw	r24, r28
    6708:	8b 54       	subi	r24, 0x4B	; 75
    670a:	9f 4f       	sbci	r25, 0xFF	; 255
    670c:	fc 01       	movw	r30, r24
    670e:	20 83       	st	Z, r18
    6710:	31 83       	std	Z+1, r19	; 0x01
    6712:	8f e0       	ldi	r24, 0x0F	; 15
    6714:	95 e0       	ldi	r25, 0x05	; 5
    6716:	8c 83       	std	Y+4, r24	; 0x04
    6718:	9d 83       	std	Y+5, r25	; 0x05
    671a:	8c 81       	ldd	r24, Y+4	; 0x04
    671c:	9d 81       	ldd	r25, Y+5	; 0x05
    671e:	bc 01       	movw	r22, r24
    6720:	82 e0       	ldi	r24, 0x02	; 2
    6722:	0e 94 f3 59 	call	0xb3e6	; 0xb3e6 <debug_function_in_name_print_P>
    6726:	19 82       	std	Y+1, r1	; 0x01
    6728:	ce 01       	movw	r24, r28
    672a:	8b 54       	subi	r24, 0x4B	; 75
    672c:	9f 4f       	sbci	r25, 0xFF	; 255
    672e:	fc 01       	movw	r30, r24
    6730:	80 81       	ld	r24, Z
    6732:	91 81       	ldd	r25, Z+1	; 0x01
    6734:	00 97       	sbiw	r24, 0x00	; 0
    6736:	49 f4       	brne	.+18     	; 0x674a <dl_search_record_by_date+0x6e>
    6738:	88 e2       	ldi	r24, 0x28	; 40
    673a:	95 e0       	ldi	r25, 0x05	; 5
    673c:	bc 01       	movw	r22, r24
    673e:	81 e0       	ldi	r24, 0x01	; 1
    6740:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    6744:	8f ef       	ldi	r24, 0xFF	; 255
    6746:	89 83       	std	Y+1, r24	; 0x01
    6748:	19 c2       	rjmp	.+1074   	; 0x6b7c <dl_search_record_by_date+0x4a0>
    674a:	20 91 8a 21 	lds	r18, 0x218A
    674e:	30 91 8b 21 	lds	r19, 0x218B
    6752:	40 91 8c 21 	lds	r20, 0x218C
    6756:	50 91 8d 21 	lds	r21, 0x218D
    675a:	80 91 86 21 	lds	r24, 0x2186
    675e:	90 91 87 21 	lds	r25, 0x2187
    6762:	a0 91 88 21 	lds	r26, 0x2188
    6766:	b0 91 89 21 	lds	r27, 0x2189
    676a:	28 17       	cp	r18, r24
    676c:	39 07       	cpc	r19, r25
    676e:	4a 07       	cpc	r20, r26
    6770:	5b 07       	cpc	r21, r27
    6772:	49 f4       	brne	.+18     	; 0x6786 <dl_search_record_by_date+0xaa>
    6774:	83 e6       	ldi	r24, 0x63	; 99
    6776:	95 e0       	ldi	r25, 0x05	; 5
    6778:	bc 01       	movw	r22, r24
    677a:	81 e0       	ldi	r24, 0x01	; 1
    677c:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    6780:	81 e0       	ldi	r24, 0x01	; 1
    6782:	89 83       	std	Y+1, r24	; 0x01
    6784:	fb c1       	rjmp	.+1014   	; 0x6b7c <dl_search_record_by_date+0x4a0>
    6786:	0e 94 55 45 	call	0x8aaa	; 0x8aaa <AT24CXX_Init>
    678a:	00 97       	sbiw	r24, 0x00	; 0
    678c:	49 f0       	breq	.+18     	; 0x67a0 <dl_search_record_by_date+0xc4>
    678e:	87 ea       	ldi	r24, 0xA7	; 167
    6790:	95 e0       	ldi	r25, 0x05	; 5
    6792:	bc 01       	movw	r22, r24
    6794:	81 e0       	ldi	r24, 0x01	; 1
    6796:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    679a:	8f ef       	ldi	r24, 0xFF	; 255
    679c:	89 83       	std	Y+1, r24	; 0x01
    679e:	ee c1       	rjmp	.+988    	; 0x6b7c <dl_search_record_by_date+0x4a0>
    67a0:	9e 01       	movw	r18, r28
    67a2:	24 55       	subi	r18, 0x54	; 84
    67a4:	3f 4f       	sbci	r19, 0xFF	; 255
    67a6:	80 91 8a 21 	lds	r24, 0x218A
    67aa:	90 91 8b 21 	lds	r25, 0x218B
    67ae:	a0 91 8c 21 	lds	r26, 0x218C
    67b2:	b0 91 8d 21 	lds	r27, 0x218D
    67b6:	f9 01       	movw	r30, r18
    67b8:	80 83       	st	Z, r24
    67ba:	91 83       	std	Z+1, r25	; 0x01
    67bc:	a2 83       	std	Z+2, r26	; 0x02
    67be:	b3 83       	std	Z+3, r27	; 0x03
    67c0:	ce 01       	movw	r24, r28
    67c2:	84 55       	subi	r24, 0x54	; 84
    67c4:	9f 4f       	sbci	r25, 0xFF	; 255
    67c6:	61 e0       	ldi	r22, 0x01	; 1
    67c8:	70 e0       	ldi	r23, 0x00	; 0
    67ca:	ee db       	rcall	.-2084   	; 0x5fa8 <dl_iterator_moveback_with_cap>
    67cc:	80 e8       	ldi	r24, 0x80	; 128
    67ce:	8a 83       	std	Y+2, r24	; 0x02
    67d0:	1b 82       	std	Y+3, r1	; 0x03
    67d2:	9e 01       	movw	r18, r28
    67d4:	2a 57       	subi	r18, 0x7A	; 122
    67d6:	3f 4f       	sbci	r19, 0xFF	; 255
    67d8:	ce 01       	movw	r24, r28
    67da:	84 55       	subi	r24, 0x54	; 84
    67dc:	9f 4f       	sbci	r25, 0xFF	; 255
    67de:	b9 01       	movw	r22, r18
    67e0:	6c de       	rcall	.-808    	; 0x64ba <dl_get_record>
    67e2:	88 23       	and	r24, r24
    67e4:	19 f0       	breq	.+6      	; 0x67ec <dl_search_record_by_date+0x110>
    67e6:	81 e0       	ldi	r24, 0x01	; 1
    67e8:	89 83       	std	Y+1, r24	; 0x01
    67ea:	c8 c1       	rjmp	.+912    	; 0x6b7c <dl_search_record_by_date+0x4a0>
    67ec:	80 91 1d 20 	lds	r24, 0x201D
    67f0:	82 30       	cpi	r24, 0x02	; 2
    67f2:	b8 f1       	brcs	.+110    	; 0x6862 <dl_search_record_by_date+0x186>
    67f4:	ce 01       	movw	r24, r28
    67f6:	8a 57       	subi	r24, 0x7A	; 122
    67f8:	9f 4f       	sbci	r25, 0xFF	; 255
    67fa:	fc 01       	movw	r30, r24
    67fc:	80 81       	ld	r24, Z
    67fe:	91 81       	ldd	r25, Z+1	; 0x01
    6800:	a2 81       	ldd	r26, Z+2	; 0x02
    6802:	b3 81       	ldd	r27, Z+3	; 0x03
    6804:	20 ef       	ldi	r18, 0xF0	; 240
    6806:	35 e0       	ldi	r19, 0x05	; 5
    6808:	4b 2f       	mov	r20, r27
    680a:	4f 93       	push	r20
    680c:	4a 2f       	mov	r20, r26
    680e:	4f 93       	push	r20
    6810:	49 2f       	mov	r20, r25
    6812:	4f 93       	push	r20
    6814:	8f 93       	push	r24
    6816:	ce 01       	movw	r24, r28
    6818:	80 55       	subi	r24, 0x50	; 80
    681a:	9f 4f       	sbci	r25, 0xFF	; 255
    681c:	fc 01       	movw	r30, r24
    681e:	43 81       	ldd	r20, Z+3	; 0x03
    6820:	4f 93       	push	r20
    6822:	fc 01       	movw	r30, r24
    6824:	42 81       	ldd	r20, Z+2	; 0x02
    6826:	4f 93       	push	r20
    6828:	fc 01       	movw	r30, r24
    682a:	41 81       	ldd	r20, Z+1	; 0x01
    682c:	4f 93       	push	r20
    682e:	fc 01       	movw	r30, r24
    6830:	80 81       	ld	r24, Z
    6832:	8f 93       	push	r24
    6834:	83 2f       	mov	r24, r19
    6836:	8f 93       	push	r24
    6838:	82 2f       	mov	r24, r18
    683a:	8f 93       	push	r24
    683c:	ce 01       	movw	r24, r28
    683e:	06 96       	adiw	r24, 0x06	; 6
    6840:	29 2f       	mov	r18, r25
    6842:	2f 93       	push	r18
    6844:	8f 93       	push	r24
    6846:	0e 94 b5 74 	call	0xe96a	; 0xe96a <sprintf_P>
    684a:	8d b7       	in	r24, 0x3d	; 61
    684c:	9e b7       	in	r25, 0x3e	; 62
    684e:	0c 96       	adiw	r24, 0x0c	; 12
    6850:	cd bf       	out	0x3d, r28	; 61
    6852:	de bf       	out	0x3e, r29	; 62
    6854:	ce 01       	movw	r24, r28
    6856:	06 96       	adiw	r24, 0x06	; 6
    6858:	40 e0       	ldi	r20, 0x00	; 0
    685a:	bc 01       	movw	r22, r24
    685c:	81 e0       	ldi	r24, 0x01	; 1
    685e:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    6862:	8b 81       	ldd	r24, Y+3	; 0x03
    6864:	88 23       	and	r24, r24
    6866:	b9 f5       	brne	.+110    	; 0x68d6 <dl_search_record_by_date+0x1fa>
    6868:	ce 01       	movw	r24, r28
    686a:	8a 57       	subi	r24, 0x7A	; 122
    686c:	9f 4f       	sbci	r25, 0xFF	; 255
    686e:	fc 01       	movw	r30, r24
    6870:	20 81       	ld	r18, Z
    6872:	31 81       	ldd	r19, Z+1	; 0x01
    6874:	42 81       	ldd	r20, Z+2	; 0x02
    6876:	53 81       	ldd	r21, Z+3	; 0x03
    6878:	ce 01       	movw	r24, r28
    687a:	80 55       	subi	r24, 0x50	; 80
    687c:	9f 4f       	sbci	r25, 0xFF	; 255
    687e:	fc 01       	movw	r30, r24
    6880:	80 81       	ld	r24, Z
    6882:	91 81       	ldd	r25, Z+1	; 0x01
    6884:	a2 81       	ldd	r26, Z+2	; 0x02
    6886:	b3 81       	ldd	r27, Z+3	; 0x03
    6888:	28 17       	cp	r18, r24
    688a:	39 07       	cpc	r19, r25
    688c:	4a 07       	cpc	r20, r26
    688e:	5b 07       	cpc	r21, r27
    6890:	60 f4       	brcc	.+24     	; 0x68aa <dl_search_record_by_date+0x1ce>
    6892:	86 e1       	ldi	r24, 0x16	; 22
    6894:	96 e0       	ldi	r25, 0x06	; 6
    6896:	bc 01       	movw	r22, r24
    6898:	82 e0       	ldi	r24, 0x02	; 2
    689a:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    689e:	8a 81       	ldd	r24, Y+2	; 0x02
    68a0:	86 95       	lsr	r24
    68a2:	8a 83       	std	Y+2, r24	; 0x02
    68a4:	81 e0       	ldi	r24, 0x01	; 1
    68a6:	8b 83       	std	Y+3, r24	; 0x03
    68a8:	4b c0       	rjmp	.+150    	; 0x6940 <dl_search_record_by_date+0x264>
    68aa:	ce 01       	movw	r24, r28
    68ac:	8a 57       	subi	r24, 0x7A	; 122
    68ae:	9f 4f       	sbci	r25, 0xFF	; 255
    68b0:	fc 01       	movw	r30, r24
    68b2:	20 81       	ld	r18, Z
    68b4:	31 81       	ldd	r19, Z+1	; 0x01
    68b6:	42 81       	ldd	r20, Z+2	; 0x02
    68b8:	53 81       	ldd	r21, Z+3	; 0x03
    68ba:	ce 01       	movw	r24, r28
    68bc:	80 55       	subi	r24, 0x50	; 80
    68be:	9f 4f       	sbci	r25, 0xFF	; 255
    68c0:	fc 01       	movw	r30, r24
    68c2:	80 81       	ld	r24, Z
    68c4:	91 81       	ldd	r25, Z+1	; 0x01
    68c6:	a2 81       	ldd	r26, Z+2	; 0x02
    68c8:	b3 81       	ldd	r27, Z+3	; 0x03
    68ca:	28 17       	cp	r18, r24
    68cc:	39 07       	cpc	r19, r25
    68ce:	4a 07       	cpc	r20, r26
    68d0:	5b 07       	cpc	r21, r27
    68d2:	b1 f5       	brne	.+108    	; 0x6940 <dl_search_record_by_date+0x264>
    68d4:	7a c0       	rjmp	.+244    	; 0x69ca <dl_search_record_by_date+0x2ee>
    68d6:	ce 01       	movw	r24, r28
    68d8:	8a 57       	subi	r24, 0x7A	; 122
    68da:	9f 4f       	sbci	r25, 0xFF	; 255
    68dc:	fc 01       	movw	r30, r24
    68de:	20 81       	ld	r18, Z
    68e0:	31 81       	ldd	r19, Z+1	; 0x01
    68e2:	42 81       	ldd	r20, Z+2	; 0x02
    68e4:	53 81       	ldd	r21, Z+3	; 0x03
    68e6:	ce 01       	movw	r24, r28
    68e8:	80 55       	subi	r24, 0x50	; 80
    68ea:	9f 4f       	sbci	r25, 0xFF	; 255
    68ec:	fc 01       	movw	r30, r24
    68ee:	80 81       	ld	r24, Z
    68f0:	91 81       	ldd	r25, Z+1	; 0x01
    68f2:	a2 81       	ldd	r26, Z+2	; 0x02
    68f4:	b3 81       	ldd	r27, Z+3	; 0x03
    68f6:	28 17       	cp	r18, r24
    68f8:	39 07       	cpc	r19, r25
    68fa:	4a 07       	cpc	r20, r26
    68fc:	5b 07       	cpc	r21, r27
    68fe:	09 f4       	brne	.+2      	; 0x6902 <dl_search_record_by_date+0x226>
    6900:	61 c0       	rjmp	.+194    	; 0x69c4 <dl_search_record_by_date+0x2e8>
    6902:	ce 01       	movw	r24, r28
    6904:	8a 57       	subi	r24, 0x7A	; 122
    6906:	9f 4f       	sbci	r25, 0xFF	; 255
    6908:	fc 01       	movw	r30, r24
    690a:	20 81       	ld	r18, Z
    690c:	31 81       	ldd	r19, Z+1	; 0x01
    690e:	42 81       	ldd	r20, Z+2	; 0x02
    6910:	53 81       	ldd	r21, Z+3	; 0x03
    6912:	ce 01       	movw	r24, r28
    6914:	80 55       	subi	r24, 0x50	; 80
    6916:	9f 4f       	sbci	r25, 0xFF	; 255
    6918:	fc 01       	movw	r30, r24
    691a:	80 81       	ld	r24, Z
    691c:	91 81       	ldd	r25, Z+1	; 0x01
    691e:	a2 81       	ldd	r26, Z+2	; 0x02
    6920:	b3 81       	ldd	r27, Z+3	; 0x03
    6922:	82 17       	cp	r24, r18
    6924:	93 07       	cpc	r25, r19
    6926:	a4 07       	cpc	r26, r20
    6928:	b5 07       	cpc	r27, r21
    692a:	50 f4       	brcc	.+20     	; 0x6940 <dl_search_record_by_date+0x264>
    692c:	87 e3       	ldi	r24, 0x37	; 55
    692e:	96 e0       	ldi	r25, 0x06	; 6
    6930:	bc 01       	movw	r22, r24
    6932:	82 e0       	ldi	r24, 0x02	; 2
    6934:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    6938:	8a 81       	ldd	r24, Y+2	; 0x02
    693a:	86 95       	lsr	r24
    693c:	8a 83       	std	Y+2, r24	; 0x02
    693e:	1b 82       	std	Y+3, r1	; 0x03
    6940:	8a 81       	ldd	r24, Y+2	; 0x02
    6942:	88 23       	and	r24, r24
    6944:	09 f4       	brne	.+2      	; 0x6948 <dl_search_record_by_date+0x26c>
    6946:	40 c0       	rjmp	.+128    	; 0x69c8 <dl_search_record_by_date+0x2ec>
    6948:	8b 81       	ldd	r24, Y+3	; 0x03
    694a:	88 23       	and	r24, r24
    694c:	f1 f4       	brne	.+60     	; 0x698a <dl_search_record_by_date+0x2ae>
    694e:	ce 01       	movw	r24, r28
    6950:	84 55       	subi	r24, 0x54	; 84
    6952:	9f 4f       	sbci	r25, 0xFF	; 255
    6954:	fc 01       	movw	r30, r24
    6956:	80 81       	ld	r24, Z
    6958:	91 81       	ldd	r25, Z+1	; 0x01
    695a:	a2 81       	ldd	r26, Z+2	; 0x02
    695c:	b3 81       	ldd	r27, Z+3	; 0x03
    695e:	81 15       	cp	r24, r1
    6960:	f1 e0       	ldi	r31, 0x01	; 1
    6962:	9f 07       	cpc	r25, r31
    6964:	a1 05       	cpc	r26, r1
    6966:	b1 05       	cpc	r27, r1
    6968:	39 f4       	brne	.+14     	; 0x6978 <dl_search_record_by_date+0x29c>
    696a:	88 e5       	ldi	r24, 0x58	; 88
    696c:	96 e0       	ldi	r25, 0x06	; 6
    696e:	bc 01       	movw	r22, r24
    6970:	82 e0       	ldi	r24, 0x02	; 2
    6972:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    6976:	29 c0       	rjmp	.+82     	; 0x69ca <dl_search_record_by_date+0x2ee>
    6978:	8a 81       	ldd	r24, Y+2	; 0x02
    697a:	28 2f       	mov	r18, r24
    697c:	30 e0       	ldi	r19, 0x00	; 0
    697e:	ce 01       	movw	r24, r28
    6980:	84 55       	subi	r24, 0x54	; 84
    6982:	9f 4f       	sbci	r25, 0xFF	; 255
    6984:	b9 01       	movw	r22, r18
    6986:	10 db       	rcall	.-2528   	; 0x5fa8 <dl_iterator_moveback_with_cap>
    6988:	24 cf       	rjmp	.-440    	; 0x67d2 <dl_search_record_by_date+0xf6>
    698a:	ce 01       	movw	r24, r28
    698c:	84 55       	subi	r24, 0x54	; 84
    698e:	9f 4f       	sbci	r25, 0xFF	; 255
    6990:	fc 01       	movw	r30, r24
    6992:	80 81       	ld	r24, Z
    6994:	91 81       	ldd	r25, Z+1	; 0x01
    6996:	a2 81       	ldd	r26, Z+2	; 0x02
    6998:	b3 81       	ldd	r27, Z+3	; 0x03
    699a:	00 97       	sbiw	r24, 0x00	; 0
    699c:	f8 e0       	ldi	r31, 0x08	; 8
    699e:	af 07       	cpc	r26, r31
    69a0:	b1 05       	cpc	r27, r1
    69a2:	39 f4       	brne	.+14     	; 0x69b2 <dl_search_record_by_date+0x2d6>
    69a4:	8a e7       	ldi	r24, 0x7A	; 122
    69a6:	96 e0       	ldi	r25, 0x06	; 6
    69a8:	bc 01       	movw	r22, r24
    69aa:	82 e0       	ldi	r24, 0x02	; 2
    69ac:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    69b0:	0c c0       	rjmp	.+24     	; 0x69ca <dl_search_record_by_date+0x2ee>
    69b2:	8a 81       	ldd	r24, Y+2	; 0x02
    69b4:	28 2f       	mov	r18, r24
    69b6:	30 e0       	ldi	r19, 0x00	; 0
    69b8:	ce 01       	movw	r24, r28
    69ba:	84 55       	subi	r24, 0x54	; 84
    69bc:	9f 4f       	sbci	r25, 0xFF	; 255
    69be:	b9 01       	movw	r22, r18
    69c0:	b0 db       	rcall	.-2208   	; 0x6122 <dl_iterator_moveforward_with_cap>
    69c2:	07 cf       	rjmp	.-498    	; 0x67d2 <dl_search_record_by_date+0xf6>
    69c4:	00 00       	nop
    69c6:	01 c0       	rjmp	.+2      	; 0x69ca <dl_search_record_by_date+0x2ee>
    69c8:	00 00       	nop
    69ca:	ce 01       	movw	r24, r28
    69cc:	8a 57       	subi	r24, 0x7A	; 122
    69ce:	9f 4f       	sbci	r25, 0xFF	; 255
    69d0:	fc 01       	movw	r30, r24
    69d2:	20 81       	ld	r18, Z
    69d4:	31 81       	ldd	r19, Z+1	; 0x01
    69d6:	42 81       	ldd	r20, Z+2	; 0x02
    69d8:	53 81       	ldd	r21, Z+3	; 0x03
    69da:	ce 01       	movw	r24, r28
    69dc:	80 55       	subi	r24, 0x50	; 80
    69de:	9f 4f       	sbci	r25, 0xFF	; 255
    69e0:	fc 01       	movw	r30, r24
    69e2:	80 81       	ld	r24, Z
    69e4:	91 81       	ldd	r25, Z+1	; 0x01
    69e6:	a2 81       	ldd	r26, Z+2	; 0x02
    69e8:	b3 81       	ldd	r27, Z+3	; 0x03
    69ea:	28 17       	cp	r18, r24
    69ec:	39 07       	cpc	r19, r25
    69ee:	4a 07       	cpc	r20, r26
    69f0:	5b 07       	cpc	r21, r27
    69f2:	40 f5       	brcc	.+80     	; 0x6a44 <dl_search_record_by_date+0x368>
    69f4:	ce 01       	movw	r24, r28
    69f6:	8c 54       	subi	r24, 0x4C	; 76
    69f8:	9f 4f       	sbci	r25, 0xFF	; 255
    69fa:	fc 01       	movw	r30, r24
    69fc:	80 81       	ld	r24, Z
    69fe:	88 23       	and	r24, r24
    6a00:	19 f4       	brne	.+6      	; 0x6a08 <dl_search_record_by_date+0x32c>
    6a02:	81 e0       	ldi	r24, 0x01	; 1
    6a04:	89 83       	std	Y+1, r24	; 0x01
    6a06:	ba c0       	rjmp	.+372    	; 0x6b7c <dl_search_record_by_date+0x4a0>
    6a08:	ce 01       	movw	r24, r28
    6a0a:	8c 54       	subi	r24, 0x4C	; 76
    6a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    6a0e:	fc 01       	movw	r30, r24
    6a10:	80 81       	ld	r24, Z
    6a12:	82 30       	cpi	r24, 0x02	; 2
    6a14:	19 f4       	brne	.+6      	; 0x6a1c <dl_search_record_by_date+0x340>
    6a16:	81 e0       	ldi	r24, 0x01	; 1
    6a18:	89 83       	std	Y+1, r24	; 0x01
    6a1a:	b0 c0       	rjmp	.+352    	; 0x6b7c <dl_search_record_by_date+0x4a0>
    6a1c:	ce 01       	movw	r24, r28
    6a1e:	84 55       	subi	r24, 0x54	; 84
    6a20:	9f 4f       	sbci	r25, 0xFF	; 255
    6a22:	fc 01       	movw	r30, r24
    6a24:	80 81       	ld	r24, Z
    6a26:	91 81       	ldd	r25, Z+1	; 0x01
    6a28:	a2 81       	ldd	r26, Z+2	; 0x02
    6a2a:	b3 81       	ldd	r27, Z+3	; 0x03
    6a2c:	9e 01       	movw	r18, r28
    6a2e:	2b 54       	subi	r18, 0x4B	; 75
    6a30:	3f 4f       	sbci	r19, 0xFF	; 255
    6a32:	f9 01       	movw	r30, r18
    6a34:	20 81       	ld	r18, Z
    6a36:	31 81       	ldd	r19, Z+1	; 0x01
    6a38:	f9 01       	movw	r30, r18
    6a3a:	80 83       	st	Z, r24
    6a3c:	91 83       	std	Z+1, r25	; 0x01
    6a3e:	a2 83       	std	Z+2, r26	; 0x02
    6a40:	b3 83       	std	Z+3, r27	; 0x03
    6a42:	65 c0       	rjmp	.+202    	; 0x6b0e <dl_search_record_by_date+0x432>
    6a44:	ce 01       	movw	r24, r28
    6a46:	8a 57       	subi	r24, 0x7A	; 122
    6a48:	9f 4f       	sbci	r25, 0xFF	; 255
    6a4a:	fc 01       	movw	r30, r24
    6a4c:	20 81       	ld	r18, Z
    6a4e:	31 81       	ldd	r19, Z+1	; 0x01
    6a50:	42 81       	ldd	r20, Z+2	; 0x02
    6a52:	53 81       	ldd	r21, Z+3	; 0x03
    6a54:	ce 01       	movw	r24, r28
    6a56:	80 55       	subi	r24, 0x50	; 80
    6a58:	9f 4f       	sbci	r25, 0xFF	; 255
    6a5a:	fc 01       	movw	r30, r24
    6a5c:	80 81       	ld	r24, Z
    6a5e:	91 81       	ldd	r25, Z+1	; 0x01
    6a60:	a2 81       	ldd	r26, Z+2	; 0x02
    6a62:	b3 81       	ldd	r27, Z+3	; 0x03
    6a64:	28 17       	cp	r18, r24
    6a66:	39 07       	cpc	r19, r25
    6a68:	4a 07       	cpc	r20, r26
    6a6a:	5b 07       	cpc	r21, r27
    6a6c:	a1 f4       	brne	.+40     	; 0x6a96 <dl_search_record_by_date+0x3ba>
    6a6e:	ce 01       	movw	r24, r28
    6a70:	84 55       	subi	r24, 0x54	; 84
    6a72:	9f 4f       	sbci	r25, 0xFF	; 255
    6a74:	fc 01       	movw	r30, r24
    6a76:	80 81       	ld	r24, Z
    6a78:	91 81       	ldd	r25, Z+1	; 0x01
    6a7a:	a2 81       	ldd	r26, Z+2	; 0x02
    6a7c:	b3 81       	ldd	r27, Z+3	; 0x03
    6a7e:	9e 01       	movw	r18, r28
    6a80:	2b 54       	subi	r18, 0x4B	; 75
    6a82:	3f 4f       	sbci	r19, 0xFF	; 255
    6a84:	f9 01       	movw	r30, r18
    6a86:	20 81       	ld	r18, Z
    6a88:	31 81       	ldd	r19, Z+1	; 0x01
    6a8a:	f9 01       	movw	r30, r18
    6a8c:	80 83       	st	Z, r24
    6a8e:	91 83       	std	Z+1, r25	; 0x01
    6a90:	a2 83       	std	Z+2, r26	; 0x02
    6a92:	b3 83       	std	Z+3, r27	; 0x03
    6a94:	3c c0       	rjmp	.+120    	; 0x6b0e <dl_search_record_by_date+0x432>
    6a96:	ce 01       	movw	r24, r28
    6a98:	8a 57       	subi	r24, 0x7A	; 122
    6a9a:	9f 4f       	sbci	r25, 0xFF	; 255
    6a9c:	fc 01       	movw	r30, r24
    6a9e:	20 81       	ld	r18, Z
    6aa0:	31 81       	ldd	r19, Z+1	; 0x01
    6aa2:	42 81       	ldd	r20, Z+2	; 0x02
    6aa4:	53 81       	ldd	r21, Z+3	; 0x03
    6aa6:	ce 01       	movw	r24, r28
    6aa8:	80 55       	subi	r24, 0x50	; 80
    6aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    6aac:	fc 01       	movw	r30, r24
    6aae:	80 81       	ld	r24, Z
    6ab0:	91 81       	ldd	r25, Z+1	; 0x01
    6ab2:	a2 81       	ldd	r26, Z+2	; 0x02
    6ab4:	b3 81       	ldd	r27, Z+3	; 0x03
    6ab6:	82 17       	cp	r24, r18
    6ab8:	93 07       	cpc	r25, r19
    6aba:	a4 07       	cpc	r26, r20
    6abc:	b5 07       	cpc	r27, r21
    6abe:	38 f5       	brcc	.+78     	; 0x6b0e <dl_search_record_by_date+0x432>
    6ac0:	ce 01       	movw	r24, r28
    6ac2:	8c 54       	subi	r24, 0x4C	; 76
    6ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    6ac6:	fc 01       	movw	r30, r24
    6ac8:	80 81       	ld	r24, Z
    6aca:	81 30       	cpi	r24, 0x01	; 1
    6acc:	19 f4       	brne	.+6      	; 0x6ad4 <dl_search_record_by_date+0x3f8>
    6ace:	81 e0       	ldi	r24, 0x01	; 1
    6ad0:	89 83       	std	Y+1, r24	; 0x01
    6ad2:	54 c0       	rjmp	.+168    	; 0x6b7c <dl_search_record_by_date+0x4a0>
    6ad4:	ce 01       	movw	r24, r28
    6ad6:	8c 54       	subi	r24, 0x4C	; 76
    6ad8:	9f 4f       	sbci	r25, 0xFF	; 255
    6ada:	fc 01       	movw	r30, r24
    6adc:	80 81       	ld	r24, Z
    6ade:	82 30       	cpi	r24, 0x02	; 2
    6ae0:	19 f4       	brne	.+6      	; 0x6ae8 <dl_search_record_by_date+0x40c>
    6ae2:	81 e0       	ldi	r24, 0x01	; 1
    6ae4:	89 83       	std	Y+1, r24	; 0x01
    6ae6:	4a c0       	rjmp	.+148    	; 0x6b7c <dl_search_record_by_date+0x4a0>
    6ae8:	ce 01       	movw	r24, r28
    6aea:	84 55       	subi	r24, 0x54	; 84
    6aec:	9f 4f       	sbci	r25, 0xFF	; 255
    6aee:	fc 01       	movw	r30, r24
    6af0:	80 81       	ld	r24, Z
    6af2:	91 81       	ldd	r25, Z+1	; 0x01
    6af4:	a2 81       	ldd	r26, Z+2	; 0x02
    6af6:	b3 81       	ldd	r27, Z+3	; 0x03
    6af8:	9e 01       	movw	r18, r28
    6afa:	2b 54       	subi	r18, 0x4B	; 75
    6afc:	3f 4f       	sbci	r19, 0xFF	; 255
    6afe:	f9 01       	movw	r30, r18
    6b00:	20 81       	ld	r18, Z
    6b02:	31 81       	ldd	r19, Z+1	; 0x01
    6b04:	f9 01       	movw	r30, r18
    6b06:	80 83       	st	Z, r24
    6b08:	91 83       	std	Z+1, r25	; 0x01
    6b0a:	a2 83       	std	Z+2, r26	; 0x02
    6b0c:	b3 83       	std	Z+3, r27	; 0x03
    6b0e:	80 91 1d 20 	lds	r24, 0x201D
    6b12:	88 23       	and	r24, r24
    6b14:	99 f1       	breq	.+102    	; 0x6b7c <dl_search_record_by_date+0x4a0>
    6b16:	8b e9       	ldi	r24, 0x9B	; 155
    6b18:	96 e0       	ldi	r25, 0x06	; 6
    6b1a:	bc 01       	movw	r22, r24
    6b1c:	81 e0       	ldi	r24, 0x01	; 1
    6b1e:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    6b22:	ce 01       	movw	r24, r28
    6b24:	84 55       	subi	r24, 0x54	; 84
    6b26:	9f 4f       	sbci	r25, 0xFF	; 255
    6b28:	0e 94 d2 45 	call	0x8ba4	; 0x8ba4 <AT24CXX_iterator_report>
    6b2c:	ce 01       	movw	r24, r28
    6b2e:	8a 57       	subi	r24, 0x7A	; 122
    6b30:	9f 4f       	sbci	r25, 0xFF	; 255
    6b32:	fc 01       	movw	r30, r24
    6b34:	80 81       	ld	r24, Z
    6b36:	91 81       	ldd	r25, Z+1	; 0x01
    6b38:	a2 81       	ldd	r26, Z+2	; 0x02
    6b3a:	b3 81       	ldd	r27, Z+3	; 0x03
    6b3c:	2a ea       	ldi	r18, 0xAA	; 170
    6b3e:	36 e0       	ldi	r19, 0x06	; 6
    6b40:	4b 2f       	mov	r20, r27
    6b42:	4f 93       	push	r20
    6b44:	4a 2f       	mov	r20, r26
    6b46:	4f 93       	push	r20
    6b48:	49 2f       	mov	r20, r25
    6b4a:	4f 93       	push	r20
    6b4c:	8f 93       	push	r24
    6b4e:	83 2f       	mov	r24, r19
    6b50:	8f 93       	push	r24
    6b52:	82 2f       	mov	r24, r18
    6b54:	8f 93       	push	r24
    6b56:	ce 01       	movw	r24, r28
    6b58:	06 96       	adiw	r24, 0x06	; 6
    6b5a:	29 2f       	mov	r18, r25
    6b5c:	2f 93       	push	r18
    6b5e:	8f 93       	push	r24
    6b60:	0e 94 b5 74 	call	0xe96a	; 0xe96a <sprintf_P>
    6b64:	8d b7       	in	r24, 0x3d	; 61
    6b66:	9e b7       	in	r25, 0x3e	; 62
    6b68:	08 96       	adiw	r24, 0x08	; 8
    6b6a:	cd bf       	out	0x3d, r28	; 61
    6b6c:	de bf       	out	0x3e, r29	; 62
    6b6e:	ce 01       	movw	r24, r28
    6b70:	06 96       	adiw	r24, 0x06	; 6
    6b72:	40 e0       	ldi	r20, 0x00	; 0
    6b74:	bc 01       	movw	r22, r24
    6b76:	81 e0       	ldi	r24, 0x01	; 1
    6b78:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    6b7c:	19 81       	ldd	r17, Y+1	; 0x01
    6b7e:	ce 01       	movw	r24, r28
    6b80:	04 96       	adiw	r24, 0x04	; 4
    6b82:	0e 94 06 5a 	call	0xb40c	; 0xb40c <debug_function_out_name_print_P>
    6b86:	81 2f       	mov	r24, r17
    6b88:	ca 54       	subi	r28, 0x4A	; 74
    6b8a:	df 4f       	sbci	r29, 0xFF	; 255
    6b8c:	cd bf       	out	0x3d, r28	; 61
    6b8e:	de bf       	out	0x3e, r29	; 62
    6b90:	df 91       	pop	r29
    6b92:	cf 91       	pop	r28
    6b94:	1f 91       	pop	r17
    6b96:	08 95       	ret

00006b98 <dl_cmd_get_by_date_range>:
    6b98:	0f 93       	push	r16
    6b9a:	1f 93       	push	r17
    6b9c:	cf 93       	push	r28
    6b9e:	df 93       	push	r29
    6ba0:	cd b7       	in	r28, 0x3d	; 61
    6ba2:	de b7       	in	r29, 0x3e	; 62
    6ba4:	60 97       	sbiw	r28, 0x10	; 16
    6ba6:	cd bf       	out	0x3d, r28	; 61
    6ba8:	de bf       	out	0x3e, r29	; 62
    6baa:	69 87       	std	Y+9, r22	; 0x09
    6bac:	7a 87       	std	Y+10, r23	; 0x0a
    6bae:	8b 87       	std	Y+11, r24	; 0x0b
    6bb0:	9c 87       	std	Y+12, r25	; 0x0c
    6bb2:	2d 87       	std	Y+13, r18	; 0x0d
    6bb4:	3e 87       	std	Y+14, r19	; 0x0e
    6bb6:	4f 87       	std	Y+15, r20	; 0x0f
    6bb8:	58 8b       	std	Y+16, r21	; 0x10
    6bba:	86 ef       	ldi	r24, 0xF6	; 246
    6bbc:	94 e0       	ldi	r25, 0x04	; 4
    6bbe:	8b 83       	std	Y+3, r24	; 0x03
    6bc0:	9c 83       	std	Y+4, r25	; 0x04
    6bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    6bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    6bc6:	bc 01       	movw	r22, r24
    6bc8:	82 e0       	ldi	r24, 0x02	; 2
    6bca:	0e 94 f3 59 	call	0xb3e6	; 0xb3e6 <debug_function_in_name_print_P>
    6bce:	1d 82       	std	Y+5, r1	; 0x05
    6bd0:	1e 82       	std	Y+6, r1	; 0x06
    6bd2:	1f 82       	std	Y+7, r1	; 0x07
    6bd4:	18 86       	std	Y+8, r1	; 0x08
    6bd6:	9e 01       	movw	r18, r28
    6bd8:	2b 5f       	subi	r18, 0xFB	; 251
    6bda:	3f 4f       	sbci	r19, 0xFF	; 255
    6bdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    6bde:	9e 85       	ldd	r25, Y+14	; 0x0e
    6be0:	af 85       	ldd	r26, Y+15	; 0x0f
    6be2:	b8 89       	ldd	r27, Y+16	; 0x10
    6be4:	41 e0       	ldi	r20, 0x01	; 1
    6be6:	bc 01       	movw	r22, r24
    6be8:	cd 01       	movw	r24, r26
    6bea:	78 dd       	rcall	.-1296   	; 0x66dc <dl_search_record_by_date>
    6bec:	88 2f       	mov	r24, r24
    6bee:	90 e0       	ldi	r25, 0x00	; 0
    6bf0:	89 83       	std	Y+1, r24	; 0x01
    6bf2:	9a 83       	std	Y+2, r25	; 0x02
    6bf4:	89 81       	ldd	r24, Y+1	; 0x01
    6bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    6bf8:	00 97       	sbiw	r24, 0x00	; 0
    6bfa:	f1 f4       	brne	.+60     	; 0x6c38 <dl_cmd_get_by_date_range+0xa0>
    6bfc:	8d 81       	ldd	r24, Y+5	; 0x05
    6bfe:	9e 81       	ldd	r25, Y+6	; 0x06
    6c00:	af 81       	ldd	r26, Y+7	; 0x07
    6c02:	b8 85       	ldd	r27, Y+8	; 0x08
    6c04:	80 93 97 21 	sts	0x2197, r24
    6c08:	90 93 98 21 	sts	0x2198, r25
    6c0c:	a0 93 99 21 	sts	0x2199, r26
    6c10:	b0 93 9a 21 	sts	0x219A, r27
    6c14:	89 85       	ldd	r24, Y+9	; 0x09
    6c16:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c18:	ab 85       	ldd	r26, Y+11	; 0x0b
    6c1a:	bc 85       	ldd	r27, Y+12	; 0x0c
    6c1c:	80 93 9b 21 	sts	0x219B, r24
    6c20:	90 93 9c 21 	sts	0x219C, r25
    6c24:	a0 93 9d 21 	sts	0x219D, r26
    6c28:	b0 93 9e 21 	sts	0x219E, r27
    6c2c:	10 92 9f 21 	sts	0x219F, r1
    6c30:	81 e0       	ldi	r24, 0x01	; 1
    6c32:	80 93 85 21 	sts	0x2185, r24
    6c36:	00 00       	nop
    6c38:	09 81       	ldd	r16, Y+1	; 0x01
    6c3a:	1a 81       	ldd	r17, Y+2	; 0x02
    6c3c:	ce 01       	movw	r24, r28
    6c3e:	03 96       	adiw	r24, 0x03	; 3
    6c40:	0e 94 06 5a 	call	0xb40c	; 0xb40c <debug_function_out_name_print_P>
    6c44:	c8 01       	movw	r24, r16
    6c46:	60 96       	adiw	r28, 0x10	; 16
    6c48:	cd bf       	out	0x3d, r28	; 61
    6c4a:	de bf       	out	0x3e, r29	; 62
    6c4c:	df 91       	pop	r29
    6c4e:	cf 91       	pop	r28
    6c50:	1f 91       	pop	r17
    6c52:	0f 91       	pop	r16
    6c54:	08 95       	ret

00006c56 <dl_task_cmd_check_2>:
    6c56:	0f 93       	push	r16
    6c58:	1f 93       	push	r17
    6c5a:	cf 93       	push	r28
    6c5c:	df 93       	push	r29
    6c5e:	cd b7       	in	r28, 0x3d	; 61
    6c60:	de b7       	in	r29, 0x3e	; 62
    6c62:	c2 56       	subi	r28, 0x62	; 98
    6c64:	d1 09       	sbc	r29, r1
    6c66:	cd bf       	out	0x3d, r28	; 61
    6c68:	de bf       	out	0x3e, r29	; 62
    6c6a:	9e 01       	movw	r18, r28
    6c6c:	21 5a       	subi	r18, 0xA1	; 161
    6c6e:	3f 4f       	sbci	r19, 0xFF	; 255
    6c70:	f9 01       	movw	r30, r18
    6c72:	80 83       	st	Z, r24
    6c74:	91 83       	std	Z+1, r25	; 0x01
    6c76:	ce 01       	movw	r24, r28
    6c78:	8f 59       	subi	r24, 0x9F	; 159
    6c7a:	9f 4f       	sbci	r25, 0xFF	; 255
    6c7c:	fc 01       	movw	r30, r24
    6c7e:	60 83       	st	Z, r22
    6c80:	71 83       	std	Z+1, r23	; 0x01
    6c82:	80 e3       	ldi	r24, 0x30	; 48
    6c84:	91 e2       	ldi	r25, 0x21	; 33
    6c86:	8b 87       	std	Y+11, r24	; 0x0b
    6c88:	9c 87       	std	Y+12, r25	; 0x0c
    6c8a:	8b 85       	ldd	r24, Y+11	; 0x0b
    6c8c:	9c 85       	ldd	r25, Y+12	; 0x0c
    6c8e:	bc 01       	movw	r22, r24
    6c90:	82 e0       	ldi	r24, 0x02	; 2
    6c92:	0e 94 de 59 	call	0xb3bc	; 0xb3bc <debug_function_in_name_print>
    6c96:	19 82       	std	Y+1, r1	; 0x01
    6c98:	1a 82       	std	Y+2, r1	; 0x02
    6c9a:	22 e4       	ldi	r18, 0x42	; 66
    6c9c:	34 e0       	ldi	r19, 0x04	; 4
    6c9e:	ce 01       	movw	r24, r28
    6ca0:	81 5a       	subi	r24, 0xA1	; 161
    6ca2:	9f 4f       	sbci	r25, 0xFF	; 255
    6ca4:	fc 01       	movw	r30, r24
    6ca6:	80 81       	ld	r24, Z
    6ca8:	91 81       	ldd	r25, Z+1	; 0x01
    6caa:	42 e0       	ldi	r20, 0x02	; 2
    6cac:	50 e0       	ldi	r21, 0x00	; 0
    6cae:	b9 01       	movw	r22, r18
    6cb0:	0e 94 34 74 	call	0xe868	; 0xe868 <strncasecmp_P>
    6cb4:	00 97       	sbiw	r24, 0x00	; 0
    6cb6:	39 f4       	brne	.+14     	; 0x6cc6 <dl_task_cmd_check_2+0x70>
    6cb8:	85 e4       	ldi	r24, 0x45	; 69
    6cba:	94 e0       	ldi	r25, 0x04	; 4
    6cbc:	bc 01       	movw	r22, r24
    6cbe:	82 e0       	ldi	r24, 0x02	; 2
    6cc0:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    6cc4:	90 c0       	rjmp	.+288    	; 0x6de6 <dl_task_cmd_check_2+0x190>
    6cc6:	2f e4       	ldi	r18, 0x4F	; 79
    6cc8:	34 e0       	ldi	r19, 0x04	; 4
    6cca:	ce 01       	movw	r24, r28
    6ccc:	81 5a       	subi	r24, 0xA1	; 161
    6cce:	9f 4f       	sbci	r25, 0xFF	; 255
    6cd0:	fc 01       	movw	r30, r24
    6cd2:	80 81       	ld	r24, Z
    6cd4:	91 81       	ldd	r25, Z+1	; 0x01
    6cd6:	42 e1       	ldi	r20, 0x12	; 18
    6cd8:	50 e0       	ldi	r21, 0x00	; 0
    6cda:	b9 01       	movw	r22, r18
    6cdc:	0e 94 34 74 	call	0xe868	; 0xe868 <strncasecmp_P>
    6ce0:	00 97       	sbiw	r24, 0x00	; 0
    6ce2:	09 f0       	breq	.+2      	; 0x6ce6 <dl_task_cmd_check_2+0x90>
    6ce4:	64 c0       	rjmp	.+200    	; 0x6dae <dl_task_cmd_check_2+0x158>
    6ce6:	ce 01       	movw	r24, r28
    6ce8:	81 5a       	subi	r24, 0xA1	; 161
    6cea:	9f 4f       	sbci	r25, 0xFF	; 255
    6cec:	fc 01       	movw	r30, r24
    6cee:	80 81       	ld	r24, Z
    6cf0:	91 81       	ldd	r25, Z+1	; 0x01
    6cf2:	42 96       	adiw	r24, 0x12	; 18
    6cf4:	9e 01       	movw	r18, r28
    6cf6:	23 5f       	subi	r18, 0xF3	; 243
    6cf8:	3f 4f       	sbci	r19, 0xFF	; 255
    6cfa:	40 e0       	ldi	r20, 0x00	; 0
    6cfc:	50 e0       	ldi	r21, 0x00	; 0
    6cfe:	b9 01       	movw	r22, r18
    6d00:	0e 94 25 73 	call	0xe64a	; 0xe64a <strtoul>
    6d04:	dc 01       	movw	r26, r24
    6d06:	cb 01       	movw	r24, r22
    6d08:	8b 83       	std	Y+3, r24	; 0x03
    6d0a:	9c 83       	std	Y+4, r25	; 0x04
    6d0c:	ad 83       	std	Y+5, r26	; 0x05
    6d0e:	be 83       	std	Y+6, r27	; 0x06
    6d10:	8d 85       	ldd	r24, Y+13	; 0x0d
    6d12:	9e 85       	ldd	r25, Y+14	; 0x0e
    6d14:	01 96       	adiw	r24, 0x01	; 1
    6d16:	40 e0       	ldi	r20, 0x00	; 0
    6d18:	50 e0       	ldi	r21, 0x00	; 0
    6d1a:	60 e0       	ldi	r22, 0x00	; 0
    6d1c:	70 e0       	ldi	r23, 0x00	; 0
    6d1e:	0e 94 25 73 	call	0xe64a	; 0xe64a <strtoul>
    6d22:	dc 01       	movw	r26, r24
    6d24:	cb 01       	movw	r24, r22
    6d26:	8f 83       	std	Y+7, r24	; 0x07
    6d28:	98 87       	std	Y+8, r25	; 0x08
    6d2a:	a9 87       	std	Y+9, r26	; 0x09
    6d2c:	ba 87       	std	Y+10, r27	; 0x0a
    6d2e:	80 91 1d 20 	lds	r24, 0x201D
    6d32:	82 30       	cpi	r24, 0x02	; 2
    6d34:	70 f1       	brcs	.+92     	; 0x6d92 <dl_task_cmd_check_2+0x13c>
    6d36:	82 e6       	ldi	r24, 0x62	; 98
    6d38:	94 e0       	ldi	r25, 0x04	; 4
    6d3a:	bc 01       	movw	r22, r24
    6d3c:	82 e0       	ldi	r24, 0x02	; 2
    6d3e:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    6d42:	81 e8       	ldi	r24, 0x81	; 129
    6d44:	94 e0       	ldi	r25, 0x04	; 4
    6d46:	2a 85       	ldd	r18, Y+10	; 0x0a
    6d48:	2f 93       	push	r18
    6d4a:	29 85       	ldd	r18, Y+9	; 0x09
    6d4c:	2f 93       	push	r18
    6d4e:	28 85       	ldd	r18, Y+8	; 0x08
    6d50:	2f 93       	push	r18
    6d52:	2f 81       	ldd	r18, Y+7	; 0x07
    6d54:	2f 93       	push	r18
    6d56:	2e 81       	ldd	r18, Y+6	; 0x06
    6d58:	2f 93       	push	r18
    6d5a:	2d 81       	ldd	r18, Y+5	; 0x05
    6d5c:	2f 93       	push	r18
    6d5e:	2c 81       	ldd	r18, Y+4	; 0x04
    6d60:	2f 93       	push	r18
    6d62:	2b 81       	ldd	r18, Y+3	; 0x03
    6d64:	2f 93       	push	r18
    6d66:	29 2f       	mov	r18, r25
    6d68:	2f 93       	push	r18
    6d6a:	8f 93       	push	r24
    6d6c:	ce 01       	movw	r24, r28
    6d6e:	0f 96       	adiw	r24, 0x0f	; 15
    6d70:	29 2f       	mov	r18, r25
    6d72:	2f 93       	push	r18
    6d74:	8f 93       	push	r24
    6d76:	0e 94 b5 74 	call	0xe96a	; 0xe96a <sprintf_P>
    6d7a:	8d b7       	in	r24, 0x3d	; 61
    6d7c:	9e b7       	in	r25, 0x3e	; 62
    6d7e:	0c 96       	adiw	r24, 0x0c	; 12
    6d80:	cd bf       	out	0x3d, r28	; 61
    6d82:	de bf       	out	0x3e, r29	; 62
    6d84:	ce 01       	movw	r24, r28
    6d86:	0f 96       	adiw	r24, 0x0f	; 15
    6d88:	40 e0       	ldi	r20, 0x00	; 0
    6d8a:	bc 01       	movw	r22, r24
    6d8c:	82 e0       	ldi	r24, 0x02	; 2
    6d8e:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    6d92:	2f 81       	ldd	r18, Y+7	; 0x07
    6d94:	38 85       	ldd	r19, Y+8	; 0x08
    6d96:	49 85       	ldd	r20, Y+9	; 0x09
    6d98:	5a 85       	ldd	r21, Y+10	; 0x0a
    6d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    6d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    6d9e:	ad 81       	ldd	r26, Y+5	; 0x05
    6da0:	be 81       	ldd	r27, Y+6	; 0x06
    6da2:	bc 01       	movw	r22, r24
    6da4:	cd 01       	movw	r24, r26
    6da6:	f8 de       	rcall	.-528    	; 0x6b98 <dl_cmd_get_by_date_range>
    6da8:	89 83       	std	Y+1, r24	; 0x01
    6daa:	9a 83       	std	Y+2, r25	; 0x02
    6dac:	1c c0       	rjmp	.+56     	; 0x6de6 <dl_task_cmd_check_2+0x190>
    6dae:	27 e9       	ldi	r18, 0x97	; 151
    6db0:	34 e0       	ldi	r19, 0x04	; 4
    6db2:	ce 01       	movw	r24, r28
    6db4:	81 5a       	subi	r24, 0xA1	; 161
    6db6:	9f 4f       	sbci	r25, 0xFF	; 255
    6db8:	fc 01       	movw	r30, r24
    6dba:	80 81       	ld	r24, Z
    6dbc:	91 81       	ldd	r25, Z+1	; 0x01
    6dbe:	42 e0       	ldi	r20, 0x02	; 2
    6dc0:	50 e0       	ldi	r21, 0x00	; 0
    6dc2:	b9 01       	movw	r22, r18
    6dc4:	0e 94 34 74 	call	0xe868	; 0xe868 <strncasecmp_P>
    6dc8:	00 97       	sbiw	r24, 0x00	; 0
    6dca:	39 f4       	brne	.+14     	; 0x6dda <dl_task_cmd_check_2+0x184>
    6dcc:	8a e9       	ldi	r24, 0x9A	; 154
    6dce:	94 e0       	ldi	r25, 0x04	; 4
    6dd0:	bc 01       	movw	r22, r24
    6dd2:	82 e0       	ldi	r24, 0x02	; 2
    6dd4:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    6dd8:	06 c0       	rjmp	.+12     	; 0x6de6 <dl_task_cmd_check_2+0x190>
    6dda:	84 ec       	ldi	r24, 0xC4	; 196
    6ddc:	94 e0       	ldi	r25, 0x04	; 4
    6dde:	bc 01       	movw	r22, r24
    6de0:	82 e0       	ldi	r24, 0x02	; 2
    6de2:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    6de6:	09 81       	ldd	r16, Y+1	; 0x01
    6de8:	1a 81       	ldd	r17, Y+2	; 0x02
    6dea:	ce 01       	movw	r24, r28
    6dec:	0b 96       	adiw	r24, 0x0b	; 11
    6dee:	0e 94 ca 59 	call	0xb394	; 0xb394 <debug_function_out_name_print>
    6df2:	c8 01       	movw	r24, r16
    6df4:	ce 59       	subi	r28, 0x9E	; 158
    6df6:	df 4f       	sbci	r29, 0xFF	; 255
    6df8:	cd bf       	out	0x3d, r28	; 61
    6dfa:	de bf       	out	0x3e, r29	; 62
    6dfc:	df 91       	pop	r29
    6dfe:	cf 91       	pop	r28
    6e00:	1f 91       	pop	r17
    6e02:	0f 91       	pop	r16
    6e04:	08 95       	ret

00006e06 <dl_task_cmd_check_1>:
    6e06:	cf 92       	push	r12
    6e08:	df 92       	push	r13
    6e0a:	ef 92       	push	r14
    6e0c:	ff 92       	push	r15
    6e0e:	0f 93       	push	r16
    6e10:	1f 93       	push	r17
    6e12:	cf 93       	push	r28
    6e14:	df 93       	push	r29
    6e16:	cd b7       	in	r28, 0x3d	; 61
    6e18:	de b7       	in	r29, 0x3e	; 62
    6e1a:	cc 54       	subi	r28, 0x4C	; 76
    6e1c:	d1 09       	sbc	r29, r1
    6e1e:	cd bf       	out	0x3d, r28	; 61
    6e20:	de bf       	out	0x3e, r29	; 62
    6e22:	ed b6       	in	r14, 0x3d	; 61
    6e24:	fe b6       	in	r15, 0x3e	; 62
    6e26:	8d b7       	in	r24, 0x3d	; 61
    6e28:	9e b7       	in	r25, 0x3e	; 62
    6e2a:	6c 01       	movw	r12, r24
    6e2c:	8c e1       	ldi	r24, 0x1C	; 28
    6e2e:	91 e2       	ldi	r25, 0x21	; 33
    6e30:	8a 87       	std	Y+10, r24	; 0x0a
    6e32:	9b 87       	std	Y+11, r25	; 0x0b
    6e34:	8a 85       	ldd	r24, Y+10	; 0x0a
    6e36:	9b 85       	ldd	r25, Y+11	; 0x0b
    6e38:	bc 01       	movw	r22, r24
    6e3a:	82 e0       	ldi	r24, 0x02	; 2
    6e3c:	0e 94 de 59 	call	0xb3bc	; 0xb3bc <debug_function_in_name_print>
    6e40:	80 e0       	ldi	r24, 0x00	; 0
    6e42:	91 e0       	ldi	r25, 0x01	; 1
    6e44:	89 83       	std	Y+1, r24	; 0x01
    6e46:	9a 83       	std	Y+2, r25	; 0x02
    6e48:	89 81       	ldd	r24, Y+1	; 0x01
    6e4a:	9a 81       	ldd	r25, Y+2	; 0x02
    6e4c:	01 97       	sbiw	r24, 0x01	; 1
    6e4e:	8b 83       	std	Y+3, r24	; 0x03
    6e50:	9c 83       	std	Y+4, r25	; 0x04
    6e52:	89 81       	ldd	r24, Y+1	; 0x01
    6e54:	9a 81       	ldd	r25, Y+2	; 0x02
    6e56:	2d b7       	in	r18, 0x3d	; 61
    6e58:	3e b7       	in	r19, 0x3e	; 62
    6e5a:	28 1b       	sub	r18, r24
    6e5c:	39 0b       	sbc	r19, r25
    6e5e:	2d bf       	out	0x3d, r18	; 61
    6e60:	3e bf       	out	0x3e, r19	; 62
    6e62:	8d b7       	in	r24, 0x3d	; 61
    6e64:	9e b7       	in	r25, 0x3e	; 62
    6e66:	01 96       	adiw	r24, 0x01	; 1
    6e68:	8d 83       	std	Y+5, r24	; 0x05
    6e6a:	9e 83       	std	Y+6, r25	; 0x06
    6e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    6e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    6e70:	60 e4       	ldi	r22, 0x40	; 64
    6e72:	0e 94 43 1c 	call	0x3886	; 0x3886 <cfg_get_service_url_send>
    6e76:	8d 81       	ldd	r24, Y+5	; 0x05
    6e78:	9e 81       	ldd	r25, Y+6	; 0x06
    6e7a:	60 e4       	ldi	r22, 0x40	; 64
    6e7c:	70 e0       	ldi	r23, 0x00	; 0
    6e7e:	0e 94 55 74 	call	0xe8aa	; 0xe8aa <strnlen>
    6e82:	81 50       	subi	r24, 0x01	; 1
    6e84:	8f 83       	std	Y+7, r24	; 0x07
    6e86:	47 e2       	ldi	r20, 0x27	; 39
    6e88:	54 e0       	ldi	r21, 0x04	; 4
    6e8a:	8f 81       	ldd	r24, Y+7	; 0x07
    6e8c:	88 2f       	mov	r24, r24
    6e8e:	90 e0       	ldi	r25, 0x00	; 0
    6e90:	29 81       	ldd	r18, Y+1	; 0x01
    6e92:	3a 81       	ldd	r19, Y+2	; 0x02
    6e94:	28 1b       	sub	r18, r24
    6e96:	39 0b       	sbc	r19, r25
    6e98:	6d 81       	ldd	r22, Y+5	; 0x05
    6e9a:	7e 81       	ldd	r23, Y+6	; 0x06
    6e9c:	8f 81       	ldd	r24, Y+7	; 0x07
    6e9e:	88 2f       	mov	r24, r24
    6ea0:	90 e0       	ldi	r25, 0x00	; 0
    6ea2:	86 0f       	add	r24, r22
    6ea4:	97 1f       	adc	r25, r23
    6ea6:	65 2f       	mov	r22, r21
    6ea8:	6f 93       	push	r22
    6eaa:	4f 93       	push	r20
    6eac:	43 2f       	mov	r20, r19
    6eae:	4f 93       	push	r20
    6eb0:	2f 93       	push	r18
    6eb2:	29 2f       	mov	r18, r25
    6eb4:	2f 93       	push	r18
    6eb6:	8f 93       	push	r24
    6eb8:	0e 94 7f 74 	call	0xe8fe	; 0xe8fe <snprintf_P>
    6ebc:	0f 90       	pop	r0
    6ebe:	0f 90       	pop	r0
    6ec0:	0f 90       	pop	r0
    6ec2:	0f 90       	pop	r0
    6ec4:	0f 90       	pop	r0
    6ec6:	0f 90       	pop	r0
    6ec8:	2d 81       	ldd	r18, Y+5	; 0x05
    6eca:	3e 81       	ldd	r19, Y+6	; 0x06
    6ecc:	8f 81       	ldd	r24, Y+7	; 0x07
    6ece:	88 2f       	mov	r24, r24
    6ed0:	90 e0       	ldi	r25, 0x00	; 0
    6ed2:	82 0f       	add	r24, r18
    6ed4:	93 1f       	adc	r25, r19
    6ed6:	60 e4       	ldi	r22, 0x40	; 64
    6ed8:	70 e0       	ldi	r23, 0x00	; 0
    6eda:	0e 94 55 74 	call	0xe8aa	; 0xe8aa <strnlen>
    6ede:	9f 81       	ldd	r25, Y+7	; 0x07
    6ee0:	89 0f       	add	r24, r25
    6ee2:	8f 83       	std	Y+7, r24	; 0x07
    6ee4:	2d 81       	ldd	r18, Y+5	; 0x05
    6ee6:	3e 81       	ldd	r19, Y+6	; 0x06
    6ee8:	8f 81       	ldd	r24, Y+7	; 0x07
    6eea:	88 2f       	mov	r24, r24
    6eec:	90 e0       	ldi	r25, 0x00	; 0
    6eee:	82 0f       	add	r24, r18
    6ef0:	93 1f       	adc	r25, r19
    6ef2:	60 e4       	ldi	r22, 0x40	; 64
    6ef4:	0e 94 1b 1c 	call	0x3836	; 0x3836 <cfg_get_aws_id>
    6ef8:	2d 81       	ldd	r18, Y+5	; 0x05
    6efa:	3e 81       	ldd	r19, Y+6	; 0x06
    6efc:	8f 81       	ldd	r24, Y+7	; 0x07
    6efe:	88 2f       	mov	r24, r24
    6f00:	90 e0       	ldi	r25, 0x00	; 0
    6f02:	82 0f       	add	r24, r18
    6f04:	93 1f       	adc	r25, r19
    6f06:	60 e4       	ldi	r22, 0x40	; 64
    6f08:	70 e0       	ldi	r23, 0x00	; 0
    6f0a:	0e 94 55 74 	call	0xe8aa	; 0xe8aa <strnlen>
    6f0e:	9f 81       	ldd	r25, Y+7	; 0x07
    6f10:	89 0f       	add	r24, r25
    6f12:	8f 83       	std	Y+7, r24	; 0x07
    6f14:	47 e3       	ldi	r20, 0x37	; 55
    6f16:	54 e0       	ldi	r21, 0x04	; 4
    6f18:	8f 81       	ldd	r24, Y+7	; 0x07
    6f1a:	88 2f       	mov	r24, r24
    6f1c:	90 e0       	ldi	r25, 0x00	; 0
    6f1e:	29 81       	ldd	r18, Y+1	; 0x01
    6f20:	3a 81       	ldd	r19, Y+2	; 0x02
    6f22:	28 1b       	sub	r18, r24
    6f24:	39 0b       	sbc	r19, r25
    6f26:	6d 81       	ldd	r22, Y+5	; 0x05
    6f28:	7e 81       	ldd	r23, Y+6	; 0x06
    6f2a:	8f 81       	ldd	r24, Y+7	; 0x07
    6f2c:	88 2f       	mov	r24, r24
    6f2e:	90 e0       	ldi	r25, 0x00	; 0
    6f30:	86 0f       	add	r24, r22
    6f32:	97 1f       	adc	r25, r23
    6f34:	65 2f       	mov	r22, r21
    6f36:	6f 93       	push	r22
    6f38:	4f 93       	push	r20
    6f3a:	43 2f       	mov	r20, r19
    6f3c:	4f 93       	push	r20
    6f3e:	2f 93       	push	r18
    6f40:	29 2f       	mov	r18, r25
    6f42:	2f 93       	push	r18
    6f44:	8f 93       	push	r24
    6f46:	0e 94 7f 74 	call	0xe8fe	; 0xe8fe <snprintf_P>
    6f4a:	0f 90       	pop	r0
    6f4c:	0f 90       	pop	r0
    6f4e:	0f 90       	pop	r0
    6f50:	0f 90       	pop	r0
    6f52:	0f 90       	pop	r0
    6f54:	0f 90       	pop	r0
    6f56:	ce 01       	movw	r24, r28
    6f58:	84 5b       	subi	r24, 0xB4	; 180
    6f5a:	9f 4f       	sbci	r25, 0xFF	; 255
    6f5c:	2c e3       	ldi	r18, 0x3C	; 60
    6f5e:	fc 01       	movw	r30, r24
    6f60:	20 83       	st	Z, r18
    6f62:	8d 81       	ldd	r24, Y+5	; 0x05
    6f64:	9e 81       	ldd	r25, Y+6	; 0x06
    6f66:	9e 01       	movw	r18, r28
    6f68:	24 5b       	subi	r18, 0xB4	; 180
    6f6a:	3f 4f       	sbci	r19, 0xFF	; 255
    6f6c:	ae 01       	movw	r20, r28
    6f6e:	44 5f       	subi	r20, 0xF4	; 244
    6f70:	5f 4f       	sbci	r21, 0xFF	; 255
    6f72:	60 e0       	ldi	r22, 0x00	; 0
    6f74:	0e 94 4f 53 	call	0xa69e	; 0xa69e <sim900_http_get>
    6f78:	88 87       	std	Y+8, r24	; 0x08
    6f7a:	99 87       	std	Y+9, r25	; 0x09
    6f7c:	0e 94 1a 55 	call	0xaa34	; 0xaa34 <sim900_http_close>
    6f80:	88 85       	ldd	r24, Y+8	; 0x08
    6f82:	99 85       	ldd	r25, Y+9	; 0x09
    6f84:	00 97       	sbiw	r24, 0x00	; 0
    6f86:	19 f0       	breq	.+6      	; 0x6f8e <dl_task_cmd_check_1+0x188>
    6f88:	08 85       	ldd	r16, Y+8	; 0x08
    6f8a:	19 85       	ldd	r17, Y+9	; 0x09
    6f8c:	0c c0       	rjmp	.+24     	; 0x6fa6 <dl_task_cmd_check_1+0x1a0>
    6f8e:	ce 01       	movw	r24, r28
    6f90:	84 5b       	subi	r24, 0xB4	; 180
    6f92:	9f 4f       	sbci	r25, 0xFF	; 255
    6f94:	fc 01       	movw	r30, r24
    6f96:	80 81       	ld	r24, Z
    6f98:	28 2f       	mov	r18, r24
    6f9a:	30 e0       	ldi	r19, 0x00	; 0
    6f9c:	ce 01       	movw	r24, r28
    6f9e:	0c 96       	adiw	r24, 0x0c	; 12
    6fa0:	b9 01       	movw	r22, r18
    6fa2:	59 de       	rcall	.-846    	; 0x6c56 <dl_task_cmd_check_2>
    6fa4:	8c 01       	movw	r16, r24
    6fa6:	ce 01       	movw	r24, r28
    6fa8:	0a 96       	adiw	r24, 0x0a	; 10
    6faa:	0e 94 ca 59 	call	0xb394	; 0xb394 <debug_function_out_name_print>
    6fae:	cd be       	out	0x3d, r12	; 61
    6fb0:	de be       	out	0x3e, r13	; 62
    6fb2:	c8 01       	movw	r24, r16
    6fb4:	ed be       	out	0x3d, r14	; 61
    6fb6:	fe be       	out	0x3e, r15	; 62
    6fb8:	c4 5b       	subi	r28, 0xB4	; 180
    6fba:	df 4f       	sbci	r29, 0xFF	; 255
    6fbc:	cd bf       	out	0x3d, r28	; 61
    6fbe:	de bf       	out	0x3e, r29	; 62
    6fc0:	df 91       	pop	r29
    6fc2:	cf 91       	pop	r28
    6fc4:	1f 91       	pop	r17
    6fc6:	0f 91       	pop	r16
    6fc8:	ff 90       	pop	r15
    6fca:	ef 90       	pop	r14
    6fcc:	df 90       	pop	r13
    6fce:	cf 90       	pop	r12
    6fd0:	08 95       	ret

00006fd2 <dl_task_cmd_check>:
    6fd2:	0f 93       	push	r16
    6fd4:	1f 93       	push	r17
    6fd6:	cf 93       	push	r28
    6fd8:	df 93       	push	r29
    6fda:	00 d0       	rcall	.+0      	; 0x6fdc <dl_task_cmd_check+0xa>
    6fdc:	1f 92       	push	r1
    6fde:	cd b7       	in	r28, 0x3d	; 61
    6fe0:	de b7       	in	r29, 0x3e	; 62
    6fe2:	82 e0       	ldi	r24, 0x02	; 2
    6fe4:	80 93 80 21 	sts	0x2180, r24
    6fe8:	8a e0       	ldi	r24, 0x0A	; 10
    6fea:	91 e2       	ldi	r25, 0x21	; 33
    6fec:	8b 83       	std	Y+3, r24	; 0x03
    6fee:	9c 83       	std	Y+4, r25	; 0x04
    6ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    6ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    6ff4:	bc 01       	movw	r22, r24
    6ff6:	82 e0       	ldi	r24, 0x02	; 2
    6ff8:	0e 94 de 59 	call	0xb3bc	; 0xb3bc <debug_function_in_name_print>
    6ffc:	0e 94 3b 2f 	call	0x5e76	; 0x5e76 <dl_task_cmd_check_prepare>
    7000:	89 83       	std	Y+1, r24	; 0x01
    7002:	9a 83       	std	Y+2, r25	; 0x02
    7004:	89 81       	ldd	r24, Y+1	; 0x01
    7006:	9a 81       	ldd	r25, Y+2	; 0x02
    7008:	00 97       	sbiw	r24, 0x00	; 0
    700a:	19 f4       	brne	.+6      	; 0x7012 <dl_task_cmd_check+0x40>
    700c:	fc de       	rcall	.-520    	; 0x6e06 <dl_task_cmd_check_1>
    700e:	89 83       	std	Y+1, r24	; 0x01
    7010:	9a 83       	std	Y+2, r25	; 0x02
    7012:	0e 94 eb 52 	call	0xa5d6	; 0xa5d6 <sim900_GPRS_simple_close>
    7016:	10 92 80 21 	sts	0x2180, r1
    701a:	09 81       	ldd	r16, Y+1	; 0x01
    701c:	1a 81       	ldd	r17, Y+2	; 0x02
    701e:	ce 01       	movw	r24, r28
    7020:	03 96       	adiw	r24, 0x03	; 3
    7022:	0e 94 ca 59 	call	0xb394	; 0xb394 <debug_function_out_name_print>
    7026:	c8 01       	movw	r24, r16
    7028:	24 96       	adiw	r28, 0x04	; 4
    702a:	cd bf       	out	0x3d, r28	; 61
    702c:	de bf       	out	0x3e, r29	; 62
    702e:	df 91       	pop	r29
    7030:	cf 91       	pop	r28
    7032:	1f 91       	pop	r17
    7034:	0f 91       	pop	r16
    7036:	08 95       	ret

00007038 <dl_task_send_data_RT>:
    7038:	0f 93       	push	r16
    703a:	1f 93       	push	r17
    703c:	cf 93       	push	r28
    703e:	df 93       	push	r29
    7040:	00 d0       	rcall	.+0      	; 0x7042 <dl_task_send_data_RT+0xa>
    7042:	1f 92       	push	r1
    7044:	cd b7       	in	r28, 0x3d	; 61
    7046:	de b7       	in	r29, 0x3e	; 62
    7048:	82 e0       	ldi	r24, 0x02	; 2
    704a:	80 93 82 21 	sts	0x2182, r24
    704e:	85 ef       	ldi	r24, 0xF5	; 245
    7050:	90 e2       	ldi	r25, 0x20	; 32
    7052:	8b 83       	std	Y+3, r24	; 0x03
    7054:	9c 83       	std	Y+4, r25	; 0x04
    7056:	8b 81       	ldd	r24, Y+3	; 0x03
    7058:	9c 81       	ldd	r25, Y+4	; 0x04
    705a:	bc 01       	movw	r22, r24
    705c:	82 e0       	ldi	r24, 0x02	; 2
    705e:	0e 94 de 59 	call	0xb3bc	; 0xb3bc <debug_function_in_name_print>
    7062:	8e e8       	ldi	r24, 0x8E	; 142
    7064:	91 e2       	ldi	r25, 0x21	; 33
    7066:	5b d0       	rcall	.+182    	; 0x711e <send_data_with_post>
    7068:	89 83       	std	Y+1, r24	; 0x01
    706a:	9a 83       	std	Y+2, r25	; 0x02
    706c:	89 81       	ldd	r24, Y+1	; 0x01
    706e:	9a 81       	ldd	r25, Y+2	; 0x02
    7070:	83 36       	cpi	r24, 0x63	; 99
    7072:	91 05       	cpc	r25, r1
    7074:	31 f4       	brne	.+12     	; 0x7082 <dl_task_send_data_RT+0x4a>
    7076:	81 e0       	ldi	r24, 0x01	; 1
    7078:	80 93 82 21 	sts	0x2182, r24
    707c:	19 82       	std	Y+1, r1	; 0x01
    707e:	1a 82       	std	Y+2, r1	; 0x02
    7080:	07 c0       	rjmp	.+14     	; 0x7090 <dl_task_send_data_RT+0x58>
    7082:	0e 94 eb 52 	call	0xa5d6	; 0xa5d6 <sim900_GPRS_simple_close>
    7086:	10 92 82 21 	sts	0x2182, r1
    708a:	81 e0       	ldi	r24, 0x01	; 1
    708c:	80 93 80 21 	sts	0x2180, r24
    7090:	09 81       	ldd	r16, Y+1	; 0x01
    7092:	1a 81       	ldd	r17, Y+2	; 0x02
    7094:	ce 01       	movw	r24, r28
    7096:	03 96       	adiw	r24, 0x03	; 3
    7098:	0e 94 ca 59 	call	0xb394	; 0xb394 <debug_function_out_name_print>
    709c:	c8 01       	movw	r24, r16
    709e:	24 96       	adiw	r28, 0x04	; 4
    70a0:	cd bf       	out	0x3d, r28	; 61
    70a2:	de bf       	out	0x3e, r29	; 62
    70a4:	df 91       	pop	r29
    70a6:	cf 91       	pop	r28
    70a8:	1f 91       	pop	r17
    70aa:	0f 91       	pop	r16
    70ac:	08 95       	ret

000070ae <dl_task_send_data>:
    70ae:	0f 93       	push	r16
    70b0:	1f 93       	push	r17
    70b2:	cf 93       	push	r28
    70b4:	df 93       	push	r29
    70b6:	00 d0       	rcall	.+0      	; 0x70b8 <dl_task_send_data+0xa>
    70b8:	1f 92       	push	r1
    70ba:	cd b7       	in	r28, 0x3d	; 61
    70bc:	de b7       	in	r29, 0x3e	; 62
    70be:	82 e0       	ldi	r24, 0x02	; 2
    70c0:	80 93 85 21 	sts	0x2185, r24
    70c4:	83 ee       	ldi	r24, 0xE3	; 227
    70c6:	90 e2       	ldi	r25, 0x20	; 32
    70c8:	8b 83       	std	Y+3, r24	; 0x03
    70ca:	9c 83       	std	Y+4, r25	; 0x04
    70cc:	8b 81       	ldd	r24, Y+3	; 0x03
    70ce:	9c 81       	ldd	r25, Y+4	; 0x04
    70d0:	bc 01       	movw	r22, r24
    70d2:	82 e0       	ldi	r24, 0x02	; 2
    70d4:	0e 94 de 59 	call	0xb3bc	; 0xb3bc <debug_function_in_name_print>
    70d8:	87 e9       	ldi	r24, 0x97	; 151
    70da:	91 e2       	ldi	r25, 0x21	; 33
    70dc:	20 d0       	rcall	.+64     	; 0x711e <send_data_with_post>
    70de:	89 83       	std	Y+1, r24	; 0x01
    70e0:	9a 83       	std	Y+2, r25	; 0x02
    70e2:	89 81       	ldd	r24, Y+1	; 0x01
    70e4:	9a 81       	ldd	r25, Y+2	; 0x02
    70e6:	83 36       	cpi	r24, 0x63	; 99
    70e8:	91 05       	cpc	r25, r1
    70ea:	31 f4       	brne	.+12     	; 0x70f8 <dl_task_send_data+0x4a>
    70ec:	81 e0       	ldi	r24, 0x01	; 1
    70ee:	80 93 85 21 	sts	0x2185, r24
    70f2:	19 82       	std	Y+1, r1	; 0x01
    70f4:	1a 82       	std	Y+2, r1	; 0x02
    70f6:	04 c0       	rjmp	.+8      	; 0x7100 <dl_task_send_data+0x52>
    70f8:	0e 94 eb 52 	call	0xa5d6	; 0xa5d6 <sim900_GPRS_simple_close>
    70fc:	10 92 85 21 	sts	0x2185, r1
    7100:	09 81       	ldd	r16, Y+1	; 0x01
    7102:	1a 81       	ldd	r17, Y+2	; 0x02
    7104:	ce 01       	movw	r24, r28
    7106:	03 96       	adiw	r24, 0x03	; 3
    7108:	0e 94 ca 59 	call	0xb394	; 0xb394 <debug_function_out_name_print>
    710c:	c8 01       	movw	r24, r16
    710e:	24 96       	adiw	r28, 0x04	; 4
    7110:	cd bf       	out	0x3d, r28	; 61
    7112:	de bf       	out	0x3e, r29	; 62
    7114:	df 91       	pop	r29
    7116:	cf 91       	pop	r28
    7118:	1f 91       	pop	r17
    711a:	0f 91       	pop	r16
    711c:	08 95       	ret

0000711e <send_data_with_post>:
    711e:	2f 92       	push	r2
    7120:	3f 92       	push	r3
    7122:	4f 92       	push	r4
    7124:	5f 92       	push	r5
    7126:	6f 92       	push	r6
    7128:	7f 92       	push	r7
    712a:	8f 92       	push	r8
    712c:	9f 92       	push	r9
    712e:	af 92       	push	r10
    7130:	bf 92       	push	r11
    7132:	cf 92       	push	r12
    7134:	df 92       	push	r13
    7136:	ef 92       	push	r14
    7138:	ff 92       	push	r15
    713a:	0f 93       	push	r16
    713c:	1f 93       	push	r17
    713e:	cf 93       	push	r28
    7140:	df 93       	push	r29
    7142:	cd b7       	in	r28, 0x3d	; 61
    7144:	de b7       	in	r29, 0x3e	; 62
    7146:	cd 5f       	subi	r28, 0xFD	; 253
    7148:	d1 09       	sbc	r29, r1
    714a:	cd bf       	out	0x3d, r28	; 61
    714c:	de bf       	out	0x3e, r29	; 62
    714e:	9e 01       	movw	r18, r28
    7150:	22 51       	subi	r18, 0x12	; 18
    7152:	3f 4f       	sbci	r19, 0xFF	; 255
    7154:	d9 01       	movw	r26, r18
    7156:	8d 93       	st	X+, r24
    7158:	9c 93       	st	X, r25
    715a:	ed b7       	in	r30, 0x3d	; 61
    715c:	fe b7       	in	r31, 0x3e	; 62
    715e:	c6 50       	subi	r28, 0x06	; 6
    7160:	df 4f       	sbci	r29, 0xFF	; 255
    7162:	e8 83       	st	Y, r30
    7164:	f9 83       	std	Y+1, r31	; 0x01
    7166:	ca 5f       	subi	r28, 0xFA	; 250
    7168:	d0 40       	sbci	r29, 0x00	; 0
    716a:	8d b7       	in	r24, 0x3d	; 61
    716c:	9e b7       	in	r25, 0x3e	; 62
    716e:	c0 51       	subi	r28, 0x10	; 16
    7170:	df 4f       	sbci	r29, 0xFF	; 255
    7172:	88 83       	st	Y, r24
    7174:	99 83       	std	Y+1, r25	; 0x01
    7176:	c0 5f       	subi	r28, 0xF0	; 240
    7178:	d0 40       	sbci	r29, 0x00	; 0
    717a:	19 82       	std	Y+1, r1	; 0x01
    717c:	1a 82       	std	Y+2, r1	; 0x02
    717e:	80 e0       	ldi	r24, 0x00	; 0
    7180:	90 e1       	ldi	r25, 0x10	; 16
    7182:	8f 83       	std	Y+7, r24	; 0x07
    7184:	98 87       	std	Y+8, r25	; 0x08
    7186:	8f 81       	ldd	r24, Y+7	; 0x07
    7188:	98 85       	ldd	r25, Y+8	; 0x08
    718a:	01 97       	sbiw	r24, 0x01	; 1
    718c:	89 87       	std	Y+9, r24	; 0x09
    718e:	9a 87       	std	Y+10, r25	; 0x0a
    7190:	8f 81       	ldd	r24, Y+7	; 0x07
    7192:	98 85       	ldd	r25, Y+8	; 0x08
    7194:	2d b7       	in	r18, 0x3d	; 61
    7196:	3e b7       	in	r19, 0x3e	; 62
    7198:	28 1b       	sub	r18, r24
    719a:	39 0b       	sbc	r19, r25
    719c:	2d bf       	out	0x3d, r18	; 61
    719e:	3e bf       	out	0x3e, r19	; 62
    71a0:	8d b7       	in	r24, 0x3d	; 61
    71a2:	9e b7       	in	r25, 0x3e	; 62
    71a4:	01 96       	adiw	r24, 0x01	; 1
    71a6:	8b 87       	std	Y+11, r24	; 0x0b
    71a8:	9c 87       	std	Y+12, r25	; 0x0c
    71aa:	20 e4       	ldi	r18, 0x40	; 64
    71ac:	ce 01       	movw	r24, r28
    71ae:	4a 96       	adiw	r24, 0x1a	; 26
    71b0:	dc 01       	movw	r26, r24
    71b2:	e2 2f       	mov	r30, r18
    71b4:	1d 92       	st	X+, r1
    71b6:	ea 95       	dec	r30
    71b8:	e9 f7       	brne	.-6      	; 0x71b4 <send_data_with_post+0x96>
    71ba:	ce 01       	movw	r24, r28
    71bc:	86 5a       	subi	r24, 0xA6	; 166
    71be:	9f 4f       	sbci	r25, 0xFF	; 255
    71c0:	2e ec       	ldi	r18, 0xCE	; 206
    71c2:	30 e2       	ldi	r19, 0x20	; 32
    71c4:	dc 01       	movw	r26, r24
    71c6:	2d 93       	st	X+, r18
    71c8:	3c 93       	st	X, r19
    71ca:	ce 01       	movw	r24, r28
    71cc:	86 5a       	subi	r24, 0xA6	; 166
    71ce:	9f 4f       	sbci	r25, 0xFF	; 255
    71d0:	fc 01       	movw	r30, r24
    71d2:	80 81       	ld	r24, Z
    71d4:	91 81       	ldd	r25, Z+1	; 0x01
    71d6:	bc 01       	movw	r22, r24
    71d8:	82 e0       	ldi	r24, 0x02	; 2
    71da:	0e 94 de 59 	call	0xb3bc	; 0xb3bc <debug_function_in_name_print>
    71de:	ce 01       	movw	r24, r28
    71e0:	82 51       	subi	r24, 0x12	; 18
    71e2:	9f 4f       	sbci	r25, 0xFF	; 255
    71e4:	dc 01       	movw	r26, r24
    71e6:	8d 91       	ld	r24, X+
    71e8:	9c 91       	ld	r25, X
    71ea:	fc 01       	movw	r30, r24
    71ec:	20 81       	ld	r18, Z
    71ee:	31 81       	ldd	r19, Z+1	; 0x01
    71f0:	42 81       	ldd	r20, Z+2	; 0x02
    71f2:	53 81       	ldd	r21, Z+3	; 0x03
    71f4:	80 91 86 21 	lds	r24, 0x2186
    71f8:	90 91 87 21 	lds	r25, 0x2187
    71fc:	a0 91 88 21 	lds	r26, 0x2188
    7200:	b0 91 89 21 	lds	r27, 0x2189
    7204:	28 17       	cp	r18, r24
    7206:	39 07       	cpc	r19, r25
    7208:	4a 07       	cpc	r20, r26
    720a:	5b 07       	cpc	r21, r27
    720c:	51 f4       	brne	.+20     	; 0x7222 <send_data_with_post+0x104>
    720e:	8e e0       	ldi	r24, 0x0E	; 14
    7210:	93 e0       	ldi	r25, 0x03	; 3
    7212:	41 e0       	ldi	r20, 0x01	; 1
    7214:	bc 01       	movw	r22, r24
    7216:	81 e0       	ldi	r24, 0x01	; 1
    7218:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    721c:	19 82       	std	Y+1, r1	; 0x01
    721e:	1a 82       	std	Y+2, r1	; 0x02
    7220:	62 c4       	rjmp	.+2244   	; 0x7ae6 <send_data_with_post+0x9c8>
    7222:	8b 85       	ldd	r24, Y+11	; 0x0b
    7224:	9c 85       	ldd	r25, Y+12	; 0x0c
    7226:	60 e4       	ldi	r22, 0x40	; 64
    7228:	0e 94 43 1c 	call	0x3886	; 0x3886 <cfg_get_service_url_send>
    722c:	8b 85       	ldd	r24, Y+11	; 0x0b
    722e:	9c 85       	ldd	r25, Y+12	; 0x0c
    7230:	60 e4       	ldi	r22, 0x40	; 64
    7232:	70 e0       	ldi	r23, 0x00	; 0
    7234:	0e 94 55 74 	call	0xe8aa	; 0xe8aa <strnlen>
    7238:	01 97       	sbiw	r24, 0x01	; 1
    723a:	8d 87       	std	Y+13, r24	; 0x0d
    723c:	9e 87       	std	Y+14, r25	; 0x0e
    723e:	2b 85       	ldd	r18, Y+11	; 0x0b
    7240:	3c 85       	ldd	r19, Y+12	; 0x0c
    7242:	8d 85       	ldd	r24, Y+13	; 0x0d
    7244:	9e 85       	ldd	r25, Y+14	; 0x0e
    7246:	82 0f       	add	r24, r18
    7248:	93 1f       	adc	r25, r19
    724a:	dc 01       	movw	r26, r24
    724c:	1c 92       	st	X, r1
    724e:	8d 85       	ldd	r24, Y+13	; 0x0d
    7250:	9e 85       	ldd	r25, Y+14	; 0x0e
    7252:	01 96       	adiw	r24, 0x01	; 1
    7254:	8f 87       	std	Y+15, r24	; 0x0f
    7256:	98 8b       	std	Y+16, r25	; 0x10
    7258:	8f 85       	ldd	r24, Y+15	; 0x0f
    725a:	98 89       	ldd	r25, Y+16	; 0x10
    725c:	8b 83       	std	Y+3, r24	; 0x03
    725e:	9c 83       	std	Y+4, r25	; 0x04
    7260:	2b 85       	ldd	r18, Y+11	; 0x0b
    7262:	3c 85       	ldd	r19, Y+12	; 0x0c
    7264:	8b 81       	ldd	r24, Y+3	; 0x03
    7266:	9c 81       	ldd	r25, Y+4	; 0x04
    7268:	82 0f       	add	r24, r18
    726a:	93 1f       	adc	r25, r19
    726c:	21 e4       	ldi	r18, 0x41	; 65
    726e:	fc 01       	movw	r30, r24
    7270:	20 83       	st	Z, r18
    7272:	8b 81       	ldd	r24, Y+3	; 0x03
    7274:	9c 81       	ldd	r25, Y+4	; 0x04
    7276:	01 96       	adiw	r24, 0x01	; 1
    7278:	2b 85       	ldd	r18, Y+11	; 0x0b
    727a:	3c 85       	ldd	r19, Y+12	; 0x0c
    727c:	82 0f       	add	r24, r18
    727e:	93 1f       	adc	r25, r19
    7280:	27 e5       	ldi	r18, 0x57	; 87
    7282:	dc 01       	movw	r26, r24
    7284:	2c 93       	st	X, r18
    7286:	8b 81       	ldd	r24, Y+3	; 0x03
    7288:	9c 81       	ldd	r25, Y+4	; 0x04
    728a:	02 96       	adiw	r24, 0x02	; 2
    728c:	2b 85       	ldd	r18, Y+11	; 0x0b
    728e:	3c 85       	ldd	r19, Y+12	; 0x0c
    7290:	82 0f       	add	r24, r18
    7292:	93 1f       	adc	r25, r19
    7294:	23 e5       	ldi	r18, 0x53	; 83
    7296:	fc 01       	movw	r30, r24
    7298:	20 83       	st	Z, r18
    729a:	8b 81       	ldd	r24, Y+3	; 0x03
    729c:	9c 81       	ldd	r25, Y+4	; 0x04
    729e:	03 96       	adiw	r24, 0x03	; 3
    72a0:	2b 85       	ldd	r18, Y+11	; 0x0b
    72a2:	3c 85       	ldd	r19, Y+12	; 0x0c
    72a4:	82 0f       	add	r24, r18
    72a6:	93 1f       	adc	r25, r19
    72a8:	29 e4       	ldi	r18, 0x49	; 73
    72aa:	dc 01       	movw	r26, r24
    72ac:	2c 93       	st	X, r18
    72ae:	8b 81       	ldd	r24, Y+3	; 0x03
    72b0:	9c 81       	ldd	r25, Y+4	; 0x04
    72b2:	04 96       	adiw	r24, 0x04	; 4
    72b4:	2b 85       	ldd	r18, Y+11	; 0x0b
    72b6:	3c 85       	ldd	r19, Y+12	; 0x0c
    72b8:	82 0f       	add	r24, r18
    72ba:	93 1f       	adc	r25, r19
    72bc:	24 e4       	ldi	r18, 0x44	; 68
    72be:	fc 01       	movw	r30, r24
    72c0:	20 83       	st	Z, r18
    72c2:	8b 81       	ldd	r24, Y+3	; 0x03
    72c4:	9c 81       	ldd	r25, Y+4	; 0x04
    72c6:	05 96       	adiw	r24, 0x05	; 5
    72c8:	2b 85       	ldd	r18, Y+11	; 0x0b
    72ca:	3c 85       	ldd	r19, Y+12	; 0x0c
    72cc:	82 0f       	add	r24, r18
    72ce:	93 1f       	adc	r25, r19
    72d0:	2d e3       	ldi	r18, 0x3D	; 61
    72d2:	dc 01       	movw	r26, r24
    72d4:	2c 93       	st	X, r18
    72d6:	8b 81       	ldd	r24, Y+3	; 0x03
    72d8:	9c 81       	ldd	r25, Y+4	; 0x04
    72da:	06 96       	adiw	r24, 0x06	; 6
    72dc:	8b 83       	std	Y+3, r24	; 0x03
    72de:	9c 83       	std	Y+4, r25	; 0x04
    72e0:	2b 85       	ldd	r18, Y+11	; 0x0b
    72e2:	3c 85       	ldd	r19, Y+12	; 0x0c
    72e4:	8b 81       	ldd	r24, Y+3	; 0x03
    72e6:	9c 81       	ldd	r25, Y+4	; 0x04
    72e8:	82 0f       	add	r24, r18
    72ea:	93 1f       	adc	r25, r19
    72ec:	60 e4       	ldi	r22, 0x40	; 64
    72ee:	0e 94 1b 1c 	call	0x3836	; 0x3836 <cfg_get_aws_id>
    72f2:	2b 85       	ldd	r18, Y+11	; 0x0b
    72f4:	3c 85       	ldd	r19, Y+12	; 0x0c
    72f6:	8b 81       	ldd	r24, Y+3	; 0x03
    72f8:	9c 81       	ldd	r25, Y+4	; 0x04
    72fa:	82 0f       	add	r24, r18
    72fc:	93 1f       	adc	r25, r19
    72fe:	60 e4       	ldi	r22, 0x40	; 64
    7300:	70 e0       	ldi	r23, 0x00	; 0
    7302:	0e 94 55 74 	call	0xe8aa	; 0xe8aa <strnlen>
    7306:	2b 81       	ldd	r18, Y+3	; 0x03
    7308:	3c 81       	ldd	r19, Y+4	; 0x04
    730a:	82 0f       	add	r24, r18
    730c:	93 1f       	adc	r25, r19
    730e:	8b 83       	std	Y+3, r24	; 0x03
    7310:	9c 83       	std	Y+4, r25	; 0x04
    7312:	0e 94 68 5f 	call	0xbed0	; 0xbed0 <rtc_get_time>
    7316:	dc 01       	movw	r26, r24
    7318:	cb 01       	movw	r24, r22
    731a:	89 8b       	std	Y+17, r24	; 0x11
    731c:	9a 8b       	std	Y+18, r25	; 0x12
    731e:	ab 8b       	std	Y+19, r26	; 0x13
    7320:	bc 8b       	std	Y+20, r27	; 0x14
    7322:	4a e3       	ldi	r20, 0x3A	; 58
    7324:	53 e0       	ldi	r21, 0x03	; 3
    7326:	2f 81       	ldd	r18, Y+7	; 0x07
    7328:	38 85       	ldd	r19, Y+8	; 0x08
    732a:	8b 81       	ldd	r24, Y+3	; 0x03
    732c:	9c 81       	ldd	r25, Y+4	; 0x04
    732e:	28 1b       	sub	r18, r24
    7330:	39 0b       	sbc	r19, r25
    7332:	6b 85       	ldd	r22, Y+11	; 0x0b
    7334:	7c 85       	ldd	r23, Y+12	; 0x0c
    7336:	8b 81       	ldd	r24, Y+3	; 0x03
    7338:	9c 81       	ldd	r25, Y+4	; 0x04
    733a:	86 0f       	add	r24, r22
    733c:	97 1f       	adc	r25, r23
    733e:	6c 89       	ldd	r22, Y+20	; 0x14
    7340:	6f 93       	push	r22
    7342:	6b 89       	ldd	r22, Y+19	; 0x13
    7344:	6f 93       	push	r22
    7346:	6a 89       	ldd	r22, Y+18	; 0x12
    7348:	6f 93       	push	r22
    734a:	69 89       	ldd	r22, Y+17	; 0x11
    734c:	6f 93       	push	r22
    734e:	65 2f       	mov	r22, r21
    7350:	6f 93       	push	r22
    7352:	4f 93       	push	r20
    7354:	43 2f       	mov	r20, r19
    7356:	4f 93       	push	r20
    7358:	2f 93       	push	r18
    735a:	29 2f       	mov	r18, r25
    735c:	2f 93       	push	r18
    735e:	8f 93       	push	r24
    7360:	0e 94 7f 74 	call	0xe8fe	; 0xe8fe <snprintf_P>
    7364:	ed b7       	in	r30, 0x3d	; 61
    7366:	fe b7       	in	r31, 0x3e	; 62
    7368:	3a 96       	adiw	r30, 0x0a	; 10
    736a:	ed bf       	out	0x3d, r30	; 61
    736c:	fe bf       	out	0x3e, r31	; 62
    736e:	2b 85       	ldd	r18, Y+11	; 0x0b
    7370:	3c 85       	ldd	r19, Y+12	; 0x0c
    7372:	8b 81       	ldd	r24, Y+3	; 0x03
    7374:	9c 81       	ldd	r25, Y+4	; 0x04
    7376:	82 0f       	add	r24, r18
    7378:	93 1f       	adc	r25, r19
    737a:	60 e4       	ldi	r22, 0x40	; 64
    737c:	70 e0       	ldi	r23, 0x00	; 0
    737e:	0e 94 55 74 	call	0xe8aa	; 0xe8aa <strnlen>
    7382:	2b 81       	ldd	r18, Y+3	; 0x03
    7384:	3c 81       	ldd	r19, Y+4	; 0x04
    7386:	82 0f       	add	r24, r18
    7388:	93 1f       	adc	r25, r19
    738a:	8b 83       	std	Y+3, r24	; 0x03
    738c:	9c 83       	std	Y+4, r25	; 0x04
    738e:	ce 01       	movw	r24, r28
    7390:	82 51       	subi	r24, 0x12	; 18
    7392:	9f 4f       	sbci	r25, 0xFF	; 255
    7394:	dc 01       	movw	r26, r24
    7396:	8d 91       	ld	r24, X+
    7398:	9c 91       	ld	r25, X
    739a:	fc 01       	movw	r30, r24
    739c:	84 81       	ldd	r24, Z+4	; 0x04
    739e:	95 81       	ldd	r25, Z+5	; 0x05
    73a0:	a6 81       	ldd	r26, Z+6	; 0x06
    73a2:	b7 81       	ldd	r27, Z+7	; 0x07
    73a4:	8d 8b       	std	Y+21, r24	; 0x15
    73a6:	9e 8b       	std	Y+22, r25	; 0x16
    73a8:	af 8b       	std	Y+23, r26	; 0x17
    73aa:	b8 8f       	std	Y+24, r27	; 0x18
    73ac:	ce 01       	movw	r24, r28
    73ae:	82 51       	subi	r24, 0x12	; 18
    73b0:	9f 4f       	sbci	r25, 0xFF	; 255
    73b2:	dc 01       	movw	r26, r24
    73b4:	8d 91       	ld	r24, X+
    73b6:	9c 91       	ld	r25, X
    73b8:	fc 01       	movw	r30, r24
    73ba:	80 85       	ldd	r24, Z+8	; 0x08
    73bc:	89 8f       	std	Y+25, r24	; 0x19
    73be:	9e 01       	movw	r18, r28
    73c0:	2b 57       	subi	r18, 0x7B	; 123
    73c2:	3f 4f       	sbci	r19, 0xFF	; 255
    73c4:	ce 01       	movw	r24, r28
    73c6:	82 51       	subi	r24, 0x12	; 18
    73c8:	9f 4f       	sbci	r25, 0xFF	; 255
    73ca:	dc 01       	movw	r26, r24
    73cc:	8d 91       	ld	r24, X+
    73ce:	9c 91       	ld	r25, X
    73d0:	fc 01       	movw	r30, r24
    73d2:	80 81       	ld	r24, Z
    73d4:	91 81       	ldd	r25, Z+1	; 0x01
    73d6:	a2 81       	ldd	r26, Z+2	; 0x02
    73d8:	b3 81       	ldd	r27, Z+3	; 0x03
    73da:	f9 01       	movw	r30, r18
    73dc:	80 83       	st	Z, r24
    73de:	91 83       	std	Z+1, r25	; 0x01
    73e0:	a2 83       	std	Z+2, r26	; 0x02
    73e2:	b3 83       	std	Z+3, r27	; 0x03
    73e4:	1d 82       	std	Y+5, r1	; 0x05
    73e6:	c2 c1       	rjmp	.+900    	; 0x776c <send_data_with_post+0x64e>
    73e8:	ce 01       	movw	r24, r28
    73ea:	8b 57       	subi	r24, 0x7B	; 123
    73ec:	9f 4f       	sbci	r25, 0xFF	; 255
    73ee:	dc 01       	movw	r26, r24
    73f0:	2d 91       	ld	r18, X+
    73f2:	3d 91       	ld	r19, X+
    73f4:	4d 91       	ld	r20, X+
    73f6:	5c 91       	ld	r21, X
    73f8:	80 91 86 21 	lds	r24, 0x2186
    73fc:	90 91 87 21 	lds	r25, 0x2187
    7400:	a0 91 88 21 	lds	r26, 0x2188
    7404:	b0 91 89 21 	lds	r27, 0x2189
    7408:	28 17       	cp	r18, r24
    740a:	39 07       	cpc	r19, r25
    740c:	4a 07       	cpc	r20, r26
    740e:	5b 07       	cpc	r21, r27
    7410:	41 f4       	brne	.+16     	; 0x7422 <send_data_with_post+0x304>
    7412:	83 e4       	ldi	r24, 0x43	; 67
    7414:	93 e0       	ldi	r25, 0x03	; 3
    7416:	41 e0       	ldi	r20, 0x01	; 1
    7418:	bc 01       	movw	r22, r24
    741a:	81 e0       	ldi	r24, 0x01	; 1
    741c:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    7420:	ab c1       	rjmp	.+854    	; 0x7778 <send_data_with_post+0x65a>
    7422:	ce 01       	movw	r24, r28
    7424:	8b 57       	subi	r24, 0x7B	; 123
    7426:	9f 4f       	sbci	r25, 0xFF	; 255
    7428:	61 e0       	ldi	r22, 0x01	; 1
    742a:	70 e0       	ldi	r23, 0x00	; 0
    742c:	0e 94 54 31 	call	0x62a8	; 0x62a8 <dl_iterator_moveback>
    7430:	80 91 0c 20 	lds	r24, 0x200C
    7434:	82 30       	cpi	r24, 0x02	; 2
    7436:	68 f0       	brcs	.+26     	; 0x7452 <send_data_with_post+0x334>
    7438:	8e e5       	ldi	r24, 0x5E	; 94
    743a:	93 e0       	ldi	r25, 0x03	; 3
    743c:	20 91 0c 20 	lds	r18, 0x200C
    7440:	bc 01       	movw	r22, r24
    7442:	82 2f       	mov	r24, r18
    7444:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    7448:	ce 01       	movw	r24, r28
    744a:	8b 57       	subi	r24, 0x7B	; 123
    744c:	9f 4f       	sbci	r25, 0xFF	; 255
    744e:	0e 94 d2 45 	call	0x8ba4	; 0x8ba4 <AT24CXX_iterator_report>
    7452:	9e 01       	movw	r18, r28
    7454:	24 5a       	subi	r18, 0xA4	; 164
    7456:	3f 4f       	sbci	r19, 0xFF	; 255
    7458:	ce 01       	movw	r24, r28
    745a:	8b 57       	subi	r24, 0x7B	; 123
    745c:	9f 4f       	sbci	r25, 0xFF	; 255
    745e:	b9 01       	movw	r22, r18
    7460:	2c d8       	rcall	.-4008   	; 0x64ba <dl_get_record>
    7462:	80 91 0c 20 	lds	r24, 0x200C
    7466:	88 23       	and	r24, r24
    7468:	71 f1       	breq	.+92     	; 0x74c6 <send_data_with_post+0x3a8>
    746a:	ce 01       	movw	r24, r28
    746c:	84 5a       	subi	r24, 0xA4	; 164
    746e:	9f 4f       	sbci	r25, 0xFF	; 255
    7470:	fc 01       	movw	r30, r24
    7472:	80 81       	ld	r24, Z
    7474:	91 81       	ldd	r25, Z+1	; 0x01
    7476:	a2 81       	ldd	r26, Z+2	; 0x02
    7478:	b3 81       	ldd	r27, Z+3	; 0x03
    747a:	27 e6       	ldi	r18, 0x67	; 103
    747c:	33 e0       	ldi	r19, 0x03	; 3
    747e:	4b 2f       	mov	r20, r27
    7480:	4f 93       	push	r20
    7482:	4a 2f       	mov	r20, r26
    7484:	4f 93       	push	r20
    7486:	49 2f       	mov	r20, r25
    7488:	4f 93       	push	r20
    748a:	8f 93       	push	r24
    748c:	83 2f       	mov	r24, r19
    748e:	8f 93       	push	r24
    7490:	82 2f       	mov	r24, r18
    7492:	8f 93       	push	r24
    7494:	1f 92       	push	r1
    7496:	80 e4       	ldi	r24, 0x40	; 64
    7498:	8f 93       	push	r24
    749a:	ce 01       	movw	r24, r28
    749c:	82 55       	subi	r24, 0x52	; 82
    749e:	9f 4f       	sbci	r25, 0xFF	; 255
    74a0:	29 2f       	mov	r18, r25
    74a2:	2f 93       	push	r18
    74a4:	8f 93       	push	r24
    74a6:	0e 94 7f 74 	call	0xe8fe	; 0xe8fe <snprintf_P>
    74aa:	2d b7       	in	r18, 0x3d	; 61
    74ac:	3e b7       	in	r19, 0x3e	; 62
    74ae:	26 5f       	subi	r18, 0xF6	; 246
    74b0:	3f 4f       	sbci	r19, 0xFF	; 255
    74b2:	2d bf       	out	0x3d, r18	; 61
    74b4:	3e bf       	out	0x3e, r19	; 62
    74b6:	ce 01       	movw	r24, r28
    74b8:	82 55       	subi	r24, 0x52	; 82
    74ba:	9f 4f       	sbci	r25, 0xFF	; 255
    74bc:	40 e0       	ldi	r20, 0x00	; 0
    74be:	bc 01       	movw	r22, r24
    74c0:	81 e0       	ldi	r24, 0x01	; 1
    74c2:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    74c6:	ce 01       	movw	r24, r28
    74c8:	84 5a       	subi	r24, 0xA4	; 164
    74ca:	9f 4f       	sbci	r25, 0xFF	; 255
    74cc:	dc 01       	movw	r26, r24
    74ce:	2d 91       	ld	r18, X+
    74d0:	3d 91       	ld	r19, X+
    74d2:	4d 91       	ld	r20, X+
    74d4:	5c 91       	ld	r21, X
    74d6:	8d 89       	ldd	r24, Y+21	; 0x15
    74d8:	9e 89       	ldd	r25, Y+22	; 0x16
    74da:	af 89       	ldd	r26, Y+23	; 0x17
    74dc:	b8 8d       	ldd	r27, Y+24	; 0x18
    74de:	28 17       	cp	r18, r24
    74e0:	39 07       	cpc	r19, r25
    74e2:	4a 07       	cpc	r20, r26
    74e4:	5b 07       	cpc	r21, r27
    74e6:	40 f4       	brcc	.+16     	; 0x74f8 <send_data_with_post+0x3da>
    74e8:	8f e7       	ldi	r24, 0x7F	; 127
    74ea:	93 e0       	ldi	r25, 0x03	; 3
    74ec:	41 e0       	ldi	r20, 0x01	; 1
    74ee:	bc 01       	movw	r22, r24
    74f0:	81 e0       	ldi	r24, 0x01	; 1
    74f2:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    74f6:	40 c1       	rjmp	.+640    	; 0x7778 <send_data_with_post+0x65a>
    74f8:	89 8d       	ldd	r24, Y+25	; 0x19
    74fa:	88 23       	and	r24, r24
    74fc:	89 f0       	breq	.+34     	; 0x7520 <send_data_with_post+0x402>
    74fe:	ce 01       	movw	r24, r28
    7500:	84 5a       	subi	r24, 0xA4	; 164
    7502:	9f 4f       	sbci	r25, 0xFF	; 255
    7504:	fc 01       	movw	r30, r24
    7506:	85 a1       	ldd	r24, Z+37	; 0x25
    7508:	88 23       	and	r24, r24
    750a:	51 f0       	breq	.+20     	; 0x7520 <send_data_with_post+0x402>
    750c:	87 e9       	ldi	r24, 0x97	; 151
    750e:	93 e0       	ldi	r25, 0x03	; 3
    7510:	20 91 0c 20 	lds	r18, 0x200C
    7514:	41 e0       	ldi	r20, 0x01	; 1
    7516:	bc 01       	movw	r22, r24
    7518:	82 2f       	mov	r24, r18
    751a:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    751e:	26 c1       	rjmp	.+588    	; 0x776c <send_data_with_post+0x64e>
    7520:	ce 01       	movw	r24, r28
    7522:	84 5a       	subi	r24, 0xA4	; 164
    7524:	9f 4f       	sbci	r25, 0xFF	; 255
    7526:	dc 01       	movw	r26, r24
    7528:	15 96       	adiw	r26, 0x05	; 5
    752a:	6d 90       	ld	r6, X+
    752c:	7c 90       	ld	r7, X
    752e:	16 97       	sbiw	r26, 0x06	; 6
    7530:	ce 01       	movw	r24, r28
    7532:	84 5a       	subi	r24, 0xA4	; 164
    7534:	9f 4f       	sbci	r25, 0xFF	; 255
    7536:	fc 01       	movw	r30, r24
    7538:	84 81       	ldd	r24, Z+4	; 0x04
    753a:	88 2e       	mov	r8, r24
    753c:	91 2c       	mov	r9, r1
    753e:	ce 01       	movw	r24, r28
    7540:	84 5a       	subi	r24, 0xA4	; 164
    7542:	9f 4f       	sbci	r25, 0xFF	; 255
    7544:	dc 01       	movw	r26, r24
    7546:	91 96       	adiw	r26, 0x21	; 33
    7548:	ad 90       	ld	r10, X+
    754a:	bc 90       	ld	r11, X
    754c:	92 97       	sbiw	r26, 0x22	; 34
    754e:	ce 01       	movw	r24, r28
    7550:	84 5a       	subi	r24, 0xA4	; 164
    7552:	9f 4f       	sbci	r25, 0xFF	; 255
    7554:	fc 01       	movw	r30, r24
    7556:	c5 8c       	ldd	r12, Z+29	; 0x1d
    7558:	d6 8c       	ldd	r13, Z+30	; 0x1e
    755a:	ce 01       	movw	r24, r28
    755c:	84 5a       	subi	r24, 0xA4	; 164
    755e:	9f 4f       	sbci	r25, 0xFF	; 255
    7560:	dc 01       	movw	r26, r24
    7562:	5b 96       	adiw	r26, 0x1b	; 27
    7564:	ed 90       	ld	r14, X+
    7566:	fc 90       	ld	r15, X
    7568:	5c 97       	sbiw	r26, 0x1c	; 28
    756a:	ce 01       	movw	r24, r28
    756c:	84 5a       	subi	r24, 0xA4	; 164
    756e:	9f 4f       	sbci	r25, 0xFF	; 255
    7570:	fc 01       	movw	r30, r24
    7572:	07 8d       	ldd	r16, Z+31	; 0x1f
    7574:	10 a1       	ldd	r17, Z+32	; 0x20
    7576:	ce 01       	movw	r24, r28
    7578:	84 5a       	subi	r24, 0xA4	; 164
    757a:	9f 4f       	sbci	r25, 0xFF	; 255
    757c:	dc 01       	movw	r26, r24
    757e:	93 96       	adiw	r26, 0x23	; 35
    7580:	0d 90       	ld	r0, X+
    7582:	bc 91       	ld	r27, X
    7584:	a0 2d       	mov	r26, r0
    7586:	c4 50       	subi	r28, 0x04	; 4
    7588:	df 4f       	sbci	r29, 0xFF	; 255
    758a:	a8 83       	st	Y, r26
    758c:	b9 83       	std	Y+1, r27	; 0x01
    758e:	cc 5f       	subi	r28, 0xFC	; 252
    7590:	d0 40       	sbci	r29, 0x00	; 0
    7592:	ce 01       	movw	r24, r28
    7594:	84 5a       	subi	r24, 0xA4	; 164
    7596:	9f 4f       	sbci	r25, 0xFF	; 255
    7598:	fc 01       	movw	r30, r24
    759a:	80 81       	ld	r24, Z
    759c:	91 81       	ldd	r25, Z+1	; 0x01
    759e:	a2 81       	ldd	r26, Z+2	; 0x02
    75a0:	b3 81       	ldd	r27, Z+3	; 0x03
    75a2:	61 eb       	ldi	r22, 0xB1	; 177
    75a4:	73 e0       	ldi	r23, 0x03	; 3
    75a6:	4f 81       	ldd	r20, Y+7	; 0x07
    75a8:	58 85       	ldd	r21, Y+8	; 0x08
    75aa:	2b 81       	ldd	r18, Y+3	; 0x03
    75ac:	3c 81       	ldd	r19, Y+4	; 0x04
    75ae:	42 1b       	sub	r20, r18
    75b0:	53 0b       	sbc	r21, r19
    75b2:	4b 84       	ldd	r4, Y+11	; 0x0b
    75b4:	5c 84       	ldd	r5, Y+12	; 0x0c
    75b6:	2b 81       	ldd	r18, Y+3	; 0x03
    75b8:	3c 81       	ldd	r19, Y+4	; 0x04
    75ba:	24 0d       	add	r18, r4
    75bc:	35 1d       	adc	r19, r5
    75be:	57 2c       	mov	r5, r7
    75c0:	5f 92       	push	r5
    75c2:	76 2c       	mov	r7, r6
    75c4:	7f 92       	push	r7
    75c6:	79 2c       	mov	r7, r9
    75c8:	7f 92       	push	r7
    75ca:	98 2c       	mov	r9, r8
    75cc:	9f 92       	push	r9
    75ce:	9b 2c       	mov	r9, r11
    75d0:	9f 92       	push	r9
    75d2:	ba 2c       	mov	r11, r10
    75d4:	bf 92       	push	r11
    75d6:	bd 2c       	mov	r11, r13
    75d8:	bf 92       	push	r11
    75da:	dc 2c       	mov	r13, r12
    75dc:	df 92       	push	r13
    75de:	df 2c       	mov	r13, r15
    75e0:	df 92       	push	r13
    75e2:	fe 2c       	mov	r15, r14
    75e4:	ff 92       	push	r15
    75e6:	f1 2e       	mov	r15, r17
    75e8:	ff 92       	push	r15
    75ea:	10 2f       	mov	r17, r16
    75ec:	1f 93       	push	r17
    75ee:	c3 50       	subi	r28, 0x03	; 3
    75f0:	df 4f       	sbci	r29, 0xFF	; 255
    75f2:	18 81       	ld	r17, Y
    75f4:	cd 5f       	subi	r28, 0xFD	; 253
    75f6:	d0 40       	sbci	r29, 0x00	; 0
    75f8:	1f 93       	push	r17
    75fa:	c4 50       	subi	r28, 0x04	; 4
    75fc:	df 4f       	sbci	r29, 0xFF	; 255
    75fe:	e8 81       	ld	r30, Y
    7600:	cc 5f       	subi	r28, 0xFC	; 252
    7602:	d0 40       	sbci	r29, 0x00	; 0
    7604:	ef 93       	push	r30
    7606:	eb 2f       	mov	r30, r27
    7608:	ef 93       	push	r30
    760a:	ea 2f       	mov	r30, r26
    760c:	ef 93       	push	r30
    760e:	e9 2f       	mov	r30, r25
    7610:	ef 93       	push	r30
    7612:	8f 93       	push	r24
    7614:	87 2f       	mov	r24, r23
    7616:	8f 93       	push	r24
    7618:	86 2f       	mov	r24, r22
    761a:	8f 93       	push	r24
    761c:	85 2f       	mov	r24, r21
    761e:	8f 93       	push	r24
    7620:	84 2f       	mov	r24, r20
    7622:	8f 93       	push	r24
    7624:	83 2f       	mov	r24, r19
    7626:	8f 93       	push	r24
    7628:	82 2f       	mov	r24, r18
    762a:	8f 93       	push	r24
    762c:	0e 94 7f 74 	call	0xe8fe	; 0xe8fe <snprintf_P>
    7630:	2d b7       	in	r18, 0x3d	; 61
    7632:	3e b7       	in	r19, 0x3e	; 62
    7634:	28 5e       	subi	r18, 0xE8	; 232
    7636:	3f 4f       	sbci	r19, 0xFF	; 255
    7638:	2d bf       	out	0x3d, r18	; 61
    763a:	3e bf       	out	0x3e, r19	; 62
    763c:	2b 85       	ldd	r18, Y+11	; 0x0b
    763e:	3c 85       	ldd	r19, Y+12	; 0x0c
    7640:	8b 81       	ldd	r24, Y+3	; 0x03
    7642:	9c 81       	ldd	r25, Y+4	; 0x04
    7644:	82 0f       	add	r24, r18
    7646:	93 1f       	adc	r25, r19
    7648:	60 e0       	ldi	r22, 0x00	; 0
    764a:	71 e0       	ldi	r23, 0x01	; 1
    764c:	0e 94 55 74 	call	0xe8aa	; 0xe8aa <strnlen>
    7650:	2b 81       	ldd	r18, Y+3	; 0x03
    7652:	3c 81       	ldd	r19, Y+4	; 0x04
    7654:	82 0f       	add	r24, r18
    7656:	93 1f       	adc	r25, r19
    7658:	8b 83       	std	Y+3, r24	; 0x03
    765a:	9c 83       	std	Y+4, r25	; 0x04
    765c:	1e 82       	std	Y+6, r1	; 0x06
    765e:	47 c0       	rjmp	.+142    	; 0x76ee <send_data_with_post+0x5d0>
    7660:	8e 81       	ldd	r24, Y+6	; 0x06
    7662:	88 2f       	mov	r24, r24
    7664:	90 e0       	ldi	r25, 0x00	; 0
    7666:	9e 01       	movw	r18, r28
    7668:	24 5a       	subi	r18, 0xA4	; 164
    766a:	3f 4f       	sbci	r19, 0xFF	; 255
    766c:	82 0f       	add	r24, r18
    766e:	93 1f       	adc	r25, r19
    7670:	07 96       	adiw	r24, 0x07	; 7
    7672:	dc 01       	movw	r26, r24
    7674:	8c 91       	ld	r24, X
    7676:	e8 2f       	mov	r30, r24
    7678:	f0 e0       	ldi	r31, 0x00	; 0
    767a:	8e 81       	ldd	r24, Y+6	; 0x06
    767c:	68 2f       	mov	r22, r24
    767e:	70 e0       	ldi	r23, 0x00	; 0
    7680:	4d ee       	ldi	r20, 0xED	; 237
    7682:	53 e0       	ldi	r21, 0x03	; 3
    7684:	2f 81       	ldd	r18, Y+7	; 0x07
    7686:	38 85       	ldd	r19, Y+8	; 0x08
    7688:	8b 81       	ldd	r24, Y+3	; 0x03
    768a:	9c 81       	ldd	r25, Y+4	; 0x04
    768c:	28 1b       	sub	r18, r24
    768e:	39 0b       	sbc	r19, r25
    7690:	ab 85       	ldd	r26, Y+11	; 0x0b
    7692:	bc 85       	ldd	r27, Y+12	; 0x0c
    7694:	8b 81       	ldd	r24, Y+3	; 0x03
    7696:	9c 81       	ldd	r25, Y+4	; 0x04
    7698:	8a 0f       	add	r24, r26
    769a:	9b 1f       	adc	r25, r27
    769c:	af 2f       	mov	r26, r31
    769e:	af 93       	push	r26
    76a0:	ef 93       	push	r30
    76a2:	e7 2f       	mov	r30, r23
    76a4:	ef 93       	push	r30
    76a6:	6f 93       	push	r22
    76a8:	65 2f       	mov	r22, r21
    76aa:	6f 93       	push	r22
    76ac:	4f 93       	push	r20
    76ae:	43 2f       	mov	r20, r19
    76b0:	4f 93       	push	r20
    76b2:	2f 93       	push	r18
    76b4:	29 2f       	mov	r18, r25
    76b6:	2f 93       	push	r18
    76b8:	8f 93       	push	r24
    76ba:	0e 94 7f 74 	call	0xe8fe	; 0xe8fe <snprintf_P>
    76be:	ed b7       	in	r30, 0x3d	; 61
    76c0:	fe b7       	in	r31, 0x3e	; 62
    76c2:	3a 96       	adiw	r30, 0x0a	; 10
    76c4:	ed bf       	out	0x3d, r30	; 61
    76c6:	fe bf       	out	0x3e, r31	; 62
    76c8:	2b 85       	ldd	r18, Y+11	; 0x0b
    76ca:	3c 85       	ldd	r19, Y+12	; 0x0c
    76cc:	8b 81       	ldd	r24, Y+3	; 0x03
    76ce:	9c 81       	ldd	r25, Y+4	; 0x04
    76d0:	82 0f       	add	r24, r18
    76d2:	93 1f       	adc	r25, r19
    76d4:	60 e0       	ldi	r22, 0x00	; 0
    76d6:	71 e0       	ldi	r23, 0x01	; 1
    76d8:	0e 94 55 74 	call	0xe8aa	; 0xe8aa <strnlen>
    76dc:	2b 81       	ldd	r18, Y+3	; 0x03
    76de:	3c 81       	ldd	r19, Y+4	; 0x04
    76e0:	82 0f       	add	r24, r18
    76e2:	93 1f       	adc	r25, r19
    76e4:	8b 83       	std	Y+3, r24	; 0x03
    76e6:	9c 83       	std	Y+4, r25	; 0x04
    76e8:	8e 81       	ldd	r24, Y+6	; 0x06
    76ea:	8f 5f       	subi	r24, 0xFF	; 255
    76ec:	8e 83       	std	Y+6, r24	; 0x06
    76ee:	8e 81       	ldd	r24, Y+6	; 0x06
    76f0:	84 31       	cpi	r24, 0x14	; 20
    76f2:	08 f4       	brcc	.+2      	; 0x76f6 <send_data_with_post+0x5d8>
    76f4:	b5 cf       	rjmp	.-150    	; 0x7660 <send_data_with_post+0x542>
    76f6:	ce 01       	movw	r24, r28
    76f8:	84 5a       	subi	r24, 0xA4	; 164
    76fa:	9f 4f       	sbci	r25, 0xFF	; 255
    76fc:	dc 01       	movw	r26, r24
    76fe:	95 96       	adiw	r26, 0x25	; 37
    7700:	8c 91       	ld	r24, X
    7702:	95 97       	sbiw	r26, 0x25	; 37
    7704:	88 23       	and	r24, r24
    7706:	79 f5       	brne	.+94     	; 0x7766 <send_data_with_post+0x648>
    7708:	ce 01       	movw	r24, r28
    770a:	8b 57       	subi	r24, 0x7B	; 123
    770c:	9f 4f       	sbci	r25, 0xFF	; 255
    770e:	fc 01       	movw	r30, r24
    7710:	80 81       	ld	r24, Z
    7712:	91 81       	ldd	r25, Z+1	; 0x01
    7714:	a2 81       	ldd	r26, Z+2	; 0x02
    7716:	b3 81       	ldd	r27, Z+3	; 0x03
    7718:	85 96       	adiw	r24, 0x25	; 37
    771a:	a1 1d       	adc	r26, r1
    771c:	b1 1d       	adc	r27, r1
    771e:	9e 01       	movw	r18, r28
    7720:	26 55       	subi	r18, 0x56	; 86
    7722:	3f 4f       	sbci	r19, 0xFF	; 255
    7724:	f9 01       	movw	r30, r18
    7726:	80 83       	st	Z, r24
    7728:	91 83       	std	Z+1, r25	; 0x01
    772a:	a2 83       	std	Z+2, r26	; 0x02
    772c:	b3 83       	std	Z+3, r27	; 0x03
    772e:	8d 81       	ldd	r24, Y+5	; 0x05
    7730:	88 2f       	mov	r24, r24
    7732:	90 e0       	ldi	r25, 0x00	; 0
    7734:	88 0f       	add	r24, r24
    7736:	99 1f       	adc	r25, r25
    7738:	88 0f       	add	r24, r24
    773a:	99 1f       	adc	r25, r25
    773c:	9e 01       	movw	r18, r28
    773e:	2f 5f       	subi	r18, 0xFF	; 255
    7740:	3f 4f       	sbci	r19, 0xFF	; 255
    7742:	82 0f       	add	r24, r18
    7744:	93 1f       	adc	r25, r19
    7746:	9c 01       	movw	r18, r24
    7748:	27 5e       	subi	r18, 0xE7	; 231
    774a:	3f 4f       	sbci	r19, 0xFF	; 255
    774c:	ce 01       	movw	r24, r28
    774e:	86 55       	subi	r24, 0x56	; 86
    7750:	9f 4f       	sbci	r25, 0xFF	; 255
    7752:	fc 01       	movw	r30, r24
    7754:	80 81       	ld	r24, Z
    7756:	91 81       	ldd	r25, Z+1	; 0x01
    7758:	a2 81       	ldd	r26, Z+2	; 0x02
    775a:	b3 81       	ldd	r27, Z+3	; 0x03
    775c:	f9 01       	movw	r30, r18
    775e:	80 83       	st	Z, r24
    7760:	91 83       	std	Z+1, r25	; 0x01
    7762:	a2 83       	std	Z+2, r26	; 0x02
    7764:	b3 83       	std	Z+3, r27	; 0x03
    7766:	8d 81       	ldd	r24, Y+5	; 0x05
    7768:	8f 5f       	subi	r24, 0xFF	; 255
    776a:	8d 83       	std	Y+5, r24	; 0x05
    776c:	80 91 e2 20 	lds	r24, 0x20E2
    7770:	9d 81       	ldd	r25, Y+5	; 0x05
    7772:	98 17       	cp	r25, r24
    7774:	08 f4       	brcc	.+2      	; 0x7778 <send_data_with_post+0x65a>
    7776:	38 ce       	rjmp	.-912    	; 0x73e8 <send_data_with_post+0x2ca>
    7778:	8d 81       	ldd	r24, Y+5	; 0x05
    777a:	88 23       	and	r24, r24
    777c:	09 f4       	brne	.+2      	; 0x7780 <send_data_with_post+0x662>
    777e:	b0 c1       	rjmp	.+864    	; 0x7ae0 <send_data_with_post+0x9c2>
    7780:	ce 01       	movw	r24, r28
    7782:	82 51       	subi	r24, 0x12	; 18
    7784:	9f 4f       	sbci	r25, 0xFF	; 255
    7786:	dc 01       	movw	r26, r24
    7788:	2d 91       	ld	r18, X+
    778a:	3c 91       	ld	r19, X
    778c:	ce 01       	movw	r24, r28
    778e:	8b 57       	subi	r24, 0x7B	; 123
    7790:	9f 4f       	sbci	r25, 0xFF	; 255
    7792:	fc 01       	movw	r30, r24
    7794:	80 81       	ld	r24, Z
    7796:	91 81       	ldd	r25, Z+1	; 0x01
    7798:	a2 81       	ldd	r26, Z+2	; 0x02
    779a:	b3 81       	ldd	r27, Z+3	; 0x03
    779c:	f9 01       	movw	r30, r18
    779e:	80 83       	st	Z, r24
    77a0:	91 83       	std	Z+1, r25	; 0x01
    77a2:	a2 83       	std	Z+2, r26	; 0x02
    77a4:	b3 83       	std	Z+3, r27	; 0x03
    77a6:	2b 81       	ldd	r18, Y+3	; 0x03
    77a8:	3c 81       	ldd	r19, Y+4	; 0x04
    77aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    77ac:	98 89       	ldd	r25, Y+16	; 0x10
    77ae:	28 1b       	sub	r18, r24
    77b0:	39 0b       	sbc	r19, r25
    77b2:	4b 85       	ldd	r20, Y+11	; 0x0b
    77b4:	5c 85       	ldd	r21, Y+12	; 0x0c
    77b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    77b8:	98 89       	ldd	r25, Y+16	; 0x10
    77ba:	48 0f       	add	r20, r24
    77bc:	59 1f       	adc	r21, r25
    77be:	8b 85       	ldd	r24, Y+11	; 0x0b
    77c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    77c2:	00 e0       	ldi	r16, 0x00	; 0
    77c4:	60 e0       	ldi	r22, 0x00	; 0
    77c6:	0e 94 2f 54 	call	0xa85e	; 0xa85e <sim900_http_post>
    77ca:	89 83       	std	Y+1, r24	; 0x01
    77cc:	9a 83       	std	Y+2, r25	; 0x02
    77ce:	89 81       	ldd	r24, Y+1	; 0x01
    77d0:	9a 81       	ldd	r25, Y+2	; 0x02
    77d2:	00 97       	sbiw	r24, 0x00	; 0
    77d4:	09 f0       	breq	.+2      	; 0x77d8 <send_data_with_post+0x6ba>
    77d6:	86 c1       	rjmp	.+780    	; 0x7ae4 <send_data_with_post+0x9c6>
    77d8:	ce 01       	movw	r24, r28
    77da:	87 55       	subi	r24, 0x57	; 87
    77dc:	9f 4f       	sbci	r25, 0xFF	; 255
    77de:	20 e2       	ldi	r18, 0x20	; 32
    77e0:	dc 01       	movw	r26, r24
    77e2:	2c 93       	st	X, r18
    77e4:	9e 01       	movw	r18, r28
    77e6:	27 55       	subi	r18, 0x57	; 87
    77e8:	3f 4f       	sbci	r19, 0xFF	; 255
    77ea:	ce 01       	movw	r24, r28
    77ec:	87 57       	subi	r24, 0x77	; 119
    77ee:	9f 4f       	sbci	r25, 0xFF	; 255
    77f0:	b9 01       	movw	r22, r18
    77f2:	0e 94 ec 52 	call	0xa5d8	; 0xa5d8 <sim900_http_read>
    77f6:	ce 01       	movw	r24, r28
    77f8:	87 57       	subi	r24, 0x77	; 119
    77fa:	9f 4f       	sbci	r25, 0xFF	; 255
    77fc:	fc 01       	movw	r30, r24
    77fe:	17 8e       	std	Z+31, r1	; 0x1f
    7800:	85 ef       	ldi	r24, 0xF5	; 245
    7802:	93 e0       	ldi	r25, 0x03	; 3
    7804:	41 e0       	ldi	r20, 0x01	; 1
    7806:	bc 01       	movw	r22, r24
    7808:	81 e0       	ldi	r24, 0x01	; 1
    780a:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    780e:	ce 01       	movw	r24, r28
    7810:	87 57       	subi	r24, 0x77	; 119
    7812:	9f 4f       	sbci	r25, 0xFF	; 255
    7814:	40 e0       	ldi	r20, 0x00	; 0
    7816:	bc 01       	movw	r22, r24
    7818:	81 e0       	ldi	r24, 0x01	; 1
    781a:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    781e:	41 e0       	ldi	r20, 0x01	; 1
    7820:	69 e1       	ldi	r22, 0x19	; 25
    7822:	70 e2       	ldi	r23, 0x20	; 32
    7824:	81 e0       	ldi	r24, 0x01	; 1
    7826:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    782a:	0e 94 1a 55 	call	0xaa34	; 0xaa34 <sim900_http_close>
    782e:	ce 01       	movw	r24, r28
    7830:	84 5a       	subi	r24, 0xA4	; 164
    7832:	9f 4f       	sbci	r25, 0xFF	; 255
    7834:	21 e0       	ldi	r18, 0x01	; 1
    7836:	dc 01       	movw	r26, r24
    7838:	95 96       	adiw	r26, 0x25	; 37
    783a:	2c 93       	st	X, r18
    783c:	95 97       	sbiw	r26, 0x25	; 37
    783e:	1d 82       	std	Y+5, r1	; 0x05
    7840:	11 c1       	rjmp	.+546    	; 0x7a64 <send_data_with_post+0x946>
    7842:	8d 81       	ldd	r24, Y+5	; 0x05
    7844:	88 2f       	mov	r24, r24
    7846:	90 e0       	ldi	r25, 0x00	; 0
    7848:	88 0f       	add	r24, r24
    784a:	99 1f       	adc	r25, r25
    784c:	88 0f       	add	r24, r24
    784e:	99 1f       	adc	r25, r25
    7850:	9e 01       	movw	r18, r28
    7852:	2f 5f       	subi	r18, 0xFF	; 255
    7854:	3f 4f       	sbci	r19, 0xFF	; 255
    7856:	82 0f       	add	r24, r18
    7858:	93 1f       	adc	r25, r19
    785a:	49 96       	adiw	r24, 0x19	; 25
    785c:	fc 01       	movw	r30, r24
    785e:	80 81       	ld	r24, Z
    7860:	91 81       	ldd	r25, Z+1	; 0x01
    7862:	a2 81       	ldd	r26, Z+2	; 0x02
    7864:	b3 81       	ldd	r27, Z+3	; 0x03
    7866:	00 97       	sbiw	r24, 0x00	; 0
    7868:	a1 05       	cpc	r26, r1
    786a:	b1 05       	cpc	r27, r1
    786c:	09 f4       	brne	.+2      	; 0x7870 <send_data_with_post+0x752>
    786e:	f6 c0       	rjmp	.+492    	; 0x7a5c <send_data_with_post+0x93e>
    7870:	8d 81       	ldd	r24, Y+5	; 0x05
    7872:	88 2f       	mov	r24, r24
    7874:	90 e0       	ldi	r25, 0x00	; 0
    7876:	9e 01       	movw	r18, r28
    7878:	26 5e       	subi	r18, 0xE6	; 230
    787a:	3f 4f       	sbci	r19, 0xFF	; 255
    787c:	88 0f       	add	r24, r24
    787e:	99 1f       	adc	r25, r25
    7880:	88 0f       	add	r24, r24
    7882:	99 1f       	adc	r25, r25
    7884:	82 0f       	add	r24, r18
    7886:	93 1f       	adc	r25, r19
    7888:	9e 01       	movw	r18, r28
    788a:	2c 57       	subi	r18, 0x7C	; 124
    788c:	3f 4f       	sbci	r19, 0xFF	; 255
    788e:	ae 01       	movw	r20, r28
    7890:	4d 57       	subi	r20, 0x7D	; 125
    7892:	5f 4f       	sbci	r21, 0xFF	; 255
    7894:	be 01       	movw	r22, r28
    7896:	6e 57       	subi	r22, 0x7E	; 126
    7898:	7f 4f       	sbci	r23, 0xFF	; 255
    789a:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <AT24CXX_iterator_to_address>
    789e:	ce 01       	movw	r24, r28
    78a0:	8c 57       	subi	r24, 0x7C	; 124
    78a2:	9f 4f       	sbci	r25, 0xFF	; 255
    78a4:	dc 01       	movw	r26, r24
    78a6:	4c 91       	ld	r20, X
    78a8:	ce 01       	movw	r24, r28
    78aa:	8d 57       	subi	r24, 0x7D	; 125
    78ac:	9f 4f       	sbci	r25, 0xFF	; 255
    78ae:	fc 01       	movw	r30, r24
    78b0:	60 81       	ld	r22, Z
    78b2:	ce 01       	movw	r24, r28
    78b4:	8e 57       	subi	r24, 0x7E	; 126
    78b6:	9f 4f       	sbci	r25, 0xFF	; 255
    78b8:	dc 01       	movw	r26, r24
    78ba:	5c 91       	ld	r21, X
    78bc:	ce 01       	movw	r24, r28
    78be:	84 5a       	subi	r24, 0xA4	; 164
    78c0:	9f 4f       	sbci	r25, 0xFF	; 255
    78c2:	85 96       	adiw	r24, 0x25	; 37
    78c4:	01 e0       	ldi	r16, 0x01	; 1
    78c6:	9c 01       	movw	r18, r24
    78c8:	85 2f       	mov	r24, r21
    78ca:	0e 94 8a 45 	call	0x8b14	; 0x8b14 <AT24CXX_WriteBlockA>
    78ce:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <sysclk_get_cpu_hz>
    78d2:	dc 01       	movw	r26, r24
    78d4:	cb 01       	movw	r24, r22
    78d6:	1c 01       	movw	r2, r24
    78d8:	2d 01       	movw	r4, r26
    78da:	61 2c       	mov	r6, r1
    78dc:	71 2c       	mov	r7, r1
    78de:	43 01       	movw	r8, r6
    78e0:	a2 2c       	mov	r10, r2
    78e2:	b3 2c       	mov	r11, r3
    78e4:	c4 2c       	mov	r12, r4
    78e6:	d5 2c       	mov	r13, r5
    78e8:	e6 2c       	mov	r14, r6
    78ea:	f7 2c       	mov	r15, r7
    78ec:	08 2d       	mov	r16, r8
    78ee:	19 2d       	mov	r17, r9
    78f0:	2a 2d       	mov	r18, r10
    78f2:	3b 2d       	mov	r19, r11
    78f4:	4c 2d       	mov	r20, r12
    78f6:	5d 2d       	mov	r21, r13
    78f8:	6e 2d       	mov	r22, r14
    78fa:	7f 2d       	mov	r23, r15
    78fc:	80 2f       	mov	r24, r16
    78fe:	91 2f       	mov	r25, r17
    7900:	02 e0       	ldi	r16, 0x02	; 2
    7902:	0e 94 a2 72 	call	0xe544	; 0xe544 <__ashldi3>
    7906:	ce 50       	subi	r28, 0x0E	; 14
    7908:	df 4f       	sbci	r29, 0xFF	; 255
    790a:	28 83       	st	Y, r18
    790c:	c2 5f       	subi	r28, 0xF2	; 242
    790e:	d0 40       	sbci	r29, 0x00	; 0
    7910:	cd 50       	subi	r28, 0x0D	; 13
    7912:	df 4f       	sbci	r29, 0xFF	; 255
    7914:	38 83       	st	Y, r19
    7916:	c3 5f       	subi	r28, 0xF3	; 243
    7918:	d0 40       	sbci	r29, 0x00	; 0
    791a:	cc 50       	subi	r28, 0x0C	; 12
    791c:	df 4f       	sbci	r29, 0xFF	; 255
    791e:	48 83       	st	Y, r20
    7920:	c4 5f       	subi	r28, 0xF4	; 244
    7922:	d0 40       	sbci	r29, 0x00	; 0
    7924:	cb 50       	subi	r28, 0x0B	; 11
    7926:	df 4f       	sbci	r29, 0xFF	; 255
    7928:	58 83       	st	Y, r21
    792a:	c5 5f       	subi	r28, 0xF5	; 245
    792c:	d0 40       	sbci	r29, 0x00	; 0
    792e:	ca 50       	subi	r28, 0x0A	; 10
    7930:	df 4f       	sbci	r29, 0xFF	; 255
    7932:	68 83       	st	Y, r22
    7934:	c6 5f       	subi	r28, 0xF6	; 246
    7936:	d0 40       	sbci	r29, 0x00	; 0
    7938:	c9 50       	subi	r28, 0x09	; 9
    793a:	df 4f       	sbci	r29, 0xFF	; 255
    793c:	78 83       	st	Y, r23
    793e:	c7 5f       	subi	r28, 0xF7	; 247
    7940:	d0 40       	sbci	r29, 0x00	; 0
    7942:	c8 50       	subi	r28, 0x08	; 8
    7944:	df 4f       	sbci	r29, 0xFF	; 255
    7946:	88 83       	st	Y, r24
    7948:	c8 5f       	subi	r28, 0xF8	; 248
    794a:	d0 40       	sbci	r29, 0x00	; 0
    794c:	c7 50       	subi	r28, 0x07	; 7
    794e:	df 4f       	sbci	r29, 0xFF	; 255
    7950:	98 83       	st	Y, r25
    7952:	c9 5f       	subi	r28, 0xF9	; 249
    7954:	d0 40       	sbci	r29, 0x00	; 0
    7956:	ce 50       	subi	r28, 0x0E	; 14
    7958:	df 4f       	sbci	r29, 0xFF	; 255
    795a:	a8 80       	ld	r10, Y
    795c:	c2 5f       	subi	r28, 0xF2	; 242
    795e:	d0 40       	sbci	r29, 0x00	; 0
    7960:	cd 50       	subi	r28, 0x0D	; 13
    7962:	df 4f       	sbci	r29, 0xFF	; 255
    7964:	b8 80       	ld	r11, Y
    7966:	c3 5f       	subi	r28, 0xF3	; 243
    7968:	d0 40       	sbci	r29, 0x00	; 0
    796a:	cc 50       	subi	r28, 0x0C	; 12
    796c:	df 4f       	sbci	r29, 0xFF	; 255
    796e:	c8 80       	ld	r12, Y
    7970:	c4 5f       	subi	r28, 0xF4	; 244
    7972:	d0 40       	sbci	r29, 0x00	; 0
    7974:	cb 50       	subi	r28, 0x0B	; 11
    7976:	df 4f       	sbci	r29, 0xFF	; 255
    7978:	d8 80       	ld	r13, Y
    797a:	c5 5f       	subi	r28, 0xF5	; 245
    797c:	d0 40       	sbci	r29, 0x00	; 0
    797e:	ca 50       	subi	r28, 0x0A	; 10
    7980:	df 4f       	sbci	r29, 0xFF	; 255
    7982:	e8 80       	ld	r14, Y
    7984:	c6 5f       	subi	r28, 0xF6	; 246
    7986:	d0 40       	sbci	r29, 0x00	; 0
    7988:	c9 50       	subi	r28, 0x09	; 9
    798a:	df 4f       	sbci	r29, 0xFF	; 255
    798c:	f8 80       	ld	r15, Y
    798e:	c7 5f       	subi	r28, 0xF7	; 247
    7990:	d0 40       	sbci	r29, 0x00	; 0
    7992:	c8 50       	subi	r28, 0x08	; 8
    7994:	df 4f       	sbci	r29, 0xFF	; 255
    7996:	08 81       	ld	r16, Y
    7998:	c8 5f       	subi	r28, 0xF8	; 248
    799a:	d0 40       	sbci	r29, 0x00	; 0
    799c:	c7 50       	subi	r28, 0x07	; 7
    799e:	df 4f       	sbci	r29, 0xFF	; 255
    79a0:	18 81       	ld	r17, Y
    79a2:	c9 5f       	subi	r28, 0xF9	; 249
    79a4:	d0 40       	sbci	r29, 0x00	; 0
    79a6:	2a 2d       	mov	r18, r10
    79a8:	3b 2d       	mov	r19, r11
    79aa:	4c 2d       	mov	r20, r12
    79ac:	5d 2d       	mov	r21, r13
    79ae:	6e 2d       	mov	r22, r14
    79b0:	7f 2d       	mov	r23, r15
    79b2:	80 2f       	mov	r24, r16
    79b4:	91 2f       	mov	r25, r17
    79b6:	a2 2c       	mov	r10, r2
    79b8:	b3 2c       	mov	r11, r3
    79ba:	c4 2c       	mov	r12, r4
    79bc:	d5 2c       	mov	r13, r5
    79be:	e6 2c       	mov	r14, r6
    79c0:	f7 2c       	mov	r15, r7
    79c2:	08 2d       	mov	r16, r8
    79c4:	19 2d       	mov	r17, r9
    79c6:	0e 94 b1 72 	call	0xe562	; 0xe562 <__adddi3>
    79ca:	a2 2e       	mov	r10, r18
    79cc:	b3 2e       	mov	r11, r19
    79ce:	c4 2e       	mov	r12, r20
    79d0:	d5 2e       	mov	r13, r21
    79d2:	e6 2e       	mov	r14, r22
    79d4:	f7 2e       	mov	r15, r23
    79d6:	08 2f       	mov	r16, r24
    79d8:	19 2f       	mov	r17, r25
    79da:	2a 2d       	mov	r18, r10
    79dc:	3b 2d       	mov	r19, r11
    79de:	4c 2d       	mov	r20, r12
    79e0:	5d 2d       	mov	r21, r13
    79e2:	6e 2d       	mov	r22, r14
    79e4:	7f 2d       	mov	r23, r15
    79e6:	80 2f       	mov	r24, r16
    79e8:	91 2f       	mov	r25, r17
    79ea:	29 51       	subi	r18, 0x19	; 25
    79ec:	3c 4f       	sbci	r19, 0xFC	; 252
    79ee:	4f 4f       	sbci	r20, 0xFF	; 255
    79f0:	5f 4f       	sbci	r21, 0xFF	; 255
    79f2:	6f 4f       	sbci	r22, 0xFF	; 255
    79f4:	7f 4f       	sbci	r23, 0xFF	; 255
    79f6:	8f 4f       	sbci	r24, 0xFF	; 255
    79f8:	9f 4f       	sbci	r25, 0xFF	; 255
    79fa:	a2 2e       	mov	r10, r18
    79fc:	b3 2e       	mov	r11, r19
    79fe:	c4 2e       	mov	r12, r20
    7a00:	d5 2e       	mov	r13, r21
    7a02:	e6 2e       	mov	r14, r22
    7a04:	f7 2e       	mov	r15, r23
    7a06:	08 2f       	mov	r16, r24
    7a08:	19 2f       	mov	r17, r25
    7a0a:	2a 2d       	mov	r18, r10
    7a0c:	3b 2d       	mov	r19, r11
    7a0e:	4c 2d       	mov	r20, r12
    7a10:	5d 2d       	mov	r21, r13
    7a12:	6e 2d       	mov	r22, r14
    7a14:	7f 2d       	mov	r23, r15
    7a16:	80 2f       	mov	r24, r16
    7a18:	91 2f       	mov	r25, r17
    7a1a:	0e 94 56 11 	call	0x22ac	; 0x22ac <__floatundisf>
    7a1e:	dc 01       	movw	r26, r24
    7a20:	cb 01       	movw	r24, r22
    7a22:	20 e0       	ldi	r18, 0x00	; 0
    7a24:	30 e8       	ldi	r19, 0x80	; 128
    7a26:	4b eb       	ldi	r20, 0xBB	; 187
    7a28:	55 e4       	ldi	r21, 0x45	; 69
    7a2a:	bc 01       	movw	r22, r24
    7a2c:	cd 01       	movw	r24, r26
    7a2e:	0e 94 81 14 	call	0x2902	; 0x2902 <__divsf3>
    7a32:	dc 01       	movw	r26, r24
    7a34:	cb 01       	movw	r24, r22
    7a36:	bc 01       	movw	r22, r24
    7a38:	cd 01       	movw	r24, r26
    7a3a:	0e 94 a5 10 	call	0x214a	; 0x214a <__fixunssfdi>
    7a3e:	a2 2e       	mov	r10, r18
    7a40:	b3 2e       	mov	r11, r19
    7a42:	c4 2e       	mov	r12, r20
    7a44:	d5 2e       	mov	r13, r21
    7a46:	e6 2e       	mov	r14, r22
    7a48:	f7 2e       	mov	r15, r23
    7a4a:	08 2f       	mov	r16, r24
    7a4c:	19 2f       	mov	r17, r25
    7a4e:	d6 01       	movw	r26, r12
    7a50:	c5 01       	movw	r24, r10
    7a52:	bc 01       	movw	r22, r24
    7a54:	cd 01       	movw	r24, r26
    7a56:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__portable_avr_delay_cycles>
    7a5a:	01 c0       	rjmp	.+2      	; 0x7a5e <send_data_with_post+0x940>
    7a5c:	00 00       	nop
    7a5e:	8d 81       	ldd	r24, Y+5	; 0x05
    7a60:	8f 5f       	subi	r24, 0xFF	; 255
    7a62:	8d 83       	std	Y+5, r24	; 0x05
    7a64:	80 91 e2 20 	lds	r24, 0x20E2
    7a68:	9d 81       	ldd	r25, Y+5	; 0x05
    7a6a:	98 17       	cp	r25, r24
    7a6c:	08 f4       	brcc	.+2      	; 0x7a70 <send_data_with_post+0x952>
    7a6e:	e9 ce       	rjmp	.-558    	; 0x7842 <send_data_with_post+0x724>
    7a70:	ce 01       	movw	r24, r28
    7a72:	84 5a       	subi	r24, 0xA4	; 164
    7a74:	9f 4f       	sbci	r25, 0xFF	; 255
    7a76:	fc 01       	movw	r30, r24
    7a78:	20 81       	ld	r18, Z
    7a7a:	31 81       	ldd	r19, Z+1	; 0x01
    7a7c:	42 81       	ldd	r20, Z+2	; 0x02
    7a7e:	53 81       	ldd	r21, Z+3	; 0x03
    7a80:	8d 89       	ldd	r24, Y+21	; 0x15
    7a82:	9e 89       	ldd	r25, Y+22	; 0x16
    7a84:	af 89       	ldd	r26, Y+23	; 0x17
    7a86:	b8 8d       	ldd	r27, Y+24	; 0x18
    7a88:	28 17       	cp	r18, r24
    7a8a:	39 07       	cpc	r19, r25
    7a8c:	4a 07       	cpc	r20, r26
    7a8e:	5b 07       	cpc	r21, r27
    7a90:	50 f1       	brcs	.+84     	; 0x7ae6 <send_data_with_post+0x9c8>
    7a92:	ce 01       	movw	r24, r28
    7a94:	82 51       	subi	r24, 0x12	; 18
    7a96:	9f 4f       	sbci	r25, 0xFF	; 255
    7a98:	dc 01       	movw	r26, r24
    7a9a:	8d 91       	ld	r24, X+
    7a9c:	9c 91       	ld	r25, X
    7a9e:	fc 01       	movw	r30, r24
    7aa0:	20 81       	ld	r18, Z
    7aa2:	31 81       	ldd	r19, Z+1	; 0x01
    7aa4:	42 81       	ldd	r20, Z+2	; 0x02
    7aa6:	53 81       	ldd	r21, Z+3	; 0x03
    7aa8:	80 91 86 21 	lds	r24, 0x2186
    7aac:	90 91 87 21 	lds	r25, 0x2187
    7ab0:	a0 91 88 21 	lds	r26, 0x2188
    7ab4:	b0 91 89 21 	lds	r27, 0x2189
    7ab8:	28 17       	cp	r18, r24
    7aba:	39 07       	cpc	r19, r25
    7abc:	4a 07       	cpc	r20, r26
    7abe:	5b 07       	cpc	r21, r27
    7ac0:	91 f0       	breq	.+36     	; 0x7ae6 <send_data_with_post+0x9c8>
    7ac2:	87 e0       	ldi	r24, 0x07	; 7
    7ac4:	94 e0       	ldi	r25, 0x04	; 4
    7ac6:	20 91 0c 20 	lds	r18, 0x200C
    7aca:	41 e0       	ldi	r20, 0x01	; 1
    7acc:	bc 01       	movw	r22, r24
    7ace:	82 2f       	mov	r24, r18
    7ad0:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    7ad4:	81 e0       	ldi	r24, 0x01	; 1
    7ad6:	80 93 0c 20 	sts	0x200C, r24
    7ada:	03 e6       	ldi	r16, 0x63	; 99
    7adc:	10 e0       	ldi	r17, 0x00	; 0
    7ade:	16 c0       	rjmp	.+44     	; 0x7b0c <send_data_with_post+0x9ee>
    7ae0:	00 00       	nop
    7ae2:	01 c0       	rjmp	.+2      	; 0x7ae6 <send_data_with_post+0x9c8>
    7ae4:	00 00       	nop
    7ae6:	0e 94 1a 55 	call	0xaa34	; 0xaa34 <sim900_http_close>
    7aea:	80 91 1d 20 	lds	r24, 0x201D
    7aee:	80 93 0c 20 	sts	0x200C, r24
    7af2:	ce 01       	movw	r24, r28
    7af4:	82 51       	subi	r24, 0x12	; 18
    7af6:	9f 4f       	sbci	r25, 0xFF	; 255
    7af8:	dc 01       	movw	r26, r24
    7afa:	8d 91       	ld	r24, X+
    7afc:	9c 91       	ld	r25, X
    7afe:	fc 01       	movw	r30, r24
    7b00:	10 82       	st	Z, r1
    7b02:	11 82       	std	Z+1, r1	; 0x01
    7b04:	12 82       	std	Z+2, r1	; 0x02
    7b06:	13 82       	std	Z+3, r1	; 0x03
    7b08:	09 81       	ldd	r16, Y+1	; 0x01
    7b0a:	1a 81       	ldd	r17, Y+2	; 0x02
    7b0c:	ce 01       	movw	r24, r28
    7b0e:	86 5a       	subi	r24, 0xA6	; 166
    7b10:	9f 4f       	sbci	r25, 0xFF	; 255
    7b12:	0e 94 ca 59 	call	0xb394	; 0xb394 <debug_function_out_name_print>
    7b16:	c0 51       	subi	r28, 0x10	; 16
    7b18:	df 4f       	sbci	r29, 0xFF	; 255
    7b1a:	28 81       	ld	r18, Y
    7b1c:	39 81       	ldd	r19, Y+1	; 0x01
    7b1e:	c0 5f       	subi	r28, 0xF0	; 240
    7b20:	d0 40       	sbci	r29, 0x00	; 0
    7b22:	2d bf       	out	0x3d, r18	; 61
    7b24:	3e bf       	out	0x3e, r19	; 62
    7b26:	c8 01       	movw	r24, r16
    7b28:	c6 50       	subi	r28, 0x06	; 6
    7b2a:	df 4f       	sbci	r29, 0xFF	; 255
    7b2c:	a8 81       	ld	r26, Y
    7b2e:	b9 81       	ldd	r27, Y+1	; 0x01
    7b30:	ca 5f       	subi	r28, 0xFA	; 250
    7b32:	d0 40       	sbci	r29, 0x00	; 0
    7b34:	ad bf       	out	0x3d, r26	; 61
    7b36:	be bf       	out	0x3e, r27	; 62
    7b38:	c3 50       	subi	r28, 0x03	; 3
    7b3a:	df 4f       	sbci	r29, 0xFF	; 255
    7b3c:	cd bf       	out	0x3d, r28	; 61
    7b3e:	de bf       	out	0x3e, r29	; 62
    7b40:	df 91       	pop	r29
    7b42:	cf 91       	pop	r28
    7b44:	1f 91       	pop	r17
    7b46:	0f 91       	pop	r16
    7b48:	ff 90       	pop	r15
    7b4a:	ef 90       	pop	r14
    7b4c:	df 90       	pop	r13
    7b4e:	cf 90       	pop	r12
    7b50:	bf 90       	pop	r11
    7b52:	af 90       	pop	r10
    7b54:	9f 90       	pop	r9
    7b56:	8f 90       	pop	r8
    7b58:	7f 90       	pop	r7
    7b5a:	6f 90       	pop	r6
    7b5c:	5f 90       	pop	r5
    7b5e:	4f 90       	pop	r4
    7b60:	3f 90       	pop	r3
    7b62:	2f 90       	pop	r2
    7b64:	08 95       	ret

00007b66 <dl_snapshot_iter_inc>:

static void dl_snapshot_iter_inc(uint8_t * const idx)
{
    7b66:	cf 93       	push	r28
    7b68:	df 93       	push	r29
    7b6a:	1f 92       	push	r1
    7b6c:	1f 92       	push	r1
    7b6e:	cd b7       	in	r28, 0x3d	; 61
    7b70:	de b7       	in	r29, 0x3e	; 62
    7b72:	89 83       	std	Y+1, r24	; 0x01
    7b74:	9a 83       	std	Y+2, r25	; 0x02
	if( *idx==(SNAPSHOT_SIZE-1) ) {
    7b76:	89 81       	ldd	r24, Y+1	; 0x01
    7b78:	9a 81       	ldd	r25, Y+2	; 0x02
    7b7a:	fc 01       	movw	r30, r24
    7b7c:	80 81       	ld	r24, Z
    7b7e:	8f 30       	cpi	r24, 0x0F	; 15
    7b80:	29 f4       	brne	.+10     	; 0x7b8c <dl_snapshot_iter_inc+0x26>
		*idx=0;
    7b82:	89 81       	ldd	r24, Y+1	; 0x01
    7b84:	9a 81       	ldd	r25, Y+2	; 0x02
    7b86:	fc 01       	movw	r30, r24
    7b88:	10 82       	st	Z, r1
    7b8a:	0a c0       	rjmp	.+20     	; 0x7ba0 <dl_snapshot_iter_inc+0x3a>
		} else {
		(*idx)++;
    7b8c:	89 81       	ldd	r24, Y+1	; 0x01
    7b8e:	9a 81       	ldd	r25, Y+2	; 0x02
    7b90:	fc 01       	movw	r30, r24
    7b92:	80 81       	ld	r24, Z
    7b94:	28 2f       	mov	r18, r24
    7b96:	2f 5f       	subi	r18, 0xFF	; 255
    7b98:	89 81       	ldd	r24, Y+1	; 0x01
    7b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    7b9c:	fc 01       	movw	r30, r24
    7b9e:	20 83       	st	Z, r18
	}
	
}
    7ba0:	0f 90       	pop	r0
    7ba2:	0f 90       	pop	r0
    7ba4:	df 91       	pop	r29
    7ba6:	cf 91       	pop	r28
    7ba8:	08 95       	ret

00007baa <dl_snapshot_init>:


static void  dl_snapshot_init(const uint32_t ts)
{
    7baa:	cf 93       	push	r28
    7bac:	df 93       	push	r29
    7bae:	00 d0       	rcall	.+0      	; 0x7bb0 <dl_snapshot_init+0x6>
    7bb0:	00 d0       	rcall	.+0      	; 0x7bb2 <dl_snapshot_init+0x8>
    7bb2:	cd b7       	in	r28, 0x3d	; 61
    7bb4:	de b7       	in	r29, 0x3e	; 62
    7bb6:	6b 83       	std	Y+3, r22	; 0x03
    7bb8:	7c 83       	std	Y+4, r23	; 0x04
    7bba:	8d 83       	std	Y+5, r24	; 0x05
    7bbc:	9e 83       	std	Y+6, r25	; 0x06
	g_data_snapshot_beg = 0;
    7bbe:	10 92 1d 24 	sts	0x241D, r1
	g_data_snapshot_end = 0;
    7bc2:	10 92 1e 24 	sts	0x241E, r1

	DL_LOG_ITEM * const p_item = &g_data_snapshot[0];
    7bc6:	8d eb       	ldi	r24, 0xBD	; 189
    7bc8:	91 e2       	ldi	r25, 0x21	; 33
    7bca:	89 83       	std	Y+1, r24	; 0x01
    7bcc:	9a 83       	std	Y+2, r25	; 0x02
	p_item->data_timestamp = (ts==-1)?rtc_get_time():ts;
    7bce:	8b 81       	ldd	r24, Y+3	; 0x03
    7bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    7bd2:	ad 81       	ldd	r26, Y+5	; 0x05
    7bd4:	be 81       	ldd	r27, Y+6	; 0x06
    7bd6:	8f 3f       	cpi	r24, 0xFF	; 255
    7bd8:	2f ef       	ldi	r18, 0xFF	; 255
    7bda:	92 07       	cpc	r25, r18
    7bdc:	a2 07       	cpc	r26, r18
    7bde:	b2 07       	cpc	r27, r18
    7be0:	29 f4       	brne	.+10     	; 0x7bec <dl_snapshot_init+0x42>
    7be2:	0e 94 68 5f 	call	0xbed0	; 0xbed0 <rtc_get_time>
    7be6:	dc 01       	movw	r26, r24
    7be8:	cb 01       	movw	r24, r22
    7bea:	04 c0       	rjmp	.+8      	; 0x7bf4 <dl_snapshot_init+0x4a>
    7bec:	8b 81       	ldd	r24, Y+3	; 0x03
    7bee:	9c 81       	ldd	r25, Y+4	; 0x04
    7bf0:	ad 81       	ldd	r26, Y+5	; 0x05
    7bf2:	be 81       	ldd	r27, Y+6	; 0x06
    7bf4:	29 81       	ldd	r18, Y+1	; 0x01
    7bf6:	3a 81       	ldd	r19, Y+2	; 0x02
    7bf8:	f9 01       	movw	r30, r18
    7bfa:	80 83       	st	Z, r24
    7bfc:	91 83       	std	Z+1, r25	; 0x01
    7bfe:	a2 83       	std	Z+2, r26	; 0x02
    7c00:	b3 83       	std	Z+3, r27	; 0x03
	p_item->flags = 0;
    7c02:	89 81       	ldd	r24, Y+1	; 0x01
    7c04:	9a 81       	ldd	r25, Y+2	; 0x02
    7c06:	fc 01       	movw	r30, r24
    7c08:	15 a2       	std	Z+37, r1	; 0x25

}
    7c0a:	26 96       	adiw	r28, 0x06	; 6
    7c0c:	cd bf       	out	0x3d, r28	; 61
    7c0e:	de bf       	out	0x3e, r29	; 62
    7c10:	df 91       	pop	r29
    7c12:	cf 91       	pop	r28
    7c14:	08 95       	ret

00007c16 <dl_snapshot_make>:


static uint8_t  dl_snapshot_make(const uint32_t ts)
{
    7c16:	cf 93       	push	r28
    7c18:	df 93       	push	r29
    7c1a:	00 d0       	rcall	.+0      	; 0x7c1c <dl_snapshot_make+0x6>
    7c1c:	00 d0       	rcall	.+0      	; 0x7c1e <dl_snapshot_make+0x8>
    7c1e:	cd b7       	in	r28, 0x3d	; 61
    7c20:	de b7       	in	r29, 0x3e	; 62
    7c22:	6b 83       	std	Y+3, r22	; 0x03
    7c24:	7c 83       	std	Y+4, r23	; 0x04
    7c26:	8d 83       	std	Y+5, r24	; 0x05
    7c28:	9e 83       	std	Y+6, r25	; 0x06


	DL_LOG_ITEM * p_item = &g_data_snapshot[g_data_snapshot_end];
    7c2a:	80 91 1e 24 	lds	r24, 0x241E
    7c2e:	28 2f       	mov	r18, r24
    7c30:	30 e0       	ldi	r19, 0x00	; 0
    7c32:	46 e2       	ldi	r20, 0x26	; 38
    7c34:	42 9f       	mul	r20, r18
    7c36:	c0 01       	movw	r24, r0
    7c38:	43 9f       	mul	r20, r19
    7c3a:	90 0d       	add	r25, r0
    7c3c:	11 24       	eor	r1, r1
    7c3e:	83 54       	subi	r24, 0x43	; 67
    7c40:	9e 4d       	sbci	r25, 0xDE	; 222
    7c42:	89 83       	std	Y+1, r24	; 0x01
    7c44:	9a 83       	std	Y+2, r25	; 0x02
	
	
//////////////////////////////////////////////////////////////////////////////////////////////////	
	PM10Qbit_get_value(&p_item->PM10stats);
    7c46:	89 81       	ldd	r24, Y+1	; 0x01
    7c48:	9a 81       	ldd	r25, Y+2	; 0x02
    7c4a:	04 96       	adiw	r24, 0x04	; 4
    7c4c:	0e 94 78 49 	call	0x92f0	; 0x92f0 <PM10Qbit_get_value>
	alphasense_get_stats(&p_item->O3stats);
    7c50:	89 81       	ldd	r24, Y+1	; 0x01
    7c52:	9a 81       	ldd	r25, Y+2	; 0x02
    7c54:	4b 96       	adiw	r24, 0x1b	; 27
    7c56:	83 d4       	rcall	.+2310   	; 0x855e <alphasense_get_stats>
	DS18B20_2_get_stats(&p_item->tempO3);
    7c58:	89 81       	ldd	r24, Y+1	; 0x01
    7c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    7c5c:	4f 96       	adiw	r24, 0x1f	; 31
    7c5e:	0e 94 09 48 	call	0x9012	; 0x9012 <DS18B20_2_get_stats>
	DS18B20_get_stats(&p_item->tempShield);
    7c62:	89 81       	ldd	r24, Y+1	; 0x01
    7c64:	9a 81       	ldd	r25, Y+2	; 0x02
    7c66:	81 96       	adiw	r24, 0x21	; 33
    7c68:	0e 94 8c 46 	call	0x8d18	; 0x8d18 <DS18B20_get_stats>
/////////////////////////////////////////////////////////////////////////////////////////////////////


	dl_snapshot_iter_inc(&g_data_snapshot_end);
    7c6c:	8e e1       	ldi	r24, 0x1E	; 30
    7c6e:	94 e2       	ldi	r25, 0x24	; 36
    7c70:	7a df       	rcall	.-268    	; 0x7b66 <dl_snapshot_iter_inc>
	if(g_data_snapshot_end==g_data_snapshot_beg) {
    7c72:	90 91 1e 24 	lds	r25, 0x241E
    7c76:	80 91 1d 24 	lds	r24, 0x241D
    7c7a:	98 17       	cp	r25, r24
    7c7c:	39 f4       	brne	.+14     	; 0x7c8c <dl_snapshot_make+0x76>
		debug_string(NORMAL,PSTR("(datalogger_snapshot_data) Snapshot memory is full something wrong is happening\r\n"),PGM_STRING);
    7c7e:	8c eb       	ldi	r24, 0xBC	; 188
    7c80:	92 e0       	ldi	r25, 0x02	; 2
    7c82:	41 e0       	ldi	r20, 0x01	; 1
    7c84:	bc 01       	movw	r22, r24
    7c86:	81 e0       	ldi	r24, 0x01	; 1
    7c88:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
	}

	p_item = &g_data_snapshot[g_data_snapshot_end];
    7c8c:	80 91 1e 24 	lds	r24, 0x241E
    7c90:	28 2f       	mov	r18, r24
    7c92:	30 e0       	ldi	r19, 0x00	; 0
    7c94:	46 e2       	ldi	r20, 0x26	; 38
    7c96:	42 9f       	mul	r20, r18
    7c98:	c0 01       	movw	r24, r0
    7c9a:	43 9f       	mul	r20, r19
    7c9c:	90 0d       	add	r25, r0
    7c9e:	11 24       	eor	r1, r1
    7ca0:	83 54       	subi	r24, 0x43	; 67
    7ca2:	9e 4d       	sbci	r25, 0xDE	; 222
    7ca4:	89 83       	std	Y+1, r24	; 0x01
    7ca6:	9a 83       	std	Y+2, r25	; 0x02

	p_item->data_timestamp = (ts==-1)?rtc_get_time():ts;
    7ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    7caa:	9c 81       	ldd	r25, Y+4	; 0x04
    7cac:	ad 81       	ldd	r26, Y+5	; 0x05
    7cae:	be 81       	ldd	r27, Y+6	; 0x06
    7cb0:	8f 3f       	cpi	r24, 0xFF	; 255
    7cb2:	2f ef       	ldi	r18, 0xFF	; 255
    7cb4:	92 07       	cpc	r25, r18
    7cb6:	a2 07       	cpc	r26, r18
    7cb8:	b2 07       	cpc	r27, r18
    7cba:	29 f4       	brne	.+10     	; 0x7cc6 <dl_snapshot_make+0xb0>
    7cbc:	0e 94 68 5f 	call	0xbed0	; 0xbed0 <rtc_get_time>
    7cc0:	dc 01       	movw	r26, r24
    7cc2:	cb 01       	movw	r24, r22
    7cc4:	04 c0       	rjmp	.+8      	; 0x7cce <dl_snapshot_make+0xb8>
    7cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    7cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    7cca:	ad 81       	ldd	r26, Y+5	; 0x05
    7ccc:	be 81       	ldd	r27, Y+6	; 0x06
    7cce:	29 81       	ldd	r18, Y+1	; 0x01
    7cd0:	3a 81       	ldd	r19, Y+2	; 0x02
    7cd2:	f9 01       	movw	r30, r18
    7cd4:	80 83       	st	Z, r24
    7cd6:	91 83       	std	Z+1, r25	; 0x01
    7cd8:	a2 83       	std	Z+2, r26	; 0x02
    7cda:	b3 83       	std	Z+3, r27	; 0x03
	p_item->flags = 0;
    7cdc:	89 81       	ldd	r24, Y+1	; 0x01
    7cde:	9a 81       	ldd	r25, Y+2	; 0x02
    7ce0:	fc 01       	movw	r30, r24
    7ce2:	15 a2       	std	Z+37, r1	; 0x25
	
	//This triggers the event that resets the timer
	//giving to the new DATALOGGER time-slot a proper value as T0
	EVSYS.STROBE = 0x02;
    7ce4:	80 e8       	ldi	r24, 0x80	; 128
    7ce6:	91 e0       	ldi	r25, 0x01	; 1
    7ce8:	22 e0       	ldi	r18, 0x02	; 2
    7cea:	fc 01       	movw	r30, r24
    7cec:	20 8b       	std	Z+16, r18	; 0x10

	return 0;		
    7cee:	80 e0       	ldi	r24, 0x00	; 0
}
    7cf0:	26 96       	adiw	r28, 0x06	; 6
    7cf2:	cd bf       	out	0x3d, r28	; 61
    7cf4:	de bf       	out	0x3e, r29	; 62
    7cf6:	df 91       	pop	r29
    7cf8:	cf 91       	pop	r28
    7cfa:	08 95       	ret

00007cfc <dl_task_store_data>:


uint8_t  dl_task_store_data()
{
    7cfc:	2f 92       	push	r2
    7cfe:	3f 92       	push	r3
    7d00:	4f 92       	push	r4
    7d02:	5f 92       	push	r5
    7d04:	6f 92       	push	r6
    7d06:	7f 92       	push	r7
    7d08:	8f 92       	push	r8
    7d0a:	9f 92       	push	r9
    7d0c:	af 92       	push	r10
    7d0e:	bf 92       	push	r11
    7d10:	cf 92       	push	r12
    7d12:	df 92       	push	r13
    7d14:	ef 92       	push	r14
    7d16:	ff 92       	push	r15
    7d18:	0f 93       	push	r16
    7d1a:	1f 93       	push	r17
    7d1c:	cf 93       	push	r28
    7d1e:	df 93       	push	r29
    7d20:	cd b7       	in	r28, 0x3d	; 61
    7d22:	de b7       	in	r29, 0x3e	; 62
    7d24:	c1 57       	subi	r28, 0x71	; 113
    7d26:	d1 09       	sbc	r29, r1
    7d28:	cd bf       	out	0x3d, r28	; 61
    7d2a:	de bf       	out	0x3e, r29	; 62
	task_status_store_data = TASK_RUNNING;
    7d2c:	82 e0       	ldi	r24, 0x02	; 2
    7d2e:	80 93 83 21 	sts	0x2183, r24
	uint8_t err = 0;
    7d32:	19 82       	std	Y+1, r1	; 0x01
	//	debug_string(NORMAL,PSTR("Store Data IN\r\n"),true);

	if(STATUS_OK!=AT24CXX_Init())
    7d34:	ba d6       	rcall	.+3444   	; 0x8aaa <AT24CXX_Init>
    7d36:	00 97       	sbiw	r24, 0x00	; 0
    7d38:	09 f0       	breq	.+2      	; 0x7d3c <dl_task_store_data+0x40>
    7d3a:	5b c3       	rjmp	.+1718   	; 0x83f2 <dl_task_store_data+0x6f6>
	{
		goto task_store_quit;
	}

	uint8_t msb,lsb,page;
	AT24CXX_iterator * const it = &g_eeprom_iter[LOG_END];
    7d3c:	8a e8       	ldi	r24, 0x8A	; 138
    7d3e:	91 e2       	ldi	r25, 0x21	; 33
    7d40:	8a 83       	std	Y+2, r24	; 0x02
    7d42:	9b 83       	std	Y+3, r25	; 0x03
	
	//TODO: debug info
	char szBuf[64];
	voltmeter_init();
    7d44:	0e 94 cd 4b 	call	0x979a	; 0x979a <voltmeter_init>
	uint16_t vBat = voltmeter_getValue();
    7d48:	0e 94 da 4b 	call	0x97b4	; 0x97b4 <voltmeter_getValue>
    7d4c:	8c 83       	std	Y+4, r24	; 0x04
    7d4e:	9d 83       	std	Y+5, r25	; 0x05
	uint16_t temp = thermometer_getValue();
    7d50:	0e 94 e2 4c 	call	0x99c4	; 0x99c4 <thermometer_getValue>
    7d54:	8e 83       	std	Y+6, r24	; 0x06
    7d56:	9f 83       	std	Y+7, r25	; 0x07
	
	
	uint8_t idx = g_data_snapshot_beg;
    7d58:	20 91 1d 24 	lds	r18, 0x241D
    7d5c:	ce 01       	movw	r24, r28
    7d5e:	8f 5a       	subi	r24, 0xAF	; 175
    7d60:	9f 4f       	sbci	r25, 0xFF	; 255
    7d62:	fc 01       	movw	r30, r24
    7d64:	20 83       	st	Z, r18
	while(idx!=g_data_snapshot_end) {
    7d66:	35 c3       	rjmp	.+1642   	; 0x83d2 <dl_task_store_data+0x6d6>
		DL_LOG_ITEM * const pd = &g_data_snapshot[idx];
    7d68:	ce 01       	movw	r24, r28
    7d6a:	8f 5a       	subi	r24, 0xAF	; 175
    7d6c:	9f 4f       	sbci	r25, 0xFF	; 255
    7d6e:	fc 01       	movw	r30, r24
    7d70:	80 81       	ld	r24, Z
    7d72:	28 2f       	mov	r18, r24
    7d74:	30 e0       	ldi	r19, 0x00	; 0
    7d76:	46 e2       	ldi	r20, 0x26	; 38
    7d78:	42 9f       	mul	r20, r18
    7d7a:	c0 01       	movw	r24, r0
    7d7c:	43 9f       	mul	r20, r19
    7d7e:	90 0d       	add	r25, r0
    7d80:	11 24       	eor	r1, r1
    7d82:	83 54       	subi	r24, 0x43	; 67
    7d84:	9e 4d       	sbci	r25, 0xDE	; 222
    7d86:	88 87       	std	Y+8, r24	; 0x08
    7d88:	99 87       	std	Y+9, r25	; 0x09
		pd->vBat = vBat; //TODO: avoid this trick, the data should be available via the snapshot
    7d8a:	88 85       	ldd	r24, Y+8	; 0x08
    7d8c:	99 85       	ldd	r25, Y+9	; 0x09
    7d8e:	2c 81       	ldd	r18, Y+4	; 0x04
    7d90:	3d 81       	ldd	r19, Y+5	; 0x05
    7d92:	fc 01       	movw	r30, r24
    7d94:	23 a3       	std	Z+35, r18	; 0x23
    7d96:	34 a3       	std	Z+36, r19	; 0x24
		

		snprintf_P(szBuf,64,PSTR("VBat = %u\r\nrecID %lu\r\n"),vBat,pd->data_timestamp);
    7d98:	88 85       	ldd	r24, Y+8	; 0x08
    7d9a:	99 85       	ldd	r25, Y+9	; 0x09
    7d9c:	fc 01       	movw	r30, r24
    7d9e:	80 81       	ld	r24, Z
    7da0:	91 81       	ldd	r25, Z+1	; 0x01
    7da2:	a2 81       	ldd	r26, Z+2	; 0x02
    7da4:	b3 81       	ldd	r27, Z+3	; 0x03
    7da6:	25 ea       	ldi	r18, 0xA5	; 165
    7da8:	32 e0       	ldi	r19, 0x02	; 2
    7daa:	4b 2f       	mov	r20, r27
    7dac:	4f 93       	push	r20
    7dae:	4a 2f       	mov	r20, r26
    7db0:	4f 93       	push	r20
    7db2:	49 2f       	mov	r20, r25
    7db4:	4f 93       	push	r20
    7db6:	8f 93       	push	r24
    7db8:	8d 81       	ldd	r24, Y+5	; 0x05
    7dba:	8f 93       	push	r24
    7dbc:	8c 81       	ldd	r24, Y+4	; 0x04
    7dbe:	8f 93       	push	r24
    7dc0:	83 2f       	mov	r24, r19
    7dc2:	8f 93       	push	r24
    7dc4:	82 2f       	mov	r24, r18
    7dc6:	8f 93       	push	r24
    7dc8:	1f 92       	push	r1
    7dca:	80 e4       	ldi	r24, 0x40	; 64
    7dcc:	8f 93       	push	r24
    7dce:	ce 01       	movw	r24, r28
    7dd0:	41 96       	adiw	r24, 0x11	; 17
    7dd2:	29 2f       	mov	r18, r25
    7dd4:	2f 93       	push	r18
    7dd6:	8f 93       	push	r24
    7dd8:	0e 94 7f 74 	call	0xe8fe	; 0xe8fe <snprintf_P>
    7ddc:	8d b7       	in	r24, 0x3d	; 61
    7dde:	9e b7       	in	r25, 0x3e	; 62
    7de0:	0c 96       	adiw	r24, 0x0c	; 12
    7de2:	cd bf       	out	0x3d, r28	; 61
    7de4:	de bf       	out	0x3e, r29	; 62
		debug_string(NORMAL,szBuf,RAM_STRING);
    7de6:	ce 01       	movw	r24, r28
    7de8:	41 96       	adiw	r24, 0x11	; 17
    7dea:	40 e0       	ldi	r20, 0x00	; 0
    7dec:	bc 01       	movw	r22, r24
    7dee:	81 e0       	ldi	r24, 0x01	; 1
    7df0:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
		AT24CXX_iterator_report(it);
    7df4:	8a 81       	ldd	r24, Y+2	; 0x02
    7df6:	9b 81       	ldd	r25, Y+3	; 0x03
    7df8:	d5 d6       	rcall	.+3498   	; 0x8ba4 <AT24CXX_iterator_report>

		AT24CXX_iterator_to_address(it,&page,&msb,&lsb);
    7dfa:	9e 01       	movw	r18, r28
    7dfc:	21 5f       	subi	r18, 0xF1	; 241
    7dfe:	3f 4f       	sbci	r19, 0xFF	; 255
    7e00:	ae 01       	movw	r20, r28
    7e02:	42 5f       	subi	r20, 0xF2	; 242
    7e04:	5f 4f       	sbci	r21, 0xFF	; 255
    7e06:	be 01       	movw	r22, r28
    7e08:	60 5f       	subi	r22, 0xF0	; 240
    7e0a:	7f 4f       	sbci	r23, 0xFF	; 255
    7e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    7e0e:	9b 81       	ldd	r25, Y+3	; 0x03
    7e10:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <AT24CXX_iterator_to_address>

		dl_iterator_moveforward(it,1);
    7e14:	8a 81       	ldd	r24, Y+2	; 0x02
    7e16:	9b 81       	ldd	r25, Y+3	; 0x03
    7e18:	61 e0       	ldi	r22, 0x01	; 1
    7e1a:	70 e0       	ldi	r23, 0x00	; 0
    7e1c:	0e 94 d5 31 	call	0x63aa	; 0x63aa <dl_iterator_moveforward>

		uint8_t * const pBuf = (uint8_t * const) pd;
    7e20:	88 85       	ldd	r24, Y+8	; 0x08
    7e22:	99 85       	ldd	r25, Y+9	; 0x09
    7e24:	8a 87       	std	Y+10, r24	; 0x0a
    7e26:	9b 87       	std	Y+11, r25	; 0x0b
		const uint8_t v = it->byte[LSB_BYTE];
    7e28:	8a 81       	ldd	r24, Y+2	; 0x02
    7e2a:	9b 81       	ldd	r25, Y+3	; 0x03
    7e2c:	fc 01       	movw	r30, r24
    7e2e:	80 81       	ld	r24, Z
    7e30:	8c 87       	std	Y+12, r24	; 0x0c
		delay_ms(5);//wait a little bit before issuing commands on the TWI
    7e32:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <sysclk_get_cpu_hz>
    7e36:	dc 01       	movw	r26, r24
    7e38:	cb 01       	movw	r24, r22
    7e3a:	1c 01       	movw	r2, r24
    7e3c:	2d 01       	movw	r4, r26
    7e3e:	61 2c       	mov	r6, r1
    7e40:	71 2c       	mov	r7, r1
    7e42:	43 01       	movw	r8, r6
    7e44:	a2 2c       	mov	r10, r2
    7e46:	b3 2c       	mov	r11, r3
    7e48:	c4 2c       	mov	r12, r4
    7e4a:	d5 2c       	mov	r13, r5
    7e4c:	e6 2c       	mov	r14, r6
    7e4e:	f7 2c       	mov	r15, r7
    7e50:	08 2d       	mov	r16, r8
    7e52:	19 2d       	mov	r17, r9
    7e54:	2a 2d       	mov	r18, r10
    7e56:	3b 2d       	mov	r19, r11
    7e58:	4c 2d       	mov	r20, r12
    7e5a:	5d 2d       	mov	r21, r13
    7e5c:	6e 2d       	mov	r22, r14
    7e5e:	7f 2d       	mov	r23, r15
    7e60:	80 2f       	mov	r24, r16
    7e62:	91 2f       	mov	r25, r17
    7e64:	02 e0       	ldi	r16, 0x02	; 2
    7e66:	0e 94 a2 72 	call	0xe544	; 0xe544 <__ashldi3>
    7e6a:	63 96       	adiw	r28, 0x13	; 19
    7e6c:	2f af       	std	Y+63, r18	; 0x3f
    7e6e:	63 97       	sbiw	r28, 0x13	; 19
    7e70:	64 96       	adiw	r28, 0x14	; 20
    7e72:	3f af       	std	Y+63, r19	; 0x3f
    7e74:	64 97       	sbiw	r28, 0x14	; 20
    7e76:	65 96       	adiw	r28, 0x15	; 21
    7e78:	4f af       	std	Y+63, r20	; 0x3f
    7e7a:	65 97       	sbiw	r28, 0x15	; 21
    7e7c:	66 96       	adiw	r28, 0x16	; 22
    7e7e:	5f af       	std	Y+63, r21	; 0x3f
    7e80:	66 97       	sbiw	r28, 0x16	; 22
    7e82:	67 96       	adiw	r28, 0x17	; 23
    7e84:	6f af       	std	Y+63, r22	; 0x3f
    7e86:	67 97       	sbiw	r28, 0x17	; 23
    7e88:	68 96       	adiw	r28, 0x18	; 24
    7e8a:	7f af       	std	Y+63, r23	; 0x3f
    7e8c:	68 97       	sbiw	r28, 0x18	; 24
    7e8e:	69 96       	adiw	r28, 0x19	; 25
    7e90:	8f af       	std	Y+63, r24	; 0x3f
    7e92:	69 97       	sbiw	r28, 0x19	; 25
    7e94:	6a 96       	adiw	r28, 0x1a	; 26
    7e96:	9f af       	std	Y+63, r25	; 0x3f
    7e98:	6a 97       	sbiw	r28, 0x1a	; 26
    7e9a:	63 96       	adiw	r28, 0x13	; 19
    7e9c:	af ac       	ldd	r10, Y+63	; 0x3f
    7e9e:	63 97       	sbiw	r28, 0x13	; 19
    7ea0:	64 96       	adiw	r28, 0x14	; 20
    7ea2:	bf ac       	ldd	r11, Y+63	; 0x3f
    7ea4:	64 97       	sbiw	r28, 0x14	; 20
    7ea6:	65 96       	adiw	r28, 0x15	; 21
    7ea8:	cf ac       	ldd	r12, Y+63	; 0x3f
    7eaa:	65 97       	sbiw	r28, 0x15	; 21
    7eac:	66 96       	adiw	r28, 0x16	; 22
    7eae:	df ac       	ldd	r13, Y+63	; 0x3f
    7eb0:	66 97       	sbiw	r28, 0x16	; 22
    7eb2:	67 96       	adiw	r28, 0x17	; 23
    7eb4:	ef ac       	ldd	r14, Y+63	; 0x3f
    7eb6:	67 97       	sbiw	r28, 0x17	; 23
    7eb8:	68 96       	adiw	r28, 0x18	; 24
    7eba:	ff ac       	ldd	r15, Y+63	; 0x3f
    7ebc:	68 97       	sbiw	r28, 0x18	; 24
    7ebe:	69 96       	adiw	r28, 0x19	; 25
    7ec0:	0f ad       	ldd	r16, Y+63	; 0x3f
    7ec2:	69 97       	sbiw	r28, 0x19	; 25
    7ec4:	6a 96       	adiw	r28, 0x1a	; 26
    7ec6:	1f ad       	ldd	r17, Y+63	; 0x3f
    7ec8:	6a 97       	sbiw	r28, 0x1a	; 26
    7eca:	2a 2d       	mov	r18, r10
    7ecc:	3b 2d       	mov	r19, r11
    7ece:	4c 2d       	mov	r20, r12
    7ed0:	5d 2d       	mov	r21, r13
    7ed2:	6e 2d       	mov	r22, r14
    7ed4:	7f 2d       	mov	r23, r15
    7ed6:	80 2f       	mov	r24, r16
    7ed8:	91 2f       	mov	r25, r17
    7eda:	a2 2c       	mov	r10, r2
    7edc:	b3 2c       	mov	r11, r3
    7ede:	c4 2c       	mov	r12, r4
    7ee0:	d5 2c       	mov	r13, r5
    7ee2:	e6 2c       	mov	r14, r6
    7ee4:	f7 2c       	mov	r15, r7
    7ee6:	08 2d       	mov	r16, r8
    7ee8:	19 2d       	mov	r17, r9
    7eea:	0e 94 b1 72 	call	0xe562	; 0xe562 <__adddi3>
    7eee:	a2 2e       	mov	r10, r18
    7ef0:	b3 2e       	mov	r11, r19
    7ef2:	c4 2e       	mov	r12, r20
    7ef4:	d5 2e       	mov	r13, r21
    7ef6:	e6 2e       	mov	r14, r22
    7ef8:	f7 2e       	mov	r15, r23
    7efa:	08 2f       	mov	r16, r24
    7efc:	19 2f       	mov	r17, r25
    7efe:	2a 2d       	mov	r18, r10
    7f00:	3b 2d       	mov	r19, r11
    7f02:	4c 2d       	mov	r20, r12
    7f04:	5d 2d       	mov	r21, r13
    7f06:	6e 2d       	mov	r22, r14
    7f08:	7f 2d       	mov	r23, r15
    7f0a:	80 2f       	mov	r24, r16
    7f0c:	91 2f       	mov	r25, r17
    7f0e:	29 51       	subi	r18, 0x19	; 25
    7f10:	3c 4f       	sbci	r19, 0xFC	; 252
    7f12:	4f 4f       	sbci	r20, 0xFF	; 255
    7f14:	5f 4f       	sbci	r21, 0xFF	; 255
    7f16:	6f 4f       	sbci	r22, 0xFF	; 255
    7f18:	7f 4f       	sbci	r23, 0xFF	; 255
    7f1a:	8f 4f       	sbci	r24, 0xFF	; 255
    7f1c:	9f 4f       	sbci	r25, 0xFF	; 255
    7f1e:	a2 2e       	mov	r10, r18
    7f20:	b3 2e       	mov	r11, r19
    7f22:	c4 2e       	mov	r12, r20
    7f24:	d5 2e       	mov	r13, r21
    7f26:	e6 2e       	mov	r14, r22
    7f28:	f7 2e       	mov	r15, r23
    7f2a:	08 2f       	mov	r16, r24
    7f2c:	19 2f       	mov	r17, r25
    7f2e:	2a 2d       	mov	r18, r10
    7f30:	3b 2d       	mov	r19, r11
    7f32:	4c 2d       	mov	r20, r12
    7f34:	5d 2d       	mov	r21, r13
    7f36:	6e 2d       	mov	r22, r14
    7f38:	7f 2d       	mov	r23, r15
    7f3a:	80 2f       	mov	r24, r16
    7f3c:	91 2f       	mov	r25, r17
    7f3e:	0e 94 56 11 	call	0x22ac	; 0x22ac <__floatundisf>
    7f42:	dc 01       	movw	r26, r24
    7f44:	cb 01       	movw	r24, r22
    7f46:	20 e0       	ldi	r18, 0x00	; 0
    7f48:	30 e8       	ldi	r19, 0x80	; 128
    7f4a:	4b eb       	ldi	r20, 0xBB	; 187
    7f4c:	55 e4       	ldi	r21, 0x45	; 69
    7f4e:	bc 01       	movw	r22, r24
    7f50:	cd 01       	movw	r24, r26
    7f52:	0e 94 81 14 	call	0x2902	; 0x2902 <__divsf3>
    7f56:	dc 01       	movw	r26, r24
    7f58:	cb 01       	movw	r24, r22
    7f5a:	bc 01       	movw	r22, r24
    7f5c:	cd 01       	movw	r24, r26
    7f5e:	0e 94 a5 10 	call	0x214a	; 0x214a <__fixunssfdi>
    7f62:	a2 2e       	mov	r10, r18
    7f64:	b3 2e       	mov	r11, r19
    7f66:	c4 2e       	mov	r12, r20
    7f68:	d5 2e       	mov	r13, r21
    7f6a:	e6 2e       	mov	r14, r22
    7f6c:	f7 2e       	mov	r15, r23
    7f6e:	08 2f       	mov	r16, r24
    7f70:	19 2f       	mov	r17, r25
    7f72:	d6 01       	movw	r26, r12
    7f74:	c5 01       	movw	r24, r10
    7f76:	bc 01       	movw	r22, r24
    7f78:	cd 01       	movw	r24, r26
    7f7a:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__portable_avr_delay_cycles>
		//Is it a plain page or a overlapping write
		if((v>=sizeof(DL_LOG_ITEM)) || (v==0)) { //inside the same chip page
    7f7e:	8c 85       	ldd	r24, Y+12	; 0x0c
    7f80:	86 32       	cpi	r24, 0x26	; 38
    7f82:	20 f4       	brcc	.+8      	; 0x7f8c <dl_task_store_data+0x290>
    7f84:	8c 85       	ldd	r24, Y+12	; 0x0c
    7f86:	88 23       	and	r24, r24
    7f88:	09 f0       	breq	.+2      	; 0x7f8c <dl_task_store_data+0x290>
    7f8a:	b0 c0       	rjmp	.+352    	; 0x80ec <dl_task_store_data+0x3f0>
			AT24CXX_WriteBlock(page,msb,lsb,pBuf,sizeof(DL_LOG_ITEM));
    7f8c:	4f 85       	ldd	r20, Y+15	; 0x0f
    7f8e:	6e 85       	ldd	r22, Y+14	; 0x0e
    7f90:	58 89       	ldd	r21, Y+16	; 0x10
    7f92:	8a 85       	ldd	r24, Y+10	; 0x0a
    7f94:	9b 85       	ldd	r25, Y+11	; 0x0b
    7f96:	06 e2       	ldi	r16, 0x26	; 38
    7f98:	9c 01       	movw	r18, r24
    7f9a:	85 2f       	mov	r24, r21
    7f9c:	bb d5       	rcall	.+2934   	; 0x8b14 <AT24CXX_WriteBlockA>
			delay_ms(5);
    7f9e:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <sysclk_get_cpu_hz>
    7fa2:	dc 01       	movw	r26, r24
    7fa4:	cb 01       	movw	r24, r22
    7fa6:	1c 01       	movw	r2, r24
    7fa8:	2d 01       	movw	r4, r26
    7faa:	61 2c       	mov	r6, r1
    7fac:	71 2c       	mov	r7, r1
    7fae:	43 01       	movw	r8, r6
    7fb0:	a2 2c       	mov	r10, r2
    7fb2:	b3 2c       	mov	r11, r3
    7fb4:	c4 2c       	mov	r12, r4
    7fb6:	d5 2c       	mov	r13, r5
    7fb8:	e6 2c       	mov	r14, r6
    7fba:	f7 2c       	mov	r15, r7
    7fbc:	08 2d       	mov	r16, r8
    7fbe:	19 2d       	mov	r17, r9
    7fc0:	2a 2d       	mov	r18, r10
    7fc2:	3b 2d       	mov	r19, r11
    7fc4:	4c 2d       	mov	r20, r12
    7fc6:	5d 2d       	mov	r21, r13
    7fc8:	6e 2d       	mov	r22, r14
    7fca:	7f 2d       	mov	r23, r15
    7fcc:	80 2f       	mov	r24, r16
    7fce:	91 2f       	mov	r25, r17
    7fd0:	02 e0       	ldi	r16, 0x02	; 2
    7fd2:	0e 94 a2 72 	call	0xe544	; 0xe544 <__ashldi3>
    7fd6:	6b 96       	adiw	r28, 0x1b	; 27
    7fd8:	2f af       	std	Y+63, r18	; 0x3f
    7fda:	6b 97       	sbiw	r28, 0x1b	; 27
    7fdc:	6c 96       	adiw	r28, 0x1c	; 28
    7fde:	3f af       	std	Y+63, r19	; 0x3f
    7fe0:	6c 97       	sbiw	r28, 0x1c	; 28
    7fe2:	6d 96       	adiw	r28, 0x1d	; 29
    7fe4:	4f af       	std	Y+63, r20	; 0x3f
    7fe6:	6d 97       	sbiw	r28, 0x1d	; 29
    7fe8:	6e 96       	adiw	r28, 0x1e	; 30
    7fea:	5f af       	std	Y+63, r21	; 0x3f
    7fec:	6e 97       	sbiw	r28, 0x1e	; 30
    7fee:	6f 96       	adiw	r28, 0x1f	; 31
    7ff0:	6f af       	std	Y+63, r22	; 0x3f
    7ff2:	6f 97       	sbiw	r28, 0x1f	; 31
    7ff4:	a0 96       	adiw	r28, 0x20	; 32
    7ff6:	7f af       	std	Y+63, r23	; 0x3f
    7ff8:	a0 97       	sbiw	r28, 0x20	; 32
    7ffa:	a1 96       	adiw	r28, 0x21	; 33
    7ffc:	8f af       	std	Y+63, r24	; 0x3f
    7ffe:	a1 97       	sbiw	r28, 0x21	; 33
    8000:	a2 96       	adiw	r28, 0x22	; 34
    8002:	9f af       	std	Y+63, r25	; 0x3f
    8004:	a2 97       	sbiw	r28, 0x22	; 34
    8006:	6b 96       	adiw	r28, 0x1b	; 27
    8008:	af ac       	ldd	r10, Y+63	; 0x3f
    800a:	6b 97       	sbiw	r28, 0x1b	; 27
    800c:	6c 96       	adiw	r28, 0x1c	; 28
    800e:	bf ac       	ldd	r11, Y+63	; 0x3f
    8010:	6c 97       	sbiw	r28, 0x1c	; 28
    8012:	6d 96       	adiw	r28, 0x1d	; 29
    8014:	cf ac       	ldd	r12, Y+63	; 0x3f
    8016:	6d 97       	sbiw	r28, 0x1d	; 29
    8018:	6e 96       	adiw	r28, 0x1e	; 30
    801a:	df ac       	ldd	r13, Y+63	; 0x3f
    801c:	6e 97       	sbiw	r28, 0x1e	; 30
    801e:	6f 96       	adiw	r28, 0x1f	; 31
    8020:	ef ac       	ldd	r14, Y+63	; 0x3f
    8022:	6f 97       	sbiw	r28, 0x1f	; 31
    8024:	a0 96       	adiw	r28, 0x20	; 32
    8026:	ff ac       	ldd	r15, Y+63	; 0x3f
    8028:	a0 97       	sbiw	r28, 0x20	; 32
    802a:	a1 96       	adiw	r28, 0x21	; 33
    802c:	0f ad       	ldd	r16, Y+63	; 0x3f
    802e:	a1 97       	sbiw	r28, 0x21	; 33
    8030:	a2 96       	adiw	r28, 0x22	; 34
    8032:	1f ad       	ldd	r17, Y+63	; 0x3f
    8034:	a2 97       	sbiw	r28, 0x22	; 34
    8036:	2a 2d       	mov	r18, r10
    8038:	3b 2d       	mov	r19, r11
    803a:	4c 2d       	mov	r20, r12
    803c:	5d 2d       	mov	r21, r13
    803e:	6e 2d       	mov	r22, r14
    8040:	7f 2d       	mov	r23, r15
    8042:	80 2f       	mov	r24, r16
    8044:	91 2f       	mov	r25, r17
    8046:	a2 2c       	mov	r10, r2
    8048:	b3 2c       	mov	r11, r3
    804a:	c4 2c       	mov	r12, r4
    804c:	d5 2c       	mov	r13, r5
    804e:	e6 2c       	mov	r14, r6
    8050:	f7 2c       	mov	r15, r7
    8052:	08 2d       	mov	r16, r8
    8054:	19 2d       	mov	r17, r9
    8056:	0e 94 b1 72 	call	0xe562	; 0xe562 <__adddi3>
    805a:	a2 2e       	mov	r10, r18
    805c:	b3 2e       	mov	r11, r19
    805e:	c4 2e       	mov	r12, r20
    8060:	d5 2e       	mov	r13, r21
    8062:	e6 2e       	mov	r14, r22
    8064:	f7 2e       	mov	r15, r23
    8066:	08 2f       	mov	r16, r24
    8068:	19 2f       	mov	r17, r25
    806a:	2a 2d       	mov	r18, r10
    806c:	3b 2d       	mov	r19, r11
    806e:	4c 2d       	mov	r20, r12
    8070:	5d 2d       	mov	r21, r13
    8072:	6e 2d       	mov	r22, r14
    8074:	7f 2d       	mov	r23, r15
    8076:	80 2f       	mov	r24, r16
    8078:	91 2f       	mov	r25, r17
    807a:	29 51       	subi	r18, 0x19	; 25
    807c:	3c 4f       	sbci	r19, 0xFC	; 252
    807e:	4f 4f       	sbci	r20, 0xFF	; 255
    8080:	5f 4f       	sbci	r21, 0xFF	; 255
    8082:	6f 4f       	sbci	r22, 0xFF	; 255
    8084:	7f 4f       	sbci	r23, 0xFF	; 255
    8086:	8f 4f       	sbci	r24, 0xFF	; 255
    8088:	9f 4f       	sbci	r25, 0xFF	; 255
    808a:	a2 2e       	mov	r10, r18
    808c:	b3 2e       	mov	r11, r19
    808e:	c4 2e       	mov	r12, r20
    8090:	d5 2e       	mov	r13, r21
    8092:	e6 2e       	mov	r14, r22
    8094:	f7 2e       	mov	r15, r23
    8096:	08 2f       	mov	r16, r24
    8098:	19 2f       	mov	r17, r25
    809a:	2a 2d       	mov	r18, r10
    809c:	3b 2d       	mov	r19, r11
    809e:	4c 2d       	mov	r20, r12
    80a0:	5d 2d       	mov	r21, r13
    80a2:	6e 2d       	mov	r22, r14
    80a4:	7f 2d       	mov	r23, r15
    80a6:	80 2f       	mov	r24, r16
    80a8:	91 2f       	mov	r25, r17
    80aa:	0e 94 56 11 	call	0x22ac	; 0x22ac <__floatundisf>
    80ae:	dc 01       	movw	r26, r24
    80b0:	cb 01       	movw	r24, r22
    80b2:	20 e0       	ldi	r18, 0x00	; 0
    80b4:	30 e8       	ldi	r19, 0x80	; 128
    80b6:	4b eb       	ldi	r20, 0xBB	; 187
    80b8:	55 e4       	ldi	r21, 0x45	; 69
    80ba:	bc 01       	movw	r22, r24
    80bc:	cd 01       	movw	r24, r26
    80be:	0e 94 81 14 	call	0x2902	; 0x2902 <__divsf3>
    80c2:	dc 01       	movw	r26, r24
    80c4:	cb 01       	movw	r24, r22
    80c6:	bc 01       	movw	r22, r24
    80c8:	cd 01       	movw	r24, r26
    80ca:	0e 94 a5 10 	call	0x214a	; 0x214a <__fixunssfdi>
    80ce:	a2 2e       	mov	r10, r18
    80d0:	b3 2e       	mov	r11, r19
    80d2:	c4 2e       	mov	r12, r20
    80d4:	d5 2e       	mov	r13, r21
    80d6:	e6 2e       	mov	r14, r22
    80d8:	f7 2e       	mov	r15, r23
    80da:	08 2f       	mov	r16, r24
    80dc:	19 2f       	mov	r17, r25
    80de:	d6 01       	movw	r26, r12
    80e0:	c5 01       	movw	r24, r10
    80e2:	bc 01       	movw	r22, r24
    80e4:	cd 01       	movw	r24, r26
    80e6:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__portable_avr_delay_cycles>
    80ea:	6f c1       	rjmp	.+734    	; 0x83ca <dl_task_store_data+0x6ce>
		} else { //overlaps on two different chip pages
			const uint8_t x = (sizeof(DL_LOG_ITEM) - v);
    80ec:	96 e2       	ldi	r25, 0x26	; 38
    80ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    80f0:	f9 2f       	mov	r31, r25
    80f2:	f8 1b       	sub	r31, r24
    80f4:	8f 2f       	mov	r24, r31
    80f6:	8d 87       	std	Y+13, r24	; 0x0d
			AT24CXX_WriteBlock(page,msb,lsb,pBuf,x);
    80f8:	4f 85       	ldd	r20, Y+15	; 0x0f
    80fa:	6e 85       	ldd	r22, Y+14	; 0x0e
    80fc:	58 89       	ldd	r21, Y+16	; 0x10
    80fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    8100:	9b 85       	ldd	r25, Y+11	; 0x0b
    8102:	0d 85       	ldd	r16, Y+13	; 0x0d
    8104:	9c 01       	movw	r18, r24
    8106:	85 2f       	mov	r24, r21
    8108:	05 d5       	rcall	.+2570   	; 0x8b14 <AT24CXX_WriteBlockA>
			delay_ms(5);
    810a:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <sysclk_get_cpu_hz>
    810e:	dc 01       	movw	r26, r24
    8110:	cb 01       	movw	r24, r22
    8112:	1c 01       	movw	r2, r24
    8114:	2d 01       	movw	r4, r26
    8116:	61 2c       	mov	r6, r1
    8118:	71 2c       	mov	r7, r1
    811a:	43 01       	movw	r8, r6
    811c:	a2 2c       	mov	r10, r2
    811e:	b3 2c       	mov	r11, r3
    8120:	c4 2c       	mov	r12, r4
    8122:	d5 2c       	mov	r13, r5
    8124:	e6 2c       	mov	r14, r6
    8126:	f7 2c       	mov	r15, r7
    8128:	08 2d       	mov	r16, r8
    812a:	19 2d       	mov	r17, r9
    812c:	2a 2d       	mov	r18, r10
    812e:	3b 2d       	mov	r19, r11
    8130:	4c 2d       	mov	r20, r12
    8132:	5d 2d       	mov	r21, r13
    8134:	6e 2d       	mov	r22, r14
    8136:	7f 2d       	mov	r23, r15
    8138:	80 2f       	mov	r24, r16
    813a:	91 2f       	mov	r25, r17
    813c:	02 e0       	ldi	r16, 0x02	; 2
    813e:	0e 94 a2 72 	call	0xe544	; 0xe544 <__ashldi3>
    8142:	a3 96       	adiw	r28, 0x23	; 35
    8144:	2f af       	std	Y+63, r18	; 0x3f
    8146:	a3 97       	sbiw	r28, 0x23	; 35
    8148:	a4 96       	adiw	r28, 0x24	; 36
    814a:	3f af       	std	Y+63, r19	; 0x3f
    814c:	a4 97       	sbiw	r28, 0x24	; 36
    814e:	a5 96       	adiw	r28, 0x25	; 37
    8150:	4f af       	std	Y+63, r20	; 0x3f
    8152:	a5 97       	sbiw	r28, 0x25	; 37
    8154:	a6 96       	adiw	r28, 0x26	; 38
    8156:	5f af       	std	Y+63, r21	; 0x3f
    8158:	a6 97       	sbiw	r28, 0x26	; 38
    815a:	a7 96       	adiw	r28, 0x27	; 39
    815c:	6f af       	std	Y+63, r22	; 0x3f
    815e:	a7 97       	sbiw	r28, 0x27	; 39
    8160:	a8 96       	adiw	r28, 0x28	; 40
    8162:	7f af       	std	Y+63, r23	; 0x3f
    8164:	a8 97       	sbiw	r28, 0x28	; 40
    8166:	a9 96       	adiw	r28, 0x29	; 41
    8168:	8f af       	std	Y+63, r24	; 0x3f
    816a:	a9 97       	sbiw	r28, 0x29	; 41
    816c:	aa 96       	adiw	r28, 0x2a	; 42
    816e:	9f af       	std	Y+63, r25	; 0x3f
    8170:	aa 97       	sbiw	r28, 0x2a	; 42
    8172:	a3 96       	adiw	r28, 0x23	; 35
    8174:	af ac       	ldd	r10, Y+63	; 0x3f
    8176:	a3 97       	sbiw	r28, 0x23	; 35
    8178:	a4 96       	adiw	r28, 0x24	; 36
    817a:	bf ac       	ldd	r11, Y+63	; 0x3f
    817c:	a4 97       	sbiw	r28, 0x24	; 36
    817e:	a5 96       	adiw	r28, 0x25	; 37
    8180:	cf ac       	ldd	r12, Y+63	; 0x3f
    8182:	a5 97       	sbiw	r28, 0x25	; 37
    8184:	a6 96       	adiw	r28, 0x26	; 38
    8186:	df ac       	ldd	r13, Y+63	; 0x3f
    8188:	a6 97       	sbiw	r28, 0x26	; 38
    818a:	a7 96       	adiw	r28, 0x27	; 39
    818c:	ef ac       	ldd	r14, Y+63	; 0x3f
    818e:	a7 97       	sbiw	r28, 0x27	; 39
    8190:	a8 96       	adiw	r28, 0x28	; 40
    8192:	ff ac       	ldd	r15, Y+63	; 0x3f
    8194:	a8 97       	sbiw	r28, 0x28	; 40
    8196:	a9 96       	adiw	r28, 0x29	; 41
    8198:	0f ad       	ldd	r16, Y+63	; 0x3f
    819a:	a9 97       	sbiw	r28, 0x29	; 41
    819c:	aa 96       	adiw	r28, 0x2a	; 42
    819e:	1f ad       	ldd	r17, Y+63	; 0x3f
    81a0:	aa 97       	sbiw	r28, 0x2a	; 42
    81a2:	2a 2d       	mov	r18, r10
    81a4:	3b 2d       	mov	r19, r11
    81a6:	4c 2d       	mov	r20, r12
    81a8:	5d 2d       	mov	r21, r13
    81aa:	6e 2d       	mov	r22, r14
    81ac:	7f 2d       	mov	r23, r15
    81ae:	80 2f       	mov	r24, r16
    81b0:	91 2f       	mov	r25, r17
    81b2:	a2 2c       	mov	r10, r2
    81b4:	b3 2c       	mov	r11, r3
    81b6:	c4 2c       	mov	r12, r4
    81b8:	d5 2c       	mov	r13, r5
    81ba:	e6 2c       	mov	r14, r6
    81bc:	f7 2c       	mov	r15, r7
    81be:	08 2d       	mov	r16, r8
    81c0:	19 2d       	mov	r17, r9
    81c2:	0e 94 b1 72 	call	0xe562	; 0xe562 <__adddi3>
    81c6:	a2 2e       	mov	r10, r18
    81c8:	b3 2e       	mov	r11, r19
    81ca:	c4 2e       	mov	r12, r20
    81cc:	d5 2e       	mov	r13, r21
    81ce:	e6 2e       	mov	r14, r22
    81d0:	f7 2e       	mov	r15, r23
    81d2:	08 2f       	mov	r16, r24
    81d4:	19 2f       	mov	r17, r25
    81d6:	2a 2d       	mov	r18, r10
    81d8:	3b 2d       	mov	r19, r11
    81da:	4c 2d       	mov	r20, r12
    81dc:	5d 2d       	mov	r21, r13
    81de:	6e 2d       	mov	r22, r14
    81e0:	7f 2d       	mov	r23, r15
    81e2:	80 2f       	mov	r24, r16
    81e4:	91 2f       	mov	r25, r17
    81e6:	29 51       	subi	r18, 0x19	; 25
    81e8:	3c 4f       	sbci	r19, 0xFC	; 252
    81ea:	4f 4f       	sbci	r20, 0xFF	; 255
    81ec:	5f 4f       	sbci	r21, 0xFF	; 255
    81ee:	6f 4f       	sbci	r22, 0xFF	; 255
    81f0:	7f 4f       	sbci	r23, 0xFF	; 255
    81f2:	8f 4f       	sbci	r24, 0xFF	; 255
    81f4:	9f 4f       	sbci	r25, 0xFF	; 255
    81f6:	a2 2e       	mov	r10, r18
    81f8:	b3 2e       	mov	r11, r19
    81fa:	c4 2e       	mov	r12, r20
    81fc:	d5 2e       	mov	r13, r21
    81fe:	e6 2e       	mov	r14, r22
    8200:	f7 2e       	mov	r15, r23
    8202:	08 2f       	mov	r16, r24
    8204:	19 2f       	mov	r17, r25
    8206:	2a 2d       	mov	r18, r10
    8208:	3b 2d       	mov	r19, r11
    820a:	4c 2d       	mov	r20, r12
    820c:	5d 2d       	mov	r21, r13
    820e:	6e 2d       	mov	r22, r14
    8210:	7f 2d       	mov	r23, r15
    8212:	80 2f       	mov	r24, r16
    8214:	91 2f       	mov	r25, r17
    8216:	0e 94 56 11 	call	0x22ac	; 0x22ac <__floatundisf>
    821a:	dc 01       	movw	r26, r24
    821c:	cb 01       	movw	r24, r22
    821e:	20 e0       	ldi	r18, 0x00	; 0
    8220:	30 e8       	ldi	r19, 0x80	; 128
    8222:	4b eb       	ldi	r20, 0xBB	; 187
    8224:	55 e4       	ldi	r21, 0x45	; 69
    8226:	bc 01       	movw	r22, r24
    8228:	cd 01       	movw	r24, r26
    822a:	0e 94 81 14 	call	0x2902	; 0x2902 <__divsf3>
    822e:	dc 01       	movw	r26, r24
    8230:	cb 01       	movw	r24, r22
    8232:	bc 01       	movw	r22, r24
    8234:	cd 01       	movw	r24, r26
    8236:	0e 94 a5 10 	call	0x214a	; 0x214a <__fixunssfdi>
    823a:	a2 2e       	mov	r10, r18
    823c:	b3 2e       	mov	r11, r19
    823e:	c4 2e       	mov	r12, r20
    8240:	d5 2e       	mov	r13, r21
    8242:	e6 2e       	mov	r14, r22
    8244:	f7 2e       	mov	r15, r23
    8246:	08 2f       	mov	r16, r24
    8248:	19 2f       	mov	r17, r25
    824a:	d6 01       	movw	r26, r12
    824c:	c5 01       	movw	r24, r10
    824e:	bc 01       	movw	r22, r24
    8250:	cd 01       	movw	r24, r26
    8252:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__portable_avr_delay_cycles>
			AT24CXX_WriteBlock(it->byte[PAGE_BYTE],it->byte[MSB_BYTE],0,pBuf+x,v);
    8256:	8d 85       	ldd	r24, Y+13	; 0x0d
    8258:	88 2f       	mov	r24, r24
    825a:	90 e0       	ldi	r25, 0x00	; 0
    825c:	2a 85       	ldd	r18, Y+10	; 0x0a
    825e:	3b 85       	ldd	r19, Y+11	; 0x0b
    8260:	82 0f       	add	r24, r18
    8262:	93 1f       	adc	r25, r19
    8264:	2a 81       	ldd	r18, Y+2	; 0x02
    8266:	3b 81       	ldd	r19, Y+3	; 0x03
    8268:	f9 01       	movw	r30, r18
    826a:	61 81       	ldd	r22, Z+1	; 0x01
    826c:	2a 81       	ldd	r18, Y+2	; 0x02
    826e:	3b 81       	ldd	r19, Y+3	; 0x03
    8270:	f9 01       	movw	r30, r18
    8272:	52 81       	ldd	r21, Z+2	; 0x02
    8274:	0c 85       	ldd	r16, Y+12	; 0x0c
    8276:	9c 01       	movw	r18, r24
    8278:	40 e0       	ldi	r20, 0x00	; 0
    827a:	85 2f       	mov	r24, r21
    827c:	4b d4       	rcall	.+2198   	; 0x8b14 <AT24CXX_WriteBlockA>
			delay_ms(5);
    827e:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <sysclk_get_cpu_hz>
    8282:	dc 01       	movw	r26, r24
    8284:	cb 01       	movw	r24, r22
    8286:	1c 01       	movw	r2, r24
    8288:	2d 01       	movw	r4, r26
    828a:	61 2c       	mov	r6, r1
    828c:	71 2c       	mov	r7, r1
    828e:	43 01       	movw	r8, r6
    8290:	a2 2c       	mov	r10, r2
    8292:	b3 2c       	mov	r11, r3
    8294:	c4 2c       	mov	r12, r4
    8296:	d5 2c       	mov	r13, r5
    8298:	e6 2c       	mov	r14, r6
    829a:	f7 2c       	mov	r15, r7
    829c:	08 2d       	mov	r16, r8
    829e:	19 2d       	mov	r17, r9
    82a0:	2a 2d       	mov	r18, r10
    82a2:	3b 2d       	mov	r19, r11
    82a4:	4c 2d       	mov	r20, r12
    82a6:	5d 2d       	mov	r21, r13
    82a8:	6e 2d       	mov	r22, r14
    82aa:	7f 2d       	mov	r23, r15
    82ac:	80 2f       	mov	r24, r16
    82ae:	91 2f       	mov	r25, r17
    82b0:	02 e0       	ldi	r16, 0x02	; 2
    82b2:	0e 94 a2 72 	call	0xe544	; 0xe544 <__ashldi3>
    82b6:	ab 96       	adiw	r28, 0x2b	; 43
    82b8:	2f af       	std	Y+63, r18	; 0x3f
    82ba:	ab 97       	sbiw	r28, 0x2b	; 43
    82bc:	ac 96       	adiw	r28, 0x2c	; 44
    82be:	3f af       	std	Y+63, r19	; 0x3f
    82c0:	ac 97       	sbiw	r28, 0x2c	; 44
    82c2:	ad 96       	adiw	r28, 0x2d	; 45
    82c4:	4f af       	std	Y+63, r20	; 0x3f
    82c6:	ad 97       	sbiw	r28, 0x2d	; 45
    82c8:	ae 96       	adiw	r28, 0x2e	; 46
    82ca:	5f af       	std	Y+63, r21	; 0x3f
    82cc:	ae 97       	sbiw	r28, 0x2e	; 46
    82ce:	af 96       	adiw	r28, 0x2f	; 47
    82d0:	6f af       	std	Y+63, r22	; 0x3f
    82d2:	af 97       	sbiw	r28, 0x2f	; 47
    82d4:	e0 96       	adiw	r28, 0x30	; 48
    82d6:	7f af       	std	Y+63, r23	; 0x3f
    82d8:	e0 97       	sbiw	r28, 0x30	; 48
    82da:	e1 96       	adiw	r28, 0x31	; 49
    82dc:	8f af       	std	Y+63, r24	; 0x3f
    82de:	e1 97       	sbiw	r28, 0x31	; 49
    82e0:	e2 96       	adiw	r28, 0x32	; 50
    82e2:	9f af       	std	Y+63, r25	; 0x3f
    82e4:	e2 97       	sbiw	r28, 0x32	; 50
    82e6:	ab 96       	adiw	r28, 0x2b	; 43
    82e8:	af ac       	ldd	r10, Y+63	; 0x3f
    82ea:	ab 97       	sbiw	r28, 0x2b	; 43
    82ec:	ac 96       	adiw	r28, 0x2c	; 44
    82ee:	bf ac       	ldd	r11, Y+63	; 0x3f
    82f0:	ac 97       	sbiw	r28, 0x2c	; 44
    82f2:	ad 96       	adiw	r28, 0x2d	; 45
    82f4:	cf ac       	ldd	r12, Y+63	; 0x3f
    82f6:	ad 97       	sbiw	r28, 0x2d	; 45
    82f8:	ae 96       	adiw	r28, 0x2e	; 46
    82fa:	df ac       	ldd	r13, Y+63	; 0x3f
    82fc:	ae 97       	sbiw	r28, 0x2e	; 46
    82fe:	af 96       	adiw	r28, 0x2f	; 47
    8300:	ef ac       	ldd	r14, Y+63	; 0x3f
    8302:	af 97       	sbiw	r28, 0x2f	; 47
    8304:	e0 96       	adiw	r28, 0x30	; 48
    8306:	ff ac       	ldd	r15, Y+63	; 0x3f
    8308:	e0 97       	sbiw	r28, 0x30	; 48
    830a:	e1 96       	adiw	r28, 0x31	; 49
    830c:	0f ad       	ldd	r16, Y+63	; 0x3f
    830e:	e1 97       	sbiw	r28, 0x31	; 49
    8310:	e2 96       	adiw	r28, 0x32	; 50
    8312:	1f ad       	ldd	r17, Y+63	; 0x3f
    8314:	e2 97       	sbiw	r28, 0x32	; 50
    8316:	2a 2d       	mov	r18, r10
    8318:	3b 2d       	mov	r19, r11
    831a:	4c 2d       	mov	r20, r12
    831c:	5d 2d       	mov	r21, r13
    831e:	6e 2d       	mov	r22, r14
    8320:	7f 2d       	mov	r23, r15
    8322:	80 2f       	mov	r24, r16
    8324:	91 2f       	mov	r25, r17
    8326:	a2 2c       	mov	r10, r2
    8328:	b3 2c       	mov	r11, r3
    832a:	c4 2c       	mov	r12, r4
    832c:	d5 2c       	mov	r13, r5
    832e:	e6 2c       	mov	r14, r6
    8330:	f7 2c       	mov	r15, r7
    8332:	08 2d       	mov	r16, r8
    8334:	19 2d       	mov	r17, r9
    8336:	0e 94 b1 72 	call	0xe562	; 0xe562 <__adddi3>
    833a:	a2 2e       	mov	r10, r18
    833c:	b3 2e       	mov	r11, r19
    833e:	c4 2e       	mov	r12, r20
    8340:	d5 2e       	mov	r13, r21
    8342:	e6 2e       	mov	r14, r22
    8344:	f7 2e       	mov	r15, r23
    8346:	08 2f       	mov	r16, r24
    8348:	19 2f       	mov	r17, r25
    834a:	2a 2d       	mov	r18, r10
    834c:	3b 2d       	mov	r19, r11
    834e:	4c 2d       	mov	r20, r12
    8350:	5d 2d       	mov	r21, r13
    8352:	6e 2d       	mov	r22, r14
    8354:	7f 2d       	mov	r23, r15
    8356:	80 2f       	mov	r24, r16
    8358:	91 2f       	mov	r25, r17
    835a:	29 51       	subi	r18, 0x19	; 25
    835c:	3c 4f       	sbci	r19, 0xFC	; 252
    835e:	4f 4f       	sbci	r20, 0xFF	; 255
    8360:	5f 4f       	sbci	r21, 0xFF	; 255
    8362:	6f 4f       	sbci	r22, 0xFF	; 255
    8364:	7f 4f       	sbci	r23, 0xFF	; 255
    8366:	8f 4f       	sbci	r24, 0xFF	; 255
    8368:	9f 4f       	sbci	r25, 0xFF	; 255
    836a:	a2 2e       	mov	r10, r18
    836c:	b3 2e       	mov	r11, r19
    836e:	c4 2e       	mov	r12, r20
    8370:	d5 2e       	mov	r13, r21
    8372:	e6 2e       	mov	r14, r22
    8374:	f7 2e       	mov	r15, r23
    8376:	08 2f       	mov	r16, r24
    8378:	19 2f       	mov	r17, r25
    837a:	2a 2d       	mov	r18, r10
    837c:	3b 2d       	mov	r19, r11
    837e:	4c 2d       	mov	r20, r12
    8380:	5d 2d       	mov	r21, r13
    8382:	6e 2d       	mov	r22, r14
    8384:	7f 2d       	mov	r23, r15
    8386:	80 2f       	mov	r24, r16
    8388:	91 2f       	mov	r25, r17
    838a:	0e 94 56 11 	call	0x22ac	; 0x22ac <__floatundisf>
    838e:	dc 01       	movw	r26, r24
    8390:	cb 01       	movw	r24, r22
    8392:	20 e0       	ldi	r18, 0x00	; 0
    8394:	30 e8       	ldi	r19, 0x80	; 128
    8396:	4b eb       	ldi	r20, 0xBB	; 187
    8398:	55 e4       	ldi	r21, 0x45	; 69
    839a:	bc 01       	movw	r22, r24
    839c:	cd 01       	movw	r24, r26
    839e:	0e 94 81 14 	call	0x2902	; 0x2902 <__divsf3>
    83a2:	dc 01       	movw	r26, r24
    83a4:	cb 01       	movw	r24, r22
    83a6:	bc 01       	movw	r22, r24
    83a8:	cd 01       	movw	r24, r26
    83aa:	0e 94 a5 10 	call	0x214a	; 0x214a <__fixunssfdi>
    83ae:	a2 2e       	mov	r10, r18
    83b0:	b3 2e       	mov	r11, r19
    83b2:	c4 2e       	mov	r12, r20
    83b4:	d5 2e       	mov	r13, r21
    83b6:	e6 2e       	mov	r14, r22
    83b8:	f7 2e       	mov	r15, r23
    83ba:	08 2f       	mov	r16, r24
    83bc:	19 2f       	mov	r17, r25
    83be:	d6 01       	movw	r26, r12
    83c0:	c5 01       	movw	r24, r10
    83c2:	bc 01       	movw	r22, r24
    83c4:	cd 01       	movw	r24, r26
    83c6:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__portable_avr_delay_cycles>
		}
		dl_snapshot_iter_inc(&idx);
    83ca:	ce 01       	movw	r24, r28
    83cc:	8f 5a       	subi	r24, 0xAF	; 175
    83ce:	9f 4f       	sbci	r25, 0xFF	; 255
    83d0:	ca db       	rcall	.-2156   	; 0x7b66 <dl_snapshot_iter_inc>
	uint16_t vBat = voltmeter_getValue();
	uint16_t temp = thermometer_getValue();
	
	
	uint8_t idx = g_data_snapshot_beg;
	while(idx!=g_data_snapshot_end) {
    83d2:	ce 01       	movw	r24, r28
    83d4:	8f 5a       	subi	r24, 0xAF	; 175
    83d6:	9f 4f       	sbci	r25, 0xFF	; 255
    83d8:	fc 01       	movw	r30, r24
    83da:	90 81       	ld	r25, Z
    83dc:	80 91 1e 24 	lds	r24, 0x241E
    83e0:	98 17       	cp	r25, r24
    83e2:	09 f0       	breq	.+2      	; 0x83e6 <dl_task_store_data+0x6ea>
    83e4:	c1 cc       	rjmp	.-1662   	; 0x7d68 <dl_task_store_data+0x6c>
			delay_ms(5);
		}
		dl_snapshot_iter_inc(&idx);
	}

	AT24CXX_iterator_report(it);
    83e6:	8a 81       	ldd	r24, Y+2	; 0x02
    83e8:	9b 81       	ldd	r25, Y+3	; 0x03
    83ea:	dc d3       	rcall	.+1976   	; 0x8ba4 <AT24CXX_iterator_report>
	datalogger_write_iterators_to_eeprom();
    83ec:	0e 94 7c 22 	call	0x44f8	; 0x44f8 <datalogger_write_iterators_to_eeprom>
    83f0:	01 c0       	rjmp	.+2      	; 0x83f4 <dl_task_store_data+0x6f8>
	uint8_t err = 0;
	//	debug_string(NORMAL,PSTR("Store Data IN\r\n"),true);

	if(STATUS_OK!=AT24CXX_Init())
	{
		goto task_store_quit;
    83f2:	00 00       	nop
	AT24CXX_iterator_report(it);
	datalogger_write_iterators_to_eeprom();

	task_store_quit:

	g_data_snapshot_beg = g_data_snapshot_end;
    83f4:	80 91 1e 24 	lds	r24, 0x241E
    83f8:	80 93 1d 24 	sts	0x241D, r24
	//debug_string(NORMAL,PSTR("Store Data OUT\r\n"),true);
	//sprintf_P(szBuf,PSTR("DFLL: 0x%X%X CALA: 0x%X  CALB: 0x%X\r\n"),DFLLRC32M.COMP2,DFLLRC32M.COMP1,DFLLRC32M.CALA,DFLLRC32M.CALB);
	//debug_string(NORMAL,szBuf,false);
	task_status_store_data = TASK_STOP;
    83fc:	10 92 83 21 	sts	0x2183, r1
	return err;
    8400:	89 81       	ldd	r24, Y+1	; 0x01
}
    8402:	cf 58       	subi	r28, 0x8F	; 143
    8404:	df 4f       	sbci	r29, 0xFF	; 255
    8406:	cd bf       	out	0x3d, r28	; 61
    8408:	de bf       	out	0x3e, r29	; 62
    840a:	df 91       	pop	r29
    840c:	cf 91       	pop	r28
    840e:	1f 91       	pop	r17
    8410:	0f 91       	pop	r16
    8412:	ff 90       	pop	r15
    8414:	ef 90       	pop	r14
    8416:	df 90       	pop	r13
    8418:	cf 90       	pop	r12
    841a:	bf 90       	pop	r11
    841c:	af 90       	pop	r10
    841e:	9f 90       	pop	r9
    8420:	8f 90       	pop	r8
    8422:	7f 90       	pop	r7
    8424:	6f 90       	pop	r6
    8426:	5f 90       	pop	r5
    8428:	4f 90       	pop	r4
    842a:	3f 90       	pop	r3
    842c:	2f 90       	pop	r2
    842e:	08 95       	ret

00008430 <datalogger_run>:



void datalogger_run(void)
{
    8430:	cf 93       	push	r28
    8432:	df 93       	push	r29
    8434:	cd b7       	in	r28, 0x3d	; 61
    8436:	de b7       	in	r29, 0x3e	; 62
	while(1) {

		alphasense_adc_getValue();
    8438:	f6 d0       	rcall	.+492    	; 0x8626 <alphasense_adc_getValue>
		DS18B20_getValue();
    843a:	aa d4       	rcall	.+2388   	; 0x8d90 <DS18B20_getValue>
		DS18B20_2_getValue();
    843c:	26 d6       	rcall	.+3148   	; 0x908a <DS18B20_2_getValue>

		if(task_status_sync_time==TASK_READY) {
    843e:	80 91 84 21 	lds	r24, 0x2184
    8442:	81 30       	cpi	r24, 0x01	; 1
    8444:	11 f4       	brne	.+4      	; 0x844a <datalogger_run+0x1a>
			dl_task_sync_time();
    8446:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <dl_task_sync_time>
		}

		if(task_status_store_data==TASK_READY) {
    844a:	80 91 83 21 	lds	r24, 0x2183
    844e:	81 30       	cpi	r24, 0x01	; 1
    8450:	09 f4       	brne	.+2      	; 0x8454 <datalogger_run+0x24>
			dl_task_store_data();
    8452:	54 dc       	rcall	.-1880   	; 0x7cfc <dl_task_store_data>
		}

		if(task_status_send_data_prepare_RT ==TASK_READY) {
    8454:	80 91 81 21 	lds	r24, 0x2181
    8458:	81 30       	cpi	r24, 0x01	; 1
    845a:	e9 f4       	brne	.+58     	; 0x8496 <datalogger_run+0x66>
			if(0==dl_task_send_data_prepare_RT())
    845c:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <dl_task_send_data_prepare_RT>
    8460:	00 97       	sbiw	r24, 0x00	; 0
    8462:	21 f4       	brne	.+8      	; 0x846c <datalogger_run+0x3c>
			{
				task_status_send_data_RT = TASK_READY;
    8464:	81 e0       	ldi	r24, 0x01	; 1
    8466:	80 93 82 21 	sts	0x2182, r24
    846a:	15 c0       	rjmp	.+42     	; 0x8496 <datalogger_run+0x66>
			} else { //Something went wrong during the prepare session
				sim900_init();
    846c:	0e 94 e9 4f 	call	0x9fd2	; 0x9fd2 <sim900_init>
				g_acc_task_send_RT=g_interv_task_send_RT-30; //Schedule the SEND task after 30 seconds
    8470:	80 91 b1 21 	lds	r24, 0x21B1
    8474:	90 91 b2 21 	lds	r25, 0x21B2
    8478:	a0 91 b3 21 	lds	r26, 0x21B3
    847c:	b0 91 b4 21 	lds	r27, 0x21B4
    8480:	4e 97       	sbiw	r24, 0x1e	; 30
    8482:	a1 09       	sbc	r26, r1
    8484:	b1 09       	sbc	r27, r1
    8486:	80 93 a9 21 	sts	0x21A9, r24
    848a:	90 93 aa 21 	sts	0x21AA, r25
    848e:	a0 93 ab 21 	sts	0x21AB, r26
    8492:	b0 93 ac 21 	sts	0x21AC, r27
			}
		}

		if(task_status_send_data_RT ==TASK_READY) {
    8496:	80 91 82 21 	lds	r24, 0x2182
    849a:	81 30       	cpi	r24, 0x01	; 1
    849c:	c9 f4       	brne	.+50     	; 0x84d0 <datalogger_run+0xa0>
			if(0!=dl_task_send_data_RT()) {
    849e:	0e 94 1c 38 	call	0x7038	; 0x7038 <dl_task_send_data_RT>
    84a2:	00 97       	sbiw	r24, 0x00	; 0
    84a4:	a9 f0       	breq	.+42     	; 0x84d0 <datalogger_run+0xa0>
				sim900_init();
    84a6:	0e 94 e9 4f 	call	0x9fd2	; 0x9fd2 <sim900_init>
				g_acc_task_send_RT=g_interv_task_send_RT-30; //Schedule the SEND task after 30 seconds
    84aa:	80 91 b1 21 	lds	r24, 0x21B1
    84ae:	90 91 b2 21 	lds	r25, 0x21B2
    84b2:	a0 91 b3 21 	lds	r26, 0x21B3
    84b6:	b0 91 b4 21 	lds	r27, 0x21B4
    84ba:	4e 97       	sbiw	r24, 0x1e	; 30
    84bc:	a1 09       	sbc	r26, r1
    84be:	b1 09       	sbc	r27, r1
    84c0:	80 93 a9 21 	sts	0x21A9, r24
    84c4:	90 93 aa 21 	sts	0x21AA, r25
    84c8:	a0 93 ab 21 	sts	0x21AB, r26
    84cc:	b0 93 ac 21 	sts	0x21AC, r27
				
			}
		}
		
		if(task_status_server_cmd_check==TASK_READY) {
    84d0:	80 91 80 21 	lds	r24, 0x2180
    84d4:	81 30       	cpi	r24, 0x01	; 1
    84d6:	11 f4       	brne	.+4      	; 0x84dc <datalogger_run+0xac>
			dl_task_cmd_check();
    84d8:	0e 94 e9 37 	call	0x6fd2	; 0x6fd2 <dl_task_cmd_check>
		}

		if(task_status_send_data ==TASK_READY) {
    84dc:	80 91 85 21 	lds	r24, 0x2185
    84e0:	81 30       	cpi	r24, 0x01	; 1
    84e2:	41 f4       	brne	.+16     	; 0x84f4 <datalogger_run+0xc4>
			if(0!=dl_task_send_data()) {
    84e4:	0e 94 57 38 	call	0x70ae	; 0x70ae <dl_task_send_data>
    84e8:	00 97       	sbiw	r24, 0x00	; 0
    84ea:	21 f0       	breq	.+8      	; 0x84f4 <datalogger_run+0xc4>
				sim900_init();
    84ec:	0e 94 e9 4f 	call	0x9fd2	; 0x9fd2 <sim900_init>
				task_status_send_data = TASK_STOP;
    84f0:	10 92 85 21 	sts	0x2185, r1
			}
		}


		if(	(task_status_send_data_RT==TASK_READY)		||
    84f4:	80 91 82 21 	lds	r24, 0x2182
    84f8:	81 30       	cpi	r24, 0x01	; 1
    84fa:	b9 f0       	breq	.+46     	; 0x852a <datalogger_run+0xfa>
			(task_status_store_data==TASK_READY)		||
    84fc:	80 91 83 21 	lds	r24, 0x2183
				task_status_send_data = TASK_STOP;
			}
		}


		if(	(task_status_send_data_RT==TASK_READY)		||
    8500:	81 30       	cpi	r24, 0x01	; 1
    8502:	99 f0       	breq	.+38     	; 0x852a <datalogger_run+0xfa>
			(task_status_store_data==TASK_READY)		||
			(task_status_send_data==TASK_READY)			||
    8504:	80 91 85 21 	lds	r24, 0x2185
			}
		}


		if(	(task_status_send_data_RT==TASK_READY)		||
			(task_status_store_data==TASK_READY)		||
    8508:	81 30       	cpi	r24, 0x01	; 1
    850a:	79 f0       	breq	.+30     	; 0x852a <datalogger_run+0xfa>
			(task_status_send_data==TASK_READY)			||
			(task_status_sync_time==TASK_READY)) continue;
    850c:	80 91 84 21 	lds	r24, 0x2184
		}


		if(	(task_status_send_data_RT==TASK_READY)		||
			(task_status_store_data==TASK_READY)		||
			(task_status_send_data==TASK_READY)			||
    8510:	81 30       	cpi	r24, 0x01	; 1
    8512:	59 f0       	breq	.+22     	; 0x852a <datalogger_run+0xfa>
			(task_status_sync_time==TASK_READY)) continue;

		dl_cycle_lock = true;
    8514:	81 e0       	ldi	r24, 0x01	; 1
    8516:	80 93 07 20 	sts	0x2007, r24
		while(dl_cycle_lock) {
    851a:	02 c0       	rjmp	.+4      	; 0x8520 <datalogger_run+0xf0>
			sleepmgr_enter_sleep();
    851c:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <sleepmgr_enter_sleep>
			(task_status_store_data==TASK_READY)		||
			(task_status_send_data==TASK_READY)			||
			(task_status_sync_time==TASK_READY)) continue;

		dl_cycle_lock = true;
		while(dl_cycle_lock) {
    8520:	80 91 07 20 	lds	r24, 0x2007
    8524:	88 23       	and	r24, r24
    8526:	d1 f7       	brne	.-12     	; 0x851c <datalogger_run+0xec>
			sleepmgr_enter_sleep();
		};
			
	};
    8528:	87 cf       	rjmp	.-242    	; 0x8438 <datalogger_run+0x8>


		if(	(task_status_send_data_RT==TASK_READY)		||
			(task_status_store_data==TASK_READY)		||
			(task_status_send_data==TASK_READY)			||
			(task_status_sync_time==TASK_READY)) continue;
    852a:	00 00       	nop
		dl_cycle_lock = true;
		while(dl_cycle_lock) {
			sleepmgr_enter_sleep();
		};
			
	};
    852c:	85 cf       	rjmp	.-246    	; 0x8438 <datalogger_run+0x8>

0000852e <dl_test_now>:

}


static void dl_test_now(void)
{
    852e:	cf 93       	push	r28
    8530:	df 93       	push	r29
    8532:	cd b7       	in	r28, 0x3d	; 61
    8534:	de b7       	in	r29, 0x3e	; 62
    8536:	ca 5a       	subi	r28, 0xAA	; 170
    8538:	d1 09       	sbc	r29, r1
    853a:	cd bf       	out	0x3d, r28	; 61
    853c:	de bf       	out	0x3e, r29	; 62
	{
			gpio_toggle_pin(STATUS_LED_PIN);
			delay_ms(200);

	}
}
    853e:	c6 55       	subi	r28, 0x56	; 86
    8540:	df 4f       	sbci	r29, 0xFF	; 255
    8542:	cd bf       	out	0x3d, r28	; 61
    8544:	de bf       	out	0x3e, r29	; 62
    8546:	df 91       	pop	r29
    8548:	cf 91       	pop	r28
    854a:	08 95       	ret

0000854c <adc_start_conversion.constprop.8>:
	g_partialSumAux = 0;
	g_partialCount = 0;
}

void alphasense_init( void )
{
    854c:	9f b7       	in	r25, 0x3f	; 63
    854e:	f8 94       	cli
    8550:	e0 e4       	ldi	r30, 0x40	; 64
    8552:	f2 e0       	ldi	r31, 0x02	; 2
    8554:	80 81       	ld	r24, Z
    8556:	84 60       	ori	r24, 0x04	; 4
    8558:	80 83       	st	Z, r24
    855a:	9f bf       	out	0x3f, r25	; 63
    855c:	08 95       	ret

0000855e <alphasense_get_stats>:
    855e:	cf 92       	push	r12
    8560:	df 92       	push	r13
    8562:	ef 92       	push	r14
    8564:	ff 92       	push	r15
    8566:	cf 93       	push	r28
    8568:	df 93       	push	r29
    856a:	ec 01       	movw	r28, r24
    856c:	80 91 1f 24 	lds	r24, 0x241F
    8570:	81 11       	cpse	r24, r1
    8572:	fc cf       	rjmp	.-8      	; 0x856c <alphasense_get_stats+0xe>
    8574:	60 91 20 24 	lds	r22, 0x2420
    8578:	70 91 21 24 	lds	r23, 0x2421
    857c:	80 e0       	ldi	r24, 0x00	; 0
    857e:	90 e0       	ldi	r25, 0x00	; 0
    8580:	0e 94 22 16 	call	0x2c44	; 0x2c44 <__floatunsisf>
    8584:	6b 01       	movw	r12, r22
    8586:	7c 01       	movw	r14, r24
    8588:	60 91 26 24 	lds	r22, 0x2426
    858c:	70 91 27 24 	lds	r23, 0x2427
    8590:	80 91 28 24 	lds	r24, 0x2428
    8594:	90 91 29 24 	lds	r25, 0x2429
    8598:	0e 94 79 15 	call	0x2af2	; 0x2af2 <__floatsisf>
    859c:	a7 01       	movw	r20, r14
    859e:	96 01       	movw	r18, r12
    85a0:	0e 94 81 14 	call	0x2902	; 0x2902 <__divsf3>
    85a4:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <__fixsfsi>
    85a8:	60 93 2a 24 	sts	0x242A, r22
    85ac:	70 93 2b 24 	sts	0x242B, r23
    85b0:	60 91 22 24 	lds	r22, 0x2422
    85b4:	70 91 23 24 	lds	r23, 0x2423
    85b8:	80 91 24 24 	lds	r24, 0x2424
    85bc:	90 91 25 24 	lds	r25, 0x2425
    85c0:	0e 94 79 15 	call	0x2af2	; 0x2af2 <__floatsisf>
    85c4:	a7 01       	movw	r20, r14
    85c6:	96 01       	movw	r18, r12
    85c8:	0e 94 81 14 	call	0x2902	; 0x2902 <__divsf3>
    85cc:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <__fixsfsi>
    85d0:	60 93 2c 24 	sts	0x242C, r22
    85d4:	70 93 2d 24 	sts	0x242D, r23
    85d8:	80 91 2a 24 	lds	r24, 0x242A
    85dc:	90 91 2b 24 	lds	r25, 0x242B
    85e0:	a0 91 2c 24 	lds	r26, 0x242C
    85e4:	b0 91 2d 24 	lds	r27, 0x242D
    85e8:	88 83       	st	Y, r24
    85ea:	99 83       	std	Y+1, r25	; 0x01
    85ec:	aa 83       	std	Y+2, r26	; 0x02
    85ee:	bb 83       	std	Y+3, r27	; 0x03
    85f0:	10 92 26 24 	sts	0x2426, r1
    85f4:	10 92 27 24 	sts	0x2427, r1
    85f8:	10 92 28 24 	sts	0x2428, r1
    85fc:	10 92 29 24 	sts	0x2429, r1
    8600:	10 92 22 24 	sts	0x2422, r1
    8604:	10 92 23 24 	sts	0x2423, r1
    8608:	10 92 24 24 	sts	0x2424, r1
    860c:	10 92 25 24 	sts	0x2425, r1
    8610:	10 92 20 24 	sts	0x2420, r1
    8614:	10 92 21 24 	sts	0x2421, r1
    8618:	df 91       	pop	r29
    861a:	cf 91       	pop	r28
    861c:	ff 90       	pop	r15
    861e:	ef 90       	pop	r14
    8620:	df 90       	pop	r13
    8622:	cf 90       	pop	r12
    8624:	08 95       	ret

00008626 <alphasense_adc_getValue>:
	
}

void alphasense_adc_getValue( void )
{
    8626:	af 92       	push	r10
    8628:	bf 92       	push	r11
    862a:	cf 92       	push	r12
    862c:	df 92       	push	r13
    862e:	ef 92       	push	r14
    8630:	ff 92       	push	r15
    8632:	0f 93       	push	r16
    8634:	1f 93       	push	r17
    8636:	cf 93       	push	r28
    8638:	df 93       	push	r29
    863a:	cd b7       	in	r28, 0x3d	; 61
    863c:	de b7       	in	r29, 0x3e	; 62
    863e:	2b 97       	sbiw	r28, 0x0b	; 11
    8640:	cd bf       	out	0x3d, r28	; 61
    8642:	de bf       	out	0x3e, r29	; 62
	struct adc_channel_config adcch_conf;
	uint8_t inputgain = 1;//, elements = 20;
	//char szBUF[64];
	
	// DISABLE jtag - it locks the upper 4 pins of PORT B
	CCP       = CCP_IOREG_gc;    // Secret handshake
    8644:	88 ed       	ldi	r24, 0xD8	; 216
    8646:	84 bf       	out	0x34, r24	; 52
	MCU.MCUCR = 0b00000001;
    8648:	11 e0       	ldi	r17, 0x01	; 1
    864a:	10 93 96 00 	sts	0x0096, r17
	
	PORTB.PIN0CTRL = PORT_OPC_TOTEM_gc; // Auxiliary Electrode
    864e:	10 92 30 06 	sts	0x0630, r1
	PORTB.PIN2CTRL = PORT_OPC_TOTEM_gc; // Working Electrode
    8652:	10 92 32 06 	sts	0x0632, r1
	PORTB.PIN6CTRL = PORT_OPC_TOTEM_gc; // GND x offset
    8656:	10 92 36 06 	sts	0x0636, r1
	
	adc_read_configuration(&ALPHASENSE_ADC, &adc_conf);
    865a:	be 01       	movw	r22, r28
    865c:	6f 5f       	subi	r22, 0xFF	; 255
    865e:	7f 4f       	sbci	r23, 0xFF	; 255
    8660:	80 e4       	ldi	r24, 0x40	; 64
    8662:	92 e0       	ldi	r25, 0x02	; 2
    8664:	0e 94 c6 58 	call	0xb18c	; 0xb18c <adc_read_configuration>
	adcch_read_configuration(&ALPHASENSE_ADC, ALPHASENSE_ADC_CH, &adcch_conf);
    8668:	ae 01       	movw	r20, r28
    866a:	48 5f       	subi	r20, 0xF8	; 248
    866c:	5f 4f       	sbci	r21, 0xFF	; 255
    866e:	61 e0       	ldi	r22, 0x01	; 1
    8670:	80 e4       	ldi	r24, 0x40	; 64
    8672:	92 e0       	ldi	r25, 0x02	; 2
    8674:	0e 94 31 59 	call	0xb262	; 0xb262 <adcch_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    8678:	9a 81       	ldd	r25, Y+2	; 0x02
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    867a:	8b 81       	ldd	r24, Y+3	; 0x03
    867c:	8f 78       	andi	r24, 0x8F	; 143
	conf->refctrl |= ref;
    867e:	80 61       	ori	r24, 0x10	; 16
    8680:	8b 83       	std	Y+3, r24	; 0x03
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    8682:	91 7e       	andi	r25, 0xE1	; 225
    8684:	9a 83       	std	Y+2, r25	; 0x02
		conf->evctrl = ADC_EVACT_NONE_gc;
    8686:	1c 82       	std	Y+4, r1	; 0x04
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    8688:	85 e0       	ldi	r24, 0x05	; 5
    868a:	8d 83       	std	Y+5, r24	; 0x05
	
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_OFF, ADC_RES_12, ADC_REF_VCC);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
	adc_set_clock_rate(&adc_conf, 200000UL);
	adc_write_configuration(&ALPHASENSE_ADC, &adc_conf);
    868c:	be 01       	movw	r22, r28
    868e:	6f 5f       	subi	r22, 0xFF	; 255
    8690:	7f 4f       	sbci	r23, 0xFF	; 255
    8692:	80 e4       	ldi	r24, 0x40	; 64
    8694:	92 e0       	ldi	r25, 0x02	; 2
    8696:	0e 94 84 58 	call	0xb108	; 0xb108 <adc_write_configuration>
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    869a:	18 87       	std	Y+8, r17	; 0x08
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    869c:	80 e3       	ldi	r24, 0x30	; 48
    869e:	89 87       	std	Y+9, r24	; 0x09
	
	
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN6, ADCCH_NEG_NONE, inputgain);
	adcch_write_configuration(&ALPHASENSE_ADC, ALPHASENSE_ADC_CH, &adcch_conf);
    86a0:	ae 01       	movw	r20, r28
    86a2:	48 5f       	subi	r20, 0xF8	; 248
    86a4:	5f 4f       	sbci	r21, 0xFF	; 255
    86a6:	61 e0       	ldi	r22, 0x01	; 1
    86a8:	80 e4       	ldi	r24, 0x40	; 64
    86aa:	92 e0       	ldi	r25, 0x02	; 2
    86ac:	0e 94 e9 58 	call	0xb1d2	; 0xb1d2 <adcch_write_configuration>
	adc_enable(&ALPHASENSE_ADC);
    86b0:	80 e4       	ldi	r24, 0x40	; 64
    86b2:	92 e0       	ldi	r25, 0x02	; 2
    86b4:	0e 94 b7 56 	call	0xad6e	; 0xad6e <adc_enable>
	adc_start_conversion(&ALPHASENSE_ADC, ALPHASENSE_ADC_CH);
    86b8:	49 df       	rcall	.-366    	; 0x854c <adc_start_conversion.constprop.8>
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    86ba:	80 91 46 02 	lds	r24, 0x0246
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    86be:	98 2f       	mov	r25, r24
    86c0:	91 70       	andi	r25, 0x01	; 1
    86c2:	80 ff       	sbrs	r24, 0
    86c4:	fa cf       	rjmp	.-12     	; 0x86ba <alphasense_adc_getValue+0x94>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    86c6:	90 93 46 02 	sts	0x0246, r25
	adc_wait_for_interrupt_flag(&ALPHASENSE_ADC, ALPHASENSE_ADC_CH);
	adc_start_conversion(&ALPHASENSE_ADC, ALPHASENSE_ADC_CH);
    86ca:	40 df       	rcall	.-384    	; 0x854c <adc_start_conversion.constprop.8>
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    86cc:	80 91 46 02 	lds	r24, 0x0246
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    86d0:	ff 24       	eor	r15, r15
    86d2:	f3 94       	inc	r15
    86d4:	f8 22       	and	r15, r24
    86d6:	80 ff       	sbrs	r24, 0
    86d8:	f9 cf       	rjmp	.-14     	; 0x86cc <alphasense_adc_getValue+0xa6>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    86da:	f0 92 46 02 	sts	0x0246, r15
	adc_wait_for_interrupt_flag(&ALPHASENSE_ADC, ALPHASENSE_ADC_CH);
	const int16_t off = adc_get_result(&ALPHASENSE_ADC, ALPHASENSE_ADC_CH);
    86de:	00 91 64 02 	lds	r16, 0x0264
    86e2:	10 91 65 02 	lds	r17, 0x0265
	adc_disable(&ALPHASENSE_ADC);
    86e6:	80 e4       	ldi	r24, 0x40	; 64
    86e8:	92 e0       	ldi	r25, 0x02	; 2
    86ea:	0e 94 ce 56 	call	0xad9c	; 0xad9c <adc_disable>
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    86ee:	f8 86       	std	Y+8, r15	; 0x08
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    86f0:	19 86       	std	Y+9, r1	; 0x09
	////sprintf_P(szBUF,PSTR("gain: %u\t"),gain);
	////debug_string(NORMAL,szBUF,false);
	
	
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN0, ADCCH_NEG_NONE, inputgain);
	adcch_write_configuration(&ALPHASENSE_ADC, ALPHASENSE_ADC_CH, &adcch_conf);
    86f2:	ae 01       	movw	r20, r28
    86f4:	48 5f       	subi	r20, 0xF8	; 248
    86f6:	5f 4f       	sbci	r21, 0xFF	; 255
    86f8:	61 e0       	ldi	r22, 0x01	; 1
    86fa:	80 e4       	ldi	r24, 0x40	; 64
    86fc:	92 e0       	ldi	r25, 0x02	; 2
    86fe:	0e 94 e9 58 	call	0xb1d2	; 0xb1d2 <adcch_write_configuration>
	adc_enable(&ALPHASENSE_ADC);
    8702:	80 e4       	ldi	r24, 0x40	; 64
    8704:	92 e0       	ldi	r25, 0x02	; 2
    8706:	0e 94 b7 56 	call	0xad6e	; 0xad6e <adc_enable>
	adc_start_conversion(&ALPHASENSE_ADC, ALPHASENSE_ADC_CH);
    870a:	20 df       	rcall	.-448    	; 0x854c <adc_start_conversion.constprop.8>
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    870c:	80 91 46 02 	lds	r24, 0x0246
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    8710:	98 2f       	mov	r25, r24
    8712:	91 70       	andi	r25, 0x01	; 1
    8714:	80 ff       	sbrs	r24, 0
    8716:	fa cf       	rjmp	.-12     	; 0x870c <alphasense_adc_getValue+0xe6>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    8718:	90 93 46 02 	sts	0x0246, r25
	adc_wait_for_interrupt_flag(&ALPHASENSE_ADC, ALPHASENSE_ADC_CH);
	adc_start_conversion(&ALPHASENSE_ADC, ALPHASENSE_ADC_CH);
    871c:	17 df       	rcall	.-466    	; 0x854c <adc_start_conversion.constprop.8>
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    871e:	80 91 46 02 	lds	r24, 0x0246
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    8722:	ff 24       	eor	r15, r15
    8724:	f3 94       	inc	r15
    8726:	f8 22       	and	r15, r24
    8728:	80 ff       	sbrs	r24, 0
    872a:	f9 cf       	rjmp	.-14     	; 0x871e <alphasense_adc_getValue+0xf8>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    872c:	f0 92 46 02 	sts	0x0246, r15
	adc_wait_for_interrupt_flag(&ALPHASENSE_ADC, ALPHASENSE_ADC_CH);
	const int16_t adc_w = adc_get_result(&ALPHASENSE_ADC, ALPHASENSE_ADC_CH)-off;
    8730:	c0 90 64 02 	lds	r12, 0x0264
    8734:	d0 90 65 02 	lds	r13, 0x0265
    8738:	c0 1a       	sub	r12, r16
    873a:	d1 0a       	sbc	r13, r17
	adc_disable(&ALPHASENSE_ADC);
    873c:	80 e4       	ldi	r24, 0x40	; 64
    873e:	92 e0       	ldi	r25, 0x02	; 2
    8740:	0e 94 ce 56 	call	0xad9c	; 0xad9c <adc_disable>
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    8744:	f8 86       	std	Y+8, r15	; 0x08
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    8746:	80 e1       	ldi	r24, 0x10	; 16
    8748:	89 87       	std	Y+9, r24	; 0x09
	//sprintf_P(szBUF,PSTR("ADC_WORK: %u\t"),adc_w);
	//debug_string(NORMAL,szBUF,false);
	
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN2, ADCCH_NEG_NONE, inputgain);
	adcch_write_configuration(&ALPHASENSE_ADC, ALPHASENSE_ADC_CH, &adcch_conf);
    874a:	ae 01       	movw	r20, r28
    874c:	48 5f       	subi	r20, 0xF8	; 248
    874e:	5f 4f       	sbci	r21, 0xFF	; 255
    8750:	61 e0       	ldi	r22, 0x01	; 1
    8752:	80 e4       	ldi	r24, 0x40	; 64
    8754:	92 e0       	ldi	r25, 0x02	; 2
    8756:	0e 94 e9 58 	call	0xb1d2	; 0xb1d2 <adcch_write_configuration>
	adc_enable(&ALPHASENSE_ADC);
    875a:	80 e4       	ldi	r24, 0x40	; 64
    875c:	92 e0       	ldi	r25, 0x02	; 2
    875e:	0e 94 b7 56 	call	0xad6e	; 0xad6e <adc_enable>
	adc_start_conversion(&ALPHASENSE_ADC, ALPHASENSE_ADC_CH);
    8762:	f4 de       	rcall	.-536    	; 0x854c <adc_start_conversion.constprop.8>
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    8764:	80 91 46 02 	lds	r24, 0x0246
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    8768:	98 2f       	mov	r25, r24
    876a:	91 70       	andi	r25, 0x01	; 1
    876c:	80 ff       	sbrs	r24, 0
    876e:	fa cf       	rjmp	.-12     	; 0x8764 <alphasense_adc_getValue+0x13e>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    8770:	90 93 46 02 	sts	0x0246, r25
	adc_wait_for_interrupt_flag(&ALPHASENSE_ADC, ALPHASENSE_ADC_CH);
	adc_start_conversion(&ALPHASENSE_ADC, ALPHASENSE_ADC_CH);
    8774:	eb de       	rcall	.-554    	; 0x854c <adc_start_conversion.constprop.8>
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    8776:	80 91 46 02 	lds	r24, 0x0246
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    877a:	ff 24       	eor	r15, r15
    877c:	f3 94       	inc	r15
    877e:	f8 22       	and	r15, r24
    8780:	80 ff       	sbrs	r24, 0
    8782:	f9 cf       	rjmp	.-14     	; 0x8776 <alphasense_adc_getValue+0x150>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    8784:	f0 92 46 02 	sts	0x0246, r15
	adc_wait_for_interrupt_flag(&ALPHASENSE_ADC, ALPHASENSE_ADC_CH);
	const int16_t adc_a = adc_get_result(&ALPHASENSE_ADC, ALPHASENSE_ADC_CH)-off;
    8788:	a0 90 64 02 	lds	r10, 0x0264
    878c:	b0 90 65 02 	lds	r11, 0x0265
	adc_disable(&ALPHASENSE_ADC);
    8790:	80 e4       	ldi	r24, 0x40	; 64
    8792:	92 e0       	ldi	r25, 0x02	; 2
    8794:	0e 94 ce 56 	call	0xad9c	; 0xad9c <adc_disable>
//
	//}
	
	//adc_disable(&ALPHASENSE_ADC);
	
	PORTB.PIN0CTRL = PORT_OPC_PULLUP_gc;
    8798:	88 e1       	ldi	r24, 0x18	; 24
    879a:	80 93 30 06 	sts	0x0630, r24
	PORTB.PIN2CTRL = PORT_OPC_PULLUP_gc;
    879e:	80 93 32 06 	sts	0x0632, r24
	PORTB.PIN6CTRL = PORT_OPC_PULLUP_gc;
    87a2:	80 93 36 06 	sts	0x0636, r24
	
	recordingData = true;
    87a6:	f0 92 1f 24 	sts	0x241F, r15
	g_partialSumWork+=(int32_t)adc_w;
    87aa:	ee 24       	eor	r14, r14
    87ac:	d7 fc       	sbrc	r13, 7
    87ae:	e0 94       	com	r14
    87b0:	fe 2c       	mov	r15, r14
    87b2:	80 91 26 24 	lds	r24, 0x2426
    87b6:	90 91 27 24 	lds	r25, 0x2427
    87ba:	a0 91 28 24 	lds	r26, 0x2428
    87be:	b0 91 29 24 	lds	r27, 0x2429
    87c2:	8c 0d       	add	r24, r12
    87c4:	9d 1d       	adc	r25, r13
    87c6:	ae 1d       	adc	r26, r14
    87c8:	bf 1d       	adc	r27, r15
    87ca:	80 93 26 24 	sts	0x2426, r24
    87ce:	90 93 27 24 	sts	0x2427, r25
    87d2:	a0 93 28 24 	sts	0x2428, r26
    87d6:	b0 93 29 24 	sts	0x2429, r27
	adc_enable(&ALPHASENSE_ADC);
	adc_start_conversion(&ALPHASENSE_ADC, ALPHASENSE_ADC_CH);
	adc_wait_for_interrupt_flag(&ALPHASENSE_ADC, ALPHASENSE_ADC_CH);
	adc_start_conversion(&ALPHASENSE_ADC, ALPHASENSE_ADC_CH);
	adc_wait_for_interrupt_flag(&ALPHASENSE_ADC, ALPHASENSE_ADC_CH);
	const int16_t adc_a = adc_get_result(&ALPHASENSE_ADC, ALPHASENSE_ADC_CH)-off;
    87da:	a5 01       	movw	r20, r10
    87dc:	40 1b       	sub	r20, r16
    87de:	51 0b       	sbc	r21, r17
	PORTB.PIN2CTRL = PORT_OPC_PULLUP_gc;
	PORTB.PIN6CTRL = PORT_OPC_PULLUP_gc;
	
	recordingData = true;
	g_partialSumWork+=(int32_t)adc_w;
	g_partialSumAux+=(int32_t)adc_a;
    87e0:	66 27       	eor	r22, r22
    87e2:	57 fd       	sbrc	r21, 7
    87e4:	60 95       	com	r22
    87e6:	76 2f       	mov	r23, r22
    87e8:	80 91 22 24 	lds	r24, 0x2422
    87ec:	90 91 23 24 	lds	r25, 0x2423
    87f0:	a0 91 24 24 	lds	r26, 0x2424
    87f4:	b0 91 25 24 	lds	r27, 0x2425
    87f8:	84 0f       	add	r24, r20
    87fa:	95 1f       	adc	r25, r21
    87fc:	a6 1f       	adc	r26, r22
    87fe:	b7 1f       	adc	r27, r23
    8800:	80 93 22 24 	sts	0x2422, r24
    8804:	90 93 23 24 	sts	0x2423, r25
    8808:	a0 93 24 24 	sts	0x2424, r26
    880c:	b0 93 25 24 	sts	0x2425, r27
	g_partialCount++;
    8810:	80 91 20 24 	lds	r24, 0x2420
    8814:	90 91 21 24 	lds	r25, 0x2421
    8818:	01 96       	adiw	r24, 0x01	; 1
    881a:	80 93 20 24 	sts	0x2420, r24
    881e:	90 93 21 24 	sts	0x2421, r25
	recordingData = false;
    8822:	10 92 1f 24 	sts	0x241F, r1
	//sprintf_P(szBUF,PSTR("Sample: %u\tPartialSumWork: %lu\tPartialSumAux: %lu\r\n"),g_partialCount, g_partialSumWork,g_partialSumAux);
	//debug_string(NORMAL,szBUF,false);
	
	//ps->working = adc_w;
	//ps->aux = adc_a;
}
    8826:	2b 96       	adiw	r28, 0x0b	; 11
    8828:	cd bf       	out	0x3d, r28	; 61
    882a:	de bf       	out	0x3e, r29	; 62
    882c:	df 91       	pop	r29
    882e:	cf 91       	pop	r28
    8830:	1f 91       	pop	r17
    8832:	0f 91       	pop	r16
    8834:	ff 90       	pop	r15
    8836:	ef 90       	pop	r14
    8838:	df 90       	pop	r13
    883a:	cf 90       	pop	r12
    883c:	bf 90       	pop	r11
    883e:	af 90       	pop	r10
    8840:	08 95       	ret

00008842 <AT24CXX_internalWrite>:
	const status_code_t e = AT24CXX_internalRead(&pak);
	
//	g_is_busy = 0;

	return e;
}
    8842:	cf 93       	push	r28
    8844:	df 93       	push	r29
    8846:	40 e0       	ldi	r20, 0x00	; 0
    8848:	bc 01       	movw	r22, r24
    884a:	80 ea       	ldi	r24, 0xA0	; 160
    884c:	94 e0       	ldi	r25, 0x04	; 4
    884e:	0e 94 dc 67 	call	0xcfb8	; 0xcfb8 <twi_master_transfer>
    8852:	ec 01       	movw	r28, r24
    8854:	ca 3f       	cpi	r28, 0xFA	; 250
    8856:	8f ef       	ldi	r24, 0xFF	; 255
    8858:	d8 07       	cpc	r29, r24
    885a:	09 f4       	brne	.+2      	; 0x885e <AT24CXX_internalWrite+0x1c>
    885c:	58 c0       	rjmp	.+176    	; 0x890e <AT24CXX_internalWrite+0xcc>
    885e:	e4 f4       	brge	.+56     	; 0x8898 <AT24CXX_internalWrite+0x56>
    8860:	c7 3f       	cpi	r28, 0xF7	; 247
    8862:	8f ef       	ldi	r24, 0xFF	; 255
    8864:	d8 07       	cpc	r29, r24
    8866:	09 f4       	brne	.+2      	; 0x886a <AT24CXX_internalWrite+0x28>
    8868:	67 c0       	rjmp	.+206    	; 0x8938 <AT24CXX_internalWrite+0xf6>
    886a:	5c f4       	brge	.+22     	; 0x8882 <AT24CXX_internalWrite+0x40>
    886c:	c5 3f       	cpi	r28, 0xF5	; 245
    886e:	8f ef       	ldi	r24, 0xFF	; 255
    8870:	d8 07       	cpc	r29, r24
    8872:	09 f4       	brne	.+2      	; 0x8876 <AT24CXX_internalWrite+0x34>
    8874:	6f c0       	rjmp	.+222    	; 0x8954 <AT24CXX_internalWrite+0x112>
    8876:	c6 3f       	cpi	r28, 0xF6	; 246
    8878:	8f ef       	ldi	r24, 0xFF	; 255
    887a:	d8 07       	cpc	r29, r24
    887c:	09 f0       	breq	.+2      	; 0x8880 <AT24CXX_internalWrite+0x3e>
    887e:	71 c0       	rjmp	.+226    	; 0x8962 <AT24CXX_internalWrite+0x120>
    8880:	62 c0       	rjmp	.+196    	; 0x8946 <AT24CXX_internalWrite+0x104>
    8882:	c8 3f       	cpi	r28, 0xF8	; 248
    8884:	8f ef       	ldi	r24, 0xFF	; 255
    8886:	d8 07       	cpc	r29, r24
    8888:	09 f4       	brne	.+2      	; 0x888c <AT24CXX_internalWrite+0x4a>
    888a:	4f c0       	rjmp	.+158    	; 0x892a <AT24CXX_internalWrite+0xe8>
    888c:	c9 3f       	cpi	r28, 0xF9	; 249
    888e:	8f ef       	ldi	r24, 0xFF	; 255
    8890:	d8 07       	cpc	r29, r24
    8892:	09 f0       	breq	.+2      	; 0x8896 <AT24CXX_internalWrite+0x54>
    8894:	66 c0       	rjmp	.+204    	; 0x8962 <AT24CXX_internalWrite+0x120>
    8896:	42 c0       	rjmp	.+132    	; 0x891c <AT24CXX_internalWrite+0xda>
    8898:	cd 3f       	cpi	r28, 0xFD	; 253
    889a:	8f ef       	ldi	r24, 0xFF	; 255
    889c:	d8 07       	cpc	r29, r24
    889e:	11 f1       	breq	.+68     	; 0x88e4 <AT24CXX_internalWrite+0xa2>
    88a0:	54 f4       	brge	.+20     	; 0x88b6 <AT24CXX_internalWrite+0x74>
    88a2:	cb 3f       	cpi	r28, 0xFB	; 251
    88a4:	8f ef       	ldi	r24, 0xFF	; 255
    88a6:	d8 07       	cpc	r29, r24
    88a8:	59 f1       	breq	.+86     	; 0x8900 <AT24CXX_internalWrite+0xbe>
    88aa:	cc 3f       	cpi	r28, 0xFC	; 252
    88ac:	8f ef       	ldi	r24, 0xFF	; 255
    88ae:	d8 07       	cpc	r29, r24
    88b0:	09 f0       	breq	.+2      	; 0x88b4 <AT24CXX_internalWrite+0x72>
    88b2:	57 c0       	rjmp	.+174    	; 0x8962 <AT24CXX_internalWrite+0x120>
    88b4:	1e c0       	rjmp	.+60     	; 0x88f2 <AT24CXX_internalWrite+0xb0>
    88b6:	cf 3f       	cpi	r28, 0xFF	; 255
    88b8:	8f ef       	ldi	r24, 0xFF	; 255
    88ba:	d8 07       	cpc	r29, r24
    88bc:	29 f0       	breq	.+10     	; 0x88c8 <AT24CXX_internalWrite+0x86>
    88be:	5c f0       	brlt	.+22     	; 0x88d6 <AT24CXX_internalWrite+0x94>
    88c0:	20 97       	sbiw	r28, 0x00	; 0
    88c2:	09 f4       	brne	.+2      	; 0x88c6 <AT24CXX_internalWrite+0x84>
    88c4:	54 c0       	rjmp	.+168    	; 0x896e <AT24CXX_internalWrite+0x12c>
    88c6:	4d c0       	rjmp	.+154    	; 0x8962 <AT24CXX_internalWrite+0x120>
    88c8:	41 e0       	ldi	r20, 0x01	; 1
    88ca:	64 e1       	ldi	r22, 0x14	; 20
    88cc:	7b e0       	ldi	r23, 0x0B	; 11
    88ce:	81 e0       	ldi	r24, 0x01	; 1
    88d0:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    88d4:	4c c0       	rjmp	.+152    	; 0x896e <AT24CXX_internalWrite+0x12c>
    88d6:	41 e0       	ldi	r20, 0x01	; 1
    88d8:	61 e3       	ldi	r22, 0x31	; 49
    88da:	7b e0       	ldi	r23, 0x0B	; 11
    88dc:	81 e0       	ldi	r24, 0x01	; 1
    88de:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    88e2:	45 c0       	rjmp	.+138    	; 0x896e <AT24CXX_internalWrite+0x12c>
    88e4:	41 e0       	ldi	r20, 0x01	; 1
    88e6:	6d e4       	ldi	r22, 0x4D	; 77
    88e8:	7b e0       	ldi	r23, 0x0B	; 11
    88ea:	81 e0       	ldi	r24, 0x01	; 1
    88ec:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    88f0:	3e c0       	rjmp	.+124    	; 0x896e <AT24CXX_internalWrite+0x12c>
    88f2:	41 e0       	ldi	r20, 0x01	; 1
    88f4:	69 e6       	ldi	r22, 0x69	; 105
    88f6:	7b e0       	ldi	r23, 0x0B	; 11
    88f8:	81 e0       	ldi	r24, 0x01	; 1
    88fa:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    88fe:	37 c0       	rjmp	.+110    	; 0x896e <AT24CXX_internalWrite+0x12c>
    8900:	41 e0       	ldi	r20, 0x01	; 1
    8902:	66 e8       	ldi	r22, 0x86	; 134
    8904:	7b e0       	ldi	r23, 0x0B	; 11
    8906:	81 e0       	ldi	r24, 0x01	; 1
    8908:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    890c:	30 c0       	rjmp	.+96     	; 0x896e <AT24CXX_internalWrite+0x12c>
    890e:	41 e0       	ldi	r20, 0x01	; 1
    8910:	63 ea       	ldi	r22, 0xA3	; 163
    8912:	7b e0       	ldi	r23, 0x0B	; 11
    8914:	81 e0       	ldi	r24, 0x01	; 1
    8916:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    891a:	29 c0       	rjmp	.+82     	; 0x896e <AT24CXX_internalWrite+0x12c>
    891c:	41 e0       	ldi	r20, 0x01	; 1
    891e:	67 ec       	ldi	r22, 0xC7	; 199
    8920:	7b e0       	ldi	r23, 0x0B	; 11
    8922:	81 e0       	ldi	r24, 0x01	; 1
    8924:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    8928:	22 c0       	rjmp	.+68     	; 0x896e <AT24CXX_internalWrite+0x12c>
    892a:	41 e0       	ldi	r20, 0x01	; 1
    892c:	65 ee       	ldi	r22, 0xE5	; 229
    892e:	7b e0       	ldi	r23, 0x0B	; 11
    8930:	81 e0       	ldi	r24, 0x01	; 1
    8932:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    8936:	1b c0       	rjmp	.+54     	; 0x896e <AT24CXX_internalWrite+0x12c>
    8938:	41 e0       	ldi	r20, 0x01	; 1
    893a:	65 e0       	ldi	r22, 0x05	; 5
    893c:	7c e0       	ldi	r23, 0x0C	; 12
    893e:	81 e0       	ldi	r24, 0x01	; 1
    8940:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    8944:	14 c0       	rjmp	.+40     	; 0x896e <AT24CXX_internalWrite+0x12c>
    8946:	41 e0       	ldi	r20, 0x01	; 1
    8948:	65 e2       	ldi	r22, 0x25	; 37
    894a:	7c e0       	ldi	r23, 0x0C	; 12
    894c:	81 e0       	ldi	r24, 0x01	; 1
    894e:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    8952:	0d c0       	rjmp	.+26     	; 0x896e <AT24CXX_internalWrite+0x12c>
    8954:	41 e0       	ldi	r20, 0x01	; 1
    8956:	6e e3       	ldi	r22, 0x3E	; 62
    8958:	7c e0       	ldi	r23, 0x0C	; 12
    895a:	81 e0       	ldi	r24, 0x01	; 1
    895c:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    8960:	06 c0       	rjmp	.+12     	; 0x896e <AT24CXX_internalWrite+0x12c>
    8962:	41 e0       	ldi	r20, 0x01	; 1
    8964:	6d e5       	ldi	r22, 0x5D	; 93
    8966:	7c e0       	ldi	r23, 0x0C	; 12
    8968:	81 e0       	ldi	r24, 0x01	; 1
    896a:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    896e:	ce 01       	movw	r24, r28
    8970:	df 91       	pop	r29
    8972:	cf 91       	pop	r28
    8974:	08 95       	ret

00008976 <AT24CXX_internalRead>:
    8976:	cf 93       	push	r28
    8978:	df 93       	push	r29
    897a:	41 e0       	ldi	r20, 0x01	; 1
    897c:	bc 01       	movw	r22, r24
    897e:	80 ea       	ldi	r24, 0xA0	; 160
    8980:	94 e0       	ldi	r25, 0x04	; 4
    8982:	0e 94 dc 67 	call	0xcfb8	; 0xcfb8 <twi_master_transfer>
    8986:	ec 01       	movw	r28, r24
    8988:	ca 3f       	cpi	r28, 0xFA	; 250
    898a:	8f ef       	ldi	r24, 0xFF	; 255
    898c:	d8 07       	cpc	r29, r24
    898e:	09 f4       	brne	.+2      	; 0x8992 <AT24CXX_internalRead+0x1c>
    8990:	58 c0       	rjmp	.+176    	; 0x8a42 <AT24CXX_internalRead+0xcc>
    8992:	e4 f4       	brge	.+56     	; 0x89cc <AT24CXX_internalRead+0x56>
    8994:	c7 3f       	cpi	r28, 0xF7	; 247
    8996:	8f ef       	ldi	r24, 0xFF	; 255
    8998:	d8 07       	cpc	r29, r24
    899a:	09 f4       	brne	.+2      	; 0x899e <AT24CXX_internalRead+0x28>
    899c:	67 c0       	rjmp	.+206    	; 0x8a6c <AT24CXX_internalRead+0xf6>
    899e:	5c f4       	brge	.+22     	; 0x89b6 <AT24CXX_internalRead+0x40>
    89a0:	c5 3f       	cpi	r28, 0xF5	; 245
    89a2:	8f ef       	ldi	r24, 0xFF	; 255
    89a4:	d8 07       	cpc	r29, r24
    89a6:	09 f4       	brne	.+2      	; 0x89aa <AT24CXX_internalRead+0x34>
    89a8:	6f c0       	rjmp	.+222    	; 0x8a88 <AT24CXX_internalRead+0x112>
    89aa:	c6 3f       	cpi	r28, 0xF6	; 246
    89ac:	8f ef       	ldi	r24, 0xFF	; 255
    89ae:	d8 07       	cpc	r29, r24
    89b0:	09 f0       	breq	.+2      	; 0x89b4 <AT24CXX_internalRead+0x3e>
    89b2:	71 c0       	rjmp	.+226    	; 0x8a96 <AT24CXX_internalRead+0x120>
    89b4:	62 c0       	rjmp	.+196    	; 0x8a7a <AT24CXX_internalRead+0x104>
    89b6:	c8 3f       	cpi	r28, 0xF8	; 248
    89b8:	8f ef       	ldi	r24, 0xFF	; 255
    89ba:	d8 07       	cpc	r29, r24
    89bc:	09 f4       	brne	.+2      	; 0x89c0 <AT24CXX_internalRead+0x4a>
    89be:	4f c0       	rjmp	.+158    	; 0x8a5e <AT24CXX_internalRead+0xe8>
    89c0:	c9 3f       	cpi	r28, 0xF9	; 249
    89c2:	8f ef       	ldi	r24, 0xFF	; 255
    89c4:	d8 07       	cpc	r29, r24
    89c6:	09 f0       	breq	.+2      	; 0x89ca <AT24CXX_internalRead+0x54>
    89c8:	66 c0       	rjmp	.+204    	; 0x8a96 <AT24CXX_internalRead+0x120>
    89ca:	42 c0       	rjmp	.+132    	; 0x8a50 <AT24CXX_internalRead+0xda>
    89cc:	cd 3f       	cpi	r28, 0xFD	; 253
    89ce:	8f ef       	ldi	r24, 0xFF	; 255
    89d0:	d8 07       	cpc	r29, r24
    89d2:	11 f1       	breq	.+68     	; 0x8a18 <AT24CXX_internalRead+0xa2>
    89d4:	54 f4       	brge	.+20     	; 0x89ea <AT24CXX_internalRead+0x74>
    89d6:	cb 3f       	cpi	r28, 0xFB	; 251
    89d8:	8f ef       	ldi	r24, 0xFF	; 255
    89da:	d8 07       	cpc	r29, r24
    89dc:	59 f1       	breq	.+86     	; 0x8a34 <AT24CXX_internalRead+0xbe>
    89de:	cc 3f       	cpi	r28, 0xFC	; 252
    89e0:	8f ef       	ldi	r24, 0xFF	; 255
    89e2:	d8 07       	cpc	r29, r24
    89e4:	09 f0       	breq	.+2      	; 0x89e8 <AT24CXX_internalRead+0x72>
    89e6:	57 c0       	rjmp	.+174    	; 0x8a96 <AT24CXX_internalRead+0x120>
    89e8:	1e c0       	rjmp	.+60     	; 0x8a26 <AT24CXX_internalRead+0xb0>
    89ea:	cf 3f       	cpi	r28, 0xFF	; 255
    89ec:	8f ef       	ldi	r24, 0xFF	; 255
    89ee:	d8 07       	cpc	r29, r24
    89f0:	29 f0       	breq	.+10     	; 0x89fc <AT24CXX_internalRead+0x86>
    89f2:	5c f0       	brlt	.+22     	; 0x8a0a <AT24CXX_internalRead+0x94>
    89f4:	20 97       	sbiw	r28, 0x00	; 0
    89f6:	09 f4       	brne	.+2      	; 0x89fa <AT24CXX_internalRead+0x84>
    89f8:	54 c0       	rjmp	.+168    	; 0x8aa2 <AT24CXX_internalRead+0x12c>
    89fa:	4d c0       	rjmp	.+154    	; 0x8a96 <AT24CXX_internalRead+0x120>
    89fc:	41 e0       	ldi	r20, 0x01	; 1
    89fe:	6b e7       	ldi	r22, 0x7B	; 123
    8a00:	7c e0       	ldi	r23, 0x0C	; 12
    8a02:	81 e0       	ldi	r24, 0x01	; 1
    8a04:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    8a08:	4c c0       	rjmp	.+152    	; 0x8aa2 <AT24CXX_internalRead+0x12c>
    8a0a:	41 e0       	ldi	r20, 0x01	; 1
    8a0c:	67 e9       	ldi	r22, 0x97	; 151
    8a0e:	7c e0       	ldi	r23, 0x0C	; 12
    8a10:	81 e0       	ldi	r24, 0x01	; 1
    8a12:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    8a16:	45 c0       	rjmp	.+138    	; 0x8aa2 <AT24CXX_internalRead+0x12c>
    8a18:	41 e0       	ldi	r20, 0x01	; 1
    8a1a:	63 eb       	ldi	r22, 0xB3	; 179
    8a1c:	7c e0       	ldi	r23, 0x0C	; 12
    8a1e:	81 e0       	ldi	r24, 0x01	; 1
    8a20:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    8a24:	3e c0       	rjmp	.+124    	; 0x8aa2 <AT24CXX_internalRead+0x12c>
    8a26:	41 e0       	ldi	r20, 0x01	; 1
    8a28:	6f ec       	ldi	r22, 0xCF	; 207
    8a2a:	7c e0       	ldi	r23, 0x0C	; 12
    8a2c:	81 e0       	ldi	r24, 0x01	; 1
    8a2e:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    8a32:	37 c0       	rjmp	.+110    	; 0x8aa2 <AT24CXX_internalRead+0x12c>
    8a34:	41 e0       	ldi	r20, 0x01	; 1
    8a36:	6c ee       	ldi	r22, 0xEC	; 236
    8a38:	7c e0       	ldi	r23, 0x0C	; 12
    8a3a:	81 e0       	ldi	r24, 0x01	; 1
    8a3c:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    8a40:	30 c0       	rjmp	.+96     	; 0x8aa2 <AT24CXX_internalRead+0x12c>
    8a42:	41 e0       	ldi	r20, 0x01	; 1
    8a44:	69 e0       	ldi	r22, 0x09	; 9
    8a46:	7d e0       	ldi	r23, 0x0D	; 13
    8a48:	81 e0       	ldi	r24, 0x01	; 1
    8a4a:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    8a4e:	29 c0       	rjmp	.+82     	; 0x8aa2 <AT24CXX_internalRead+0x12c>
    8a50:	41 e0       	ldi	r20, 0x01	; 1
    8a52:	6d e2       	ldi	r22, 0x2D	; 45
    8a54:	7d e0       	ldi	r23, 0x0D	; 13
    8a56:	81 e0       	ldi	r24, 0x01	; 1
    8a58:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    8a5c:	22 c0       	rjmp	.+68     	; 0x8aa2 <AT24CXX_internalRead+0x12c>
    8a5e:	41 e0       	ldi	r20, 0x01	; 1
    8a60:	6b e4       	ldi	r22, 0x4B	; 75
    8a62:	7d e0       	ldi	r23, 0x0D	; 13
    8a64:	81 e0       	ldi	r24, 0x01	; 1
    8a66:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    8a6a:	1b c0       	rjmp	.+54     	; 0x8aa2 <AT24CXX_internalRead+0x12c>
    8a6c:	41 e0       	ldi	r20, 0x01	; 1
    8a6e:	6b e6       	ldi	r22, 0x6B	; 107
    8a70:	7d e0       	ldi	r23, 0x0D	; 13
    8a72:	81 e0       	ldi	r24, 0x01	; 1
    8a74:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    8a78:	14 c0       	rjmp	.+40     	; 0x8aa2 <AT24CXX_internalRead+0x12c>
    8a7a:	41 e0       	ldi	r20, 0x01	; 1
    8a7c:	6b e8       	ldi	r22, 0x8B	; 139
    8a7e:	7d e0       	ldi	r23, 0x0D	; 13
    8a80:	81 e0       	ldi	r24, 0x01	; 1
    8a82:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    8a86:	0d c0       	rjmp	.+26     	; 0x8aa2 <AT24CXX_internalRead+0x12c>
    8a88:	41 e0       	ldi	r20, 0x01	; 1
    8a8a:	64 ea       	ldi	r22, 0xA4	; 164
    8a8c:	7d e0       	ldi	r23, 0x0D	; 13
    8a8e:	81 e0       	ldi	r24, 0x01	; 1
    8a90:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    8a94:	06 c0       	rjmp	.+12     	; 0x8aa2 <AT24CXX_internalRead+0x12c>
    8a96:	41 e0       	ldi	r20, 0x01	; 1
    8a98:	63 ec       	ldi	r22, 0xC3	; 195
    8a9a:	7d e0       	ldi	r23, 0x0D	; 13
    8a9c:	81 e0       	ldi	r24, 0x01	; 1
    8a9e:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    8aa2:	ce 01       	movw	r24, r28
    8aa4:	df 91       	pop	r29
    8aa6:	cf 91       	pop	r28
    8aa8:	08 95       	ret

00008aaa <AT24CXX_Init>:
    8aaa:	0f 93       	push	r16
    8aac:	1f 93       	push	r17
    8aae:	cf 93       	push	r28
    8ab0:	df 93       	push	r29
    8ab2:	cd b7       	in	r28, 0x3d	; 61
    8ab4:	de b7       	in	r29, 0x3e	; 62
    8ab6:	29 97       	sbiw	r28, 0x09	; 9
    8ab8:	cd bf       	out	0x3d, r28	; 61
    8aba:	de bf       	out	0x3e, r29	; 62
    8abc:	8e 01       	movw	r16, r28
    8abe:	0f 5f       	subi	r16, 0xFF	; 255
    8ac0:	1f 4f       	sbci	r17, 0xFF	; 255
    8ac2:	89 e0       	ldi	r24, 0x09	; 9
    8ac4:	f8 01       	movw	r30, r16
    8ac6:	11 92       	st	Z+, r1
    8ac8:	8a 95       	dec	r24
    8aca:	e9 f7       	brne	.-6      	; 0x8ac6 <AT24CXX_Init+0x1c>
    8acc:	80 e9       	ldi	r24, 0x90	; 144
    8ace:	90 ed       	ldi	r25, 0xD0	; 208
    8ad0:	a3 e0       	ldi	r26, 0x03	; 3
    8ad2:	b0 e0       	ldi	r27, 0x00	; 0
    8ad4:	89 83       	std	Y+1, r24	; 0x01
    8ad6:	9a 83       	std	Y+2, r25	; 0x02
    8ad8:	ab 83       	std	Y+3, r26	; 0x03
    8ada:	bc 83       	std	Y+4, r27	; 0x04
    8adc:	89 e9       	ldi	r24, 0x99	; 153
    8ade:	89 87       	std	Y+9, r24	; 0x09
    8ae0:	8b e2       	ldi	r24, 0x2B	; 43
    8ae2:	90 e0       	ldi	r25, 0x00	; 0
    8ae4:	a0 e0       	ldi	r26, 0x00	; 0
    8ae6:	b0 e0       	ldi	r27, 0x00	; 0
    8ae8:	8d 83       	std	Y+5, r24	; 0x05
    8aea:	9e 83       	std	Y+6, r25	; 0x06
    8aec:	af 83       	std	Y+7, r26	; 0x07
    8aee:	b8 87       	std	Y+8, r27	; 0x08
    8af0:	60 e4       	ldi	r22, 0x40	; 64
    8af2:	85 e0       	ldi	r24, 0x05	; 5
    8af4:	90 e0       	ldi	r25, 0x00	; 0
    8af6:	0e 94 06 5b 	call	0xb60c	; 0xb60c <sysclk_enable_module>
    8afa:	b8 01       	movw	r22, r16
    8afc:	80 ea       	ldi	r24, 0xA0	; 160
    8afe:	94 e0       	ldi	r25, 0x04	; 4
    8b00:	0e 94 c4 67 	call	0xcf88	; 0xcf88 <twi_master_init>
    8b04:	29 96       	adiw	r28, 0x09	; 9
    8b06:	cd bf       	out	0x3d, r28	; 61
    8b08:	de bf       	out	0x3e, r29	; 62
    8b0a:	df 91       	pop	r29
    8b0c:	cf 91       	pop	r28
    8b0e:	1f 91       	pop	r17
    8b10:	0f 91       	pop	r16
    8b12:	08 95       	ret

00008b14 <AT24CXX_WriteBlockA>:
    8b14:	0f 93       	push	r16
    8b16:	cf 93       	push	r28
    8b18:	df 93       	push	r29
    8b1a:	cd b7       	in	r28, 0x3d	; 61
    8b1c:	de b7       	in	r29, 0x3e	; 62
    8b1e:	2b 97       	sbiw	r28, 0x0b	; 11
    8b20:	cd bf       	out	0x3d, r28	; 61
    8b22:	de bf       	out	0x3e, r29	; 62
    8b24:	fe 01       	movw	r30, r28
    8b26:	31 96       	adiw	r30, 0x01	; 1
    8b28:	9b e0       	ldi	r25, 0x0B	; 11
    8b2a:	df 01       	movw	r26, r30
    8b2c:	1d 92       	st	X+, r1
    8b2e:	9a 95       	dec	r25
    8b30:	e9 f7       	brne	.-6      	; 0x8b2c <AT24CXX_WriteBlockA+0x18>
    8b32:	80 5b       	subi	r24, 0xB0	; 176
    8b34:	89 83       	std	Y+1, r24	; 0x01
    8b36:	6a 83       	std	Y+2, r22	; 0x02
    8b38:	4b 83       	std	Y+3, r20	; 0x03
    8b3a:	82 e0       	ldi	r24, 0x02	; 2
    8b3c:	90 e0       	ldi	r25, 0x00	; 0
    8b3e:	8d 83       	std	Y+5, r24	; 0x05
    8b40:	9e 83       	std	Y+6, r25	; 0x06
    8b42:	2f 83       	std	Y+7, r18	; 0x07
    8b44:	38 87       	std	Y+8, r19	; 0x08
    8b46:	09 87       	std	Y+9, r16	; 0x09
    8b48:	1a 86       	std	Y+10, r1	; 0x0a
    8b4a:	cf 01       	movw	r24, r30
    8b4c:	7a de       	rcall	.-780    	; 0x8842 <AT24CXX_internalWrite>
    8b4e:	2b 96       	adiw	r28, 0x0b	; 11
    8b50:	cd bf       	out	0x3d, r28	; 61
    8b52:	de bf       	out	0x3e, r29	; 62
    8b54:	df 91       	pop	r29
    8b56:	cf 91       	pop	r28
    8b58:	0f 91       	pop	r16
    8b5a:	08 95       	ret

00008b5c <AT24CXX_ReadBlockA>:
    8b5c:	0f 93       	push	r16
    8b5e:	cf 93       	push	r28
    8b60:	df 93       	push	r29
    8b62:	cd b7       	in	r28, 0x3d	; 61
    8b64:	de b7       	in	r29, 0x3e	; 62
    8b66:	2b 97       	sbiw	r28, 0x0b	; 11
    8b68:	cd bf       	out	0x3d, r28	; 61
    8b6a:	de bf       	out	0x3e, r29	; 62
    8b6c:	fe 01       	movw	r30, r28
    8b6e:	31 96       	adiw	r30, 0x01	; 1
    8b70:	9b e0       	ldi	r25, 0x0B	; 11
    8b72:	df 01       	movw	r26, r30
    8b74:	1d 92       	st	X+, r1
    8b76:	9a 95       	dec	r25
    8b78:	e9 f7       	brne	.-6      	; 0x8b74 <AT24CXX_ReadBlockA+0x18>
    8b7a:	80 5b       	subi	r24, 0xB0	; 176
    8b7c:	89 83       	std	Y+1, r24	; 0x01
    8b7e:	6a 83       	std	Y+2, r22	; 0x02
    8b80:	4b 83       	std	Y+3, r20	; 0x03
    8b82:	82 e0       	ldi	r24, 0x02	; 2
    8b84:	90 e0       	ldi	r25, 0x00	; 0
    8b86:	8d 83       	std	Y+5, r24	; 0x05
    8b88:	9e 83       	std	Y+6, r25	; 0x06
    8b8a:	2f 83       	std	Y+7, r18	; 0x07
    8b8c:	38 87       	std	Y+8, r19	; 0x08
    8b8e:	09 87       	std	Y+9, r16	; 0x09
    8b90:	1a 86       	std	Y+10, r1	; 0x0a
    8b92:	cf 01       	movw	r24, r30
    8b94:	f0 de       	rcall	.-544    	; 0x8976 <AT24CXX_internalRead>
    8b96:	2b 96       	adiw	r28, 0x0b	; 11
    8b98:	cd bf       	out	0x3d, r28	; 61
    8b9a:	de bf       	out	0x3e, r29	; 62
    8b9c:	df 91       	pop	r29
    8b9e:	cf 91       	pop	r28
    8ba0:	0f 91       	pop	r16
    8ba2:	08 95       	ret

00008ba4 <AT24CXX_iterator_report>:

void AT24CXX_iterator_report(const AT24CXX_iterator * const it) 
{
    8ba4:	0f 93       	push	r16
    8ba6:	1f 93       	push	r17
    8ba8:	cf 93       	push	r28
    8baa:	df 93       	push	r29
    8bac:	cd b7       	in	r28, 0x3d	; 61
    8bae:	de b7       	in	r29, 0x3e	; 62
    8bb0:	60 97       	sbiw	r28, 0x10	; 16
    8bb2:	cd bf       	out	0x3d, r28	; 61
    8bb4:	de bf       	out	0x3e, r29	; 62
    8bb6:	8c 01       	movw	r16, r24
	char numbuf[16];
	
	debug_string(NORMAL,PSTR("@ "),PGM_STRING);
    8bb8:	41 e0       	ldi	r20, 0x01	; 1
    8bba:	61 ee       	ldi	r22, 0xE1	; 225
    8bbc:	7d e0       	ldi	r23, 0x0D	; 13
    8bbe:	81 e0       	ldi	r24, 0x01	; 1
    8bc0:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
	itoa(it->byte[PAGE_BYTE],numbuf,10);
    8bc4:	4a e0       	ldi	r20, 0x0A	; 10
    8bc6:	50 e0       	ldi	r21, 0x00	; 0
    8bc8:	be 01       	movw	r22, r28
    8bca:	6f 5f       	subi	r22, 0xFF	; 255
    8bcc:	7f 4f       	sbci	r23, 0xFF	; 255
    8bce:	f8 01       	movw	r30, r16
    8bd0:	82 81       	ldd	r24, Z+2	; 0x02
    8bd2:	90 e0       	ldi	r25, 0x00	; 0
    8bd4:	0e 94 60 74 	call	0xe8c0	; 0xe8c0 <itoa>
	debug_string(NORMAL,numbuf,RAM_STRING);
    8bd8:	40 e0       	ldi	r20, 0x00	; 0
    8bda:	be 01       	movw	r22, r28
    8bdc:	6f 5f       	subi	r22, 0xFF	; 255
    8bde:	7f 4f       	sbci	r23, 0xFF	; 255
    8be0:	81 e0       	ldi	r24, 0x01	; 1
    8be2:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
	debug_string(NORMAL,PSTR(" : "),PGM_STRING);
    8be6:	41 e0       	ldi	r20, 0x01	; 1
    8be8:	64 ee       	ldi	r22, 0xE4	; 228
    8bea:	7d e0       	ldi	r23, 0x0D	; 13
    8bec:	81 e0       	ldi	r24, 0x01	; 1
    8bee:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
	itoa(it->byte[MSB_BYTE],numbuf,10);
    8bf2:	4a e0       	ldi	r20, 0x0A	; 10
    8bf4:	50 e0       	ldi	r21, 0x00	; 0
    8bf6:	be 01       	movw	r22, r28
    8bf8:	6f 5f       	subi	r22, 0xFF	; 255
    8bfa:	7f 4f       	sbci	r23, 0xFF	; 255
    8bfc:	f8 01       	movw	r30, r16
    8bfe:	81 81       	ldd	r24, Z+1	; 0x01
    8c00:	90 e0       	ldi	r25, 0x00	; 0
    8c02:	0e 94 60 74 	call	0xe8c0	; 0xe8c0 <itoa>
	debug_string(NORMAL,numbuf,RAM_STRING);
    8c06:	40 e0       	ldi	r20, 0x00	; 0
    8c08:	be 01       	movw	r22, r28
    8c0a:	6f 5f       	subi	r22, 0xFF	; 255
    8c0c:	7f 4f       	sbci	r23, 0xFF	; 255
    8c0e:	81 e0       	ldi	r24, 0x01	; 1
    8c10:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
	debug_string(NORMAL,PSTR(" : "),PGM_STRING);
    8c14:	41 e0       	ldi	r20, 0x01	; 1
    8c16:	68 ee       	ldi	r22, 0xE8	; 232
    8c18:	7d e0       	ldi	r23, 0x0D	; 13
    8c1a:	81 e0       	ldi	r24, 0x01	; 1
    8c1c:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
	itoa(it->byte[LSB_BYTE],numbuf,10);
    8c20:	4a e0       	ldi	r20, 0x0A	; 10
    8c22:	50 e0       	ldi	r21, 0x00	; 0
    8c24:	be 01       	movw	r22, r28
    8c26:	6f 5f       	subi	r22, 0xFF	; 255
    8c28:	7f 4f       	sbci	r23, 0xFF	; 255
    8c2a:	f8 01       	movw	r30, r16
    8c2c:	80 81       	ld	r24, Z
    8c2e:	90 e0       	ldi	r25, 0x00	; 0
    8c30:	0e 94 60 74 	call	0xe8c0	; 0xe8c0 <itoa>
	debug_string(NORMAL,numbuf,RAM_STRING);
    8c34:	40 e0       	ldi	r20, 0x00	; 0
    8c36:	be 01       	movw	r22, r28
    8c38:	6f 5f       	subi	r22, 0xFF	; 255
    8c3a:	7f 4f       	sbci	r23, 0xFF	; 255
    8c3c:	81 e0       	ldi	r24, 0x01	; 1
    8c3e:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
	debug_string(NORMAL,PSTR("\r\n"),PGM_STRING);
    8c42:	41 e0       	ldi	r20, 0x01	; 1
    8c44:	6c ee       	ldi	r22, 0xEC	; 236
    8c46:	7d e0       	ldi	r23, 0x0D	; 13
    8c48:	81 e0       	ldi	r24, 0x01	; 1
    8c4a:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
	
}
    8c4e:	60 96       	adiw	r28, 0x10	; 16
    8c50:	cd bf       	out	0x3d, r28	; 61
    8c52:	de bf       	out	0x3e, r29	; 62
    8c54:	df 91       	pop	r29
    8c56:	cf 91       	pop	r28
    8c58:	1f 91       	pop	r17
    8c5a:	0f 91       	pop	r16
    8c5c:	08 95       	ret

00008c5e <__portable_avr_delay_cycles.constprop.3>:
 * @return the converted number of CPU cycles
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
    8c5e:	80 ec       	ldi	r24, 0xC0	; 192
    8c60:	96 ec       	ldi	r25, 0xC6	; 198
    8c62:	ad e2       	ldi	r26, 0x2D	; 45
    8c64:	b0 e0       	ldi	r27, 0x00	; 0
{
	do { barrier(); } while (--n);
    8c66:	01 97       	sbiw	r24, 0x01	; 1
    8c68:	a1 09       	sbc	r26, r1
    8c6a:	b1 09       	sbc	r27, r1
    8c6c:	e1 f7       	brne	.-8      	; 0x8c66 <__portable_avr_delay_cycles.constprop.3+0x8>
}
    8c6e:	08 95       	ret

00008c70 <DS18B20_write_byte>:
	}
	sei();
	return byte;
}

static void DS18B20_write_byte(uint8_t byte){
    8c70:	cf 93       	push	r28
    8c72:	df 93       	push	r29
    8c74:	d8 2f       	mov	r29, r24
	uint8_t i=8;		
	while(i--){
    8c76:	c9 e0       	ldi	r28, 0x09	; 9
    8c78:	1a c0       	rjmp	.+52     	; 0x8cae <DS18B20_write_byte+0x3e>
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    8c7a:	41 e0       	ldi	r20, 0x01	; 1
    8c7c:	50 e0       	ldi	r21, 0x00	; 0
    8c7e:	68 e0       	ldi	r22, 0x08	; 8
    8c80:	80 e0       	ldi	r24, 0x00	; 0
    8c82:	96 e0       	ldi	r25, 0x06	; 6
    8c84:	0e 94 3e 5b 	call	0xb67c	; 0xb67c <ioport_configure_port_pin>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    8c88:	88 e0       	ldi	r24, 0x08	; 8
    8c8a:	80 93 06 06 	sts	0x0606, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    8c8e:	90 e1       	ldi	r25, 0x10	; 16
    8c90:	9a 95       	dec	r25
    8c92:	f1 f7       	brne	.-4      	; 0x8c90 <DS18B20_write_byte+0x20>
	//Pull line low for 1uS
	DS18B20_OUTPUT;
	gpio_set_pin_low(DS18B20_COM_PORT);
	_delay_us(2);
	//Write 1
	if(bit) gpio_set_pin_high(DS18B20_COM_PORT);
    8c94:	d0 fd       	sbrc	r29, 0
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    8c96:	80 93 05 06 	sts	0x0605, r24
    8c9a:	87 e6       	ldi	r24, 0x67	; 103
    8c9c:	91 e0       	ldi	r25, 0x01	; 1
    8c9e:	01 97       	sbiw	r24, 0x01	; 1
    8ca0:	f1 f7       	brne	.-4      	; 0x8c9e <DS18B20_write_byte+0x2e>
    8ca2:	00 c0       	rjmp	.+0      	; 0x8ca4 <DS18B20_write_byte+0x34>
    8ca4:	00 00       	nop
    8ca6:	88 e0       	ldi	r24, 0x08	; 8
    8ca8:	80 93 05 06 	sts	0x0605, r24

static void DS18B20_write_byte(uint8_t byte){
	uint8_t i=8;		
	while(i--){
		DS18B20_write_bit(byte&1);
		byte>>=1;
    8cac:	d6 95       	lsr	r29
    8cae:	c1 50       	subi	r28, 0x01	; 1
	return byte;
}

static void DS18B20_write_byte(uint8_t byte){
	uint8_t i=8;		
	while(i--){
    8cb0:	21 f7       	brne	.-56     	; 0x8c7a <DS18B20_write_byte+0xa>
		DS18B20_write_bit(byte&1);
		byte>>=1;
	}
}
    8cb2:	df 91       	pop	r29
    8cb4:	cf 91       	pop	r28
    8cb6:	08 95       	ret

00008cb8 <DS18B20_reset>:
	for (i = 1 << 7; i > 0; i = i / 2)
	(n & i)? debug_string(NORMAL,PSTR("1"),NORMAL) : debug_string(NORMAL,PSTR("0"),true);
	debug_string(NORMAL,PSTR("\r\n"),true);
}

static bool DS18B20_reset(void){
    8cb8:	cf 93       	push	r28
    8cba:	df 93       	push	r29
    8cbc:	41 e0       	ldi	r20, 0x01	; 1
    8cbe:	50 e0       	ldi	r21, 0x00	; 0
    8cc0:	68 e0       	ldi	r22, 0x08	; 8
    8cc2:	80 e0       	ldi	r24, 0x00	; 0
    8cc4:	96 e0       	ldi	r25, 0x06	; 6
    8cc6:	0e 94 3e 5b 	call	0xb67c	; 0xb67c <ioport_configure_port_pin>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    8cca:	c0 e0       	ldi	r28, 0x00	; 0
    8ccc:	d6 e0       	ldi	r29, 0x06	; 6
    8cce:	88 e0       	ldi	r24, 0x08	; 8
    8cd0:	8e 83       	std	Y+6, r24	; 0x06
    8cd2:	ef e3       	ldi	r30, 0x3F	; 63
    8cd4:	fb e0       	ldi	r31, 0x0B	; 11
    8cd6:	31 97       	sbiw	r30, 0x01	; 1
    8cd8:	f1 f7       	brne	.-4      	; 0x8cd6 <DS18B20_reset+0x1e>
    8cda:	00 c0       	rjmp	.+0      	; 0x8cdc <DS18B20_reset+0x24>
    8cdc:	00 00       	nop
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    8cde:	8d 83       	std	Y+5, r24	; 0x05
    8ce0:	40 e0       	ldi	r20, 0x00	; 0
    8ce2:	50 e0       	ldi	r21, 0x00	; 0
    8ce4:	68 e0       	ldi	r22, 0x08	; 8
    8ce6:	80 e0       	ldi	r24, 0x00	; 0
    8ce8:	96 e0       	ldi	r25, 0x06	; 6
    8cea:	0e 94 3e 5b 	call	0xb67c	; 0xb67c <ioport_configure_port_pin>
    8cee:	87 e6       	ldi	r24, 0x67	; 103
    8cf0:	91 e0       	ldi	r25, 0x01	; 1
    8cf2:	01 97       	sbiw	r24, 0x01	; 1
    8cf4:	f1 f7       	brne	.-4      	; 0x8cf2 <DS18B20_reset+0x3a>
    8cf6:	00 c0       	rjmp	.+0      	; 0x8cf8 <DS18B20_reset+0x40>
    8cf8:	00 00       	nop

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    8cfa:	88 85       	ldd	r24, Y+8	; 0x08
    8cfc:	e7 ed       	ldi	r30, 0xD7	; 215
    8cfe:	f9 e0       	ldi	r31, 0x09	; 9
    8d00:	31 97       	sbiw	r30, 0x01	; 1
    8d02:	f1 f7       	brne	.-4      	; 0x8d00 <DS18B20_reset+0x48>
    8d04:	00 c0       	rjmp	.+0      	; 0x8d06 <DS18B20_reset+0x4e>
    8d06:	00 00       	nop
	gpio_set_pin_high(DS18B20_COM_PORT);
	DS18B20_INPUT;
	_delay_us(60);
	presence = ioport_get_value(DS18B20_COM_PORT);
	_delay_us(420);	//480-60
	return !presence;
    8d08:	83 fb       	bst	r24, 3
    8d0a:	88 27       	eor	r24, r24
    8d0c:	80 f9       	bld	r24, 0
}
    8d0e:	91 e0       	ldi	r25, 0x01	; 1
    8d10:	89 27       	eor	r24, r25
    8d12:	df 91       	pop	r29
    8d14:	cf 91       	pop	r28
    8d16:	08 95       	ret

00008d18 <DS18B20_get_stats>:
		DS18B20_write_bit(byte&1);
		byte>>=1;
	}
}

void DS18B20_get_stats(int16_t * const ps){
    8d18:	cf 92       	push	r12
    8d1a:	df 92       	push	r13
    8d1c:	ef 92       	push	r14
    8d1e:	ff 92       	push	r15
    8d20:	cf 93       	push	r28
    8d22:	df 93       	push	r29
    8d24:	ec 01       	movw	r28, r24
	//*ps = g_stats; 
	while(g_recordigDataT1);
    8d26:	80 91 2e 24 	lds	r24, 0x242E
    8d2a:	81 11       	cpse	r24, r1
    8d2c:	fc cf       	rjmp	.-8      	; 0x8d26 <DS18B20_get_stats+0xe>
	*ps = (float)g_partialSumT1 / (float)g_partialCounterT1;
    8d2e:	60 91 31 24 	lds	r22, 0x2431
    8d32:	70 91 32 24 	lds	r23, 0x2432
    8d36:	80 91 33 24 	lds	r24, 0x2433
    8d3a:	90 91 34 24 	lds	r25, 0x2434
    8d3e:	0e 94 79 15 	call	0x2af2	; 0x2af2 <__floatsisf>
    8d42:	6b 01       	movw	r12, r22
    8d44:	7c 01       	movw	r14, r24
    8d46:	60 91 2f 24 	lds	r22, 0x242F
    8d4a:	70 91 30 24 	lds	r23, 0x2430
    8d4e:	80 e0       	ldi	r24, 0x00	; 0
    8d50:	90 e0       	ldi	r25, 0x00	; 0
    8d52:	0e 94 22 16 	call	0x2c44	; 0x2c44 <__floatunsisf>
    8d56:	9b 01       	movw	r18, r22
    8d58:	ac 01       	movw	r20, r24
    8d5a:	c7 01       	movw	r24, r14
    8d5c:	b6 01       	movw	r22, r12
    8d5e:	0e 94 81 14 	call	0x2902	; 0x2902 <__divsf3>
    8d62:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <__fixsfsi>
    8d66:	68 83       	st	Y, r22
    8d68:	79 83       	std	Y+1, r23	; 0x01
	g_partialSumT1 = 0;
    8d6a:	10 92 31 24 	sts	0x2431, r1
    8d6e:	10 92 32 24 	sts	0x2432, r1
    8d72:	10 92 33 24 	sts	0x2433, r1
    8d76:	10 92 34 24 	sts	0x2434, r1
	g_partialCounterT1 = 0;
    8d7a:	10 92 2f 24 	sts	0x242F, r1
    8d7e:	10 92 30 24 	sts	0x2430, r1
}
    8d82:	df 91       	pop	r29
    8d84:	cf 91       	pop	r28
    8d86:	ff 90       	pop	r15
    8d88:	ef 90       	pop	r14
    8d8a:	df 90       	pop	r13
    8d8c:	cf 90       	pop	r12
    8d8e:	08 95       	ret

00008d90 <DS18B20_getValue>:


void DS18B20_getValue( void )
{
    8d90:	8f 92       	push	r8
    8d92:	9f 92       	push	r9
    8d94:	af 92       	push	r10
    8d96:	bf 92       	push	r11
    8d98:	cf 92       	push	r12
    8d9a:	df 92       	push	r13
    8d9c:	ef 92       	push	r14
    8d9e:	ff 92       	push	r15
    8da0:	0f 93       	push	r16
    8da2:	1f 93       	push	r17
    8da4:	cf 93       	push	r28
    8da6:	df 93       	push	r29
    8da8:	cd b7       	in	r28, 0x3d	; 61
    8daa:	de b7       	in	r29, 0x3e	; 62
    8dac:	29 97       	sbiw	r28, 0x09	; 9
    8dae:	cd bf       	out	0x3d, r28	; 61
    8db0:	de bf       	out	0x3e, r29	; 62
    8db2:	41 e0       	ldi	r20, 0x01	; 1
    8db4:	50 e0       	ldi	r21, 0x00	; 0
    8db6:	68 e0       	ldi	r22, 0x08	; 8
    8db8:	80 e0       	ldi	r24, 0x00	; 0
    8dba:	96 e0       	ldi	r25, 0x06	; 6
    8dbc:	0e 94 3e 5b 	call	0xb67c	; 0xb67c <ioport_configure_port_pin>
	int16_t result;
	DS18B20_OUTPUT;
	PORTA.PIN3CTRL = PORT_OPC_TOTEM_gc;
    8dc0:	10 92 13 06 	sts	0x0613, r1
	//char szBuf[32];
	//sprintf(szBuf,"meas %d\r\n",c++);
	//debug_string(NORMAL,szBuf,false);
	
	//Since we have only one 1-wire device we can skip ROM reading and start temperature conversion
	DS18B20_reset();
    8dc4:	79 df       	rcall	.-270    	; 0x8cb8 <DS18B20_reset>
	//if(prova)
		//debug_string(NORMAL,PSTR("Sensor present\r\n"),true);
	//else
		//debug_string(NORMAL,PSTR("Missing sensor\r\n"),true);
	DS18B20_write_byte(DS18B20_CMD_SKIP_ROM);
    8dc6:	8c ec       	ldi	r24, 0xCC	; 204
    8dc8:	53 df       	rcall	.-346    	; 0x8c70 <DS18B20_write_byte>
	DS18B20_write_byte(DS18B20_CONVERT_T);
    8dca:	84 e4       	ldi	r24, 0x44	; 68
    8dcc:	51 df       	rcall	.-350    	; 0x8c70 <DS18B20_write_byte>
	//while(gpio_pin_is_low(DS18B20_COM_PORT));	//wait until convrsion is done
	delay_ms(750);
    8dce:	47 df       	rcall	.-370    	; 0x8c5e <__portable_avr_delay_cycles.constprop.3>
	//debug_string(NORMAL,PSTR("Conversion finisehd\r\n"),true);
	DS18B20_reset();
    8dd0:	73 df       	rcall	.-282    	; 0x8cb8 <DS18B20_reset>
	DS18B20_write_byte(DS18B20_CMD_SKIP_ROM);
    8dd2:	8c ec       	ldi	r24, 0xCC	; 204
    8dd4:	4d df       	rcall	.-358    	; 0x8c70 <DS18B20_write_byte>
	DS18B20_write_byte(DS18B20_READ_SCRATCHPAD);
    8dd6:	8e eb       	ldi	r24, 0xBE	; 190
    8dd8:	4b df       	rcall	.-362    	; 0x8c70 <DS18B20_write_byte>
    8dda:	8e 01       	movw	r16, r28
    8ddc:	0f 5f       	subi	r16, 0xFF	; 255
    8dde:	1f 4f       	sbci	r17, 0xFF	; 255
	g_partialSumT1 = 0;
	g_partialCounterT1 = 0;
}


void DS18B20_getValue( void )
    8de0:	5e 01       	movw	r10, r28
    8de2:	2a e0       	ldi	r18, 0x0A	; 10
    8de4:	a2 0e       	add	r10, r18
    8de6:	b1 1c       	adc	r11, r1
    8de8:	68 01       	movw	r12, r16
	return bit;
}


static uint8_t DS18B20_read_byte(void){
	cli();
    8dea:	f8 94       	cli
    8dec:	99 e0       	ldi	r25, 0x09	; 9
    8dee:	89 2e       	mov	r8, r25
	uint8_t i=8, byte=0;
    8df0:	91 2c       	mov	r9, r1
    8df2:	2a c0       	rjmp	.+84     	; 0x8e48 <DS18B20_getValue+0xb8>
    8df4:	41 e0       	ldi	r20, 0x01	; 1
    8df6:	50 e0       	ldi	r21, 0x00	; 0
    8df8:	68 e0       	ldi	r22, 0x08	; 8
    8dfa:	80 e0       	ldi	r24, 0x00	; 0
    8dfc:	96 e0       	ldi	r25, 0x06	; 6
    8dfe:	0e 94 3e 5b 	call	0xb67c	; 0xb67c <ioport_configure_port_pin>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    8e02:	88 e0       	ldi	r24, 0x08	; 8
    8e04:	80 93 06 06 	sts	0x0606, r24
    8e08:	88 e1       	ldi	r24, 0x18	; 24
    8e0a:	8a 95       	dec	r24
    8e0c:	f1 f7       	brne	.-4      	; 0x8e0a <DS18B20_getValue+0x7a>
    8e0e:	40 e0       	ldi	r20, 0x00	; 0
    8e10:	50 e0       	ldi	r21, 0x00	; 0
    8e12:	68 e0       	ldi	r22, 0x08	; 8
    8e14:	80 e0       	ldi	r24, 0x00	; 0
    8e16:	96 e0       	ldi	r25, 0x06	; 6
    8e18:	0e 94 3e 5b 	call	0xb67c	; 0xb67c <ioport_configure_port_pin>
    8e1c:	e8 e4       	ldi	r30, 0x48	; 72
    8e1e:	ea 95       	dec	r30
    8e20:	f1 f7       	brne	.-4      	; 0x8e1e <DS18B20_getValue+0x8e>

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    8e22:	80 91 08 06 	lds	r24, 0x0608
    8e26:	ed e0       	ldi	r30, 0x0D	; 13
    8e28:	f1 e0       	ldi	r31, 0x01	; 1
    8e2a:	31 97       	sbiw	r30, 0x01	; 1
    8e2c:	f1 f7       	brne	.-4      	; 0x8e2a <DS18B20_getValue+0x9a>
    8e2e:	00 c0       	rjmp	.+0      	; 0x8e30 <DS18B20_getValue+0xa0>
    8e30:	00 00       	nop
	while(i--){
		byte>>=1;
    8e32:	96 94       	lsr	r9
    8e34:	83 fb       	bst	r24, 3
    8e36:	ee 24       	eor	r14, r14
    8e38:	e0 f8       	bld	r14, 0
    8e3a:	f1 2c       	mov	r15, r1
		byte|=(DS18B20_read_bit()<<7);
    8e3c:	f6 94       	lsr	r15
    8e3e:	fe 2c       	mov	r15, r14
    8e40:	ee 24       	eor	r14, r14
    8e42:	f7 94       	ror	r15
    8e44:	e7 94       	ror	r14
    8e46:	9e 28       	or	r9, r14
    8e48:	8a 94       	dec	r8


static uint8_t DS18B20_read_byte(void){
	cli();
	uint8_t i=8, byte=0;
	while(i--){
    8e4a:	a1 f6       	brne	.-88     	; 0x8df4 <DS18B20_getValue+0x64>
		byte>>=1;
		byte|=(DS18B20_read_bit()<<7);
		
	}
	sei();
    8e4c:	78 94       	sei
	DS18B20_write_byte(DS18B20_READ_SCRATCHPAD);
	
	
	
	for (int i = 0 ; i < 9 ; i++)
		scretchpad[i] = DS18B20_read_byte();
    8e4e:	f6 01       	movw	r30, r12
    8e50:	91 92       	st	Z+, r9
    8e52:	6f 01       	movw	r12, r30
	DS18B20_write_byte(DS18B20_CMD_SKIP_ROM);
	DS18B20_write_byte(DS18B20_READ_SCRATCHPAD);
	
	
	
	for (int i = 0 ; i < 9 ; i++)
    8e54:	ea 15       	cp	r30, r10
    8e56:	fb 05       	cpc	r31, r11
    8e58:	41 f6       	brne	.-112    	; 0x8dea <DS18B20_getValue+0x5a>
		scretchpad[i] = DS18B20_read_byte();
	DS18B20_reset();
    8e5a:	2e df       	rcall	.-420    	; 0x8cb8 <DS18B20_reset>
	PORTA.PIN3CTRL = PORT_OPC_PULLUP_gc;
    8e5c:	88 e1       	ldi	r24, 0x18	; 24
    8e5e:	80 93 13 06 	sts	0x0613, r24
	g_partialSumT1 = 0;
	g_partialCounterT1 = 0;
}


void DS18B20_getValue( void )
    8e62:	c8 01       	movw	r24, r16
    8e64:	08 96       	adiw	r24, 0x08	; 8
	
	for (int i = 0 ; i < 9 ; i++)
		scretchpad[i] = DS18B20_read_byte();
	DS18B20_reset();
	PORTA.PIN3CTRL = PORT_OPC_PULLUP_gc;
	uint8_t crcByte = 0x00;
    8e66:	20 e0       	ldi	r18, 0x00	; 0
	//debug_string(NORMAL,PSTR("\r\ncrc = "),true);
	//bin(crcByte);
	//debug_string(NORMAL,PSTR("\r\n"),true);
	
	for (int i = 0 ; i < 8 ; i++)
		crcByte = _crc_ibutton_update(crcByte, scretchpad[i]);
    8e68:	f8 01       	movw	r30, r16
    8e6a:	31 91       	ld	r19, Z+
    8e6c:	8f 01       	movw	r16, r30

static __inline__ uint8_t
_crc_ibutton_update(uint8_t __crc, uint8_t __data)
{
	uint8_t __i, __pattern;
	__asm__ __volatile__ (
    8e6e:	23 27       	eor	r18, r19
    8e70:	38 e0       	ldi	r19, 0x08	; 8
    8e72:	4c e8       	ldi	r20, 0x8C	; 140
    8e74:	26 95       	lsr	r18
    8e76:	08 f4       	brcc	.+2      	; 0x8e7a <DS18B20_getValue+0xea>
    8e78:	24 27       	eor	r18, r20
    8e7a:	3a 95       	dec	r19
    8e7c:	d9 f7       	brne	.-10     	; 0x8e74 <DS18B20_getValue+0xe4>
	//}
	//debug_string(NORMAL,PSTR("\r\ncrc = "),true);
	//bin(crcByte);
	//debug_string(NORMAL,PSTR("\r\n"),true);
	
	for (int i = 0 ; i < 8 ; i++)
    8e7e:	e8 17       	cp	r30, r24
    8e80:	f9 07       	cpc	r31, r25
    8e82:	91 f7       	brne	.-28     	; 0x8e68 <DS18B20_getValue+0xd8>
		crcByte = _crc_ibutton_update(crcByte, scretchpad[i]);
		
	if (crcByte == scretchpad[8]){
    8e84:	89 85       	ldd	r24, Y+9	; 0x09
    8e86:	28 13       	cpse	r18, r24
    8e88:	57 c0       	rjmp	.+174    	; 0x8f38 <DS18B20_getValue+0x1a8>
		if (scretchpad[1]&0x80)
    8e8a:	6a 81       	ldd	r22, Y+2	; 0x02
			negative = true;
	
		dec = scretchpad[0] >> 4;
    8e8c:	89 81       	ldd	r24, Y+1	; 0x01
    8e8e:	98 2f       	mov	r25, r24
    8e90:	92 95       	swap	r25
    8e92:	9f 70       	andi	r25, 0x0F	; 15
		dec |= (scretchpad[1]&0x7) << 4;
    8e94:	46 2f       	mov	r20, r22
    8e96:	47 70       	andi	r20, 0x07	; 7
    8e98:	f0 e1       	ldi	r31, 0x10	; 16
    8e9a:	4f 9f       	mul	r20, r31
    8e9c:	a0 01       	movw	r20, r0
    8e9e:	11 24       	eor	r1, r1
    8ea0:	49 2b       	or	r20, r25
	
		dig = scretchpad[0]&0xf;
    8ea2:	78 2f       	mov	r23, r24
    8ea4:	7f 70       	andi	r23, 0x0F	; 15
		dig*=THERM_DECIMAL_STEPS_12BIT;
    8ea6:	21 e7       	ldi	r18, 0x71	; 113
    8ea8:	32 e0       	ldi	r19, 0x02	; 2
    8eaa:	72 9f       	mul	r23, r18
    8eac:	c0 01       	movw	r24, r0
    8eae:	73 9f       	mul	r23, r19
    8eb0:	90 0d       	add	r25, r0
    8eb2:	11 24       	eor	r1, r1
		if (!negative)
    8eb4:	67 fd       	sbrc	r22, 7
    8eb6:	0d c0       	rjmp	.+26     	; 0x8ed2 <DS18B20_getValue+0x142>
			result = (int16_t)dec*100 +  (int16_t)dig / 100;
    8eb8:	64 e6       	ldi	r22, 0x64	; 100
    8eba:	64 9f       	mul	r22, r20
    8ebc:	90 01       	movw	r18, r0
    8ebe:	65 9f       	mul	r22, r21
    8ec0:	30 0d       	add	r19, r0
    8ec2:	11 24       	eor	r1, r1
    8ec4:	64 e6       	ldi	r22, 0x64	; 100
    8ec6:	70 e0       	ldi	r23, 0x00	; 0
    8ec8:	0e 94 51 72 	call	0xe4a2	; 0xe4a2 <__divmodhi4>
    8ecc:	26 0f       	add	r18, r22
    8ece:	37 1f       	adc	r19, r23
    8ed0:	0c c0       	rjmp	.+24     	; 0x8eea <DS18B20_getValue+0x15a>
		else
			result =  -1 *  (int16_t)dec*100 +  (int16_t)dig / 100;
    8ed2:	6c e9       	ldi	r22, 0x9C	; 156
    8ed4:	64 03       	mulsu	r22, r20
    8ed6:	90 01       	movw	r18, r0
    8ed8:	65 9f       	mul	r22, r21
    8eda:	30 0d       	add	r19, r0
    8edc:	11 24       	eor	r1, r1
    8ede:	64 e6       	ldi	r22, 0x64	; 100
    8ee0:	70 e0       	ldi	r23, 0x00	; 0
    8ee2:	0e 94 51 72 	call	0xe4a2	; 0xe4a2 <__divmodhi4>
    8ee6:	26 0f       	add	r18, r22
    8ee8:	37 1f       	adc	r19, r23
	else
		{
		result =  -9999;
		return;
		}
	g_recordigDataT1 = true;
    8eea:	81 e0       	ldi	r24, 0x01	; 1
    8eec:	80 93 2e 24 	sts	0x242E, r24
	g_partialSumT1+=result;
    8ef0:	a9 01       	movw	r20, r18
    8ef2:	66 27       	eor	r22, r22
    8ef4:	57 fd       	sbrc	r21, 7
    8ef6:	60 95       	com	r22
    8ef8:	76 2f       	mov	r23, r22
    8efa:	80 91 31 24 	lds	r24, 0x2431
    8efe:	90 91 32 24 	lds	r25, 0x2432
    8f02:	a0 91 33 24 	lds	r26, 0x2433
    8f06:	b0 91 34 24 	lds	r27, 0x2434
    8f0a:	84 0f       	add	r24, r20
    8f0c:	95 1f       	adc	r25, r21
    8f0e:	a6 1f       	adc	r26, r22
    8f10:	b7 1f       	adc	r27, r23
    8f12:	80 93 31 24 	sts	0x2431, r24
    8f16:	90 93 32 24 	sts	0x2432, r25
    8f1a:	a0 93 33 24 	sts	0x2433, r26
    8f1e:	b0 93 34 24 	sts	0x2434, r27
	g_partialCounterT1++;
    8f22:	80 91 2f 24 	lds	r24, 0x242F
    8f26:	90 91 30 24 	lds	r25, 0x2430
    8f2a:	01 96       	adiw	r24, 0x01	; 1
    8f2c:	80 93 2f 24 	sts	0x242F, r24
    8f30:	90 93 30 24 	sts	0x2430, r25
	g_recordigDataT1 = false;
    8f34:	10 92 2e 24 	sts	0x242E, r1
	
	//char szBuf[32];
	//sprintf(szBuf,"1: sample: %u\tT: %d\tpartialSum: %ld\r\n",g_partialCounterT1,result,g_partialSumT1);
	//debug_string(NORMAL,szBuf,false);
	//g_stats =  result;
    8f38:	29 96       	adiw	r28, 0x09	; 9
    8f3a:	cd bf       	out	0x3d, r28	; 61
    8f3c:	de bf       	out	0x3e, r29	; 62
    8f3e:	df 91       	pop	r29
    8f40:	cf 91       	pop	r28
    8f42:	1f 91       	pop	r17
    8f44:	0f 91       	pop	r16
    8f46:	ff 90       	pop	r15
    8f48:	ef 90       	pop	r14
    8f4a:	df 90       	pop	r13
    8f4c:	cf 90       	pop	r12
    8f4e:	bf 90       	pop	r11
    8f50:	af 90       	pop	r10
    8f52:	9f 90       	pop	r9
    8f54:	8f 90       	pop	r8
    8f56:	08 95       	ret

00008f58 <__portable_avr_delay_cycles.constprop.3>:
 * @return the converted number of CPU cycles
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
    8f58:	80 ec       	ldi	r24, 0xC0	; 192
    8f5a:	96 ec       	ldi	r25, 0xC6	; 198
    8f5c:	ad e2       	ldi	r26, 0x2D	; 45
    8f5e:	b0 e0       	ldi	r27, 0x00	; 0
{
	do { barrier(); } while (--n);
    8f60:	01 97       	sbiw	r24, 0x01	; 1
    8f62:	a1 09       	sbc	r26, r1
    8f64:	b1 09       	sbc	r27, r1
    8f66:	e1 f7       	brne	.-8      	; 0x8f60 <__portable_avr_delay_cycles.constprop.3+0x8>
}
    8f68:	08 95       	ret

00008f6a <DS18B20_2_write_byte>:
	}
	sei();
	return byte;
}

static void DS18B20_2_write_byte(uint8_t byte){
    8f6a:	cf 93       	push	r28
    8f6c:	df 93       	push	r29
    8f6e:	d8 2f       	mov	r29, r24
	uint8_t i=8;		
	while(i--){
    8f70:	c9 e0       	ldi	r28, 0x09	; 9
    8f72:	1a c0       	rjmp	.+52     	; 0x8fa8 <DS18B20_2_write_byte+0x3e>
    8f74:	41 e0       	ldi	r20, 0x01	; 1
    8f76:	50 e0       	ldi	r21, 0x00	; 0
    8f78:	60 e2       	ldi	r22, 0x20	; 32
    8f7a:	80 e0       	ldi	r24, 0x00	; 0
    8f7c:	96 e0       	ldi	r25, 0x06	; 6
    8f7e:	0e 94 3e 5b 	call	0xb67c	; 0xb67c <ioport_configure_port_pin>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    8f82:	80 e2       	ldi	r24, 0x20	; 32
    8f84:	80 93 06 06 	sts	0x0606, r24
    8f88:	90 e1       	ldi	r25, 0x10	; 16
    8f8a:	9a 95       	dec	r25
    8f8c:	f1 f7       	brne	.-4      	; 0x8f8a <DS18B20_2_write_byte+0x20>
	//Pull line low for 1uS
	DS18B20_2_OUTPUT;
	gpio_set_pin_low(DS18B20_2_COM_PORT);
	_delay_us(2);
	//Write 1
	if(bit) gpio_set_pin_high(DS18B20_2_COM_PORT);
    8f8e:	d0 fd       	sbrc	r29, 0
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    8f90:	80 93 05 06 	sts	0x0605, r24
    8f94:	87 e6       	ldi	r24, 0x67	; 103
    8f96:	91 e0       	ldi	r25, 0x01	; 1
    8f98:	01 97       	sbiw	r24, 0x01	; 1
    8f9a:	f1 f7       	brne	.-4      	; 0x8f98 <DS18B20_2_write_byte+0x2e>
    8f9c:	00 c0       	rjmp	.+0      	; 0x8f9e <DS18B20_2_write_byte+0x34>
    8f9e:	00 00       	nop
    8fa0:	80 e2       	ldi	r24, 0x20	; 32
    8fa2:	80 93 05 06 	sts	0x0605, r24

static void DS18B20_2_write_byte(uint8_t byte){
	uint8_t i=8;		
	while(i--){
		DS18B20_2_write_bit(byte&1);
		byte>>=1;
    8fa6:	d6 95       	lsr	r29
    8fa8:	c1 50       	subi	r28, 0x01	; 1
	return byte;
}

static void DS18B20_2_write_byte(uint8_t byte){
	uint8_t i=8;		
	while(i--){
    8faa:	21 f7       	brne	.-56     	; 0x8f74 <DS18B20_2_write_byte+0xa>
		DS18B20_2_write_bit(byte&1);
		byte>>=1;
	}
}
    8fac:	df 91       	pop	r29
    8fae:	cf 91       	pop	r28
    8fb0:	08 95       	ret

00008fb2 <DS18B20_2_reset>:
	for (i = 1 << 7; i > 0; i = i / 2)
	(n & i)? debug_string(NORMAL,PSTR("1"),NORMAL) : debug_string(NORMAL,PSTR("0"),true);
	debug_string(NORMAL,PSTR("\r\n"),true);
}

static bool DS18B20_2_reset(void){
    8fb2:	cf 93       	push	r28
    8fb4:	df 93       	push	r29
    8fb6:	41 e0       	ldi	r20, 0x01	; 1
    8fb8:	50 e0       	ldi	r21, 0x00	; 0
    8fba:	60 e2       	ldi	r22, 0x20	; 32
    8fbc:	80 e0       	ldi	r24, 0x00	; 0
    8fbe:	96 e0       	ldi	r25, 0x06	; 6
    8fc0:	0e 94 3e 5b 	call	0xb67c	; 0xb67c <ioport_configure_port_pin>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    8fc4:	c0 e0       	ldi	r28, 0x00	; 0
    8fc6:	d6 e0       	ldi	r29, 0x06	; 6
    8fc8:	80 e2       	ldi	r24, 0x20	; 32
    8fca:	8e 83       	std	Y+6, r24	; 0x06
    8fcc:	ef e3       	ldi	r30, 0x3F	; 63
    8fce:	fb e0       	ldi	r31, 0x0B	; 11
    8fd0:	31 97       	sbiw	r30, 0x01	; 1
    8fd2:	f1 f7       	brne	.-4      	; 0x8fd0 <DS18B20_2_reset+0x1e>
    8fd4:	00 c0       	rjmp	.+0      	; 0x8fd6 <DS18B20_2_reset+0x24>
    8fd6:	00 00       	nop
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    8fd8:	8d 83       	std	Y+5, r24	; 0x05
    8fda:	40 e0       	ldi	r20, 0x00	; 0
    8fdc:	50 e0       	ldi	r21, 0x00	; 0
    8fde:	60 e2       	ldi	r22, 0x20	; 32
    8fe0:	80 e0       	ldi	r24, 0x00	; 0
    8fe2:	96 e0       	ldi	r25, 0x06	; 6
    8fe4:	0e 94 3e 5b 	call	0xb67c	; 0xb67c <ioport_configure_port_pin>
    8fe8:	87 e6       	ldi	r24, 0x67	; 103
    8fea:	91 e0       	ldi	r25, 0x01	; 1
    8fec:	01 97       	sbiw	r24, 0x01	; 1
    8fee:	f1 f7       	brne	.-4      	; 0x8fec <DS18B20_2_reset+0x3a>
    8ff0:	00 c0       	rjmp	.+0      	; 0x8ff2 <DS18B20_2_reset+0x40>
    8ff2:	00 00       	nop

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    8ff4:	88 85       	ldd	r24, Y+8	; 0x08
    8ff6:	e7 ed       	ldi	r30, 0xD7	; 215
    8ff8:	f9 e0       	ldi	r31, 0x09	; 9
    8ffa:	31 97       	sbiw	r30, 0x01	; 1
    8ffc:	f1 f7       	brne	.-4      	; 0x8ffa <DS18B20_2_reset+0x48>
    8ffe:	00 c0       	rjmp	.+0      	; 0x9000 <DS18B20_2_reset+0x4e>
    9000:	00 00       	nop
	gpio_set_pin_high(DS18B20_2_COM_PORT);
	DS18B20_2_INPUT;
	_delay_us(60);
	presence = ioport_get_value(DS18B20_2_COM_PORT);
	_delay_us(420);	//480-60
	return !presence;
    9002:	85 fb       	bst	r24, 5
    9004:	88 27       	eor	r24, r24
    9006:	80 f9       	bld	r24, 0
}
    9008:	91 e0       	ldi	r25, 0x01	; 1
    900a:	89 27       	eor	r24, r25
    900c:	df 91       	pop	r29
    900e:	cf 91       	pop	r28
    9010:	08 95       	ret

00009012 <DS18B20_2_get_stats>:
		DS18B20_2_write_bit(byte&1);
		byte>>=1;
	}
}

void DS18B20_2_get_stats(int16_t * const ps){
    9012:	cf 92       	push	r12
    9014:	df 92       	push	r13
    9016:	ef 92       	push	r14
    9018:	ff 92       	push	r15
    901a:	cf 93       	push	r28
    901c:	df 93       	push	r29
    901e:	ec 01       	movw	r28, r24
	//*ps = g_stats;
	while(g_recordigTemp2);
    9020:	80 91 35 24 	lds	r24, 0x2435
    9024:	81 11       	cpse	r24, r1
    9026:	fc cf       	rjmp	.-8      	; 0x9020 <DS18B20_2_get_stats+0xe>
	*ps = (float)g_partialSumT2 / (float)g_partialCounterT2;
    9028:	60 91 38 24 	lds	r22, 0x2438
    902c:	70 91 39 24 	lds	r23, 0x2439
    9030:	80 91 3a 24 	lds	r24, 0x243A
    9034:	90 91 3b 24 	lds	r25, 0x243B
    9038:	0e 94 79 15 	call	0x2af2	; 0x2af2 <__floatsisf>
    903c:	6b 01       	movw	r12, r22
    903e:	7c 01       	movw	r14, r24
    9040:	60 91 36 24 	lds	r22, 0x2436
    9044:	70 91 37 24 	lds	r23, 0x2437
    9048:	80 e0       	ldi	r24, 0x00	; 0
    904a:	90 e0       	ldi	r25, 0x00	; 0
    904c:	0e 94 22 16 	call	0x2c44	; 0x2c44 <__floatunsisf>
    9050:	9b 01       	movw	r18, r22
    9052:	ac 01       	movw	r20, r24
    9054:	c7 01       	movw	r24, r14
    9056:	b6 01       	movw	r22, r12
    9058:	0e 94 81 14 	call	0x2902	; 0x2902 <__divsf3>
    905c:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <__fixsfsi>
    9060:	68 83       	st	Y, r22
    9062:	79 83       	std	Y+1, r23	; 0x01
	g_partialSumT2 = 0;
    9064:	10 92 38 24 	sts	0x2438, r1
    9068:	10 92 39 24 	sts	0x2439, r1
    906c:	10 92 3a 24 	sts	0x243A, r1
    9070:	10 92 3b 24 	sts	0x243B, r1
	g_partialCounterT2 = 0;
    9074:	10 92 36 24 	sts	0x2436, r1
    9078:	10 92 37 24 	sts	0x2437, r1
}
    907c:	df 91       	pop	r29
    907e:	cf 91       	pop	r28
    9080:	ff 90       	pop	r15
    9082:	ef 90       	pop	r14
    9084:	df 90       	pop	r13
    9086:	cf 90       	pop	r12
    9088:	08 95       	ret

0000908a <DS18B20_2_getValue>:

void DS18B20_2_getValue( void )
{
    908a:	8f 92       	push	r8
    908c:	9f 92       	push	r9
    908e:	af 92       	push	r10
    9090:	bf 92       	push	r11
    9092:	cf 92       	push	r12
    9094:	df 92       	push	r13
    9096:	ef 92       	push	r14
    9098:	ff 92       	push	r15
    909a:	0f 93       	push	r16
    909c:	1f 93       	push	r17
    909e:	cf 93       	push	r28
    90a0:	df 93       	push	r29
    90a2:	cd b7       	in	r28, 0x3d	; 61
    90a4:	de b7       	in	r29, 0x3e	; 62
    90a6:	29 97       	sbiw	r28, 0x09	; 9
    90a8:	cd bf       	out	0x3d, r28	; 61
    90aa:	de bf       	out	0x3e, r29	; 62
    90ac:	41 e0       	ldi	r20, 0x01	; 1
    90ae:	50 e0       	ldi	r21, 0x00	; 0
    90b0:	60 e2       	ldi	r22, 0x20	; 32
    90b2:	80 e0       	ldi	r24, 0x00	; 0
    90b4:	96 e0       	ldi	r25, 0x06	; 6
    90b6:	0e 94 3e 5b 	call	0xb67c	; 0xb67c <ioport_configure_port_pin>
	int16_t result;
	DS18B20_2_OUTPUT;
	PORTA.PIN4CTRL = PORT_OPC_TOTEM_gc;
    90ba:	10 92 14 06 	sts	0x0614, r1
	//char szBuf[32];
	//sprintf(szBuf,"meas %d\r\n",c++);
	//debug_string(NORMAL,szBuf,false);
	
	//Since we have only one 1-wire device we can skip ROM reading and start temperature conversion
	DS18B20_2_reset();
    90be:	79 df       	rcall	.-270    	; 0x8fb2 <DS18B20_2_reset>
	//if(prova)
		//debug_string(NORMAL,PSTR("Sensor present\r\n"),true);
	//else
		//debug_string(NORMAL,PSTR("Missing sensor\r\n"),true);
	DS18B20_2_write_byte(DS18B20_CMD_SKIP_ROM);
    90c0:	8c ec       	ldi	r24, 0xCC	; 204
    90c2:	53 df       	rcall	.-346    	; 0x8f6a <DS18B20_2_write_byte>
	DS18B20_2_write_byte(DS18B20_CONVERT_T);
    90c4:	84 e4       	ldi	r24, 0x44	; 68
    90c6:	51 df       	rcall	.-350    	; 0x8f6a <DS18B20_2_write_byte>
	//while(gpio_pin_is_low(DS18B20_2_COM_PORT));	//wait until convrsion is done
	delay_ms(750);
    90c8:	47 df       	rcall	.-370    	; 0x8f58 <__portable_avr_delay_cycles.constprop.3>
	//debug_string(NORMAL,PSTR("Conversion finisehd\r\n"),true);
	DS18B20_2_reset();
    90ca:	73 df       	rcall	.-282    	; 0x8fb2 <DS18B20_2_reset>
	DS18B20_2_write_byte(DS18B20_CMD_SKIP_ROM);
    90cc:	8c ec       	ldi	r24, 0xCC	; 204
    90ce:	4d df       	rcall	.-358    	; 0x8f6a <DS18B20_2_write_byte>
	DS18B20_2_write_byte(DS18B20_READ_SCRATCHPAD);
    90d0:	8e eb       	ldi	r24, 0xBE	; 190
    90d2:	4b df       	rcall	.-362    	; 0x8f6a <DS18B20_2_write_byte>
    90d4:	8e 01       	movw	r16, r28
    90d6:	0f 5f       	subi	r16, 0xFF	; 255
    90d8:	1f 4f       	sbci	r17, 0xFF	; 255
	*ps = (float)g_partialSumT2 / (float)g_partialCounterT2;
	g_partialSumT2 = 0;
	g_partialCounterT2 = 0;
}

void DS18B20_2_getValue( void )
    90da:	5e 01       	movw	r10, r28
    90dc:	2a e0       	ldi	r18, 0x0A	; 10
    90de:	a2 0e       	add	r10, r18
    90e0:	b1 1c       	adc	r11, r1
    90e2:	68 01       	movw	r12, r16
	return bit;
}


static uint8_t DS18B20_2_read_byte(void){
	cli();
    90e4:	f8 94       	cli
    90e6:	99 e0       	ldi	r25, 0x09	; 9
    90e8:	89 2e       	mov	r8, r25
	uint8_t i=8, byte=0;
    90ea:	91 2c       	mov	r9, r1
    90ec:	2a c0       	rjmp	.+84     	; 0x9142 <DS18B20_2_getValue+0xb8>
    90ee:	41 e0       	ldi	r20, 0x01	; 1
    90f0:	50 e0       	ldi	r21, 0x00	; 0
    90f2:	60 e2       	ldi	r22, 0x20	; 32
    90f4:	80 e0       	ldi	r24, 0x00	; 0
    90f6:	96 e0       	ldi	r25, 0x06	; 6
    90f8:	0e 94 3e 5b 	call	0xb67c	; 0xb67c <ioport_configure_port_pin>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    90fc:	80 e2       	ldi	r24, 0x20	; 32
    90fe:	80 93 06 06 	sts	0x0606, r24
    9102:	88 e1       	ldi	r24, 0x18	; 24
    9104:	8a 95       	dec	r24
    9106:	f1 f7       	brne	.-4      	; 0x9104 <DS18B20_2_getValue+0x7a>
    9108:	40 e0       	ldi	r20, 0x00	; 0
    910a:	50 e0       	ldi	r21, 0x00	; 0
    910c:	60 e2       	ldi	r22, 0x20	; 32
    910e:	80 e0       	ldi	r24, 0x00	; 0
    9110:	96 e0       	ldi	r25, 0x06	; 6
    9112:	0e 94 3e 5b 	call	0xb67c	; 0xb67c <ioport_configure_port_pin>
    9116:	e8 e4       	ldi	r30, 0x48	; 72
    9118:	ea 95       	dec	r30
    911a:	f1 f7       	brne	.-4      	; 0x9118 <DS18B20_2_getValue+0x8e>

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    911c:	80 91 08 06 	lds	r24, 0x0608
    9120:	ed e0       	ldi	r30, 0x0D	; 13
    9122:	f1 e0       	ldi	r31, 0x01	; 1
    9124:	31 97       	sbiw	r30, 0x01	; 1
    9126:	f1 f7       	brne	.-4      	; 0x9124 <DS18B20_2_getValue+0x9a>
    9128:	00 c0       	rjmp	.+0      	; 0x912a <DS18B20_2_getValue+0xa0>
    912a:	00 00       	nop
	while(i--){
		byte>>=1;
    912c:	96 94       	lsr	r9
    912e:	85 fb       	bst	r24, 5
    9130:	ee 24       	eor	r14, r14
    9132:	e0 f8       	bld	r14, 0
    9134:	f1 2c       	mov	r15, r1
		byte|=(DS18B20_2_read_bit()<<7);
    9136:	f6 94       	lsr	r15
    9138:	fe 2c       	mov	r15, r14
    913a:	ee 24       	eor	r14, r14
    913c:	f7 94       	ror	r15
    913e:	e7 94       	ror	r14
    9140:	9e 28       	or	r9, r14
    9142:	8a 94       	dec	r8


static uint8_t DS18B20_2_read_byte(void){
	cli();
	uint8_t i=8, byte=0;
	while(i--){
    9144:	a1 f6       	brne	.-88     	; 0x90ee <DS18B20_2_getValue+0x64>
		byte>>=1;
		byte|=(DS18B20_2_read_bit()<<7);
		
	}
	sei();
    9146:	78 94       	sei
	DS18B20_2_write_byte(DS18B20_READ_SCRATCHPAD);
	
	
	
	for (int i = 0 ; i < 9 ; i++)
		scretchpad[i] = DS18B20_2_read_byte();
    9148:	f6 01       	movw	r30, r12
    914a:	91 92       	st	Z+, r9
    914c:	6f 01       	movw	r12, r30
	DS18B20_2_write_byte(DS18B20_CMD_SKIP_ROM);
	DS18B20_2_write_byte(DS18B20_READ_SCRATCHPAD);
	
	
	
	for (int i = 0 ; i < 9 ; i++)
    914e:	ea 15       	cp	r30, r10
    9150:	fb 05       	cpc	r31, r11
    9152:	41 f6       	brne	.-112    	; 0x90e4 <DS18B20_2_getValue+0x5a>
		scretchpad[i] = DS18B20_2_read_byte();
	DS18B20_2_reset();
    9154:	2e df       	rcall	.-420    	; 0x8fb2 <DS18B20_2_reset>
	PORTA.PIN4CTRL = PORT_OPC_PULLUP_gc;
    9156:	88 e1       	ldi	r24, 0x18	; 24
    9158:	80 93 14 06 	sts	0x0614, r24
	*ps = (float)g_partialSumT2 / (float)g_partialCounterT2;
	g_partialSumT2 = 0;
	g_partialCounterT2 = 0;
}

void DS18B20_2_getValue( void )
    915c:	c8 01       	movw	r24, r16
    915e:	08 96       	adiw	r24, 0x08	; 8
	
	for (int i = 0 ; i < 9 ; i++)
		scretchpad[i] = DS18B20_2_read_byte();
	DS18B20_2_reset();
	PORTA.PIN4CTRL = PORT_OPC_PULLUP_gc;
	uint8_t crcByte = 0x00;
    9160:	20 e0       	ldi	r18, 0x00	; 0
	//debug_string(NORMAL,PSTR("\r\ncrc = "),true);
	//bin(crcByte);
	//debug_string(NORMAL,PSTR("\r\n"),true);
	
	for (int i = 0 ; i < 8 ; i++)
		crcByte = _crc_ibutton_update(crcByte, scretchpad[i]);
    9162:	f8 01       	movw	r30, r16
    9164:	31 91       	ld	r19, Z+
    9166:	8f 01       	movw	r16, r30
    9168:	23 27       	eor	r18, r19
    916a:	38 e0       	ldi	r19, 0x08	; 8
    916c:	4c e8       	ldi	r20, 0x8C	; 140
    916e:	26 95       	lsr	r18
    9170:	08 f4       	brcc	.+2      	; 0x9174 <DS18B20_2_getValue+0xea>
    9172:	24 27       	eor	r18, r20
    9174:	3a 95       	dec	r19
    9176:	d9 f7       	brne	.-10     	; 0x916e <DS18B20_2_getValue+0xe4>
	//}
	//debug_string(NORMAL,PSTR("\r\ncrc = "),true);
	//bin(crcByte);
	//debug_string(NORMAL,PSTR("\r\n"),true);
	
	for (int i = 0 ; i < 8 ; i++)
    9178:	e8 17       	cp	r30, r24
    917a:	f9 07       	cpc	r31, r25
    917c:	91 f7       	brne	.-28     	; 0x9162 <DS18B20_2_getValue+0xd8>
		crcByte = _crc_ibutton_update(crcByte, scretchpad[i]);
		
	if (crcByte == scretchpad[8]){
    917e:	89 85       	ldd	r24, Y+9	; 0x09
    9180:	28 13       	cpse	r18, r24
    9182:	57 c0       	rjmp	.+174    	; 0x9232 <DS18B20_2_getValue+0x1a8>
		if (scretchpad[1]&0x80)
    9184:	6a 81       	ldd	r22, Y+2	; 0x02
			negative = true;
	
		dec = scretchpad[0] >> 4;
    9186:	89 81       	ldd	r24, Y+1	; 0x01
    9188:	98 2f       	mov	r25, r24
    918a:	92 95       	swap	r25
    918c:	9f 70       	andi	r25, 0x0F	; 15
		dec |= (scretchpad[1]&0x7) << 4;
    918e:	46 2f       	mov	r20, r22
    9190:	47 70       	andi	r20, 0x07	; 7
    9192:	f0 e1       	ldi	r31, 0x10	; 16
    9194:	4f 9f       	mul	r20, r31
    9196:	a0 01       	movw	r20, r0
    9198:	11 24       	eor	r1, r1
    919a:	49 2b       	or	r20, r25
	
		dig = scretchpad[0]&0xf;
    919c:	78 2f       	mov	r23, r24
    919e:	7f 70       	andi	r23, 0x0F	; 15
		dig*=THERM_DECIMAL_STEPS_12BIT;
    91a0:	21 e7       	ldi	r18, 0x71	; 113
    91a2:	32 e0       	ldi	r19, 0x02	; 2
    91a4:	72 9f       	mul	r23, r18
    91a6:	c0 01       	movw	r24, r0
    91a8:	73 9f       	mul	r23, r19
    91aa:	90 0d       	add	r25, r0
    91ac:	11 24       	eor	r1, r1
		if (!negative)
    91ae:	67 fd       	sbrc	r22, 7
    91b0:	0d c0       	rjmp	.+26     	; 0x91cc <DS18B20_2_getValue+0x142>
		result = (int16_t)dec*100 +  (int16_t)dig / 100;
    91b2:	64 e6       	ldi	r22, 0x64	; 100
    91b4:	64 9f       	mul	r22, r20
    91b6:	90 01       	movw	r18, r0
    91b8:	65 9f       	mul	r22, r21
    91ba:	30 0d       	add	r19, r0
    91bc:	11 24       	eor	r1, r1
    91be:	64 e6       	ldi	r22, 0x64	; 100
    91c0:	70 e0       	ldi	r23, 0x00	; 0
    91c2:	0e 94 51 72 	call	0xe4a2	; 0xe4a2 <__divmodhi4>
    91c6:	26 0f       	add	r18, r22
    91c8:	37 1f       	adc	r19, r23
    91ca:	0c c0       	rjmp	.+24     	; 0x91e4 <DS18B20_2_getValue+0x15a>
		else
		result =  -1 *  (int16_t)dec*100 +  (int16_t)dig / 100;
    91cc:	6c e9       	ldi	r22, 0x9C	; 156
    91ce:	64 03       	mulsu	r22, r20
    91d0:	90 01       	movw	r18, r0
    91d2:	65 9f       	mul	r22, r21
    91d4:	30 0d       	add	r19, r0
    91d6:	11 24       	eor	r1, r1
    91d8:	64 e6       	ldi	r22, 0x64	; 100
    91da:	70 e0       	ldi	r23, 0x00	; 0
    91dc:	0e 94 51 72 	call	0xe4a2	; 0xe4a2 <__divmodhi4>
    91e0:	26 0f       	add	r18, r22
    91e2:	37 1f       	adc	r19, r23
	else
	{
		result =  -9999;
		return;
	}
	g_recordigTemp2 = true;
    91e4:	81 e0       	ldi	r24, 0x01	; 1
    91e6:	80 93 35 24 	sts	0x2435, r24
	g_partialSumT2+=result;
    91ea:	a9 01       	movw	r20, r18
    91ec:	66 27       	eor	r22, r22
    91ee:	57 fd       	sbrc	r21, 7
    91f0:	60 95       	com	r22
    91f2:	76 2f       	mov	r23, r22
    91f4:	80 91 38 24 	lds	r24, 0x2438
    91f8:	90 91 39 24 	lds	r25, 0x2439
    91fc:	a0 91 3a 24 	lds	r26, 0x243A
    9200:	b0 91 3b 24 	lds	r27, 0x243B
    9204:	84 0f       	add	r24, r20
    9206:	95 1f       	adc	r25, r21
    9208:	a6 1f       	adc	r26, r22
    920a:	b7 1f       	adc	r27, r23
    920c:	80 93 38 24 	sts	0x2438, r24
    9210:	90 93 39 24 	sts	0x2439, r25
    9214:	a0 93 3a 24 	sts	0x243A, r26
    9218:	b0 93 3b 24 	sts	0x243B, r27
	g_partialCounterT2++;
    921c:	80 91 36 24 	lds	r24, 0x2436
    9220:	90 91 37 24 	lds	r25, 0x2437
    9224:	01 96       	adiw	r24, 0x01	; 1
    9226:	80 93 36 24 	sts	0x2436, r24
    922a:	90 93 37 24 	sts	0x2437, r25
	g_recordigTemp2 = false;
    922e:	10 92 35 24 	sts	0x2435, r1
	//char szBuf[32];
	//sprintf(szBuf,"2: sample: %u\tT: %d\tpartialSum: %ld\r\n",g_partialCounterT2,result,g_partialSumT2);
	//debug_string(NORMAL,szBuf,false);
	
	//g_stats =  result;
    9232:	29 96       	adiw	r28, 0x09	; 9
    9234:	cd bf       	out	0x3d, r28	; 61
    9236:	de bf       	out	0x3e, r29	; 62
    9238:	df 91       	pop	r29
    923a:	cf 91       	pop	r28
    923c:	1f 91       	pop	r17
    923e:	0f 91       	pop	r16
    9240:	ff 90       	pop	r15
    9242:	ef 90       	pop	r14
    9244:	df 90       	pop	r13
    9246:	cf 90       	pop	r12
    9248:	bf 90       	pop	r11
    924a:	af 90       	pop	r10
    924c:	9f 90       	pop	r9
    924e:	8f 90       	pop	r8
    9250:	08 95       	ret

00009252 <PM10Qbit_init>:
uint16_t g_measureCounter;
uint8_t g_valDistr[MAXPM10VAL] = {0};
char g_szBuf[BUFSIZE],g_PM10string[BUFSIZE];
volatile bool g_recordingData = false;

void PM10Qbit_init(void){
    9252:	cf 93       	push	r28
    9254:	df 93       	push	r29
    9256:	cd b7       	in	r28, 0x3d	; 61
    9258:	de b7       	in	r29, 0x3e	; 62
    925a:	29 97       	sbiw	r28, 0x09	; 9
    925c:	cd bf       	out	0x3d, r28	; 61
    925e:	de bf       	out	0x3e, r29	; 62
		.baudrate = USART_RS232_1_BAUDRATE,
		.charlength = USART_CHAR_LENGTH,
		.paritytype = USART_PARITY,
		.stopbits = USART_STOP_BIT
	};
	sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
    9260:	60 e1       	ldi	r22, 0x10	; 16
    9262:	83 e0       	ldi	r24, 0x03	; 3
    9264:	90 e0       	ldi	r25, 0x00	; 0
    9266:	0e 94 06 5b 	call	0xb60c	; 0xb60c <sysclk_enable_module>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    926a:	80 91 18 20 	lds	r24, 0x2018
    926e:	90 91 19 20 	lds	r25, 0x2019
    9272:	8d 83       	std	Y+5, r24	; 0x05
    9274:	9e 83       	std	Y+6, r25	; 0x06
	usart_rs232_options.paritytype   = options->paritytype;
    9276:	80 91 1a 20 	lds	r24, 0x201A
    927a:	90 91 1b 20 	lds	r25, 0x201B
    927e:	8f 83       	std	Y+7, r24	; 0x07
    9280:	98 87       	std	Y+8, r25	; 0x08
	usart_rs232_options.stopbits     = options->stopbits;
    9282:	80 91 1c 20 	lds	r24, 0x201C
    9286:	89 87       	std	Y+9, r24	; 0x09
	usart_rs232_options.baudrate     = options->baudrate;
    9288:	80 91 14 20 	lds	r24, 0x2014
    928c:	90 91 15 20 	lds	r25, 0x2015
    9290:	a0 91 16 20 	lds	r26, 0x2016
    9294:	b0 91 17 20 	lds	r27, 0x2017
    9298:	89 83       	std	Y+1, r24	; 0x01
    929a:	9a 83       	std	Y+2, r25	; 0x02
    929c:	ab 83       	std	Y+3, r26	; 0x03
    929e:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
    92a0:	60 e1       	ldi	r22, 0x10	; 16
    92a2:	83 e0       	ldi	r24, 0x03	; 3
    92a4:	90 e0       	ldi	r25, 0x00	; 0
    92a6:	0e 94 06 5b 	call	0xb60c	; 0xb60c <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    92aa:	be 01       	movw	r22, r28
    92ac:	6f 5f       	subi	r22, 0xFF	; 255
    92ae:	7f 4f       	sbci	r23, 0xFF	; 255
    92b0:	80 ea       	ldi	r24, 0xA0	; 160
    92b2:	98 e0       	ldi	r25, 0x08	; 8
    92b4:	0e 94 da 69 	call	0xd3b4	; 0xd3b4 <usart_init_rs232>
 * \param level Interrupt level of the RXD interrupt.
 */
static inline void usart_set_rx_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_RXCINTLVL_gm) |
    92b8:	e0 ea       	ldi	r30, 0xA0	; 160
    92ba:	f8 e0       	ldi	r31, 0x08	; 8
    92bc:	83 81       	ldd	r24, Z+3	; 0x03
    92be:	8f 7c       	andi	r24, 0xCF	; 207
    92c0:	80 62       	ori	r24, 0x20	; 32
    92c2:	83 83       	std	Z+3, r24	; 0x03
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    92c4:	84 81       	ldd	r24, Z+4	; 0x04
    92c6:	80 61       	ori	r24, 0x10	; 16
    92c8:	84 83       	std	Z+4, r24	; 0x04
	usart_serial_init(USART_RS232_1, &RS232_SERIAL_OPTIONS);
	usart_set_rx_interrupt_level(USART_RS232_1,USART_INT_LVL_MED);
	usart_rx_enable(USART_RS232_1);
	g_measureCounter = 0;
    92ca:	10 92 1a 27 	sts	0x271A, r1
    92ce:	10 92 1b 27 	sts	0x271B, r1
	g_partialSum=0;
    92d2:	10 92 1c 27 	sts	0x271C, r1
    92d6:	10 92 1d 27 	sts	0x271D, r1
    92da:	10 92 1e 27 	sts	0x271E, r1
    92de:	10 92 1f 27 	sts	0x271F, r1
	sei();
    92e2:	78 94       	sei
}
    92e4:	29 96       	adiw	r28, 0x09	; 9
    92e6:	cd bf       	out	0x3d, r28	; 61
    92e8:	de bf       	out	0x3e, r29	; 62
    92ea:	df 91       	pop	r29
    92ec:	cf 91       	pop	r28
    92ee:	08 95       	ret

000092f0 <PM10Qbit_get_value>:
		//debug_string(NORMAL,szBuf,false);
	//}
	//debug_string(NORMAL,PSTR("\r\n"),true);
}

void PM10Qbit_get_value (PM10QBIT_STATS * const temp){
    92f0:	cf 92       	push	r12
    92f2:	df 92       	push	r13
    92f4:	ef 92       	push	r14
    92f6:	ff 92       	push	r15
    92f8:	cf 93       	push	r28
    92fa:	df 93       	push	r29
    92fc:	ec 01       	movw	r28, r24
	while (g_recordingData);
    92fe:	80 91 3c 24 	lds	r24, 0x243C
    9302:	81 11       	cpse	r24, r1
    9304:	fc cf       	rjmp	.-8      	; 0x92fe <PM10Qbit_get_value+0xe>
	temp->mean = (float)(g_partialSum*100) / (float)(g_measureCounter-g_valDistr[0]);
    9306:	20 91 1c 27 	lds	r18, 0x271C
    930a:	30 91 1d 27 	lds	r19, 0x271D
    930e:	40 91 1e 27 	lds	r20, 0x271E
    9312:	50 91 1f 27 	lds	r21, 0x271F
    9316:	a4 e6       	ldi	r26, 0x64	; 100
    9318:	b0 e0       	ldi	r27, 0x00	; 0
    931a:	0e 94 98 72 	call	0xe530	; 0xe530 <__muluhisi3>
    931e:	0e 94 22 16 	call	0x2c44	; 0x2c44 <__floatunsisf>
    9322:	6b 01       	movw	r12, r22
    9324:	7c 01       	movw	r14, r24
    9326:	80 91 3d 24 	lds	r24, 0x243D
    932a:	60 91 1a 27 	lds	r22, 0x271A
    932e:	70 91 1b 27 	lds	r23, 0x271B
    9332:	68 1b       	sub	r22, r24
    9334:	71 09       	sbc	r23, r1
    9336:	80 e0       	ldi	r24, 0x00	; 0
    9338:	90 e0       	ldi	r25, 0x00	; 0
    933a:	0e 94 22 16 	call	0x2c44	; 0x2c44 <__floatunsisf>
    933e:	9b 01       	movw	r18, r22
    9340:	ac 01       	movw	r20, r24
    9342:	c7 01       	movw	r24, r14
    9344:	b6 01       	movw	r22, r12
    9346:	0e 94 81 14 	call	0x2902	; 0x2902 <__divsf3>
    934a:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__fixunssfsi>
    934e:	69 83       	std	Y+1, r22	; 0x01
    9350:	7a 83       	std	Y+2, r23	; 0x02
	temp->samples=g_measureCounter;
    9352:	80 91 1a 27 	lds	r24, 0x271A
    9356:	88 83       	st	Y, r24
	//temp->maxVal=g_maxVal;
	//temp->minVal=g_minVal;
	memcpy_ram2ram(temp->valDistr,&g_valDistr,sizeof(g_valDistr));
    9358:	84 e1       	ldi	r24, 0x14	; 20
    935a:	ed e3       	ldi	r30, 0x3D	; 61
    935c:	f4 e2       	ldi	r31, 0x24	; 36
    935e:	de 01       	movw	r26, r28
    9360:	13 96       	adiw	r26, 0x03	; 3
    9362:	01 90       	ld	r0, Z+
    9364:	0d 92       	st	X+, r0
    9366:	8a 95       	dec	r24
    9368:	e1 f7       	brne	.-8      	; 0x9362 <PM10Qbit_get_value+0x72>
	//****************************//
	//g_maxVal = 0;
	//g_minVal = UINT16_MAX;
	g_measureCounter = 0;
    936a:	10 92 1a 27 	sts	0x271A, r1
    936e:	10 92 1b 27 	sts	0x271B, r1
	g_partialSum = 0;
    9372:	10 92 1c 27 	sts	0x271C, r1
    9376:	10 92 1d 27 	sts	0x271D, r1
    937a:	10 92 1e 27 	sts	0x271E, r1
    937e:	10 92 1f 27 	sts	0x271F, r1
	memset(g_valDistr, 0, sizeof(g_valDistr));
    9382:	84 e1       	ldi	r24, 0x14	; 20
    9384:	ed e3       	ldi	r30, 0x3D	; 61
    9386:	f4 e2       	ldi	r31, 0x24	; 36
    9388:	df 01       	movw	r26, r30
    938a:	1d 92       	st	X+, r1
    938c:	8a 95       	dec	r24
    938e:	e9 f7       	brne	.-6      	; 0x938a <PM10Qbit_get_value+0x9a>
}
    9390:	df 91       	pop	r29
    9392:	cf 91       	pop	r28
    9394:	ff 90       	pop	r15
    9396:	ef 90       	pop	r14
    9398:	df 90       	pop	r13
    939a:	cf 90       	pop	r12
    939c:	08 95       	ret

0000939e <__vector_25>:
	}
	return true;
}

ISR(USARTC0_RXC_vect)
{
    939e:	1f 92       	push	r1
    93a0:	0f 92       	push	r0
    93a2:	0f b6       	in	r0, 0x3f	; 63
    93a4:	0f 92       	push	r0
    93a6:	11 24       	eor	r1, r1
    93a8:	0b b6       	in	r0, 0x3b	; 59
    93aa:	0f 92       	push	r0
    93ac:	2f 93       	push	r18
    93ae:	3f 93       	push	r19
    93b0:	4f 93       	push	r20
    93b2:	5f 93       	push	r21
    93b4:	6f 93       	push	r22
    93b6:	7f 93       	push	r23
    93b8:	8f 93       	push	r24
    93ba:	9f 93       	push	r25
    93bc:	af 93       	push	r26
    93be:	bf 93       	push	r27
    93c0:	ef 93       	push	r30
    93c2:	ff 93       	push	r31
static bool usartc_USARTRS232_1_RX_CBuffer_Complete(void)
{
	static const char headerString[] = "m: ";
	USART_t * const ad = USART_RS232_1;
	static uint8_t idx=0;
	const uint8_t dt = ad->DATA;
    93c4:	70 91 a0 08 	lds	r23, 0x08A0
	/* Advance buffer head. */
	if (idx<3)
    93c8:	60 91 51 24 	lds	r22, 0x2451
    93cc:	86 2f       	mov	r24, r22
    93ce:	90 e0       	ldi	r25, 0x00	; 0
    93d0:	63 30       	cpi	r22, 0x03	; 3
    93d2:	80 f4       	brcc	.+32     	; 0x93f4 <__vector_25+0x56>
		if (dt == headerString[idx])
    93d4:	47 2f       	mov	r20, r23
    93d6:	50 e0       	ldi	r21, 0x00	; 0
    93d8:	fc 01       	movw	r30, r24
    93da:	ed 5a       	subi	r30, 0xAD	; 173
    93dc:	fe 4d       	sbci	r31, 0xDE	; 222
    93de:	20 81       	ld	r18, Z
    93e0:	33 27       	eor	r19, r19
    93e2:	27 fd       	sbrc	r18, 7
    93e4:	30 95       	com	r19
    93e6:	42 17       	cp	r20, r18
    93e8:	53 07       	cpc	r21, r19
    93ea:	09 f4       	brne	.+2      	; 0x93ee <__vector_25+0x50>
    93ec:	03 c0       	rjmp	.+6      	; 0x93f4 <__vector_25+0x56>
			g_szBuf[idx++]=dt;
		else
			idx=0; 
    93ee:	10 92 51 24 	sts	0x2451, r1
    93f2:	07 c0       	rjmp	.+14     	; 0x9402 <__vector_25+0x64>
	else
		g_szBuf[idx++]=dt;
    93f4:	fc 01       	movw	r30, r24
    93f6:	e6 5f       	subi	r30, 0xF6	; 246
    93f8:	f8 4d       	sbci	r31, 0xD8	; 216
    93fa:	70 83       	st	Z, r23
    93fc:	6f 5f       	subi	r22, 0xFF	; 255
    93fe:	60 93 51 24 	sts	0x2451, r22
	if ( idx == 7)
    9402:	80 91 51 24 	lds	r24, 0x2451
    9406:	87 30       	cpi	r24, 0x07	; 7
    9408:	09 f0       	breq	.+2      	; 0x940c <__vector_25+0x6e>
    940a:	73 c0       	rjmp	.+230    	; 0x94f2 <__vector_25+0x154>
	{
		idx=0;
    940c:	10 92 51 24 	sts	0x2451, r1
		g_PM10string[0]= g_szBuf[3];
    9410:	80 91 0d 27 	lds	r24, 0x270D
		g_PM10string[1]= g_szBuf[4];
    9414:	40 91 0e 27 	lds	r20, 0x270E
    9418:	40 93 13 27 	sts	0x2713, r20
		g_PM10string[2]= g_szBuf[5];
    941c:	60 91 0f 27 	lds	r22, 0x270F
    9420:	60 93 14 27 	sts	0x2714, r22
		g_PM10string[3]= g_szBuf[6];
    9424:	20 91 10 27 	lds	r18, 0x2710
    9428:	20 93 15 27 	sts	0x2715, r18
		g_PM10string[4]= 0;
    942c:	10 92 16 27 	sts	0x2716, r1


static void PM10Qbit_save_sample(void)
{
	uint16_t bufVal = 0;
	g_recordingData = true;
    9430:	91 e0       	ldi	r25, 0x01	; 1
    9432:	90 93 3c 24 	sts	0x243C, r25
	bufVal += (uint16_t)(g_PM10string[3] - 48);
    9436:	33 27       	eor	r19, r19
    9438:	27 fd       	sbrc	r18, 7
    943a:	30 95       	com	r19
    943c:	20 53       	subi	r18, 0x30	; 48
    943e:	31 09       	sbc	r19, r1
	bufVal += (uint16_t)(g_PM10string[2]-48) * 10 ;
    9440:	77 27       	eor	r23, r23
    9442:	67 fd       	sbrc	r22, 7
    9444:	70 95       	com	r23
    9446:	60 53       	subi	r22, 0x30	; 48
    9448:	71 09       	sbc	r23, r1
    944a:	9a e0       	ldi	r25, 0x0A	; 10
    944c:	96 9f       	mul	r25, r22
    944e:	f0 01       	movw	r30, r0
    9450:	97 9f       	mul	r25, r23
    9452:	f0 0d       	add	r31, r0
    9454:	11 24       	eor	r1, r1
    9456:	2e 0f       	add	r18, r30
    9458:	3f 1f       	adc	r19, r31
	bufVal += (uint16_t)(g_PM10string[1]-48) * 100 ;
    945a:	55 27       	eor	r21, r21
    945c:	47 fd       	sbrc	r20, 7
    945e:	50 95       	com	r21
    9460:	40 53       	subi	r20, 0x30	; 48
    9462:	51 09       	sbc	r21, r1
    9464:	94 e6       	ldi	r25, 0x64	; 100
    9466:	94 9f       	mul	r25, r20
    9468:	b0 01       	movw	r22, r0
    946a:	95 9f       	mul	r25, r21
    946c:	70 0d       	add	r23, r0
    946e:	11 24       	eor	r1, r1
    9470:	26 0f       	add	r18, r22
    9472:	37 1f       	adc	r19, r23
	bufVal += (uint16_t)(g_PM10string[0]-48) * 1000 ;
    9474:	99 27       	eor	r25, r25
    9476:	87 fd       	sbrc	r24, 7
    9478:	90 95       	com	r25
    947a:	c0 97       	sbiw	r24, 0x30	; 48
    947c:	68 ee       	ldi	r22, 0xE8	; 232
    947e:	73 e0       	ldi	r23, 0x03	; 3
    9480:	86 9f       	mul	r24, r22
    9482:	a0 01       	movw	r20, r0
    9484:	87 9f       	mul	r24, r23
    9486:	50 0d       	add	r21, r0
    9488:	96 9f       	mul	r25, r22
    948a:	50 0d       	add	r21, r0
    948c:	11 24       	eor	r1, r1
    948e:	24 0f       	add	r18, r20
    9490:	35 1f       	adc	r19, r21
	
	g_partialSum += (uint32_t)bufVal;
    9492:	80 91 1c 27 	lds	r24, 0x271C
    9496:	90 91 1d 27 	lds	r25, 0x271D
    949a:	a0 91 1e 27 	lds	r26, 0x271E
    949e:	b0 91 1f 27 	lds	r27, 0x271F
    94a2:	82 0f       	add	r24, r18
    94a4:	93 1f       	adc	r25, r19
    94a6:	a1 1d       	adc	r26, r1
    94a8:	b1 1d       	adc	r27, r1
    94aa:	80 93 1c 27 	sts	0x271C, r24
    94ae:	90 93 1d 27 	sts	0x271D, r25
    94b2:	a0 93 1e 27 	sts	0x271E, r26
    94b6:	b0 93 1f 27 	sts	0x271F, r27
	g_measureCounter++;
    94ba:	80 91 1a 27 	lds	r24, 0x271A
    94be:	90 91 1b 27 	lds	r25, 0x271B
    94c2:	01 96       	adiw	r24, 0x01	; 1
    94c4:	80 93 1a 27 	sts	0x271A, r24
    94c8:	90 93 1b 27 	sts	0x271B, r25
	//if(bufVal>g_maxVal)
		//g_maxVal = bufVal;
	//if(bufVal<g_minVal)
		//g_minVal = bufVal;
	if (bufVal<MAXPM10VAL-1)
    94cc:	23 31       	cpi	r18, 0x13	; 19
    94ce:	31 05       	cpc	r19, r1
    94d0:	38 f4       	brcc	.+14     	; 0x94e0 <__vector_25+0x142>
		g_valDistr[bufVal]++;
    94d2:	f9 01       	movw	r30, r18
    94d4:	e3 5c       	subi	r30, 0xC3	; 195
    94d6:	fb 4d       	sbci	r31, 0xDB	; 219
    94d8:	80 81       	ld	r24, Z
    94da:	8f 5f       	subi	r24, 0xFF	; 255
    94dc:	80 83       	st	Z, r24
    94de:	05 c0       	rjmp	.+10     	; 0x94ea <__vector_25+0x14c>
	else
		g_valDistr[MAXPM10VAL-1]++;
    94e0:	80 91 50 24 	lds	r24, 0x2450
    94e4:	8f 5f       	subi	r24, 0xFF	; 255
    94e6:	80 93 50 24 	sts	0x2450, r24
	g_PM10string[0]=0;
    94ea:	10 92 12 27 	sts	0x2712, r1
	g_recordingData = false;
    94ee:	10 92 3c 24 	sts	0x243C, r1
}

ISR(USARTC0_RXC_vect)
{
	usartc_USARTRS232_1_RX_CBuffer_Complete();
    94f2:	ff 91       	pop	r31
    94f4:	ef 91       	pop	r30
    94f6:	bf 91       	pop	r27
    94f8:	af 91       	pop	r26
    94fa:	9f 91       	pop	r25
    94fc:	8f 91       	pop	r24
    94fe:	7f 91       	pop	r23
    9500:	6f 91       	pop	r22
    9502:	5f 91       	pop	r21
    9504:	4f 91       	pop	r20
    9506:	3f 91       	pop	r19
    9508:	2f 91       	pop	r18
    950a:	0f 90       	pop	r0
    950c:	0b be       	out	0x3b, r0	; 59
    950e:	0f 90       	pop	r0
    9510:	0f be       	out	0x3f, r0	; 63
    9512:	0f 90       	pop	r0
    9514:	1f 90       	pop	r1
    9516:	18 95       	reti

00009518 <raingauge_reset_stats>:
		.maxSlope_cents	= CENTS_UNDEF_VALUE,
		.maxSlope		= MAXSLOPE_UNDEF_VALUE,
		.tips			= 0
	};
	
	volatile RAINGAUGE_STATS * const s = raingauge_stats+id;
    9518:	9a e0       	ldi	r25, 0x0A	; 10
    951a:	89 9f       	mul	r24, r25
    951c:	a0 01       	movw	r20, r0
    951e:	11 24       	eor	r1, r1
    9520:	40 5e       	subi	r20, 0xE0	; 224
    9522:	58 4d       	sbci	r21, 0xD8	; 216

	if(ps==NULL) {
    9524:	61 15       	cp	r22, r1
    9526:	71 05       	cpc	r23, r1
    9528:	51 f4       	brne	.+20     	; 0x953e <raingauge_reset_stats+0x26>
		nvm_flash_read_buffer(&z,s,sizeof(RAINGAUGE_STATS));
    952a:	2a e0       	ldi	r18, 0x0A	; 10
    952c:	30 e0       	ldi	r19, 0x00	; 0
    952e:	6f ee       	ldi	r22, 0xEF	; 239
    9530:	7d e0       	ldi	r23, 0x0D	; 13
    9532:	88 27       	eor	r24, r24
    9534:	77 fd       	sbrc	r23, 7
    9536:	80 95       	com	r24
    9538:	98 2f       	mov	r25, r24
    953a:	0c 94 10 5f 	jmp	0xbe20	; 0xbe20 <nvm_flash_read_buffer>
	} else {
		memcpy_ram2ram(s,ps,sizeof(RAINGAUGE_STATS));
    953e:	8a e0       	ldi	r24, 0x0A	; 10
    9540:	fb 01       	movw	r30, r22
    9542:	da 01       	movw	r26, r20
    9544:	01 90       	ld	r0, Z+
    9546:	0d 92       	st	X+, r0
    9548:	8a 95       	dec	r24
    954a:	e1 f7       	brne	.-8      	; 0x9544 <raingauge_reset_stats+0x2c>
    954c:	08 95       	ret

0000954e <raingauge_get_stats>:
 */
//@}

void raingauge_get_stats(uint8_t id,RAINGAUGE_STATS * const ps)
{
	volatile RAINGAUGE_STATS * const s = raingauge_stats+id;
    954e:	9a e0       	ldi	r25, 0x0A	; 10
    9550:	89 9f       	mul	r24, r25
    9552:	f0 01       	movw	r30, r0
    9554:	11 24       	eor	r1, r1
    9556:	e0 5e       	subi	r30, 0xE0	; 224
    9558:	f8 4d       	sbci	r31, 0xD8	; 216

	memcpy_ram2ram(ps,s,sizeof(RAINGAUGE_STATS));
    955a:	8a e0       	ldi	r24, 0x0A	; 10
    955c:	db 01       	movw	r26, r22
    955e:	01 90       	ld	r0, Z+
    9560:	0d 92       	st	X+, r0
    9562:	8a 95       	dec	r24
    9564:	e1 f7       	brne	.-8      	; 0x955e <raingauge_get_stats+0x10>
    9566:	08 95       	ret

00009568 <raingauge_init>:

static inline void PORT_ConfigureInterrupt0( PORT_t * port,
        PORT_INT0LVL_t intLevel,
        uint8_t pinMask )
{
    port->INTCTRL = ( port->INTCTRL & ~PORT_INT0LVL_gm ) | intLevel;
    9568:	e0 ee       	ldi	r30, 0xE0	; 224
    956a:	f7 e0       	ldi	r31, 0x07	; 7
    956c:	81 85       	ldd	r24, Z+9	; 0x09
    956e:	8c 7f       	andi	r24, 0xFC	; 252
    9570:	82 60       	ori	r24, 0x02	; 2
    9572:	81 87       	std	Z+9, r24	; 0x09
    port->INT0MASK = pinMask;
    9574:	83 e0       	ldi	r24, 0x03	; 3
    9576:	82 87       	std	Z+10, r24	; 0x0a
    /* Enable the level interrupts in the PMIC. */
    PMIC.CTRL |= intLevel;
    9578:	e0 ea       	ldi	r30, 0xA0	; 160
    957a:	f0 e0       	ldi	r31, 0x00	; 0
    957c:	82 81       	ldd	r24, Z+2	; 0x02
    957e:	82 60       	ori	r24, 0x02	; 2
    9580:	82 83       	std	Z+2, r24	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    9582:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    9584:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    9586:	e3 e6       	ldi	r30, 0x63	; 99
    9588:	f7 e2       	ldi	r31, 0x27	; 39
    958a:	80 81       	ld	r24, Z
    958c:	8f 5f       	subi	r24, 0xFF	; 255
    958e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    9590:	9f bf       	out	0x3f, r25	; 63
	PORT_ConfigureInterrupt0( &PORTR, PORT_INT0LVL_MED_gc, 0x03 ); 


	sleepmgr_lock_mode(SLEEPMGR_IDLE);

	raingauge_reset_stats(RAINGAUGE1,NULL);
    9592:	60 e0       	ldi	r22, 0x00	; 0
    9594:	70 e0       	ldi	r23, 0x00	; 0
    9596:	80 e0       	ldi	r24, 0x00	; 0
    9598:	bf cf       	rjmp	.-130    	; 0x9518 <raingauge_reset_stats>

0000959a <__vector_4>:
	raingauge_reset_stats(RAINGAUGE2,NULL);
#endif	
}

ISR(PORTR_INT0_vect)
{
    959a:	1f 92       	push	r1
    959c:	0f 92       	push	r0
    959e:	0f b6       	in	r0, 0x3f	; 63
    95a0:	0f 92       	push	r0
    95a2:	11 24       	eor	r1, r1
    95a4:	2f 93       	push	r18
    95a6:	3f 93       	push	r19
    95a8:	4f 93       	push	r20
    95aa:	5f 93       	push	r21
    95ac:	8f 93       	push	r24
    95ae:	9f 93       	push	r25
 * \param tc Pointer to TC module.
 * \note Output the Counter value CNT
 */
static inline uint16_t tc_read_count(volatile void *tc)
{
	return (((TC0_t *)tc)->CNT);
    95b0:	80 91 60 08 	lds	r24, 0x0860
    95b4:	90 91 61 08 	lds	r25, 0x0861

static void raingauge_tip(uint8_t id,uint16_t cents)
{
	volatile RAINGAUGE_STATS * const ps = &raingauge_stats[id];

	if(ps->lastTip_cents!=CENTS_UNDEF_VALUE) {
    95b8:	20 91 22 27 	lds	r18, 0x2722
    95bc:	30 91 23 27 	lds	r19, 0x2723
    95c0:	2f 3f       	cpi	r18, 0xFF	; 255
    95c2:	3f 4f       	sbci	r19, 0xFF	; 255
    95c4:	d9 f0       	breq	.+54     	; 0x95fc <__vector_4+0x62>
		//Before modifying this please take a minute 
		//to read how the cents of seconds are handled by the data logger
		//it is described in the datalogger_init function
		const uint16_t c = cents - ps->lastTip_cents;
    95c6:	20 91 22 27 	lds	r18, 0x2722
    95ca:	30 91 23 27 	lds	r19, 0x2723
    95ce:	ac 01       	movw	r20, r24
    95d0:	42 1b       	sub	r20, r18
    95d2:	53 0b       	sbc	r21, r19
    95d4:	9a 01       	movw	r18, r20
		if (c<20) //this sets a maximum rate of tips per cent of seconds
    95d6:	44 31       	cpi	r20, 0x14	; 20
    95d8:	51 05       	cpc	r21, r1
    95da:	20 f1       	brcs	.+72     	; 0x9624 <__vector_4+0x8a>
		{
			return;
		}


		if(c < ps->maxSlope) {
    95dc:	40 91 26 27 	lds	r20, 0x2726
    95e0:	50 91 27 27 	lds	r21, 0x2727
    95e4:	24 17       	cp	r18, r20
    95e6:	35 07       	cpc	r19, r21
    95e8:	68 f4       	brcc	.+26     	; 0x9604 <__vector_4+0x6a>
			ps->maxSlope = c;
    95ea:	20 93 26 27 	sts	0x2726, r18
    95ee:	30 93 27 27 	sts	0x2727, r19
			ps->maxSlope_cents = cents;
    95f2:	80 93 24 27 	sts	0x2724, r24
    95f6:	90 93 25 27 	sts	0x2725, r25
    95fa:	04 c0       	rjmp	.+8      	; 0x9604 <__vector_4+0x6a>
		}			
	} else {
		ps->firstTip_cents = cents;
    95fc:	80 93 20 27 	sts	0x2720, r24
    9600:	90 93 21 27 	sts	0x2721, r25
	}

	ps->lastTip_cents = cents;
    9604:	80 93 22 27 	sts	0x2722, r24
    9608:	90 93 23 27 	sts	0x2723, r25
	ps->tips++;
    960c:	80 91 28 27 	lds	r24, 0x2728
    9610:	90 91 29 27 	lds	r25, 0x2729
    9614:	01 96       	adiw	r24, 0x01	; 1
    9616:	80 93 28 27 	sts	0x2728, r24
    961a:	90 93 29 27 	sts	0x2729, r25

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    961e:	81 e0       	ldi	r24, 0x01	; 1
    9620:	80 93 67 06 	sts	0x0667, r24
}

ISR(PORTR_INT0_vect)
{
	raingauge_tip(RAINGAUGE1,tc_read_count(&TCC1));
}
    9624:	9f 91       	pop	r25
    9626:	8f 91       	pop	r24
    9628:	5f 91       	pop	r21
    962a:	4f 91       	pop	r20
    962c:	3f 91       	pop	r19
    962e:	2f 91       	pop	r18
    9630:	0f 90       	pop	r0
    9632:	0f be       	out	0x3f, r0	; 63
    9634:	0f 90       	pop	r0
    9636:	1f 90       	pop	r1
    9638:	18 95       	reti

0000963a <__portable_avr_delay_cycles>:
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    963a:	61 50       	subi	r22, 0x01	; 1
    963c:	71 09       	sbc	r23, r1
    963e:	81 09       	sbc	r24, r1
    9640:	91 09       	sbc	r25, r1
    9642:	d9 f7       	brne	.-10     	; 0x963a <__portable_avr_delay_cycles>
}
    9644:	08 95       	ret

00009646 <statusled_blink.constprop.0>:

#ifndef STATUS_LED_H_
#define STATUS_LED_H_


static inline void statusled_blink(uint8_t t)
    9646:	1f 93       	push	r17
    9648:	cf 93       	push	r28
    964a:	df 93       	push	r29
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    964c:	c0 e6       	ldi	r28, 0x60	; 96
    964e:	d6 e0       	ldi	r29, 0x06	; 6
    9650:	11 e0       	ldi	r17, 0x01	; 1
    9652:	1d 83       	std	Y+5, r17	; 0x05
{
	while( t-- ) {
		gpio_set_pin_high(STATUS_LED_PIN);
		delay_ms(100);
    9654:	60 e8       	ldi	r22, 0x80	; 128
    9656:	7a e1       	ldi	r23, 0x1A	; 26
    9658:	86 e0       	ldi	r24, 0x06	; 6
    965a:	90 e0       	ldi	r25, 0x00	; 0
    965c:	ee df       	rcall	.-36     	; 0x963a <__portable_avr_delay_cycles>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    965e:	1e 83       	std	Y+6, r17	; 0x06
		gpio_set_pin_low(STATUS_LED_PIN);
		delay_ms(50);
    9660:	60 e4       	ldi	r22, 0x40	; 64
    9662:	7d e0       	ldi	r23, 0x0D	; 13
    9664:	83 e0       	ldi	r24, 0x03	; 3
    9666:	90 e0       	ldi	r25, 0x00	; 0
    9668:	e8 df       	rcall	.-48     	; 0x963a <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    966a:	1d 83       	std	Y+5, r17	; 0x05

static inline void statusled_blink(uint8_t t)
{
	while( t-- ) {
		gpio_set_pin_high(STATUS_LED_PIN);
		delay_ms(100);
    966c:	60 e8       	ldi	r22, 0x80	; 128
    966e:	7a e1       	ldi	r23, 0x1A	; 26
    9670:	86 e0       	ldi	r24, 0x06	; 6
    9672:	90 e0       	ldi	r25, 0x00	; 0
    9674:	e2 df       	rcall	.-60     	; 0x963a <__portable_avr_delay_cycles>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    9676:	1e 83       	std	Y+6, r17	; 0x06
		gpio_set_pin_low(STATUS_LED_PIN);
		delay_ms(50);
    9678:	60 e4       	ldi	r22, 0x40	; 64
    967a:	7d e0       	ldi	r23, 0x0D	; 13
    967c:	83 e0       	ldi	r24, 0x03	; 3
    967e:	90 e0       	ldi	r25, 0x00	; 0
    9680:	dc df       	rcall	.-72     	; 0x963a <__portable_avr_delay_cycles>
	}		
	delay_ms(50);
    9682:	60 e4       	ldi	r22, 0x40	; 64
    9684:	7d e0       	ldi	r23, 0x0D	; 13
    9686:	83 e0       	ldi	r24, 0x03	; 3
    9688:	90 e0       	ldi	r25, 0x00	; 0
    968a:	d7 df       	rcall	.-82     	; 0x963a <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    968c:	1d 83       	std	Y+5, r17	; 0x05
	gpio_set_pin_high(STATUS_LED_PIN);
}
    968e:	df 91       	pop	r29
    9690:	cf 91       	pop	r28
    9692:	1f 91       	pop	r17
    9694:	08 95       	ret

00009696 <VBusMon_init>:

static inline void PORT_ConfigureInterrupt0( PORT_t * port,
        PORT_INT0LVL_t intLevel,
        uint8_t pinMask )
{
    port->INTCTRL = ( port->INTCTRL & ~PORT_INT0LVL_gm ) | intLevel;
    9696:	e0 e6       	ldi	r30, 0x60	; 96
    9698:	f6 e0       	ldi	r31, 0x06	; 6
    969a:	81 85       	ldd	r24, Z+9	; 0x09
    969c:	8c 7f       	andi	r24, 0xFC	; 252
    969e:	81 60       	ori	r24, 0x01	; 1
    96a0:	81 87       	std	Z+9, r24	; 0x09
    port->INT0MASK = pinMask;
    96a2:	80 e2       	ldi	r24, 0x20	; 32
    96a4:	82 87       	std	Z+10, r24	; 0x0a
    /* Enable the level interrupts in the PMIC. */
    PMIC.CTRL |= intLevel;
    96a6:	e0 ea       	ldi	r30, 0xA0	; 160
    96a8:	f0 e0       	ldi	r31, 0x00	; 0
    96aa:	82 81       	ldd	r24, Z+2	; 0x02
    96ac:	81 60       	ori	r24, 0x01	; 1
    96ae:	82 83       	std	Z+2, r24	; 0x02
    96b0:	08 95       	ret

000096b2 <VBusMon_check>:
	PORT_ConfigureInterrupt0( &PORTD, PORT_INT0LVL_LO_gc, 0x20 );
	
}

void VBusMon_check(void)
{
    96b2:	cf 93       	push	r28
	static volatile uint8_t r = 0;
	if(1==r) return;
    96b4:	80 91 52 24 	lds	r24, 0x2452
    96b8:	81 30       	cpi	r24, 0x01	; 1
    96ba:	61 f1       	breq	.+88     	; 0x9714 <VBusMon_check+0x62>
	r = 1;
    96bc:	c1 e0       	ldi	r28, 0x01	; 1
    96be:	c0 93 52 24 	sts	0x2452, r28

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    96c2:	80 91 68 06 	lds	r24, 0x0668
	if(ioport_pin_is_low(USB_PROBE_PIN)) {
    96c6:	85 fd       	sbrc	r24, 5
    96c8:	12 c0       	rjmp	.+36     	; 0x96ee <VBusMon_check+0x3c>
		vbus_action(false);
    96ca:	80 e0       	ldi	r24, 0x00	; 0
    96cc:	0e 94 7f 5a 	call	0xb4fe	; 0xb4fe <vbus_action>
		udc_stop();
    96d0:	0e 94 4a 5c 	call	0xb894	; 0xb894 <udc_stop>
		OSC.DFLLCTRL = 2;
    96d4:	82 e0       	ldi	r24, 0x02	; 2
    96d6:	80 93 56 00 	sts	0x0056, r24
		DFLLRC32M.CTRL = 1;
    96da:	c0 93 60 00 	sts	0x0060, r28
		statusled_blink(2);
    96de:	b3 df       	rcall	.-154    	; 0x9646 <statusled_blink.constprop.0>
		debug_string(VERBOSE,PSTR("[EVENT] USB off\r\n"),true);
    96e0:	41 e0       	ldi	r20, 0x01	; 1
    96e2:	69 ef       	ldi	r22, 0xF9	; 249
    96e4:	7d e0       	ldi	r23, 0x0D	; 13
    96e6:	82 e0       	ldi	r24, 0x02	; 2
    96e8:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    96ec:	11 c0       	rjmp	.+34     	; 0x9710 <VBusMon_check+0x5e>
	} else {
		OSC.DFLLCTRL = 4;
    96ee:	84 e0       	ldi	r24, 0x04	; 4
    96f0:	80 93 56 00 	sts	0x0056, r24
		DFLLRC32M.CTRL = 1;
    96f4:	c0 93 60 00 	sts	0x0060, r28

		udc_start();
    96f8:	0e 94 28 5c 	call	0xb850	; 0xb850 <udc_start>
		vbus_action(true);
    96fc:	81 e0       	ldi	r24, 0x01	; 1
    96fe:	0e 94 7f 5a 	call	0xb4fe	; 0xb4fe <vbus_action>
		statusled_blink(2);
    9702:	a1 df       	rcall	.-190    	; 0x9646 <statusled_blink.constprop.0>
		debug_string(VERBOSE,PSTR("[EVENT] USB on\r\n"),true);
    9704:	41 e0       	ldi	r20, 0x01	; 1
    9706:	6b e0       	ldi	r22, 0x0B	; 11
    9708:	7e e0       	ldi	r23, 0x0E	; 14
    970a:	82 e0       	ldi	r24, 0x02	; 2
    970c:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
	}
	r=0;
    9710:	10 92 52 24 	sts	0x2452, r1
}
    9714:	cf 91       	pop	r28
    9716:	08 95       	ret

00009718 <__vector_64>:


ISR(PORTD_INT0_vect)
{
    9718:	1f 92       	push	r1
    971a:	0f 92       	push	r0
    971c:	0f b6       	in	r0, 0x3f	; 63
    971e:	0f 92       	push	r0
    9720:	11 24       	eor	r1, r1
    9722:	0b b6       	in	r0, 0x3b	; 59
    9724:	0f 92       	push	r0
    9726:	2f 93       	push	r18
    9728:	3f 93       	push	r19
    972a:	4f 93       	push	r20
    972c:	5f 93       	push	r21
    972e:	6f 93       	push	r22
    9730:	7f 93       	push	r23
    9732:	8f 93       	push	r24
    9734:	9f 93       	push	r25
    9736:	af 93       	push	r26
    9738:	bf 93       	push	r27
    973a:	ef 93       	push	r30
    973c:	ff 93       	push	r31
	VBusMon_check();
    973e:	b9 df       	rcall	.-142    	; 0x96b2 <VBusMon_check>
}
    9740:	ff 91       	pop	r31
    9742:	ef 91       	pop	r30
    9744:	bf 91       	pop	r27
    9746:	af 91       	pop	r26
    9748:	9f 91       	pop	r25
    974a:	8f 91       	pop	r24
    974c:	7f 91       	pop	r23
    974e:	6f 91       	pop	r22
    9750:	5f 91       	pop	r21
    9752:	4f 91       	pop	r20
    9754:	3f 91       	pop	r19
    9756:	2f 91       	pop	r18
    9758:	0f 90       	pop	r0
    975a:	0b be       	out	0x3b, r0	; 59
    975c:	0f 90       	pop	r0
    975e:	0f be       	out	0x3f, r0	; 63
    9760:	0f 90       	pop	r0
    9762:	1f 90       	pop	r1
    9764:	18 95       	reti

00009766 <__portable_avr_delay_cycles.constprop.5>:
 * @return the converted number of CPU cycles
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
    9766:	80 e0       	ldi	r24, 0x00	; 0
    9768:	90 e0       	ldi	r25, 0x00	; 0
{
	do { barrier(); } while (--n);
    976a:	01 96       	adiw	r24, 0x01	; 1
    976c:	80 34       	cpi	r24, 0x40	; 64
    976e:	2f e1       	ldi	r18, 0x1F	; 31
    9770:	92 07       	cpc	r25, r18
    9772:	d9 f7       	brne	.-10     	; 0x976a <__portable_avr_delay_cycles.constprop.5+0x4>
}
    9774:	08 95       	ret

00009776 <adc_start_conversion.constprop.12>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    9776:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    9778:	f8 94       	cli
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
    977a:	e0 e0       	ldi	r30, 0x00	; 0
    977c:	f2 e0       	ldi	r31, 0x02	; 2
    977e:	80 81       	ld	r24, Z
    9780:	84 60       	ori	r24, 0x04	; 4
    9782:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    9784:	9f bf       	out	0x3f, r25	; 63
    9786:	08 95       	ret

00009788 <ReadCalibrationBytes>:
uint8_t ReadCalibrationBytes( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    9788:	aa ec       	ldi	r26, 0xCA	; 202
    978a:	b1 e0       	ldi	r27, 0x01	; 1
    978c:	92 e0       	ldi	r25, 0x02	; 2
    978e:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
    9790:	e8 2f       	mov	r30, r24
    9792:	f0 e0       	ldi	r31, 0x00	; 0
    9794:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    9796:	1c 92       	st	X, r1

	return( result );
}
    9798:	08 95       	ret

0000979a <voltmeter_init>:

void voltmeter_init(void)
{
    979a:	cf 93       	push	r28
    979c:	df 93       	push	r29
	ADCA.CALL = ReadCalibrationBytes( ADCACAL0 );
    979e:	80 e2       	ldi	r24, 0x20	; 32
    97a0:	f3 df       	rcall	.-26     	; 0x9788 <ReadCalibrationBytes>
    97a2:	c0 e0       	ldi	r28, 0x00	; 0
    97a4:	d2 e0       	ldi	r29, 0x02	; 2
    97a6:	8c 87       	std	Y+12, r24	; 0x0c
	ADCA.CALH = ReadCalibrationBytes( ADCACAL1 );
    97a8:	81 e2       	ldi	r24, 0x21	; 33
    97aa:	ee df       	rcall	.-36     	; 0x9788 <ReadCalibrationBytes>
    97ac:	8d 87       	std	Y+13, r24	; 0x0d
}
    97ae:	df 91       	pop	r29
    97b0:	cf 91       	pop	r28
    97b2:	08 95       	ret

000097b4 <voltmeter_getValue>:
 *
 * the return value is in cents of volt
 *
 */
uint16_t voltmeter_getValue(void)
{
    97b4:	af 92       	push	r10
    97b6:	bf 92       	push	r11
    97b8:	cf 92       	push	r12
    97ba:	df 92       	push	r13
    97bc:	ef 92       	push	r14
    97be:	ff 92       	push	r15
    97c0:	0f 93       	push	r16
    97c2:	1f 93       	push	r17
    97c4:	cf 93       	push	r28
    97c6:	df 93       	push	r29
    97c8:	cd b7       	in	r28, 0x3d	; 61
    97ca:	de b7       	in	r29, 0x3e	; 62
    97cc:	ab 97       	sbiw	r28, 0x2b	; 43
    97ce:	cd bf       	out	0x3d, r28	; 61
    97d0:	de bf       	out	0x3e, r29	; 62
	
	struct adc_config adc_conf;
	struct adc_channel_config adcch_conf;
	char szBUF[32];
	
	adc_read_configuration(&BATTERY_VOLTMETER, &adc_conf);
    97d2:	be 01       	movw	r22, r28
    97d4:	6f 5d       	subi	r22, 0xDF	; 223
    97d6:	7f 4f       	sbci	r23, 0xFF	; 255
    97d8:	80 e0       	ldi	r24, 0x00	; 0
    97da:	92 e0       	ldi	r25, 0x02	; 2
    97dc:	0e 94 c6 58 	call	0xb18c	; 0xb18c <adc_read_configuration>
	adcch_read_configuration(&BATTERY_VOLTMETER, BATTERY_VOLTMETER_CH, &adcch_conf);
    97e0:	ae 01       	movw	r20, r28
    97e2:	48 5d       	subi	r20, 0xD8	; 216
    97e4:	5f 4f       	sbci	r21, 0xFF	; 255
    97e6:	61 e0       	ldi	r22, 0x01	; 1
    97e8:	80 e0       	ldi	r24, 0x00	; 0
    97ea:	92 e0       	ldi	r25, 0x02	; 2
    97ec:	0e 94 31 59 	call	0xb262	; 0xb262 <adcch_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    97f0:	9a a1       	ldd	r25, Y+34	; 0x22
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    97f2:	8b a1       	ldd	r24, Y+35	; 0x23
    97f4:	8f 78       	andi	r24, 0x8F	; 143
	conf->refctrl |= ref;
    97f6:	80 61       	ori	r24, 0x10	; 16
    97f8:	8b a3       	std	Y+35, r24	; 0x23
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    97fa:	91 7e       	andi	r25, 0xE1	; 225
    97fc:	9a a3       	std	Y+34, r25	; 0x22
		conf->evctrl = ADC_EVACT_NONE_gc;
    97fe:	1c a2       	std	Y+36, r1	; 0x24
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    9800:	86 e0       	ldi	r24, 0x06	; 6
    9802:	8d a3       	std	Y+37, r24	; 0x25
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    9804:	81 e0       	ldi	r24, 0x01	; 1
    9806:	88 a7       	std	Y+40, r24	; 0x28
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    9808:	88 e0       	ldi	r24, 0x08	; 8
    980a:	89 a7       	std	Y+41, r24	; 0x29
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
	adc_set_clock_rate(&adc_conf, 100000UL);

	adcch_set_input(&adcch_conf, BATTERY_VOLTMETER_PIN, ADCCH_NEG_NONE, 0);

	adc_write_configuration(&BATTERY_VOLTMETER, &adc_conf);
    980c:	be 01       	movw	r22, r28
    980e:	6f 5d       	subi	r22, 0xDF	; 223
    9810:	7f 4f       	sbci	r23, 0xFF	; 255
    9812:	80 e0       	ldi	r24, 0x00	; 0
    9814:	92 e0       	ldi	r25, 0x02	; 2
    9816:	0e 94 84 58 	call	0xb108	; 0xb108 <adc_write_configuration>
	adcch_write_configuration(&BATTERY_VOLTMETER, BATTERY_VOLTMETER_CH, &adcch_conf);
    981a:	ae 01       	movw	r20, r28
    981c:	48 5d       	subi	r20, 0xD8	; 216
    981e:	5f 4f       	sbci	r21, 0xFF	; 255
    9820:	61 e0       	ldi	r22, 0x01	; 1
    9822:	80 e0       	ldi	r24, 0x00	; 0
    9824:	92 e0       	ldi	r25, 0x02	; 2
    9826:	0e 94 e9 58 	call	0xb1d2	; 0xb1d2 <adcch_write_configuration>
    982a:	43 e0       	ldi	r20, 0x03	; 3
    982c:	50 e0       	ldi	r21, 0x00	; 0
    982e:	60 e1       	ldi	r22, 0x10	; 16
    9830:	80 ea       	ldi	r24, 0xA0	; 160
    9832:	96 e0       	ldi	r25, 0x06	; 6
    9834:	0e 94 3e 5b 	call	0xb67c	; 0xb67c <ioport_configure_port_pin>
static void voltmeter_turn_on(void)
{
	// Voltmeter switch to GND
	ioport_configure_pin(BATTERY_VOLTMETER_SWITCH, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
	// Switch off pull-up resistor on ADC port
	PORTA.PIN1CTRL = PORT_OPC_TOTEM_gc;
    9838:	10 92 11 06 	sts	0x0611, r1

	adc_write_configuration(&BATTERY_VOLTMETER, &adc_conf);
	adcch_write_configuration(&BATTERY_VOLTMETER, BATTERY_VOLTMETER_CH, &adcch_conf);
	
	voltmeter_turn_on();
	delay_ms(2);
    983c:	94 df       	rcall	.-216    	; 0x9766 <__portable_avr_delay_cycles.constprop.5>

	adc_enable(&BATTERY_VOLTMETER);
    983e:	80 e0       	ldi	r24, 0x00	; 0
    9840:	92 e0       	ldi	r25, 0x02	; 2
    9842:	0e 94 b7 56 	call	0xad6e	; 0xad6e <adc_enable>
	adc_start_conversion(&BATTERY_VOLTMETER, BATTERY_VOLTMETER_CH);
    9846:	97 df       	rcall	.-210    	; 0x9776 <adc_start_conversion.constprop.12>
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    9848:	80 91 06 02 	lds	r24, 0x0206
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    984c:	98 2f       	mov	r25, r24
    984e:	91 70       	andi	r25, 0x01	; 1
    9850:	80 ff       	sbrs	r24, 0
    9852:	fa cf       	rjmp	.-12     	; 0x9848 <voltmeter_getValue+0x94>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    9854:	90 93 06 02 	sts	0x0206, r25
	adc_wait_for_interrupt_flag(&BATTERY_VOLTMETER, BATTERY_VOLTMETER_CH);
	adc_start_conversion(&BATTERY_VOLTMETER, BATTERY_VOLTMETER_CH);
    9858:	8e df       	rcall	.-228    	; 0x9776 <adc_start_conversion.constprop.12>
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    985a:	80 91 06 02 	lds	r24, 0x0206
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    985e:	dd 24       	eor	r13, r13
    9860:	d3 94       	inc	r13
    9862:	d8 22       	and	r13, r24
    9864:	80 ff       	sbrs	r24, 0
    9866:	f9 cf       	rjmp	.-14     	; 0x985a <voltmeter_getValue+0xa6>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    9868:	d0 92 06 02 	sts	0x0206, r13
	adc_wait_for_interrupt_flag(&BATTERY_VOLTMETER, BATTERY_VOLTMETER_CH);
	const int16_t result = adc_get_result(&BATTERY_VOLTMETER, BATTERY_VOLTMETER_CH);
    986c:	00 91 24 02 	lds	r16, 0x0224
    9870:	10 91 25 02 	lds	r17, 0x0225
    9874:	c0 2e       	mov	r12, r16
    9876:	b1 2e       	mov	r11, r17
	adc_disable(&BATTERY_VOLTMETER);
    9878:	80 e0       	ldi	r24, 0x00	; 0
    987a:	92 e0       	ldi	r25, 0x02	; 2
    987c:	0e 94 ce 56 	call	0xad9c	; 0xad9c <adc_disable>
	sprintf_P(szBUF,PSTR("ADC: %d\r\n"),result);
    9880:	1f 93       	push	r17
    9882:	0f 93       	push	r16
    9884:	8c e1       	ldi	r24, 0x1C	; 28
    9886:	9e e0       	ldi	r25, 0x0E	; 14
    9888:	9f 93       	push	r25
    988a:	8f 93       	push	r24
    988c:	ee 24       	eor	r14, r14
    988e:	e3 94       	inc	r14
    9890:	f1 2c       	mov	r15, r1
    9892:	ec 0e       	add	r14, r28
    9894:	fd 1e       	adc	r15, r29
    9896:	ff 92       	push	r15
    9898:	ef 92       	push	r14
    989a:	0e 94 b5 74 	call	0xe96a	; 0xe96a <sprintf_P>
	debug_string(NORMAL,szBUF,false);
    989e:	40 e0       	ldi	r20, 0x00	; 0
    98a0:	b7 01       	movw	r22, r14
    98a2:	81 e0       	ldi	r24, 0x01	; 1
    98a4:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    98a8:	41 e0       	ldi	r20, 0x01	; 1
    98aa:	50 e0       	ldi	r21, 0x00	; 0
    98ac:	60 e1       	ldi	r22, 0x10	; 16
    98ae:	80 ea       	ldi	r24, 0xA0	; 160
    98b0:	96 e0       	ldi	r25, 0x06	; 6
    98b2:	0e 94 3e 5b 	call	0xb67c	; 0xb67c <ioport_configure_port_pin>
{
	// High impedance on voltemeter switch
	ioport_configure_pin(BATTERY_VOLTMETER_SWITCH, IOPORT_DIR_OUTPUT | IOPORT_INIT_LOW);
	
	// Turn on pull-up resistor on ADC port
	PORTA.PIN1CTRL = PORT_OPC_PULLUP_gc;
    98b6:	88 e1       	ldi	r24, 0x18	; 24
    98b8:	80 93 11 06 	sts	0x0611, r24
	adc_disable(&BATTERY_VOLTMETER);
	sprintf_P(szBUF,PSTR("ADC: %d\r\n"),result);
	debug_string(NORMAL,szBUF,false);

	voltmeter_turn_off();
	PORTA.PIN3CTRL = PORT_OPC_TOTEM_gc;
    98bc:	10 92 13 06 	sts	0x0613, r1
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    98c0:	d8 a6       	std	Y+40, r13	; 0x28
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    98c2:	89 a7       	std	Y+41, r24	; 0x29
	
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN3, ADCCH_NEG_NONE, 0);
	adcch_write_configuration(&BATTERY_VOLTMETER, BATTERY_VOLTMETER_CH, &adcch_conf);
    98c4:	ae 01       	movw	r20, r28
    98c6:	48 5d       	subi	r20, 0xD8	; 216
    98c8:	5f 4f       	sbci	r21, 0xFF	; 255
    98ca:	61 e0       	ldi	r22, 0x01	; 1
    98cc:	80 e0       	ldi	r24, 0x00	; 0
    98ce:	92 e0       	ldi	r25, 0x02	; 2
    98d0:	0e 94 e9 58 	call	0xb1d2	; 0xb1d2 <adcch_write_configuration>
	adc_enable(&BATTERY_VOLTMETER);
    98d4:	80 e0       	ldi	r24, 0x00	; 0
    98d6:	92 e0       	ldi	r25, 0x02	; 2
    98d8:	0e 94 b7 56 	call	0xad6e	; 0xad6e <adc_enable>
	adc_start_conversion(&BATTERY_VOLTMETER, BATTERY_VOLTMETER_CH);
    98dc:	4c df       	rcall	.-360    	; 0x9776 <adc_start_conversion.constprop.12>
    98de:	0f 90       	pop	r0
    98e0:	0f 90       	pop	r0
    98e2:	0f 90       	pop	r0
    98e4:	0f 90       	pop	r0
    98e6:	0f 90       	pop	r0
    98e8:	0f 90       	pop	r0
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    98ea:	80 91 06 02 	lds	r24, 0x0206
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    98ee:	98 2f       	mov	r25, r24
    98f0:	91 70       	andi	r25, 0x01	; 1
    98f2:	80 ff       	sbrs	r24, 0
    98f4:	fa cf       	rjmp	.-12     	; 0x98ea <voltmeter_getValue+0x136>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    98f6:	90 93 06 02 	sts	0x0206, r25
	adc_wait_for_interrupt_flag(&BATTERY_VOLTMETER, BATTERY_VOLTMETER_CH);
	adc_start_conversion(&BATTERY_VOLTMETER, BATTERY_VOLTMETER_CH);
    98fa:	3d df       	rcall	.-390    	; 0x9776 <adc_start_conversion.constprop.12>
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    98fc:	80 91 06 02 	lds	r24, 0x0206
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    9900:	98 2f       	mov	r25, r24
    9902:	91 70       	andi	r25, 0x01	; 1
    9904:	80 ff       	sbrs	r24, 0
    9906:	fa cf       	rjmp	.-12     	; 0x98fc <voltmeter_getValue+0x148>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    9908:	90 93 06 02 	sts	0x0206, r25
	adc_wait_for_interrupt_flag(&BATTERY_VOLTMETER, BATTERY_VOLTMETER_CH);
	const int16_t offset = adc_get_result(&BATTERY_VOLTMETER, BATTERY_VOLTMETER_CH);
    990c:	80 91 24 02 	lds	r24, 0x0224
    9910:	90 91 25 02 	lds	r25, 0x0225
    9914:	d8 2e       	mov	r13, r24
    9916:	a9 2e       	mov	r10, r25
	adc_disable(&BATTERY_VOLTMETER);
    9918:	80 e0       	ldi	r24, 0x00	; 0
    991a:	92 e0       	ldi	r25, 0x02	; 2
    991c:	0e 94 ce 56 	call	0xad9c	; 0xad9c <adc_disable>
	if (pos >= ADCCH_POS_TEMPSENSE) {
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    9920:	18 a6       	std	Y+40, r1	; 0x28
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    9922:	88 e0       	ldi	r24, 0x08	; 8
    9924:	89 a7       	std	Y+41, r24	; 0x29
	
	
	adcch_set_input(&adcch_conf, ADCCH_POS_BANDGAP, ADCCH_NEG_NONE, 0);
	adcch_write_configuration(&BATTERY_VOLTMETER, BATTERY_VOLTMETER_CH, &adcch_conf);
    9926:	ae 01       	movw	r20, r28
    9928:	48 5d       	subi	r20, 0xD8	; 216
    992a:	5f 4f       	sbci	r21, 0xFF	; 255
    992c:	61 e0       	ldi	r22, 0x01	; 1
    992e:	80 e0       	ldi	r24, 0x00	; 0
    9930:	92 e0       	ldi	r25, 0x02	; 2
    9932:	0e 94 e9 58 	call	0xb1d2	; 0xb1d2 <adcch_write_configuration>

	adc_enable(&BATTERY_VOLTMETER);
    9936:	80 e0       	ldi	r24, 0x00	; 0
    9938:	92 e0       	ldi	r25, 0x02	; 2
    993a:	0e 94 b7 56 	call	0xad6e	; 0xad6e <adc_enable>
	adc_start_conversion(&BATTERY_VOLTMETER, BATTERY_VOLTMETER_CH);
    993e:	1b df       	rcall	.-458    	; 0x9776 <adc_start_conversion.constprop.12>
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    9940:	80 91 06 02 	lds	r24, 0x0206
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    9944:	98 2f       	mov	r25, r24
    9946:	91 70       	andi	r25, 0x01	; 1
    9948:	80 ff       	sbrs	r24, 0
    994a:	fa cf       	rjmp	.-12     	; 0x9940 <voltmeter_getValue+0x18c>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    994c:	90 93 06 02 	sts	0x0206, r25
	adc_wait_for_interrupt_flag(&BATTERY_VOLTMETER, BATTERY_VOLTMETER_CH);
	adc_start_conversion(&BATTERY_VOLTMETER, BATTERY_VOLTMETER_CH);
    9950:	12 df       	rcall	.-476    	; 0x9776 <adc_start_conversion.constprop.12>
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    9952:	80 91 06 02 	lds	r24, 0x0206
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    9956:	98 2f       	mov	r25, r24
    9958:	91 70       	andi	r25, 0x01	; 1
    995a:	80 ff       	sbrs	r24, 0
    995c:	fa cf       	rjmp	.-12     	; 0x9952 <voltmeter_getValue+0x19e>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    995e:	90 93 06 02 	sts	0x0206, r25
	adc_wait_for_interrupt_flag(&BATTERY_VOLTMETER, BATTERY_VOLTMETER_CH);
	const int16_t gain = adc_get_result(&BATTERY_VOLTMETER, BATTERY_VOLTMETER_CH);
    9962:	e0 90 24 02 	lds	r14, 0x0224
    9966:	f0 90 25 02 	lds	r15, 0x0225
	adc_disable(&BATTERY_VOLTMETER);
    996a:	80 e0       	ldi	r24, 0x00	; 0
    996c:	92 e0       	ldi	r25, 0x02	; 2
    996e:	0e 94 ce 56 	call	0xad9c	; 0xad9c <adc_disable>
	
	
	sprintf_P(szBUF,PSTR("ADC: %d\tgain: %d\toffset:%u\r\n"),result,gain,offset);
    9972:	af 92       	push	r10
    9974:	df 92       	push	r13
    9976:	ff 92       	push	r15
    9978:	ef 92       	push	r14
    997a:	bf 92       	push	r11
    997c:	cf 92       	push	r12
    997e:	86 e2       	ldi	r24, 0x26	; 38
    9980:	9e e0       	ldi	r25, 0x0E	; 14
    9982:	9f 93       	push	r25
    9984:	8f 93       	push	r24
    9986:	ee 24       	eor	r14, r14
    9988:	e3 94       	inc	r14
    998a:	f1 2c       	mov	r15, r1
    998c:	ec 0e       	add	r14, r28
    998e:	fd 1e       	adc	r15, r29
    9990:	ff 92       	push	r15
    9992:	ef 92       	push	r14
    9994:	0e 94 b5 74 	call	0xe96a	; 0xe96a <sprintf_P>
	debug_string(NORMAL,szBUF,false);
    9998:	40 e0       	ldi	r20, 0x00	; 0
    999a:	b7 01       	movw	r22, r14
    999c:	81 e0       	ldi	r24, 0x01	; 1
    999e:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
	
	return result;
    99a2:	cd bf       	out	0x3d, r28	; 61
    99a4:	de bf       	out	0x3e, r29	; 62
}
    99a6:	c8 01       	movw	r24, r16
    99a8:	ab 96       	adiw	r28, 0x2b	; 43
    99aa:	cd bf       	out	0x3d, r28	; 61
    99ac:	de bf       	out	0x3e, r29	; 62
    99ae:	df 91       	pop	r29
    99b0:	cf 91       	pop	r28
    99b2:	1f 91       	pop	r17
    99b4:	0f 91       	pop	r16
    99b6:	ff 90       	pop	r15
    99b8:	ef 90       	pop	r14
    99ba:	df 90       	pop	r13
    99bc:	cf 90       	pop	r12
    99be:	bf 90       	pop	r11
    99c0:	af 90       	pop	r10
    99c2:	08 95       	ret

000099c4 <thermometer_getValue>:
uint16_t thermometer_getValue(void)
{
    99c4:	ef 92       	push	r14
    99c6:	ff 92       	push	r15
    99c8:	0f 93       	push	r16
    99ca:	1f 93       	push	r17
    99cc:	cf 93       	push	r28
    99ce:	df 93       	push	r29
    99d0:	cd b7       	in	r28, 0x3d	; 61
    99d2:	de b7       	in	r29, 0x3e	; 62
    99d4:	ad 97       	sbiw	r28, 0x2d	; 45
    99d6:	cd bf       	out	0x3d, r28	; 61
    99d8:	de bf       	out	0x3e, r29	; 62
	struct adc_config adc_conf;
	struct adc_channel_config adcch_conf;

	adc_read_configuration(&ADCA, &adc_conf);
    99da:	be 01       	movw	r22, r28
    99dc:	6f 5d       	subi	r22, 0xDF	; 223
    99de:	7f 4f       	sbci	r23, 0xFF	; 255
    99e0:	80 e0       	ldi	r24, 0x00	; 0
    99e2:	92 e0       	ldi	r25, 0x02	; 2
    99e4:	0e 94 c6 58 	call	0xb18c	; 0xb18c <adc_read_configuration>
	adcch_read_configuration(&ADCA, ADC_CH0, &adcch_conf);
    99e8:	ae 01       	movw	r20, r28
    99ea:	48 5d       	subi	r20, 0xD8	; 216
    99ec:	5f 4f       	sbci	r21, 0xFF	; 255
    99ee:	61 e0       	ldi	r22, 0x01	; 1
    99f0:	80 e0       	ldi	r24, 0x00	; 0
    99f2:	92 e0       	ldi	r25, 0x02	; 2
    99f4:	0e 94 31 59 	call	0xb262	; 0xb262 <adcch_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    99f8:	9a a1       	ldd	r25, Y+34	; 0x22
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    99fa:	8b a1       	ldd	r24, Y+35	; 0x23
    99fc:	8f 78       	andi	r24, 0x8F	; 143
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    99fe:	25 e0       	ldi	r18, 0x05	; 5
    9a00:	2d a3       	std	Y+37, r18	; 0x25
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    9a02:	91 7e       	andi	r25, 0xE1	; 225
    9a04:	9a a3       	std	Y+34, r25	; 0x22
		conf->evctrl = ADC_EVACT_NONE_gc;
    9a06:	1c a2       	std	Y+36, r1	; 0x24
 * \arg \c ADC_INT_BANDGAP for bandgap reference.
 */
static inline void adc_enable_internal_input(struct adc_config *conf,
		uint8_t int_inp)
{
	conf->refctrl |= int_inp;
    9a08:	81 60       	ori	r24, 0x01	; 1
    9a0a:	8b a3       	std	Y+35, r24	; 0x23
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_OFF, ADC_RES_12, ADC_REF_BANDGAP);
	adc_set_clock_rate(&adc_conf, 200000UL);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
	adc_enable_internal_input(&adc_conf,ADC_INT_TEMPSENSE);

	adc_write_configuration(&ADCA, &adc_conf);
    9a0c:	be 01       	movw	r22, r28
    9a0e:	6f 5d       	subi	r22, 0xDF	; 223
    9a10:	7f 4f       	sbci	r23, 0xFF	; 255
    9a12:	80 e0       	ldi	r24, 0x00	; 0
    9a14:	92 e0       	ldi	r25, 0x02	; 2
    9a16:	0e 94 84 58 	call	0xb108	; 0xb108 <adc_write_configuration>
	if (pos >= ADCCH_POS_TEMPSENSE) {
		/* Configure for internal input. */
		Assert(gain == 1);
		Assert(neg == ADCCH_NEG_NONE);

		ch_conf->ctrl = ADC_CH_INPUTMODE_INTERNAL_gc;
    9a1a:	18 a6       	std	Y+40, r1	; 0x28
		ch_conf->muxctrl = (pos - ADCCH_POS_TEMPSENSE) <<
    9a1c:	19 a6       	std	Y+41, r1	; 0x29


	adcch_set_input(&adcch_conf, ADCCH_POS_TEMPSENSE, ADCCH_NEG_NONE, 1);
	adcch_write_configuration(&ADCA, ADC_CH0, &adcch_conf);
    9a1e:	ae 01       	movw	r20, r28
    9a20:	48 5d       	subi	r20, 0xD8	; 216
    9a22:	5f 4f       	sbci	r21, 0xFF	; 255
    9a24:	61 e0       	ldi	r22, 0x01	; 1
    9a26:	80 e0       	ldi	r24, 0x00	; 0
    9a28:	92 e0       	ldi	r25, 0x02	; 2
    9a2a:	0e 94 e9 58 	call	0xb1d2	; 0xb1d2 <adcch_write_configuration>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    9a2e:	6f e2       	ldi	r22, 0x2F	; 47
    9a30:	70 e0       	ldi	r23, 0x00	; 0
    9a32:	82 e0       	ldi	r24, 0x02	; 2
    9a34:	0e 94 44 5f 	call	0xbe88	; 0xbe88 <nvm_read_byte>
    9a38:	18 2f       	mov	r17, r24
    9a3a:	6e e2       	ldi	r22, 0x2E	; 46
    9a3c:	70 e0       	ldi	r23, 0x00	; 0
    9a3e:	82 e0       	ldi	r24, 0x02	; 2
    9a40:	0e 94 44 5f 	call	0xbe88	; 0xbe88 <nvm_read_byte>
#endif

#if defined(ADCA) || defined(ADCB)
	case ADC_CAL_TEMPSENSE:
		data = nvm_read_production_signature_row(TEMPSENSE1);
		data <<= 8;
    9a44:	51 2f       	mov	r21, r17
    9a46:	40 e0       	ldi	r20, 0x00	; 0
		data |= nvm_read_production_signature_row(TEMPSENSE0);
    9a48:	8a 01       	movw	r16, r20
    9a4a:	08 2b       	or	r16, r24

	// Get measurement for 85 degrees C (358 kelvin) from calibration data.
	uint16_t tempsense = adc_get_calibration_data(ADC_CAL_TEMPSENSE);

	delay_ms(2);
    9a4c:	8c de       	rcall	.-744    	; 0x9766 <__portable_avr_delay_cycles.constprop.5>

	adc_enable(&ADCA);
    9a4e:	80 e0       	ldi	r24, 0x00	; 0
    9a50:	92 e0       	ldi	r25, 0x02	; 2
    9a52:	0e 94 b7 56 	call	0xad6e	; 0xad6e <adc_enable>
	adc_start_conversion(&ADCA, ADC_CH0);
    9a56:	8f de       	rcall	.-738    	; 0x9776 <adc_start_conversion.constprop.12>
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    9a58:	80 91 06 02 	lds	r24, 0x0206
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    9a5c:	98 2f       	mov	r25, r24
    9a5e:	91 70       	andi	r25, 0x01	; 1
    9a60:	80 ff       	sbrs	r24, 0
    9a62:	fa cf       	rjmp	.-12     	; 0x9a58 <thermometer_getValue+0x94>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    9a64:	90 93 06 02 	sts	0x0206, r25
	adc_wait_for_interrupt_flag(&ADCA, ADC_CH0);
	const int16_t result = adc_get_result(&ADCA, ADC_CH0);
    9a68:	e0 90 24 02 	lds	r14, 0x0224
    9a6c:	f0 90 25 02 	lds	r15, 0x0225
	adc_disable(&ADCA);
    9a70:	80 e0       	ldi	r24, 0x00	; 0
    9a72:	92 e0       	ldi	r25, 0x02	; 2
    9a74:	0e 94 ce 56 	call	0xad9c	; 0xad9c <adc_disable>

	uint32_t temperature = (uint32_t)result * 358;
    9a78:	26 e6       	ldi	r18, 0x66	; 102
    9a7a:	31 e0       	ldi	r19, 0x01	; 1
    9a7c:	d7 01       	movw	r26, r14
    9a7e:	0e 94 92 72 	call	0xe524	; 0xe524 <__usmulhisi3>
	temperature /= tempsense;
    9a82:	98 01       	movw	r18, r16
    9a84:	40 e0       	ldi	r20, 0x00	; 0
    9a86:	50 e0       	ldi	r21, 0x00	; 0
    9a88:	0e 94 64 72 	call	0xe4c8	; 0xe4c8 <__udivmodsi4>

   
	char szBUF[32];
	sprintf_P(szBUF,PSTR("temperature: %d\r\n"),temperature);
    9a8c:	5f 93       	push	r21
    9a8e:	4f 93       	push	r20
    9a90:	3f 93       	push	r19
    9a92:	2f 93       	push	r18
    9a94:	83 e4       	ldi	r24, 0x43	; 67
    9a96:	9e e0       	ldi	r25, 0x0E	; 14
    9a98:	9f 93       	push	r25
    9a9a:	8f 93       	push	r24
    9a9c:	8e 01       	movw	r16, r28
    9a9e:	0f 5f       	subi	r16, 0xFF	; 255
    9aa0:	1f 4f       	sbci	r17, 0xFF	; 255
    9aa2:	1f 93       	push	r17
    9aa4:	0f 93       	push	r16
    9aa6:	2c a7       	std	Y+44, r18	; 0x2c
    9aa8:	3d a7       	std	Y+45, r19	; 0x2d
    9aaa:	0e 94 b5 74 	call	0xe96a	; 0xe96a <sprintf_P>
	debug_string(NORMAL,szBUF,RAM_STRING);
    9aae:	40 e0       	ldi	r20, 0x00	; 0
    9ab0:	b8 01       	movw	r22, r16
    9ab2:	81 e0       	ldi	r24, 0x01	; 1
    9ab4:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
	
	return temperature;
    9ab8:	2c a5       	ldd	r18, Y+44	; 0x2c
    9aba:	82 2f       	mov	r24, r18
    9abc:	cd bf       	out	0x3d, r28	; 61
    9abe:	de bf       	out	0x3e, r29	; 62
    9ac0:	3d a5       	ldd	r19, Y+45	; 0x2d
    9ac2:	93 2f       	mov	r25, r19
    9ac4:	ad 96       	adiw	r28, 0x2d	; 45
    9ac6:	cd bf       	out	0x3d, r28	; 61
    9ac8:	de bf       	out	0x3e, r29	; 62
    9aca:	df 91       	pop	r29
    9acc:	cf 91       	pop	r28
    9ace:	1f 91       	pop	r17
    9ad0:	0f 91       	pop	r16
    9ad2:	ff 90       	pop	r15
    9ad4:	ef 90       	pop	r14
    9ad6:	08 95       	ret

00009ad8 <__portable_avr_delay_cycles>:
	sim900_put_string(PSTR("AT+FTPPUT=2,0"),true);
	sim900_put_string(szCRLF,true);
	LITTLE_DELAY;
	
	return 0;
}
    9ad8:	61 50       	subi	r22, 0x01	; 1
    9ada:	71 09       	sbc	r23, r1
    9adc:	81 09       	sbc	r24, r1
    9ade:	91 09       	sbc	r25, r1
    9ae0:	d9 f7       	brne	.-10     	; 0x9ad8 <__portable_avr_delay_cycles>
    9ae2:	08 95       	ret

00009ae4 <sim900_wait_data_on_usart>:
    9ae4:	1f 93       	push	r17
    9ae6:	cf 93       	push	r28
    9ae8:	df 93       	push	r29
    9aea:	18 2f       	mov	r17, r24
    9aec:	10 c0       	rjmp	.+32     	; 0x9b0e <sim900_wait_data_on_usart+0x2a>
    9aee:	c0 e1       	ldi	r28, 0x10	; 16
    9af0:	d7 e2       	ldi	r29, 0x27	; 39
    9af2:	90 91 38 27 	lds	r25, 0x2738
    9af6:	80 91 39 27 	lds	r24, 0x2739
    9afa:	98 13       	cpse	r25, r24
    9afc:	12 c0       	rjmp	.+36     	; 0x9b22 <sim900_wait_data_on_usart+0x3e>
    9afe:	60 e9       	ldi	r22, 0x90	; 144
    9b00:	71 e0       	ldi	r23, 0x01	; 1
    9b02:	80 e0       	ldi	r24, 0x00	; 0
    9b04:	90 e0       	ldi	r25, 0x00	; 0
    9b06:	e8 df       	rcall	.-48     	; 0x9ad8 <__portable_avr_delay_cycles>
    9b08:	21 97       	sbiw	r28, 0x01	; 1
    9b0a:	99 f7       	brne	.-26     	; 0x9af2 <sim900_wait_data_on_usart+0xe>
    9b0c:	11 50       	subi	r17, 0x01	; 1
    9b0e:	11 11       	cpse	r17, r1
    9b10:	ee cf       	rjmp	.-36     	; 0x9aee <sim900_wait_data_on_usart+0xa>
    9b12:	41 e0       	ldi	r20, 0x01	; 1
    9b14:	6f e8       	ldi	r22, 0x8F	; 143
    9b16:	74 e1       	ldi	r23, 0x14	; 20
    9b18:	83 e0       	ldi	r24, 0x03	; 3
    9b1a:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    9b1e:	80 e0       	ldi	r24, 0x00	; 0
    9b20:	01 c0       	rjmp	.+2      	; 0x9b24 <sim900_wait_data_on_usart+0x40>
    9b22:	8f ef       	ldi	r24, 0xFF	; 255
    9b24:	df 91       	pop	r29
    9b26:	cf 91       	pop	r28
    9b28:	1f 91       	pop	r17
    9b2a:	08 95       	ret

00009b2c <sim900_power_toggle>:
    9b2c:	1f 93       	push	r17
    9b2e:	cf 93       	push	r28
    9b30:	df 93       	push	r29
    9b32:	c0 ea       	ldi	r28, 0xA0	; 160
    9b34:	d6 e0       	ldi	r29, 0x06	; 6
    9b36:	18 e0       	ldi	r17, 0x08	; 8
    9b38:	1d 83       	std	Y+5, r17	; 0x05
    9b3a:	60 e0       	ldi	r22, 0x00	; 0
    9b3c:	7e e3       	ldi	r23, 0x3E	; 62
    9b3e:	89 e4       	ldi	r24, 0x49	; 73
    9b40:	90 e0       	ldi	r25, 0x00	; 0
    9b42:	ca df       	rcall	.-108    	; 0x9ad8 <__portable_avr_delay_cycles>
    9b44:	1e 83       	std	Y+6, r17	; 0x06
    9b46:	60 e8       	ldi	r22, 0x80	; 128
    9b48:	76 e9       	ldi	r23, 0x96	; 150
    9b4a:	88 e9       	ldi	r24, 0x98	; 152
    9b4c:	90 e0       	ldi	r25, 0x00	; 0
    9b4e:	df 91       	pop	r29
    9b50:	cf 91       	pop	r28
    9b52:	1f 91       	pop	r17
    9b54:	c1 cf       	rjmp	.-126    	; 0x9ad8 <__portable_avr_delay_cycles>

00009b56 <statusled_blink.constprop.7>:
    9b56:	1f 93       	push	r17
    9b58:	cf 93       	push	r28
    9b5a:	df 93       	push	r29
    9b5c:	c0 e6       	ldi	r28, 0x60	; 96
    9b5e:	d6 e0       	ldi	r29, 0x06	; 6
    9b60:	11 e0       	ldi	r17, 0x01	; 1
    9b62:	1d 83       	std	Y+5, r17	; 0x05
    9b64:	60 e8       	ldi	r22, 0x80	; 128
    9b66:	7a e1       	ldi	r23, 0x1A	; 26
    9b68:	86 e0       	ldi	r24, 0x06	; 6
    9b6a:	90 e0       	ldi	r25, 0x00	; 0
    9b6c:	b5 df       	rcall	.-150    	; 0x9ad8 <__portable_avr_delay_cycles>
    9b6e:	1e 83       	std	Y+6, r17	; 0x06
    9b70:	60 e4       	ldi	r22, 0x40	; 64
    9b72:	7d e0       	ldi	r23, 0x0D	; 13
    9b74:	83 e0       	ldi	r24, 0x03	; 3
    9b76:	90 e0       	ldi	r25, 0x00	; 0
    9b78:	af df       	rcall	.-162    	; 0x9ad8 <__portable_avr_delay_cycles>
    9b7a:	60 e4       	ldi	r22, 0x40	; 64
    9b7c:	7d e0       	ldi	r23, 0x0D	; 13
    9b7e:	83 e0       	ldi	r24, 0x03	; 3
    9b80:	90 e0       	ldi	r25, 0x00	; 0
    9b82:	aa df       	rcall	.-172    	; 0x9ad8 <__portable_avr_delay_cycles>
    9b84:	1d 83       	std	Y+5, r17	; 0x05
    9b86:	df 91       	pop	r29
    9b88:	cf 91       	pop	r28
    9b8a:	1f 91       	pop	r17
    9b8c:	08 95       	ret

00009b8e <sim900_read_string>:
    9b8e:	cf 92       	push	r12
    9b90:	df 92       	push	r13
    9b92:	ef 92       	push	r14
    9b94:	ff 92       	push	r15
    9b96:	0f 93       	push	r16
    9b98:	1f 93       	push	r17
    9b9a:	cf 93       	push	r28
    9b9c:	df 93       	push	r29
    9b9e:	8c 01       	movw	r16, r24
    9ba0:	eb 01       	movw	r28, r22
    9ba2:	c8 80       	ld	r12, Y
    9ba4:	10 92 39 27 	sts	0x2739, r1
    9ba8:	10 92 38 27 	sts	0x2738, r1
    9bac:	10 92 3b 27 	sts	0x273B, r1
    9bb0:	10 92 3a 27 	sts	0x273A, r1
    9bb4:	8a e0       	ldi	r24, 0x0A	; 10
    9bb6:	96 df       	rcall	.-212    	; 0x9ae4 <sim900_wait_data_on_usart>
    9bb8:	81 11       	cpse	r24, r1
    9bba:	09 c0       	rjmp	.+18     	; 0x9bce <sim900_read_string+0x40>
    9bbc:	41 e0       	ldi	r20, 0x01	; 1
    9bbe:	6b eb       	ldi	r22, 0xBB	; 187
    9bc0:	74 e1       	ldi	r23, 0x14	; 20
    9bc2:	81 e0       	ldi	r24, 0x01	; 1
    9bc4:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    9bc8:	81 e0       	ldi	r24, 0x01	; 1
    9bca:	d1 2c       	mov	r13, r1
    9bcc:	4b c0       	rjmp	.+150    	; 0x9c64 <sim900_read_string+0xd6>
    9bce:	e0 91 39 27 	lds	r30, 0x2739
    9bd2:	f0 e0       	ldi	r31, 0x00	; 0
    9bd4:	ec 5c       	subi	r30, 0xCC	; 204
    9bd6:	f8 4d       	sbci	r31, 0xD8	; 216
    9bd8:	80 85       	ldd	r24, Z+8	; 0x08
    9bda:	90 91 39 27 	lds	r25, 0x2739
    9bde:	9f 5f       	subi	r25, 0xFF	; 255
    9be0:	97 70       	andi	r25, 0x07	; 7
    9be2:	90 93 39 27 	sts	0x2739, r25
    9be6:	8d 30       	cpi	r24, 0x0D	; 13
    9be8:	51 f4       	brne	.+20     	; 0x9bfe <sim900_read_string+0x70>
    9bea:	80 91 1d 20 	lds	r24, 0x201D
    9bee:	82 30       	cpi	r24, 0x02	; 2
    9bf0:	08 f3       	brcs	.-62     	; 0x9bb4 <sim900_read_string+0x26>
    9bf2:	60 e4       	ldi	r22, 0x40	; 64
    9bf4:	80 ea       	ldi	r24, 0xA0	; 160
    9bf6:	9b e0       	ldi	r25, 0x0B	; 11
    9bf8:	0e 94 f2 68 	call	0xd1e4	; 0xd1e4 <usart_putchar>
    9bfc:	db cf       	rjmp	.-74     	; 0x9bb4 <sim900_read_string+0x26>
    9bfe:	8a 30       	cpi	r24, 0x0A	; 10
    9c00:	19 f0       	breq	.+6      	; 0x9c08 <sim900_read_string+0x7a>
    9c02:	78 01       	movw	r14, r16
    9c04:	d1 2c       	mov	r13, r1
    9c06:	2a c0       	rjmp	.+84     	; 0x9c5c <sim900_read_string+0xce>
    9c08:	80 91 1d 20 	lds	r24, 0x201D
    9c0c:	82 30       	cpi	r24, 0x02	; 2
    9c0e:	90 f2       	brcs	.-92     	; 0x9bb4 <sim900_read_string+0x26>
    9c10:	63 e2       	ldi	r22, 0x23	; 35
    9c12:	80 ea       	ldi	r24, 0xA0	; 160
    9c14:	9b e0       	ldi	r25, 0x0B	; 11
    9c16:	0e 94 f2 68 	call	0xd1e4	; 0xd1e4 <usart_putchar>
    9c1a:	cc cf       	rjmp	.-104    	; 0x9bb4 <sim900_read_string+0x26>
    9c1c:	f7 01       	movw	r30, r14
    9c1e:	81 93       	st	Z+, r24
    9c20:	7f 01       	movw	r14, r30
    9c22:	d3 94       	inc	r13
    9c24:	8a e0       	ldi	r24, 0x0A	; 10
    9c26:	5e df       	rcall	.-324    	; 0x9ae4 <sim900_wait_data_on_usart>
    9c28:	81 11       	cpse	r24, r1
    9c2a:	08 c0       	rjmp	.+16     	; 0x9c3c <sim900_read_string+0xae>
    9c2c:	41 e0       	ldi	r20, 0x01	; 1
    9c2e:	66 ef       	ldi	r22, 0xF6	; 246
    9c30:	74 e1       	ldi	r23, 0x14	; 20
    9c32:	81 e0       	ldi	r24, 0x01	; 1
    9c34:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    9c38:	81 e0       	ldi	r24, 0x01	; 1
    9c3a:	14 c0       	rjmp	.+40     	; 0x9c64 <sim900_read_string+0xd6>
    9c3c:	e0 91 39 27 	lds	r30, 0x2739
    9c40:	f0 e0       	ldi	r31, 0x00	; 0
    9c42:	ec 5c       	subi	r30, 0xCC	; 204
    9c44:	f8 4d       	sbci	r31, 0xD8	; 216
    9c46:	80 85       	ldd	r24, Z+8	; 0x08
    9c48:	90 91 39 27 	lds	r25, 0x2739
    9c4c:	9f 5f       	subi	r25, 0xFF	; 255
    9c4e:	97 70       	andi	r25, 0x07	; 7
    9c50:	90 93 39 27 	sts	0x2739, r25
    9c54:	8d 30       	cpi	r24, 0x0D	; 13
    9c56:	29 f0       	breq	.+10     	; 0x9c62 <sim900_read_string+0xd4>
    9c58:	8a 30       	cpi	r24, 0x0A	; 10
    9c5a:	19 f0       	breq	.+6      	; 0x9c62 <sim900_read_string+0xd4>
    9c5c:	dc 10       	cpse	r13, r12
    9c5e:	de cf       	rjmp	.-68     	; 0x9c1c <sim900_read_string+0x8e>
    9c60:	03 c0       	rjmp	.+6      	; 0x9c68 <sim900_read_string+0xda>
    9c62:	80 e0       	ldi	r24, 0x00	; 0
    9c64:	cd 10       	cpse	r12, r13
    9c66:	09 c0       	rjmp	.+18     	; 0x9c7a <sim900_read_string+0xec>
    9c68:	41 e0       	ldi	r20, 0x01	; 1
    9c6a:	61 e3       	ldi	r22, 0x31	; 49
    9c6c:	75 e1       	ldi	r23, 0x15	; 21
    9c6e:	81 e0       	ldi	r24, 0x01	; 1
    9c70:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    9c74:	dc 2c       	mov	r13, r12
    9c76:	da 94       	dec	r13
    9c78:	82 e0       	ldi	r24, 0x02	; 2
    9c7a:	f8 01       	movw	r30, r16
    9c7c:	ed 0d       	add	r30, r13
    9c7e:	f1 1d       	adc	r31, r1
    9c80:	10 82       	st	Z, r1
    9c82:	d8 82       	st	Y, r13
    9c84:	df 91       	pop	r29
    9c86:	cf 91       	pop	r28
    9c88:	1f 91       	pop	r17
    9c8a:	0f 91       	pop	r16
    9c8c:	ff 90       	pop	r15
    9c8e:	ef 90       	pop	r14
    9c90:	df 90       	pop	r13
    9c92:	cf 90       	pop	r12
    9c94:	08 95       	ret

00009c96 <sim900_put_string.part.0>:
    9c96:	cf 93       	push	r28
    9c98:	df 93       	push	r29
    9c9a:	ec 01       	movw	r28, r24
    9c9c:	ae 01       	movw	r20, r28
    9c9e:	66 27       	eor	r22, r22
    9ca0:	57 fd       	sbrc	r21, 7
    9ca2:	60 95       	com	r22
    9ca4:	76 2f       	mov	r23, r22
    9ca6:	21 96       	adiw	r28, 0x01	; 1
    9ca8:	6b bf       	out	0x3b, r22	; 59
    9caa:	fa 01       	movw	r30, r20
    9cac:	67 91       	elpm	r22, Z+
    9cae:	66 23       	and	r22, r22
    9cb0:	79 f0       	breq	.+30     	; 0x9cd0 <sim900_put_string.part.0+0x3a>
    9cb2:	80 91 a1 0a 	lds	r24, 0x0AA1
    9cb6:	85 ff       	sbrs	r24, 5
    9cb8:	fc cf       	rjmp	.-8      	; 0x9cb2 <sim900_put_string.part.0+0x1c>
    9cba:	60 93 a0 0a 	sts	0x0AA0, r22
    9cbe:	80 91 1d 20 	lds	r24, 0x201D
    9cc2:	82 30       	cpi	r24, 0x02	; 2
    9cc4:	58 f3       	brcs	.-42     	; 0x9c9c <sim900_put_string.part.0+0x6>
    9cc6:	80 ea       	ldi	r24, 0xA0	; 160
    9cc8:	9b e0       	ldi	r25, 0x0B	; 11
    9cca:	0e 94 f2 68 	call	0xd1e4	; 0xd1e4 <usart_putchar>
    9cce:	e6 cf       	rjmp	.-52     	; 0x9c9c <sim900_put_string.part.0+0x6>
    9cd0:	df 91       	pop	r29
    9cd2:	cf 91       	pop	r28
    9cd4:	08 95       	ret

00009cd6 <sim900_put_string>:
    9cd6:	cf 93       	push	r28
    9cd8:	df 93       	push	r29
    9cda:	61 11       	cpse	r22, r1
    9cdc:	02 c0       	rjmp	.+4      	; 0x9ce2 <sim900_put_string+0xc>
    9cde:	ec 01       	movw	r28, r24
    9ce0:	03 c0       	rjmp	.+6      	; 0x9ce8 <sim900_put_string+0x12>
    9ce2:	df 91       	pop	r29
    9ce4:	cf 91       	pop	r28
    9ce6:	d7 cf       	rjmp	.-82     	; 0x9c96 <sim900_put_string.part.0>
    9ce8:	69 91       	ld	r22, Y+
    9cea:	66 23       	and	r22, r22
    9cec:	79 f0       	breq	.+30     	; 0x9d0c <sim900_put_string+0x36>
    9cee:	80 91 a1 0a 	lds	r24, 0x0AA1
    9cf2:	85 ff       	sbrs	r24, 5
    9cf4:	fc cf       	rjmp	.-8      	; 0x9cee <sim900_put_string+0x18>
    9cf6:	60 93 a0 0a 	sts	0x0AA0, r22
    9cfa:	80 91 1d 20 	lds	r24, 0x201D
    9cfe:	82 30       	cpi	r24, 0x02	; 2
    9d00:	98 f3       	brcs	.-26     	; 0x9ce8 <sim900_put_string+0x12>
    9d02:	80 ea       	ldi	r24, 0xA0	; 160
    9d04:	9b e0       	ldi	r25, 0x0B	; 11
    9d06:	0e 94 f2 68 	call	0xd1e4	; 0xd1e4 <usart_putchar>
    9d0a:	ee cf       	rjmp	.-36     	; 0x9ce8 <sim900_put_string+0x12>
    9d0c:	df 91       	pop	r29
    9d0e:	cf 91       	pop	r28
    9d10:	08 95       	ret

00009d12 <sim900_cmd_with_read_string.constprop.4>:
    9d12:	cf 92       	push	r12
    9d14:	df 92       	push	r13
    9d16:	ef 92       	push	r14
    9d18:	ff 92       	push	r15
    9d1a:	0f 93       	push	r16
    9d1c:	1f 93       	push	r17
    9d1e:	cf 93       	push	r28
    9d20:	df 93       	push	r29
    9d22:	1f 92       	push	r1
    9d24:	cd b7       	in	r28, 0x3d	; 61
    9d26:	de b7       	in	r29, 0x3e	; 62
    9d28:	6c 01       	movw	r12, r24
    9d2a:	7b 01       	movw	r14, r22
    9d2c:	8a 01       	movw	r16, r20
    9d2e:	b3 df       	rcall	.-154    	; 0x9c96 <sim900_put_string.part.0>
    9d30:	f8 01       	movw	r30, r16
    9d32:	80 81       	ld	r24, Z
    9d34:	89 83       	std	Y+1, r24	; 0x01
    9d36:	be 01       	movw	r22, r28
    9d38:	6f 5f       	subi	r22, 0xFF	; 255
    9d3a:	7f 4f       	sbci	r23, 0xFF	; 255
    9d3c:	c7 01       	movw	r24, r14
    9d3e:	27 df       	rcall	.-434    	; 0x9b8e <sim900_read_string>
    9d40:	88 23       	and	r24, r24
    9d42:	89 f0       	breq	.+34     	; 0x9d66 <sim900_cmd_with_read_string.constprop.4+0x54>
    9d44:	68 ed       	ldi	r22, 0xD8	; 216
    9d46:	73 e1       	ldi	r23, 0x13	; 19
    9d48:	81 e0       	ldi	r24, 0x01	; 1
    9d4a:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    9d4e:	c6 01       	movw	r24, r12
    9d50:	a2 df       	rcall	.-188    	; 0x9c96 <sim900_put_string.part.0>
    9d52:	f8 01       	movw	r30, r16
    9d54:	80 81       	ld	r24, Z
    9d56:	89 83       	std	Y+1, r24	; 0x01
    9d58:	be 01       	movw	r22, r28
    9d5a:	6f 5f       	subi	r22, 0xFF	; 255
    9d5c:	7f 4f       	sbci	r23, 0xFF	; 255
    9d5e:	c7 01       	movw	r24, r14
    9d60:	16 df       	rcall	.-468    	; 0x9b8e <sim900_read_string>
    9d62:	81 11       	cpse	r24, r1
    9d64:	05 c0       	rjmp	.+10     	; 0x9d70 <sim900_cmd_with_read_string.constprop.4+0x5e>
    9d66:	89 81       	ldd	r24, Y+1	; 0x01
    9d68:	f8 01       	movw	r30, r16
    9d6a:	80 83       	st	Z, r24
    9d6c:	80 e0       	ldi	r24, 0x00	; 0
    9d6e:	0b c0       	rjmp	.+22     	; 0x9d86 <sim900_cmd_with_read_string.constprop.4+0x74>
    9d70:	68 ed       	ldi	r22, 0xD8	; 216
    9d72:	73 e1       	ldi	r23, 0x13	; 19
    9d74:	81 e0       	ldi	r24, 0x01	; 1
    9d76:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    9d7a:	6b e0       	ldi	r22, 0x0B	; 11
    9d7c:	74 e1       	ldi	r23, 0x14	; 20
    9d7e:	81 e0       	ldi	r24, 0x01	; 1
    9d80:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    9d84:	81 e0       	ldi	r24, 0x01	; 1
    9d86:	0f 90       	pop	r0
    9d88:	df 91       	pop	r29
    9d8a:	cf 91       	pop	r28
    9d8c:	1f 91       	pop	r17
    9d8e:	0f 91       	pop	r16
    9d90:	ff 90       	pop	r15
    9d92:	ef 90       	pop	r14
    9d94:	df 90       	pop	r13
    9d96:	cf 90       	pop	r12
    9d98:	08 95       	ret

00009d9a <sim900_wait_string.constprop.5>:
    9d9a:	ef 92       	push	r14
    9d9c:	ff 92       	push	r15
    9d9e:	0f 93       	push	r16
    9da0:	1f 93       	push	r17
    9da2:	cf 93       	push	r28
    9da4:	df 93       	push	r29
    9da6:	1f 92       	push	r1
    9da8:	cd b7       	in	r28, 0x3d	; 61
    9daa:	de b7       	in	r29, 0x3e	; 62
    9dac:	18 2f       	mov	r17, r24
    9dae:	10 92 39 27 	sts	0x2739, r1
    9db2:	10 92 38 27 	sts	0x2738, r1
    9db6:	10 92 3b 27 	sts	0x273B, r1
    9dba:	10 92 3a 27 	sts	0x273A, r1
    9dbe:	e8 2e       	mov	r14, r24
    9dc0:	f9 2e       	mov	r15, r25
    9dc2:	22 c0       	rjmp	.+68     	; 0x9e08 <sim900_wait_string.constprop.5+0x6e>
    9dc4:	84 e1       	ldi	r24, 0x14	; 20
    9dc6:	99 83       	std	Y+1, r25	; 0x01
    9dc8:	8d de       	rcall	.-742    	; 0x9ae4 <sim900_wait_data_on_usart>
    9dca:	99 81       	ldd	r25, Y+1	; 0x01
    9dcc:	81 11       	cpse	r24, r1
    9dce:	08 c0       	rjmp	.+16     	; 0x9de0 <sim900_wait_string.constprop.5+0x46>
    9dd0:	6c e7       	ldi	r22, 0x7C	; 124
    9dd2:	75 e1       	ldi	r23, 0x15	; 21
    9dd4:	81 e0       	ldi	r24, 0x01	; 1
    9dd6:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    9dda:	20 e0       	ldi	r18, 0x00	; 0
    9ddc:	30 e0       	ldi	r19, 0x00	; 0
    9dde:	20 c0       	rjmp	.+64     	; 0x9e20 <sim900_wait_string.constprop.5+0x86>
    9de0:	e0 91 39 27 	lds	r30, 0x2739
    9de4:	f0 e0       	ldi	r31, 0x00	; 0
    9de6:	ec 5c       	subi	r30, 0xCC	; 204
    9de8:	f8 4d       	sbci	r31, 0xD8	; 216
    9dea:	80 85       	ldd	r24, Z+8	; 0x08
    9dec:	20 91 39 27 	lds	r18, 0x2739
    9df0:	2f 5f       	subi	r18, 0xFF	; 255
    9df2:	27 70       	andi	r18, 0x07	; 7
    9df4:	20 93 39 27 	sts	0x2739, r18
    9df8:	80 13       	cpse	r24, r16
    9dfa:	04 c0       	rjmp	.+8      	; 0x9e04 <sim900_wait_string.constprop.5+0x6a>
    9dfc:	8f ef       	ldi	r24, 0xFF	; 255
    9dfe:	e8 1a       	sub	r14, r24
    9e00:	f8 0a       	sbc	r15, r24
    9e02:	02 c0       	rjmp	.+4      	; 0x9e08 <sim900_wait_string.constprop.5+0x6e>
    9e04:	e1 2e       	mov	r14, r17
    9e06:	f9 2e       	mov	r15, r25
    9e08:	a7 01       	movw	r20, r14
    9e0a:	66 27       	eor	r22, r22
    9e0c:	57 fd       	sbrc	r21, 7
    9e0e:	60 95       	com	r22
    9e10:	76 2f       	mov	r23, r22
    9e12:	6b bf       	out	0x3b, r22	; 59
    9e14:	fa 01       	movw	r30, r20
    9e16:	07 91       	elpm	r16, Z+
    9e18:	01 11       	cpse	r16, r1
    9e1a:	d4 cf       	rjmp	.-88     	; 0x9dc4 <sim900_wait_string.constprop.5+0x2a>
    9e1c:	21 2f       	mov	r18, r17
    9e1e:	39 2f       	mov	r19, r25
    9e20:	c9 01       	movw	r24, r18
    9e22:	0f 90       	pop	r0
    9e24:	df 91       	pop	r29
    9e26:	cf 91       	pop	r28
    9e28:	1f 91       	pop	r17
    9e2a:	0f 91       	pop	r16
    9e2c:	ff 90       	pop	r15
    9e2e:	ef 90       	pop	r14
    9e30:	08 95       	ret

00009e32 <sim900_wait4dictionary>:
    9e32:	4f 92       	push	r4
    9e34:	5f 92       	push	r5
    9e36:	6f 92       	push	r6
    9e38:	7f 92       	push	r7
    9e3a:	bf 92       	push	r11
    9e3c:	cf 92       	push	r12
    9e3e:	df 92       	push	r13
    9e40:	ef 92       	push	r14
    9e42:	ff 92       	push	r15
    9e44:	0f 93       	push	r16
    9e46:	1f 93       	push	r17
    9e48:	cf 93       	push	r28
    9e4a:	df 93       	push	r29
    9e4c:	cd b7       	in	r28, 0x3d	; 61
    9e4e:	de b7       	in	r29, 0x3e	; 62
    9e50:	7c 01       	movw	r14, r24
    9e52:	b6 2e       	mov	r11, r22
    9e54:	0d b7       	in	r16, 0x3d	; 61
    9e56:	1e b7       	in	r17, 0x3e	; 62
    9e58:	8d b7       	in	r24, 0x3d	; 61
    9e5a:	9e b7       	in	r25, 0x3e	; 62
    9e5c:	22 e0       	ldi	r18, 0x02	; 2
    9e5e:	62 9f       	mul	r22, r18
    9e60:	80 19       	sub	r24, r0
    9e62:	91 09       	sbc	r25, r1
    9e64:	11 24       	eor	r1, r1
    9e66:	8d bf       	out	0x3d, r24	; 61
    9e68:	9e bf       	out	0x3e, r25	; 62
    9e6a:	cd b6       	in	r12, 0x3d	; 61
    9e6c:	de b6       	in	r13, 0x3e	; 62
    9e6e:	8f ef       	ldi	r24, 0xFF	; 255
    9e70:	c8 1a       	sub	r12, r24
    9e72:	d8 0a       	sbc	r13, r24
    9e74:	10 92 39 27 	sts	0x2739, r1
    9e78:	10 92 38 27 	sts	0x2738, r1
    9e7c:	10 92 3b 27 	sts	0x273B, r1
    9e80:	10 92 3a 27 	sts	0x273A, r1
    9e84:	46 2f       	mov	r20, r22
    9e86:	14 c0       	rjmp	.+40     	; 0x9eb0 <sim900_wait4dictionary+0x7e>
    9e88:	24 2f       	mov	r18, r20
    9e8a:	30 e0       	ldi	r19, 0x00	; 0
    9e8c:	22 0f       	add	r18, r18
    9e8e:	33 1f       	adc	r19, r19
    9e90:	c7 01       	movw	r24, r14
    9e92:	82 0f       	add	r24, r18
    9e94:	93 1f       	adc	r25, r19
    9e96:	aa 27       	eor	r26, r26
    9e98:	97 fd       	sbrc	r25, 7
    9e9a:	a0 95       	com	r26
    9e9c:	ba 2f       	mov	r27, r26
    9e9e:	ab bf       	out	0x3b, r26	; 59
    9ea0:	fc 01       	movw	r30, r24
    9ea2:	87 91       	elpm	r24, Z+
    9ea4:	96 91       	elpm	r25, Z
    9ea6:	f6 01       	movw	r30, r12
    9ea8:	e2 0f       	add	r30, r18
    9eaa:	f3 1f       	adc	r31, r19
    9eac:	80 83       	st	Z, r24
    9eae:	91 83       	std	Z+1, r25	; 0x01
    9eb0:	41 50       	subi	r20, 0x01	; 1
    9eb2:	50 f7       	brcc	.-44     	; 0x9e88 <sim900_wait4dictionary+0x56>
    9eb4:	84 e1       	ldi	r24, 0x14	; 20
    9eb6:	16 de       	rcall	.-980    	; 0x9ae4 <sim900_wait_data_on_usart>
    9eb8:	81 11       	cpse	r24, r1
    9eba:	09 c0       	rjmp	.+18     	; 0x9ece <sim900_wait4dictionary+0x9c>
    9ebc:	41 e0       	ldi	r20, 0x01	; 1
    9ebe:	62 e3       	ldi	r22, 0x32	; 50
    9ec0:	74 e1       	ldi	r23, 0x14	; 20
    9ec2:	81 e0       	ldi	r24, 0x01	; 1
    9ec4:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    9ec8:	20 e0       	ldi	r18, 0x00	; 0
    9eca:	30 e0       	ldi	r19, 0x00	; 0
    9ecc:	4f c0       	rjmp	.+158    	; 0x9f6c <sim900_wait4dictionary+0x13a>
    9ece:	e0 91 39 27 	lds	r30, 0x2739
    9ed2:	f0 e0       	ldi	r31, 0x00	; 0
    9ed4:	ec 5c       	subi	r30, 0xCC	; 204
    9ed6:	f8 4d       	sbci	r31, 0xD8	; 216
    9ed8:	30 85       	ldd	r19, Z+8	; 0x08
    9eda:	80 91 39 27 	lds	r24, 0x2739
    9ede:	8f 5f       	subi	r24, 0xFF	; 255
    9ee0:	87 70       	andi	r24, 0x07	; 7
    9ee2:	80 93 39 27 	sts	0x2739, r24
    9ee6:	c7 01       	movw	r24, r14
    9ee8:	d6 01       	movw	r26, r12
    9eea:	20 e0       	ldi	r18, 0x00	; 0
    9eec:	3b c0       	rjmp	.+118    	; 0x9f64 <sim900_wait4dictionary+0x132>
    9eee:	4d 91       	ld	r20, X+
    9ef0:	5c 91       	ld	r21, X
    9ef2:	11 97       	sbiw	r26, 0x01	; 1
    9ef4:	2a 01       	movw	r4, r20
    9ef6:	66 24       	eor	r6, r6
    9ef8:	57 fc       	sbrc	r5, 7
    9efa:	60 94       	com	r6
    9efc:	76 2c       	mov	r7, r6
    9efe:	6b be       	out	0x3b, r6	; 59
    9f00:	f2 01       	movw	r30, r4
    9f02:	47 90       	elpm	r4, Z+
    9f04:	34 15       	cp	r19, r4
    9f06:	71 f0       	breq	.+28     	; 0x9f24 <sim900_wait4dictionary+0xf2>
    9f08:	ac 01       	movw	r20, r24
    9f0a:	66 27       	eor	r22, r22
    9f0c:	57 fd       	sbrc	r21, 7
    9f0e:	60 95       	com	r22
    9f10:	76 2f       	mov	r23, r22
    9f12:	6b bf       	out	0x3b, r22	; 59
    9f14:	fa 01       	movw	r30, r20
    9f16:	47 91       	elpm	r20, Z+
    9f18:	56 91       	elpm	r21, Z
    9f1a:	4c 93       	st	X, r20
    9f1c:	11 96       	adiw	r26, 0x01	; 1
    9f1e:	5c 93       	st	X, r21
    9f20:	11 97       	sbiw	r26, 0x01	; 1
    9f22:	1d c0       	rjmp	.+58     	; 0x9f5e <sim900_wait4dictionary+0x12c>
    9f24:	4f 5f       	subi	r20, 0xFF	; 255
    9f26:	5f 4f       	sbci	r21, 0xFF	; 255
    9f28:	4d 93       	st	X+, r20
    9f2a:	5c 93       	st	X, r21
    9f2c:	11 97       	sbiw	r26, 0x01	; 1
    9f2e:	66 27       	eor	r22, r22
    9f30:	57 fd       	sbrc	r21, 7
    9f32:	60 95       	com	r22
    9f34:	76 2f       	mov	r23, r22
    9f36:	6b bf       	out	0x3b, r22	; 59
    9f38:	fa 01       	movw	r30, r20
    9f3a:	47 91       	elpm	r20, Z+
    9f3c:	41 11       	cpse	r20, r1
    9f3e:	0f c0       	rjmp	.+30     	; 0x9f5e <sim900_wait4dictionary+0x12c>
    9f40:	c7 01       	movw	r24, r14
    9f42:	82 0f       	add	r24, r18
    9f44:	91 1d       	adc	r25, r1
    9f46:	82 0f       	add	r24, r18
    9f48:	91 1d       	adc	r25, r1
    9f4a:	aa 27       	eor	r26, r26
    9f4c:	97 fd       	sbrc	r25, 7
    9f4e:	a0 95       	com	r26
    9f50:	ba 2f       	mov	r27, r26
    9f52:	ab bf       	out	0x3b, r26	; 59
    9f54:	fc 01       	movw	r30, r24
    9f56:	87 91       	elpm	r24, Z+
    9f58:	96 91       	elpm	r25, Z
    9f5a:	9c 01       	movw	r18, r24
    9f5c:	07 c0       	rjmp	.+14     	; 0x9f6c <sim900_wait4dictionary+0x13a>
    9f5e:	2f 5f       	subi	r18, 0xFF	; 255
    9f60:	02 96       	adiw	r24, 0x02	; 2
    9f62:	12 96       	adiw	r26, 0x02	; 2
    9f64:	2b 15       	cp	r18, r11
    9f66:	09 f4       	brne	.+2      	; 0x9f6a <sim900_wait4dictionary+0x138>
    9f68:	a5 cf       	rjmp	.-182    	; 0x9eb4 <sim900_wait4dictionary+0x82>
    9f6a:	c1 cf       	rjmp	.-126    	; 0x9eee <sim900_wait4dictionary+0xbc>
    9f6c:	c9 01       	movw	r24, r18
    9f6e:	0d bf       	out	0x3d, r16	; 61
    9f70:	1e bf       	out	0x3e, r17	; 62
    9f72:	df 91       	pop	r29
    9f74:	cf 91       	pop	r28
    9f76:	1f 91       	pop	r17
    9f78:	0f 91       	pop	r16
    9f7a:	ff 90       	pop	r15
    9f7c:	ef 90       	pop	r14
    9f7e:	df 90       	pop	r13
    9f80:	cf 90       	pop	r12
    9f82:	bf 90       	pop	r11
    9f84:	7f 90       	pop	r7
    9f86:	6f 90       	pop	r6
    9f88:	5f 90       	pop	r5
    9f8a:	4f 90       	pop	r4
    9f8c:	08 95       	ret

00009f8e <sim900_wait_retstring>:
    9f8e:	62 e0       	ldi	r22, 0x02	; 2
    9f90:	87 eb       	ldi	r24, 0xB7	; 183
    9f92:	94 e1       	ldi	r25, 0x14	; 20
    9f94:	4e cf       	rjmp	.-356    	; 0x9e32 <sim900_wait4dictionary>

00009f96 <sim900_cmd_with_retstring.constprop.3>:
    9f96:	cf 93       	push	r28
    9f98:	df 93       	push	r29
    9f9a:	ec 01       	movw	r28, r24
    9f9c:	7c de       	rcall	.-776    	; 0x9c96 <sim900_put_string.part.0>
    9f9e:	f7 df       	rcall	.-18     	; 0x9f8e <sim900_wait_retstring>
    9fa0:	00 97       	sbiw	r24, 0x00	; 0
    9fa2:	29 f4       	brne	.+10     	; 0x9fae <sim900_cmd_with_retstring.constprop.3+0x18>
    9fa4:	ce 01       	movw	r24, r28
    9fa6:	77 de       	rcall	.-786    	; 0x9c96 <sim900_put_string.part.0>
    9fa8:	df 91       	pop	r29
    9faa:	cf 91       	pop	r28
    9fac:	f0 cf       	rjmp	.-32     	; 0x9f8e <sim900_wait_retstring>
    9fae:	df 91       	pop	r29
    9fb0:	cf 91       	pop	r28
    9fb2:	08 95       	ret

00009fb4 <sim900_power_off>:
    9fb4:	80 91 a8 06 	lds	r24, 0x06A8
    9fb8:	81 ff       	sbrs	r24, 1
    9fba:	06 c0       	rjmp	.+12     	; 0x9fc8 <sim900_power_off+0x14>
    9fbc:	65 e5       	ldi	r22, 0x55	; 85
    9fbe:	7e e0       	ldi	r23, 0x0E	; 14
    9fc0:	81 e0       	ldi	r24, 0x01	; 1
    9fc2:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    9fc6:	b2 cd       	rjmp	.-1180   	; 0x9b2c <sim900_power_toggle>
    9fc8:	68 e8       	ldi	r22, 0x88	; 136
    9fca:	7e e0       	ldi	r23, 0x0E	; 14
    9fcc:	81 e0       	ldi	r24, 0x01	; 1
    9fce:	0c 94 c8 59 	jmp	0xb390	; 0xb390 <debug_string_P>

00009fd2 <sim900_init>:
    9fd2:	8f 92       	push	r8
    9fd4:	9f 92       	push	r9
    9fd6:	af 92       	push	r10
    9fd8:	bf 92       	push	r11
    9fda:	cf 92       	push	r12
    9fdc:	df 92       	push	r13
    9fde:	ef 92       	push	r14
    9fe0:	ff 92       	push	r15
    9fe2:	0f 93       	push	r16
    9fe4:	1f 93       	push	r17
    9fe6:	cf 93       	push	r28
    9fe8:	df 93       	push	r29
    9fea:	cd b7       	in	r28, 0x3d	; 61
    9fec:	de b7       	in	r29, 0x3e	; 62
    9fee:	64 97       	sbiw	r28, 0x14	; 20
    9ff0:	cd bf       	out	0x3d, r28	; 61
    9ff2:	de bf       	out	0x3e, r29	; 62
    9ff4:	83 eb       	ldi	r24, 0xB3	; 179
    9ff6:	9e e0       	ldi	r25, 0x0E	; 14
    9ff8:	89 8b       	std	Y+17, r24	; 0x11
    9ffa:	9a 8b       	std	Y+18, r25	; 0x12
    9ffc:	bc 01       	movw	r22, r24
    9ffe:	82 e0       	ldi	r24, 0x02	; 2
    a000:	0e 94 f3 59 	call	0xb3e6	; 0xb3e6 <debug_function_in_name_print_P>
    a004:	41 e0       	ldi	r20, 0x01	; 1
    a006:	50 e0       	ldi	r21, 0x00	; 0
    a008:	60 ea       	ldi	r22, 0xA0	; 160
    a00a:	7a e0       	ldi	r23, 0x0A	; 10
    a00c:	84 e3       	ldi	r24, 0x34	; 52
    a00e:	97 e2       	ldi	r25, 0x27	; 39
    a010:	49 d5       	rcall	.+2706   	; 0xaaa4 <usart_interruptdriver_initialize>
    a012:	80 91 a3 0a 	lds	r24, 0x0AA3
    a016:	8f 7c       	andi	r24, 0xCF	; 207
    a018:	80 61       	ori	r24, 0x10	; 16
    a01a:	80 93 a3 0a 	sts	0x0AA3, r24
    a01e:	80 91 a3 0a 	lds	r24, 0x0AA3
    a022:	83 7f       	andi	r24, 0xF3	; 243
    a024:	80 93 a3 0a 	sts	0x0AA3, r24
    a028:	6f eb       	ldi	r22, 0xBF	; 191
    a02a:	7e e0       	ldi	r23, 0x0E	; 14
    a02c:	81 e0       	ldi	r24, 0x01	; 1
    a02e:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    a032:	38 e1       	ldi	r19, 0x18	; 24
    a034:	a3 2e       	mov	r10, r19
    a036:	8e 01       	movw	r16, r28
    a038:	0f 5f       	subi	r16, 0xFF	; 255
    a03a:	1f 4f       	sbci	r17, 0xFF	; 255
    a03c:	40 e1       	ldi	r20, 0x10	; 16
    a03e:	94 2e       	mov	r9, r20
    a040:	50 e1       	ldi	r21, 0x10	; 16
    a042:	85 2e       	mov	r8, r21
    a044:	80 91 a4 0a 	lds	r24, 0x0AA4
    a048:	80 61       	ori	r24, 0x10	; 16
    a04a:	80 93 a4 0a 	sts	0x0AA4, r24
    a04e:	b2 df       	rcall	.-156    	; 0x9fb4 <sim900_power_off>
    a050:	23 e0       	ldi	r18, 0x03	; 3
    a052:	c2 2e       	mov	r12, r18
    a054:	d1 2c       	mov	r13, r1
    a056:	e1 2c       	mov	r14, r1
    a058:	f1 2c       	mov	r15, r1
    a05a:	1f c0       	rjmp	.+62     	; 0xa09a <sim900_init+0xc8>
    a05c:	67 dd       	rcall	.-1330   	; 0x9b2c <sim900_power_toggle>
    a05e:	94 e0       	ldi	r25, 0x04	; 4
    a060:	b9 2e       	mov	r11, r25
    a062:	0f c0       	rjmp	.+30     	; 0xa082 <sim900_init+0xb0>
    a064:	78 dd       	rcall	.-1296   	; 0x9b56 <statusled_blink.constprop.7>
    a066:	82 ef       	ldi	r24, 0xF2	; 242
    a068:	9e e0       	ldi	r25, 0x0E	; 14
    a06a:	15 de       	rcall	.-982    	; 0x9c96 <sim900_put_string.part.0>
    a06c:	90 df       	rcall	.-224    	; 0x9f8e <sim900_wait_retstring>
    a06e:	7c 01       	movw	r14, r24
    a070:	2e e0       	ldi	r18, 0x0E	; 14
    a072:	87 3f       	cpi	r24, 0xF7	; 247
    a074:	92 07       	cpc	r25, r18
    a076:	09 f1       	breq	.+66     	; 0xa0ba <sim900_init+0xe8>
    a078:	6a ef       	ldi	r22, 0xFA	; 250
    a07a:	7e e0       	ldi	r23, 0x0E	; 14
    a07c:	81 e0       	ldi	r24, 0x01	; 1
    a07e:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    a082:	ba 94       	dec	r11
    a084:	79 f7       	brne	.-34     	; 0xa064 <sim900_init+0x92>
    a086:	87 ef       	ldi	r24, 0xF7	; 247
    a088:	e8 16       	cp	r14, r24
    a08a:	8e e0       	ldi	r24, 0x0E	; 14
    a08c:	f8 06       	cpc	r15, r24
    a08e:	a9 f0       	breq	.+42     	; 0xa0ba <sim900_init+0xe8>
    a090:	6c e2       	ldi	r22, 0x2C	; 44
    a092:	7f e0       	ldi	r23, 0x0F	; 15
    a094:	81 e0       	ldi	r24, 0x01	; 1
    a096:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    a09a:	e1 e0       	ldi	r30, 0x01	; 1
    a09c:	ce 1a       	sub	r12, r30
    a09e:	d1 08       	sbc	r13, r1
    a0a0:	e9 f6       	brne	.-70     	; 0xa05c <sim900_init+0x8a>
    a0a2:	f7 ef       	ldi	r31, 0xF7	; 247
    a0a4:	ef 16       	cp	r14, r31
    a0a6:	fe e0       	ldi	r31, 0x0E	; 14
    a0a8:	ff 06       	cpc	r15, r31
    a0aa:	39 f0       	breq	.+14     	; 0xa0ba <sim900_init+0xe8>
    a0ac:	6a e7       	ldi	r22, 0x7A	; 122
    a0ae:	7f e0       	ldi	r23, 0x0F	; 15
    a0b0:	81 e0       	ldi	r24, 0x01	; 1
    a0b2:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    a0b6:	1f ef       	ldi	r17, 0xFF	; 255
    a0b8:	2b c1       	rjmp	.+598    	; 0xa310 <sim900_init+0x33e>
    a0ba:	60 e8       	ldi	r22, 0x80	; 128
    a0bc:	74 e8       	ldi	r23, 0x84	; 132
    a0be:	8e e1       	ldi	r24, 0x1E	; 30
    a0c0:	90 e0       	ldi	r25, 0x00	; 0
    a0c2:	0a dd       	rcall	.-1516   	; 0x9ad8 <__portable_avr_delay_cycles>
    a0c4:	8a ec       	ldi	r24, 0xCA	; 202
    a0c6:	9f e0       	ldi	r25, 0x0F	; 15
    a0c8:	66 df       	rcall	.-308    	; 0x9f96 <sim900_cmd_with_retstring.constprop.3>
    a0ca:	87 5f       	subi	r24, 0xF7	; 247
    a0cc:	9e 40       	sbci	r25, 0x0E	; 14
    a0ce:	31 f0       	breq	.+12     	; 0xa0dc <sim900_init+0x10a>
    a0d0:	61 ed       	ldi	r22, 0xD1	; 209
    a0d2:	7f e0       	ldi	r23, 0x0F	; 15
    a0d4:	81 e0       	ldi	r24, 0x01	; 1
    a0d6:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    a0da:	05 c0       	rjmp	.+10     	; 0xa0e6 <sim900_init+0x114>
    a0dc:	62 e0       	ldi	r22, 0x02	; 2
    a0de:	70 e1       	ldi	r23, 0x10	; 16
    a0e0:	82 e0       	ldi	r24, 0x02	; 2
    a0e2:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    a0e6:	60 e8       	ldi	r22, 0x80	; 128
    a0e8:	74 e8       	ldi	r23, 0x84	; 132
    a0ea:	8e e1       	ldi	r24, 0x1E	; 30
    a0ec:	90 e0       	ldi	r25, 0x00	; 0
    a0ee:	f4 dc       	rcall	.-1560   	; 0x9ad8 <__portable_avr_delay_cycles>
    a0f0:	88 e2       	ldi	r24, 0x28	; 40
    a0f2:	90 e1       	ldi	r25, 0x10	; 16
    a0f4:	50 df       	rcall	.-352    	; 0x9f96 <sim900_cmd_with_retstring.constprop.3>
    a0f6:	87 5f       	subi	r24, 0xF7	; 247
    a0f8:	9e 40       	sbci	r25, 0x0E	; 14
    a0fa:	31 f0       	breq	.+12     	; 0xa108 <sim900_init+0x136>
    a0fc:	64 e3       	ldi	r22, 0x34	; 52
    a0fe:	70 e1       	ldi	r23, 0x10	; 16
    a100:	81 e0       	ldi	r24, 0x01	; 1
    a102:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    a106:	05 c0       	rjmp	.+10     	; 0xa112 <sim900_init+0x140>
    a108:	68 e6       	ldi	r22, 0x68	; 104
    a10a:	70 e1       	ldi	r23, 0x10	; 16
    a10c:	82 e0       	ldi	r24, 0x02	; 2
    a10e:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    a112:	60 e8       	ldi	r22, 0x80	; 128
    a114:	74 e8       	ldi	r23, 0x84	; 132
    a116:	8e e1       	ldi	r24, 0x1E	; 30
    a118:	90 e0       	ldi	r25, 0x00	; 0
    a11a:	de dc       	rcall	.-1604   	; 0x9ad8 <__portable_avr_delay_cycles>
    a11c:	83 e9       	ldi	r24, 0x93	; 147
    a11e:	90 e1       	ldi	r25, 0x10	; 16
    a120:	3a df       	rcall	.-396    	; 0x9f96 <sim900_cmd_with_retstring.constprop.3>
    a122:	7c 01       	movw	r14, r24
    a124:	fe e0       	ldi	r31, 0x0E	; 14
    a126:	87 3f       	cpi	r24, 0xF7	; 247
    a128:	9f 07       	cpc	r25, r31
    a12a:	29 f0       	breq	.+10     	; 0xa136 <sim900_init+0x164>
    a12c:	6e e9       	ldi	r22, 0x9E	; 158
    a12e:	70 e1       	ldi	r23, 0x10	; 16
    a130:	81 e0       	ldi	r24, 0x01	; 1
    a132:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    a136:	ac 8a       	std	Y+20, r10	; 0x14
    a138:	60 e8       	ldi	r22, 0x80	; 128
    a13a:	74 e8       	ldi	r23, 0x84	; 132
    a13c:	8e e1       	ldi	r24, 0x1E	; 30
    a13e:	90 e0       	ldi	r25, 0x00	; 0
    a140:	cb dc       	rcall	.-1642   	; 0x9ad8 <__portable_avr_delay_cycles>
    a142:	ae 01       	movw	r20, r28
    a144:	4c 5e       	subi	r20, 0xEC	; 236
    a146:	5f 4f       	sbci	r21, 0xFF	; 255
    a148:	66 e4       	ldi	r22, 0x46	; 70
    a14a:	77 e2       	ldi	r23, 0x27	; 39
    a14c:	81 ed       	ldi	r24, 0xD1	; 209
    a14e:	90 e1       	ldi	r25, 0x10	; 16
    a150:	e0 dd       	rcall	.-1088   	; 0x9d12 <sim900_cmd_with_read_string.constprop.4>
    a152:	1d df       	rcall	.-454    	; 0x9f8e <sim900_wait_retstring>
    a154:	6a ed       	ldi	r22, 0xDA	; 218
    a156:	70 e1       	ldi	r23, 0x10	; 16
    a158:	81 e0       	ldi	r24, 0x01	; 1
    a15a:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    a15e:	40 e0       	ldi	r20, 0x00	; 0
    a160:	66 e4       	ldi	r22, 0x46	; 70
    a162:	77 e2       	ldi	r23, 0x27	; 39
    a164:	81 e0       	ldi	r24, 0x01	; 1
    a166:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    a16a:	69 e1       	ldi	r22, 0x19	; 25
    a16c:	70 e2       	ldi	r23, 0x20	; 32
    a16e:	81 e0       	ldi	r24, 0x01	; 1
    a170:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    a174:	27 ef       	ldi	r18, 0xF7	; 247
    a176:	e2 16       	cp	r14, r18
    a178:	2e e0       	ldi	r18, 0x0E	; 14
    a17a:	f2 06       	cpc	r15, r18
    a17c:	31 f0       	breq	.+12     	; 0xa18a <sim900_init+0x1b8>
    a17e:	6a ee       	ldi	r22, 0xEA	; 234
    a180:	70 e1       	ldi	r23, 0x10	; 16
    a182:	81 e0       	ldi	r24, 0x01	; 1
    a184:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    a188:	05 c0       	rjmp	.+10     	; 0xa194 <sim900_init+0x1c2>
    a18a:	6b e0       	ldi	r22, 0x0B	; 11
    a18c:	71 e1       	ldi	r23, 0x11	; 17
    a18e:	81 e0       	ldi	r24, 0x01	; 1
    a190:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    a194:	60 e8       	ldi	r22, 0x80	; 128
    a196:	74 e8       	ldi	r23, 0x84	; 132
    a198:	8e e1       	ldi	r24, 0x1E	; 30
    a19a:	90 e0       	ldi	r25, 0x00	; 0
    a19c:	9d dc       	rcall	.-1734   	; 0x9ad8 <__portable_avr_delay_cycles>
    a19e:	89 e2       	ldi	r24, 0x29	; 41
    a1a0:	91 e1       	ldi	r25, 0x11	; 17
    a1a2:	79 dd       	rcall	.-1294   	; 0x9c96 <sim900_put_string.part.0>
    a1a4:	f4 de       	rcall	.-536    	; 0x9f8e <sim900_wait_retstring>
    a1a6:	87 5f       	subi	r24, 0xF7	; 247
    a1a8:	9e 40       	sbci	r25, 0x0E	; 14
    a1aa:	39 f0       	breq	.+14     	; 0xa1ba <sim900_init+0x1e8>
    a1ac:	65 e3       	ldi	r22, 0x35	; 53
    a1ae:	71 e1       	ldi	r23, 0x11	; 17
    a1b0:	81 e0       	ldi	r24, 0x01	; 1
    a1b2:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    a1b6:	11 e0       	ldi	r17, 0x01	; 1
    a1b8:	ab c0       	rjmp	.+342    	; 0xa310 <sim900_init+0x33e>
    a1ba:	60 e8       	ldi	r22, 0x80	; 128
    a1bc:	74 e8       	ldi	r23, 0x84	; 132
    a1be:	8e e1       	ldi	r24, 0x1E	; 30
    a1c0:	90 e0       	ldi	r25, 0x00	; 0
    a1c2:	8a dc       	rcall	.-1772   	; 0x9ad8 <__portable_avr_delay_cycles>
    a1c4:	88 e5       	ldi	r24, 0x58	; 88
    a1c6:	91 e1       	ldi	r25, 0x11	; 17
    a1c8:	66 dd       	rcall	.-1332   	; 0x9c96 <sim900_put_string.part.0>
    a1ca:	69 e0       	ldi	r22, 0x09	; 9
    a1cc:	83 e6       	ldi	r24, 0x63	; 99
    a1ce:	91 e1       	ldi	r25, 0x11	; 17
    a1d0:	30 de       	rcall	.-928    	; 0x9e32 <sim900_wait4dictionary>
    a1d2:	f1 e1       	ldi	r31, 0x11	; 17
    a1d4:	85 37       	cpi	r24, 0x75	; 117
    a1d6:	9f 07       	cpc	r25, r31
    a1d8:	09 f0       	breq	.+2      	; 0xa1dc <sim900_init+0x20a>
    a1da:	3b c0       	rjmp	.+118    	; 0xa252 <sim900_init+0x280>
    a1dc:	6d e7       	ldi	r22, 0x7D	; 125
    a1de:	71 e1       	ldi	r23, 0x11	; 17
    a1e0:	81 e0       	ldi	r24, 0x01	; 1
    a1e2:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    a1e6:	68 e0       	ldi	r22, 0x08	; 8
    a1e8:	c8 01       	movw	r24, r16
    a1ea:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <cfg_get_sim_pin>
    a1ee:	89 81       	ldd	r24, Y+1	; 0x01
    a1f0:	81 11       	cpse	r24, r1
    a1f2:	07 c0       	rjmp	.+14     	; 0xa202 <sim900_init+0x230>
    a1f4:	6b ea       	ldi	r22, 0xAB	; 171
    a1f6:	71 e1       	ldi	r23, 0x11	; 17
    a1f8:	81 e0       	ldi	r24, 0x01	; 1
    a1fa:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    a1fe:	13 e0       	ldi	r17, 0x03	; 3
    a200:	87 c0       	rjmp	.+270    	; 0xa310 <sim900_init+0x33e>
    a202:	64 ef       	ldi	r22, 0xF4	; 244
    a204:	71 e1       	ldi	r23, 0x11	; 17
    a206:	81 e0       	ldi	r24, 0x01	; 1
    a208:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    a20c:	40 e0       	ldi	r20, 0x00	; 0
    a20e:	b8 01       	movw	r22, r16
    a210:	81 e0       	ldi	r24, 0x01	; 1
    a212:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    a216:	69 e1       	ldi	r22, 0x19	; 25
    a218:	70 e2       	ldi	r23, 0x20	; 32
    a21a:	81 e0       	ldi	r24, 0x01	; 1
    a21c:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    a220:	60 e8       	ldi	r22, 0x80	; 128
    a222:	74 e8       	ldi	r23, 0x84	; 132
    a224:	8e e1       	ldi	r24, 0x1E	; 30
    a226:	90 e0       	ldi	r25, 0x00	; 0
    a228:	57 dc       	rcall	.-1874   	; 0x9ad8 <__portable_avr_delay_cycles>
    a22a:	88 e3       	ldi	r24, 0x38	; 56
    a22c:	92 e1       	ldi	r25, 0x12	; 18
    a22e:	33 dd       	rcall	.-1434   	; 0x9c96 <sim900_put_string.part.0>
    a230:	60 e0       	ldi	r22, 0x00	; 0
    a232:	c8 01       	movw	r24, r16
    a234:	50 dd       	rcall	.-1376   	; 0x9cd6 <sim900_put_string>
    a236:	89 e1       	ldi	r24, 0x19	; 25
    a238:	90 e2       	ldi	r25, 0x20	; 32
    a23a:	2d dd       	rcall	.-1446   	; 0x9c96 <sim900_put_string.part.0>
    a23c:	a8 de       	rcall	.-688    	; 0x9f8e <sim900_wait_retstring>
    a23e:	87 5f       	subi	r24, 0xF7	; 247
    a240:	9e 40       	sbci	r25, 0x0E	; 14
    a242:	b1 f0       	breq	.+44     	; 0xa270 <sim900_init+0x29e>
    a244:	61 e4       	ldi	r22, 0x41	; 65
    a246:	72 e1       	ldi	r23, 0x12	; 18
    a248:	81 e0       	ldi	r24, 0x01	; 1
    a24a:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    a24e:	13 e0       	ldi	r17, 0x03	; 3
    a250:	5f c0       	rjmp	.+190    	; 0xa310 <sim900_init+0x33e>
    a252:	86 56       	subi	r24, 0x66	; 102
    a254:	92 41       	sbci	r25, 0x12	; 18
    a256:	61 f4       	brne	.+24     	; 0xa270 <sim900_init+0x29e>
    a258:	6e e6       	ldi	r22, 0x6E	; 110
    a25a:	72 e1       	ldi	r23, 0x12	; 18
    a25c:	81 e0       	ldi	r24, 0x01	; 1
    a25e:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    a262:	6c e9       	ldi	r22, 0x9C	; 156
    a264:	72 e1       	ldi	r23, 0x12	; 18
    a266:	81 e0       	ldi	r24, 0x01	; 1
    a268:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    a26c:	14 e0       	ldi	r17, 0x04	; 4
    a26e:	50 c0       	rjmp	.+160    	; 0xa310 <sim900_init+0x33e>
    a270:	1c 8a       	std	Y+20, r1	; 0x14
    a272:	49 c0       	rjmp	.+146    	; 0xa306 <sim900_init+0x334>
    a274:	70 dc       	rcall	.-1824   	; 0x9b56 <statusled_blink.constprop.7>
    a276:	60 e8       	ldi	r22, 0x80	; 128
    a278:	74 e8       	ldi	r23, 0x84	; 132
    a27a:	8e e1       	ldi	r24, 0x1E	; 30
    a27c:	90 e0       	ldi	r25, 0x00	; 0
    a27e:	2c dc       	rcall	.-1960   	; 0x9ad8 <__portable_avr_delay_cycles>
    a280:	81 ed       	ldi	r24, 0xD1	; 209
    a282:	92 e1       	ldi	r25, 0x12	; 18
    a284:	08 dd       	rcall	.-1520   	; 0x9c96 <sim900_put_string.part.0>
    a286:	8b 8a       	std	Y+19, r8	; 0x13
    a288:	f8 01       	movw	r30, r16
    a28a:	29 2d       	mov	r18, r9
    a28c:	11 92       	st	Z+, r1
    a28e:	2a 95       	dec	r18
    a290:	e9 f7       	brne	.-6      	; 0xa28c <sim900_init+0x2ba>
    a292:	be 01       	movw	r22, r28
    a294:	6d 5e       	subi	r22, 0xED	; 237
    a296:	7f 4f       	sbci	r23, 0xFF	; 255
    a298:	c8 01       	movw	r24, r16
    a29a:	79 dc       	rcall	.-1806   	; 0x9b8e <sim900_read_string>
    a29c:	45 e0       	ldi	r20, 0x05	; 5
    a29e:	50 e0       	ldi	r21, 0x00	; 0
    a2a0:	6c ed       	ldi	r22, 0xDC	; 220
    a2a2:	72 e1       	ldi	r23, 0x12	; 18
    a2a4:	c8 01       	movw	r24, r16
    a2a6:	0e 94 34 74 	call	0xe868	; 0xe868 <strncasecmp_P>
    a2aa:	89 2b       	or	r24, r25
    a2ac:	31 f0       	breq	.+12     	; 0xa2ba <sim900_init+0x2e8>
    a2ae:	67 ee       	ldi	r22, 0xE7	; 231
    a2b0:	72 e1       	ldi	r23, 0x12	; 18
    a2b2:	81 e0       	ldi	r24, 0x01	; 1
    a2b4:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    a2b8:	c5 ce       	rjmp	.-630    	; 0xa044 <sim900_init+0x72>
    a2ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    a2bc:	81 33       	cpi	r24, 0x31	; 49
    a2be:	39 f4       	brne	.+14     	; 0xa2ce <sim900_init+0x2fc>
    a2c0:	6a e2       	ldi	r22, 0x2A	; 42
    a2c2:	73 e1       	ldi	r23, 0x13	; 19
    a2c4:	81 e0       	ldi	r24, 0x01	; 1
    a2c6:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    a2ca:	10 e0       	ldi	r17, 0x00	; 0
    a2cc:	21 c0       	rjmp	.+66     	; 0xa310 <sim900_init+0x33e>
    a2ce:	65 e6       	ldi	r22, 0x65	; 101
    a2d0:	73 e1       	ldi	r23, 0x13	; 19
    a2d2:	81 e0       	ldi	r24, 0x01	; 1
    a2d4:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    a2d8:	40 e0       	ldi	r20, 0x00	; 0
    a2da:	b8 01       	movw	r22, r16
    a2dc:	81 e0       	ldi	r24, 0x01	; 1
    a2de:	0e 94 9e 59 	call	0xb33c	; 0xb33c <debug_string>
    a2e2:	64 e8       	ldi	r22, 0x84	; 132
    a2e4:	73 e1       	ldi	r23, 0x13	; 19
    a2e6:	81 e0       	ldi	r24, 0x01	; 1
    a2e8:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    a2ec:	6b ea       	ldi	r22, 0xAB	; 171
    a2ee:	73 e1       	ldi	r23, 0x13	; 19
    a2f0:	81 e0       	ldi	r24, 0x01	; 1
    a2f2:	0e 94 c8 59 	call	0xb390	; 0xb390 <debug_string_P>
    a2f6:	60 e0       	ldi	r22, 0x00	; 0
    a2f8:	7d e2       	ldi	r23, 0x2D	; 45
    a2fa:	81 e3       	ldi	r24, 0x31	; 49
    a2fc:	91 e0       	ldi	r25, 0x01	; 1
    a2fe:	ec db       	rcall	.-2088   	; 0x9ad8 <__portable_avr_delay_cycles>
    a300:	8c 89       	ldd	r24, Y+20	; 0x14
    a302:	8f 5f       	subi	r24, 0xFF	; 255
    a304:	8c 8b       	std	Y+20, r24	; 0x14
    a306:	8c 89       	ldd	r24, Y+20	; 0x14
    a308:	82 31       	cpi	r24, 0x12	; 18
    a30a:	08 f4       	brcc	.+2      	; 0xa30e <sim900_init+0x33c>
    a30c:	b3 cf       	rjmp	.-154    	; 0xa274 <sim900_init+0x2a2>
    a30e:	10 e0       	ldi	r17, 0x00	; 0
    a310:	ce 01       	movw	r24, r28
    a312:	41 96       	adiw	r24, 0x11	; 17
    a314:	0e 94 06 5a 	call	0xb40c	; 0xb40c <debug_function_out_name_print_P>
    a318:	81 2f       	mov	r24, r17
    a31a:	64 96       	adiw	r28, 0x14	; 20
    a31c:	cd bf       	out	0x3d, r28	; 61
    a31e:	de bf       	out	0x3e, r29	; 62
    a320:	df 91       	pop	r29
    a322:	cf 91       	pop	r28
    a324:	1f 91       	pop	r17
    a326:	0f 91       	pop	r16
    a328:	ff 90       	pop	r15
    a32a:	ef 90       	pop	r14
    a32c:	df 90       	pop	r13
    a32e:	cf 90       	pop	r12
    a330:	bf 90       	pop	r11
    a332:	af 90       	pop	r10
    a334:	9f 90       	pop	r9
    a336:	8f 90       	pop	r8
    a338:	08 95       	ret

0000a33a <sim900_GPRS_init>:
    a33a:	df 92       	push	r13
    a33c:	ef 92       	push	r14
    a33e:	ff 92       	push	r15
    a340:	0f 93       	push	r16
    a342:	1f 93       	push	r17
    a344:	cf 93       	push	r28
    a346:	df 93       	push	r29
    a348:	cd b7       	in	r28, 0x3d	; 61
    a34a:	de b7       	in	r29, 0x3e	; 62
    a34c:	a3 97       	sbiw	r28, 0x23	; 35
    a34e:	cd bf       	out	0x3d, r28	; 61
    a350:	de bf       	out	0x3e, r29	; 62
    a352:	8c 01       	movw	r16, r24
    a354:	d6 2e       	mov	r13, r22
    a356:	80 e2       	ldi	r24, 0x20	; 32
    a358:	8b a3       	std	Y+35, r24	; 0x23
    a35a:	86 ef       	ldi	r24, 0xF6	; 246
    a35c:	95 e1       	ldi	r25, 0x15	; 21
    a35e:	89 a3       	std	Y+33, r24	; 0x21
    a360:	9a a3       	std	Y+34, r25	; 0x22
    a362:	bc 01       	movw	r22, r24
    a364:	82 e0       	ldi	r24, 0x02	; 2
    a366:	0e 94 f3 59 	call	0xb3e6	; 0xb3e6 <debug_function_in_name_print_P>
    a36a:	60 e8       	ldi	r22, 0x80	; 128
    a36c:	74 e8       	ldi	r23, 0x84	; 132
    a36e:	8e e1       	ldi	r24, 0x1E	; 30
    a370:	90 e0       	ldi	r25, 0x00	; 0
    a372:	b2 db       	rcall	.-2204   	; 0x9ad8 <__portable_avr_delay_cycles>
    a374:	ae 01       	movw	r20, r28
    a376:	4d 5d       	subi	r20, 0xDD	; 221
    a378:	5f 4f       	sbci	r21, 0xFF	; 255
    a37a:	be 01       	movw	r22, r28
    a37c:	6f 5f       	subi	r22, 0xFF	; 255
    a37e:	7f 4f       	sbci	r23, 0xFF	; 255
    a380:	87 e0       	ldi	r24, 0x07	; 7
    a382:	96 e1       	ldi	r25, 0x16	; 22
    a384:	c6 dc       	rcall	.-1652   	; 0x9d12 <sim900_cmd_with_read_string.constprop.4>
    a386:	88 23       	and	r24, r24
    a388:	39 f0       	breq	.+14     	; 0xa398 <sim900_GPRS_init+0x5e>
    a38a:	41 e0       	ldi	r20, 0x01	; 1
    a38c:	66 e1       	ldi	r22, 0x16	; 22
    a38e:	76 e1       	ldi	r23, 0x16	; 22
    a390:	81 e0       	ldi	r24, 0x01	; 1
    a392:	d4 d7       	rcall	.+4008   	; 0xb33c <debug_string>
    a394:	11 e0       	ldi	r17, 0x01	; 1
    a396:	db c0       	rjmp	.+438    	; 0xa54e <sim900_GPRS_init+0x214>
    a398:	fa dd       	rcall	.-1036   	; 0x9f8e <sim900_wait_retstring>
    a39a:	7c 01       	movw	r14, r24
    a39c:	41 e0       	ldi	r20, 0x01	; 1
    a39e:	6c e6       	ldi	r22, 0x6C	; 108
    a3a0:	76 e1       	ldi	r23, 0x16	; 22
    a3a2:	82 e0       	ldi	r24, 0x02	; 2
    a3a4:	cb d7       	rcall	.+3990   	; 0xb33c <debug_string>
    a3a6:	40 e0       	ldi	r20, 0x00	; 0
    a3a8:	be 01       	movw	r22, r28
    a3aa:	6f 5f       	subi	r22, 0xFF	; 255
    a3ac:	7f 4f       	sbci	r23, 0xFF	; 255
    a3ae:	82 e0       	ldi	r24, 0x02	; 2
    a3b0:	c5 d7       	rcall	.+3978   	; 0xb33c <debug_string>
    a3b2:	41 e0       	ldi	r20, 0x01	; 1
    a3b4:	69 e1       	ldi	r22, 0x19	; 25
    a3b6:	70 e2       	ldi	r23, 0x20	; 32
    a3b8:	82 e0       	ldi	r24, 0x02	; 2
    a3ba:	c0 d7       	rcall	.+3968   	; 0xb33c <debug_string>
    a3bc:	27 ef       	ldi	r18, 0xF7	; 247
    a3be:	e2 16       	cp	r14, r18
    a3c0:	2e e0       	ldi	r18, 0x0E	; 14
    a3c2:	f2 06       	cpc	r15, r18
    a3c4:	39 f0       	breq	.+14     	; 0xa3d4 <sim900_GPRS_init+0x9a>
    a3c6:	41 e0       	ldi	r20, 0x01	; 1
    a3c8:	6c e8       	ldi	r22, 0x8C	; 140
    a3ca:	76 e1       	ldi	r23, 0x16	; 22
    a3cc:	81 e0       	ldi	r24, 0x01	; 1
    a3ce:	b6 d7       	rcall	.+3948   	; 0xb33c <debug_string>
    a3d0:	11 e0       	ldi	r17, 0x01	; 1
    a3d2:	bd c0       	rjmp	.+378    	; 0xa54e <sim900_GPRS_init+0x214>
    a3d4:	4b e0       	ldi	r20, 0x0B	; 11
    a3d6:	50 e0       	ldi	r21, 0x00	; 0
    a3d8:	62 ee       	ldi	r22, 0xE2	; 226
    a3da:	76 e1       	ldi	r23, 0x16	; 22
    a3dc:	ce 01       	movw	r24, r28
    a3de:	01 96       	adiw	r24, 0x01	; 1
    a3e0:	0e 94 34 74 	call	0xe868	; 0xe868 <strncasecmp_P>
    a3e4:	89 2b       	or	r24, r25
    a3e6:	81 f0       	breq	.+32     	; 0xa408 <sim900_GPRS_init+0xce>
    a3e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    a3ea:	41 e0       	ldi	r20, 0x01	; 1
    a3ec:	82 33       	cpi	r24, 0x32	; 50
    a3ee:	31 f4       	brne	.+12     	; 0xa3fc <sim900_GPRS_init+0xc2>
    a3f0:	68 ef       	ldi	r22, 0xF8	; 248
    a3f2:	76 e1       	ldi	r23, 0x16	; 22
    a3f4:	81 e0       	ldi	r24, 0x01	; 1
    a3f6:	a2 d7       	rcall	.+3908   	; 0xb33c <debug_string>
    a3f8:	12 e0       	ldi	r17, 0x02	; 2
    a3fa:	a9 c0       	rjmp	.+338    	; 0xa54e <sim900_GPRS_init+0x214>
    a3fc:	61 e4       	ldi	r22, 0x41	; 65
    a3fe:	77 e1       	ldi	r23, 0x17	; 23
    a400:	81 e0       	ldi	r24, 0x01	; 1
    a402:	9c d7       	rcall	.+3896   	; 0xb33c <debug_string>
    a404:	10 e0       	ldi	r17, 0x00	; 0
    a406:	a3 c0       	rjmp	.+326    	; 0xa54e <sim900_GPRS_init+0x214>
    a408:	60 e8       	ldi	r22, 0x80	; 128
    a40a:	74 e8       	ldi	r23, 0x84	; 132
    a40c:	8e e1       	ldi	r24, 0x1E	; 30
    a40e:	90 e0       	ldi	r25, 0x00	; 0
    a410:	63 db       	rcall	.-2362   	; 0x9ad8 <__portable_avr_delay_cycles>
    a412:	84 e8       	ldi	r24, 0x84	; 132
    a414:	97 e1       	ldi	r25, 0x17	; 23
    a416:	bf dd       	rcall	.-1154   	; 0x9f96 <sim900_cmd_with_retstring.constprop.3>
    a418:	89 2b       	or	r24, r25
    a41a:	39 f4       	brne	.+14     	; 0xa42a <sim900_GPRS_init+0xf0>
    a41c:	41 e0       	ldi	r20, 0x01	; 1
    a41e:	64 ea       	ldi	r22, 0xA4	; 164
    a420:	77 e1       	ldi	r23, 0x17	; 23
    a422:	81 e0       	ldi	r24, 0x01	; 1
    a424:	8b d7       	rcall	.+3862   	; 0xb33c <debug_string>
    a426:	11 e0       	ldi	r17, 0x01	; 1
    a428:	92 c0       	rjmp	.+292    	; 0xa54e <sim900_GPRS_init+0x214>
    a42a:	60 e8       	ldi	r22, 0x80	; 128
    a42c:	74 e8       	ldi	r23, 0x84	; 132
    a42e:	8e e1       	ldi	r24, 0x1E	; 30
    a430:	90 e0       	ldi	r25, 0x00	; 0
    a432:	52 db       	rcall	.-2396   	; 0x9ad8 <__portable_avr_delay_cycles>
    a434:	8c e0       	ldi	r24, 0x0C	; 12
    a436:	98 e1       	ldi	r25, 0x18	; 24
    a438:	2e dc       	rcall	.-1956   	; 0x9c96 <sim900_put_string.part.0>
    a43a:	6d 2d       	mov	r22, r13
    a43c:	c8 01       	movw	r24, r16
    a43e:	4b dc       	rcall	.-1898   	; 0x9cd6 <sim900_put_string>
    a440:	81 e2       	ldi	r24, 0x21	; 33
    a442:	98 e1       	ldi	r25, 0x18	; 24
    a444:	28 dc       	rcall	.-1968   	; 0x9c96 <sim900_put_string.part.0>
    a446:	a3 dd       	rcall	.-1210   	; 0x9f8e <sim900_wait_retstring>
    a448:	2e e0       	ldi	r18, 0x0E	; 14
    a44a:	87 3f       	cpi	r24, 0xF7	; 247
    a44c:	92 07       	cpc	r25, r18
    a44e:	c1 f0       	breq	.+48     	; 0xa480 <sim900_GPRS_init+0x146>
    a450:	89 2b       	or	r24, r25
    a452:	81 f4       	brne	.+32     	; 0xa474 <sim900_GPRS_init+0x13a>
    a454:	8c e0       	ldi	r24, 0x0C	; 12
    a456:	98 e1       	ldi	r25, 0x18	; 24
    a458:	1e dc       	rcall	.-1988   	; 0x9c96 <sim900_put_string.part.0>
    a45a:	6d 2d       	mov	r22, r13
    a45c:	c8 01       	movw	r24, r16
    a45e:	3b dc       	rcall	.-1930   	; 0x9cd6 <sim900_put_string>
    a460:	81 e2       	ldi	r24, 0x21	; 33
    a462:	98 e1       	ldi	r25, 0x18	; 24
    a464:	18 dc       	rcall	.-2000   	; 0x9c96 <sim900_put_string.part.0>
    a466:	93 dd       	rcall	.-1242   	; 0x9f8e <sim900_wait_retstring>
    a468:	2e e0       	ldi	r18, 0x0E	; 14
    a46a:	87 3f       	cpi	r24, 0xF7	; 247
    a46c:	92 07       	cpc	r25, r18
    a46e:	41 f0       	breq	.+16     	; 0xa480 <sim900_GPRS_init+0x146>
    a470:	89 2b       	or	r24, r25
    a472:	31 f0       	breq	.+12     	; 0xa480 <sim900_GPRS_init+0x146>
    a474:	65 e2       	ldi	r22, 0x25	; 37
    a476:	78 e1       	ldi	r23, 0x18	; 24
    a478:	81 e0       	ldi	r24, 0x01	; 1
    a47a:	8a d7       	rcall	.+3860   	; 0xb390 <debug_string_P>
    a47c:	11 e0       	ldi	r17, 0x01	; 1
    a47e:	67 c0       	rjmp	.+206    	; 0xa54e <sim900_GPRS_init+0x214>
    a480:	60 e8       	ldi	r22, 0x80	; 128
    a482:	74 e8       	ldi	r23, 0x84	; 132
    a484:	8e e1       	ldi	r24, 0x1E	; 30
    a486:	90 e0       	ldi	r25, 0x00	; 0
    a488:	27 db       	rcall	.-2482   	; 0x9ad8 <__portable_avr_delay_cycles>
    a48a:	82 e8       	ldi	r24, 0x82	; 130
    a48c:	98 e1       	ldi	r25, 0x18	; 24
    a48e:	83 dd       	rcall	.-1274   	; 0x9f96 <sim900_cmd_with_retstring.constprop.3>
    a490:	87 5f       	subi	r24, 0xF7	; 247
    a492:	9e 40       	sbci	r25, 0x0E	; 14
    a494:	31 f0       	breq	.+12     	; 0xa4a2 <sim900_GPRS_init+0x168>
    a496:	61 e9       	ldi	r22, 0x91	; 145
    a498:	78 e1       	ldi	r23, 0x18	; 24
    a49a:	81 e0       	ldi	r24, 0x01	; 1
    a49c:	79 d7       	rcall	.+3826   	; 0xb390 <debug_string_P>
    a49e:	11 e0       	ldi	r17, 0x01	; 1
    a4a0:	56 c0       	rjmp	.+172    	; 0xa54e <sim900_GPRS_init+0x214>
    a4a2:	6a e0       	ldi	r22, 0x0A	; 10
    a4a4:	f6 2e       	mov	r15, r22
    a4a6:	70 e2       	ldi	r23, 0x20	; 32
    a4a8:	e7 2e       	mov	r14, r23
    a4aa:	eb a2       	std	Y+35, r14	; 0x23
    a4ac:	60 e8       	ldi	r22, 0x80	; 128
    a4ae:	74 e8       	ldi	r23, 0x84	; 132
    a4b0:	8e e1       	ldi	r24, 0x1E	; 30
    a4b2:	90 e0       	ldi	r25, 0x00	; 0
    a4b4:	11 db       	rcall	.-2526   	; 0x9ad8 <__portable_avr_delay_cycles>
    a4b6:	ae 01       	movw	r20, r28
    a4b8:	4d 5d       	subi	r20, 0xDD	; 221
    a4ba:	5f 4f       	sbci	r21, 0xFF	; 255
    a4bc:	be 01       	movw	r22, r28
    a4be:	6f 5f       	subi	r22, 0xFF	; 255
    a4c0:	7f 4f       	sbci	r23, 0xFF	; 255
    a4c2:	88 ee       	ldi	r24, 0xE8	; 232
    a4c4:	98 e1       	ldi	r25, 0x18	; 24
    a4c6:	25 dc       	rcall	.-1974   	; 0x9d12 <sim900_cmd_with_read_string.constprop.4>
    a4c8:	88 23       	and	r24, r24
    a4ca:	31 f0       	breq	.+12     	; 0xa4d8 <sim900_GPRS_init+0x19e>
    a4cc:	67 ef       	ldi	r22, 0xF7	; 247
    a4ce:	78 e1       	ldi	r23, 0x18	; 24
    a4d0:	81 e0       	ldi	r24, 0x01	; 1
    a4d2:	5e d7       	rcall	.+3772   	; 0xb390 <debug_string_P>
    a4d4:	11 e0       	ldi	r17, 0x01	; 1
    a4d6:	3b c0       	rjmp	.+118    	; 0xa54e <sim900_GPRS_init+0x214>
    a4d8:	5a dd       	rcall	.-1356   	; 0x9f8e <sim900_wait_retstring>
    a4da:	8c 01       	movw	r16, r24
    a4dc:	6a e4       	ldi	r22, 0x4A	; 74
    a4de:	79 e1       	ldi	r23, 0x19	; 25
    a4e0:	82 e0       	ldi	r24, 0x02	; 2
    a4e2:	56 d7       	rcall	.+3756   	; 0xb390 <debug_string_P>
    a4e4:	40 e0       	ldi	r20, 0x00	; 0
    a4e6:	be 01       	movw	r22, r28
    a4e8:	6f 5f       	subi	r22, 0xFF	; 255
    a4ea:	7f 4f       	sbci	r23, 0xFF	; 255
    a4ec:	82 e0       	ldi	r24, 0x02	; 2
    a4ee:	26 d7       	rcall	.+3660   	; 0xb33c <debug_string>
    a4f0:	69 e1       	ldi	r22, 0x19	; 25
    a4f2:	70 e2       	ldi	r23, 0x20	; 32
    a4f4:	82 e0       	ldi	r24, 0x02	; 2
    a4f6:	4c d7       	rcall	.+3736   	; 0xb390 <debug_string_P>
    a4f8:	07 5f       	subi	r16, 0xF7	; 247
    a4fa:	1e 40       	sbci	r17, 0x0E	; 14
    a4fc:	31 f0       	breq	.+12     	; 0xa50a <sim900_GPRS_init+0x1d0>
    a4fe:	6a e6       	ldi	r22, 0x6A	; 106
    a500:	79 e1       	ldi	r23, 0x19	; 25
    a502:	81 e0       	ldi	r24, 0x01	; 1
    a504:	45 d7       	rcall	.+3722   	; 0xb390 <debug_string_P>
    a506:	11 e0       	ldi	r17, 0x01	; 1
    a508:	22 c0       	rjmp	.+68     	; 0xa54e <sim900_GPRS_init+0x214>
    a50a:	8b 85       	ldd	r24, Y+11	; 0x0b
    a50c:	80 33       	cpi	r24, 0x30	; 48
    a50e:	51 f4       	brne	.+20     	; 0xa524 <sim900_GPRS_init+0x1ea>
    a510:	6d ea       	ldi	r22, 0xAD	; 173
    a512:	79 e1       	ldi	r23, 0x19	; 25
    a514:	81 e0       	ldi	r24, 0x01	; 1
    a516:	3c d7       	rcall	.+3704   	; 0xb390 <debug_string_P>
    a518:	60 e0       	ldi	r22, 0x00	; 0
    a51a:	72 e1       	ldi	r23, 0x12	; 18
    a51c:	8a e7       	ldi	r24, 0x7A	; 122
    a51e:	90 e0       	ldi	r25, 0x00	; 0
    a520:	db da       	rcall	.-2634   	; 0x9ad8 <__portable_avr_delay_cycles>
    a522:	11 c0       	rjmp	.+34     	; 0xa546 <sim900_GPRS_init+0x20c>
    a524:	81 33       	cpi	r24, 0x31	; 49
    a526:	31 f4       	brne	.+12     	; 0xa534 <sim900_GPRS_init+0x1fa>
    a528:	6b e0       	ldi	r22, 0x0B	; 11
    a52a:	7a e1       	ldi	r23, 0x1A	; 26
    a52c:	82 e0       	ldi	r24, 0x02	; 2
    a52e:	30 d7       	rcall	.+3680   	; 0xb390 <debug_string_P>
    a530:	10 e0       	ldi	r17, 0x00	; 0
    a532:	0d c0       	rjmp	.+26     	; 0xa54e <sim900_GPRS_init+0x214>
    a534:	82 53       	subi	r24, 0x32	; 50
    a536:	82 30       	cpi	r24, 0x02	; 2
    a538:	30 f4       	brcc	.+12     	; 0xa546 <sim900_GPRS_init+0x20c>
    a53a:	6d e3       	ldi	r22, 0x3D	; 61
    a53c:	7a e1       	ldi	r23, 0x1A	; 26
    a53e:	81 e0       	ldi	r24, 0x01	; 1
    a540:	27 d7       	rcall	.+3662   	; 0xb390 <debug_string_P>
    a542:	11 e0       	ldi	r17, 0x01	; 1
    a544:	04 c0       	rjmp	.+8      	; 0xa54e <sim900_GPRS_init+0x214>
    a546:	fa 94       	dec	r15
    a548:	09 f0       	breq	.+2      	; 0xa54c <sim900_GPRS_init+0x212>
    a54a:	af cf       	rjmp	.-162    	; 0xa4aa <sim900_GPRS_init+0x170>
    a54c:	10 e0       	ldi	r17, 0x00	; 0
    a54e:	ce 01       	movw	r24, r28
    a550:	81 96       	adiw	r24, 0x21	; 33
    a552:	5c d7       	rcall	.+3768   	; 0xb40c <debug_function_out_name_print_P>
    a554:	81 2f       	mov	r24, r17
    a556:	a3 96       	adiw	r28, 0x23	; 35
    a558:	cd bf       	out	0x3d, r28	; 61
    a55a:	de bf       	out	0x3e, r29	; 62
    a55c:	df 91       	pop	r29
    a55e:	cf 91       	pop	r28
    a560:	1f 91       	pop	r17
    a562:	0f 91       	pop	r16
    a564:	ff 90       	pop	r15
    a566:	ef 90       	pop	r14
    a568:	df 90       	pop	r13
    a56a:	08 95       	ret

0000a56c <sim900_GPRS_simple_open>:
    a56c:	cf 93       	push	r28
    a56e:	df 93       	push	r29
    a570:	cd b7       	in	r28, 0x3d	; 61
    a572:	de b7       	in	r29, 0x3e	; 62
    a574:	c0 54       	subi	r28, 0x40	; 64
    a576:	d1 09       	sbc	r29, r1
    a578:	cd bf       	out	0x3d, r28	; 61
    a57a:	de bf       	out	0x3e, r29	; 62
    a57c:	6c e3       	ldi	r22, 0x3C	; 60
    a57e:	ce 01       	movw	r24, r28
    a580:	01 96       	adiw	r24, 0x01	; 1
    a582:	0e 94 07 1c 	call	0x380e	; 0x380e <cfg_get_gprs_apn>
    a586:	61 ed       	ldi	r22, 0xD1	; 209
    a588:	75 e1       	ldi	r23, 0x15	; 21
    a58a:	82 e0       	ldi	r24, 0x02	; 2
    a58c:	01 d7       	rcall	.+3586   	; 0xb390 <debug_string_P>
    a58e:	40 e0       	ldi	r20, 0x00	; 0
    a590:	be 01       	movw	r22, r28
    a592:	6f 5f       	subi	r22, 0xFF	; 255
    a594:	7f 4f       	sbci	r23, 0xFF	; 255
    a596:	82 e0       	ldi	r24, 0x02	; 2
    a598:	d1 d6       	rcall	.+3490   	; 0xb33c <debug_string>
    a59a:	69 e1       	ldi	r22, 0x19	; 25
    a59c:	70 e2       	ldi	r23, 0x20	; 32
    a59e:	82 e0       	ldi	r24, 0x02	; 2
    a5a0:	f7 d6       	rcall	.+3566   	; 0xb390 <debug_string_P>
    a5a2:	60 e0       	ldi	r22, 0x00	; 0
    a5a4:	ce 01       	movw	r24, r28
    a5a6:	01 96       	adiw	r24, 0x01	; 1
    a5a8:	c8 de       	rcall	.-624    	; 0xa33a <sim900_GPRS_init>
    a5aa:	c0 5c       	subi	r28, 0xC0	; 192
    a5ac:	df 4f       	sbci	r29, 0xFF	; 255
    a5ae:	cd bf       	out	0x3d, r28	; 61
    a5b0:	de bf       	out	0x3e, r29	; 62
    a5b2:	df 91       	pop	r29
    a5b4:	cf 91       	pop	r28
    a5b6:	08 95       	ret

0000a5b8 <sim900_GPRS_close>:
    a5b8:	60 e8       	ldi	r22, 0x80	; 128
    a5ba:	74 e8       	ldi	r23, 0x84	; 132
    a5bc:	8e e1       	ldi	r24, 0x1E	; 30
    a5be:	90 e0       	ldi	r25, 0x00	; 0
    a5c0:	8b da       	rcall	.-2794   	; 0x9ad8 <__portable_avr_delay_cycles>
    a5c2:	8e e8       	ldi	r24, 0x8E	; 142
    a5c4:	9a e1       	ldi	r25, 0x1A	; 26
    a5c6:	e7 dc       	rcall	.-1586   	; 0x9f96 <sim900_cmd_with_retstring.constprop.3>
    a5c8:	21 e0       	ldi	r18, 0x01	; 1
    a5ca:	87 5f       	subi	r24, 0xF7	; 247
    a5cc:	9e 40       	sbci	r25, 0x0E	; 14
    a5ce:	09 f4       	brne	.+2      	; 0xa5d2 <sim900_GPRS_close+0x1a>
    a5d0:	20 e0       	ldi	r18, 0x00	; 0
    a5d2:	82 2f       	mov	r24, r18
    a5d4:	08 95       	ret

0000a5d6 <sim900_GPRS_simple_close>:
    a5d6:	f0 cf       	rjmp	.-32     	; 0xa5b8 <sim900_GPRS_close>

0000a5d8 <sim900_http_read>:
    a5d8:	ef 92       	push	r14
    a5da:	ff 92       	push	r15
    a5dc:	0f 93       	push	r16
    a5de:	1f 93       	push	r17
    a5e0:	cf 93       	push	r28
    a5e2:	df 93       	push	r29
    a5e4:	cd b7       	in	r28, 0x3d	; 61
    a5e6:	de b7       	in	r29, 0x3e	; 62
    a5e8:	c1 54       	subi	r28, 0x41	; 65
    a5ea:	d1 09       	sbc	r29, r1
    a5ec:	cd bf       	out	0x3d, r28	; 61
    a5ee:	de bf       	out	0x3e, r29	; 62
    a5f0:	8c 01       	movw	r16, r24
    a5f2:	7b 01       	movw	r14, r22
    a5f4:	80 e4       	ldi	r24, 0x40	; 64
    a5f6:	22 96       	adiw	r28, 0x02	; 2
    a5f8:	8f af       	std	Y+63, r24	; 0x3f
    a5fa:	22 97       	sbiw	r28, 0x02	; 2
    a5fc:	60 e8       	ldi	r22, 0x80	; 128
    a5fe:	74 e8       	ldi	r23, 0x84	; 132
    a600:	8e e1       	ldi	r24, 0x1E	; 30
    a602:	90 e0       	ldi	r25, 0x00	; 0
    a604:	69 da       	rcall	.-2862   	; 0x9ad8 <__portable_avr_delay_cycles>
    a606:	8d e9       	ldi	r24, 0x9D	; 157
    a608:	9a e1       	ldi	r25, 0x1A	; 26
    a60a:	45 db       	rcall	.-2422   	; 0x9c96 <sim900_put_string.part.0>
    a60c:	8b ea       	ldi	r24, 0xAB	; 171
    a60e:	9a e1       	ldi	r25, 0x1A	; 26
    a610:	c4 db       	rcall	.-2168   	; 0x9d9a <sim900_wait_string.constprop.5>
    a612:	89 2b       	or	r24, r25
    a614:	99 f1       	breq	.+102    	; 0xa67c <sim900_http_read+0xa4>
    a616:	be 01       	movw	r22, r28
    a618:	6f 5b       	subi	r22, 0xBF	; 191
    a61a:	7f 4f       	sbci	r23, 0xFF	; 255
    a61c:	ce 01       	movw	r24, r28
    a61e:	01 96       	adiw	r24, 0x01	; 1
    a620:	b6 da       	rcall	.-2708   	; 0x9b8e <sim900_read_string>
    a622:	28 2f       	mov	r18, r24
    a624:	30 e0       	ldi	r19, 0x00	; 0
    a626:	21 30       	cpi	r18, 0x01	; 1
    a628:	31 05       	cpc	r19, r1
    a62a:	39 f4       	brne	.+14     	; 0xa63a <sim900_http_read+0x62>
    a62c:	66 eb       	ldi	r22, 0xB6	; 182
    a62e:	7a e1       	ldi	r23, 0x1A	; 26
    a630:	81 e0       	ldi	r24, 0x01	; 1
    a632:	ae d6       	rcall	.+3420   	; 0xb390 <debug_string_P>
    a634:	21 e0       	ldi	r18, 0x01	; 1
    a636:	30 e0       	ldi	r19, 0x00	; 0
    a638:	26 c0       	rjmp	.+76     	; 0xa686 <sim900_http_read+0xae>
    a63a:	22 30       	cpi	r18, 0x02	; 2
    a63c:	31 05       	cpc	r19, r1
    a63e:	39 f4       	brne	.+14     	; 0xa64e <sim900_http_read+0x76>
    a640:	67 ef       	ldi	r22, 0xF7	; 247
    a642:	7a e1       	ldi	r23, 0x1A	; 26
    a644:	81 e0       	ldi	r24, 0x01	; 1
    a646:	a4 d6       	rcall	.+3400   	; 0xb390 <debug_string_P>
    a648:	22 e0       	ldi	r18, 0x02	; 2
    a64a:	30 e0       	ldi	r19, 0x00	; 0
    a64c:	1c c0       	rjmp	.+56     	; 0xa686 <sim900_http_read+0xae>
    a64e:	b7 01       	movw	r22, r14
    a650:	c8 01       	movw	r24, r16
    a652:	9d da       	rcall	.-2758   	; 0x9b8e <sim900_read_string>
    a654:	90 e0       	ldi	r25, 0x00	; 0
    a656:	81 30       	cpi	r24, 0x01	; 1
    a658:	91 05       	cpc	r25, r1
    a65a:	39 f4       	brne	.+14     	; 0xa66a <sim900_http_read+0x92>
    a65c:	62 e3       	ldi	r22, 0x32	; 50
    a65e:	7b e1       	ldi	r23, 0x1B	; 27
    a660:	81 e0       	ldi	r24, 0x01	; 1
    a662:	96 d6       	rcall	.+3372   	; 0xb390 <debug_string_P>
    a664:	23 e0       	ldi	r18, 0x03	; 3
    a666:	30 e0       	ldi	r19, 0x00	; 0
    a668:	0e c0       	rjmp	.+28     	; 0xa686 <sim900_http_read+0xae>
    a66a:	02 97       	sbiw	r24, 0x02	; 2
    a66c:	51 f4       	brne	.+20     	; 0xa682 <sim900_http_read+0xaa>
    a66e:	63 e7       	ldi	r22, 0x73	; 115
    a670:	7b e1       	ldi	r23, 0x1B	; 27
    a672:	81 e0       	ldi	r24, 0x01	; 1
    a674:	8d d6       	rcall	.+3354   	; 0xb390 <debug_string_P>
    a676:	24 e0       	ldi	r18, 0x04	; 4
    a678:	30 e0       	ldi	r19, 0x00	; 0
    a67a:	05 c0       	rjmp	.+10     	; 0xa686 <sim900_http_read+0xae>
    a67c:	21 e0       	ldi	r18, 0x01	; 1
    a67e:	30 e0       	ldi	r19, 0x00	; 0
    a680:	02 c0       	rjmp	.+4      	; 0xa686 <sim900_http_read+0xae>
    a682:	20 e0       	ldi	r18, 0x00	; 0
    a684:	30 e0       	ldi	r19, 0x00	; 0
    a686:	c9 01       	movw	r24, r18
    a688:	cf 5b       	subi	r28, 0xBF	; 191
    a68a:	df 4f       	sbci	r29, 0xFF	; 255
    a68c:	cd bf       	out	0x3d, r28	; 61
    a68e:	de bf       	out	0x3e, r29	; 62
    a690:	df 91       	pop	r29
    a692:	cf 91       	pop	r28
    a694:	1f 91       	pop	r17
    a696:	0f 91       	pop	r16
    a698:	ff 90       	pop	r15
    a69a:	ef 90       	pop	r14
    a69c:	08 95       	ret

0000a69e <sim900_http_get>:
    a69e:	bf 92       	push	r11
    a6a0:	cf 92       	push	r12
    a6a2:	df 92       	push	r13
    a6a4:	ef 92       	push	r14
    a6a6:	ff 92       	push	r15
    a6a8:	0f 93       	push	r16
    a6aa:	1f 93       	push	r17
    a6ac:	cf 93       	push	r28
    a6ae:	df 93       	push	r29
    a6b0:	cd b7       	in	r28, 0x3d	; 61
    a6b2:	de b7       	in	r29, 0x3e	; 62
    a6b4:	61 97       	sbiw	r28, 0x11	; 17
    a6b6:	cd bf       	out	0x3d, r28	; 61
    a6b8:	de bf       	out	0x3e, r29	; 62
    a6ba:	8c 01       	movw	r16, r24
    a6bc:	b6 2e       	mov	r11, r22
    a6be:	7a 01       	movw	r14, r20
    a6c0:	69 01       	movw	r12, r18
    a6c2:	60 e8       	ldi	r22, 0x80	; 128
    a6c4:	74 e8       	ldi	r23, 0x84	; 132
    a6c6:	8e e1       	ldi	r24, 0x1E	; 30
    a6c8:	90 e0       	ldi	r25, 0x00	; 0
    a6ca:	06 da       	rcall	.-3060   	; 0x9ad8 <__portable_avr_delay_cycles>
    a6cc:	8e ea       	ldi	r24, 0xAE	; 174
    a6ce:	9b e1       	ldi	r25, 0x1B	; 27
    a6d0:	62 dc       	rcall	.-1852   	; 0x9f96 <sim900_cmd_with_retstring.constprop.3>
    a6d2:	89 2b       	or	r24, r25
    a6d4:	39 f4       	brne	.+14     	; 0xa6e4 <sim900_http_get+0x46>
    a6d6:	63 eb       	ldi	r22, 0xB3	; 179
    a6d8:	7b e1       	ldi	r23, 0x1B	; 27
    a6da:	81 e0       	ldi	r24, 0x01	; 1
    a6dc:	59 d6       	rcall	.+3250   	; 0xb390 <debug_string_P>
    a6de:	21 e0       	ldi	r18, 0x01	; 1
    a6e0:	30 e0       	ldi	r19, 0x00	; 0
    a6e2:	af c0       	rjmp	.+350    	; 0xa842 <sim900_http_get+0x1a4>
    a6e4:	60 e8       	ldi	r22, 0x80	; 128
    a6e6:	74 e8       	ldi	r23, 0x84	; 132
    a6e8:	8e e1       	ldi	r24, 0x1E	; 30
    a6ea:	90 e0       	ldi	r25, 0x00	; 0
    a6ec:	f5 d9       	rcall	.-3094   	; 0x9ad8 <__portable_avr_delay_cycles>
    a6ee:	8e ed       	ldi	r24, 0xDE	; 222
    a6f0:	9b e1       	ldi	r25, 0x1B	; 27
    a6f2:	51 dc       	rcall	.-1886   	; 0x9f96 <sim900_cmd_with_retstring.constprop.3>
    a6f4:	87 5f       	subi	r24, 0xF7	; 247
    a6f6:	9e 40       	sbci	r25, 0x0E	; 14
    a6f8:	39 f0       	breq	.+14     	; 0xa708 <sim900_http_get+0x6a>
    a6fa:	6c ee       	ldi	r22, 0xEC	; 236
    a6fc:	7b e1       	ldi	r23, 0x1B	; 27
    a6fe:	81 e0       	ldi	r24, 0x01	; 1
    a700:	47 d6       	rcall	.+3214   	; 0xb390 <debug_string_P>
    a702:	21 e0       	ldi	r18, 0x01	; 1
    a704:	30 e0       	ldi	r19, 0x00	; 0
    a706:	9d c0       	rjmp	.+314    	; 0xa842 <sim900_http_get+0x1a4>
    a708:	60 e8       	ldi	r22, 0x80	; 128
    a70a:	74 e8       	ldi	r23, 0x84	; 132
    a70c:	8e e1       	ldi	r24, 0x1E	; 30
    a70e:	90 e0       	ldi	r25, 0x00	; 0
    a710:	e3 d9       	rcall	.-3130   	; 0x9ad8 <__portable_avr_delay_cycles>
    a712:	83 e1       	ldi	r24, 0x13	; 19
    a714:	9c e1       	ldi	r25, 0x1C	; 28
    a716:	3f dc       	rcall	.-1922   	; 0x9f96 <sim900_cmd_with_retstring.constprop.3>
    a718:	87 5f       	subi	r24, 0xF7	; 247
    a71a:	9e 40       	sbci	r25, 0x0E	; 14
    a71c:	39 f0       	breq	.+14     	; 0xa72c <sim900_http_get+0x8e>
    a71e:	69 e2       	ldi	r22, 0x29	; 41
    a720:	7c e1       	ldi	r23, 0x1C	; 28
    a722:	81 e0       	ldi	r24, 0x01	; 1
    a724:	35 d6       	rcall	.+3178   	; 0xb390 <debug_string_P>
    a726:	21 e0       	ldi	r18, 0x01	; 1
    a728:	30 e0       	ldi	r19, 0x00	; 0
    a72a:	8b c0       	rjmp	.+278    	; 0xa842 <sim900_http_get+0x1a4>
    a72c:	60 e8       	ldi	r22, 0x80	; 128
    a72e:	74 e8       	ldi	r23, 0x84	; 132
    a730:	8e e1       	ldi	r24, 0x1E	; 30
    a732:	90 e0       	ldi	r25, 0x00	; 0
    a734:	d1 d9       	rcall	.-3166   	; 0x9ad8 <__portable_avr_delay_cycles>
    a736:	86 e5       	ldi	r24, 0x56	; 86
    a738:	9c e1       	ldi	r25, 0x1C	; 28
    a73a:	ad da       	rcall	.-2726   	; 0x9c96 <sim900_put_string.part.0>
    a73c:	6b 2d       	mov	r22, r11
    a73e:	c8 01       	movw	r24, r16
    a740:	ca da       	rcall	.-2668   	; 0x9cd6 <sim900_put_string>
    a742:	8a e6       	ldi	r24, 0x6A	; 106
    a744:	9c e1       	ldi	r25, 0x1C	; 28
    a746:	a7 da       	rcall	.-2738   	; 0x9c96 <sim900_put_string.part.0>
    a748:	22 dc       	rcall	.-1980   	; 0x9f8e <sim900_wait_retstring>
    a74a:	60 e8       	ldi	r22, 0x80	; 128
    a74c:	74 e8       	ldi	r23, 0x84	; 132
    a74e:	8e e1       	ldi	r24, 0x1E	; 30
    a750:	90 e0       	ldi	r25, 0x00	; 0
    a752:	c2 d9       	rcall	.-3196   	; 0x9ad8 <__portable_avr_delay_cycles>
    a754:	8e e6       	ldi	r24, 0x6E	; 110
    a756:	9c e1       	ldi	r25, 0x1C	; 28
    a758:	1e dc       	rcall	.-1988   	; 0x9f96 <sim900_cmd_with_retstring.constprop.3>
    a75a:	87 5f       	subi	r24, 0xF7	; 247
    a75c:	9e 40       	sbci	r25, 0x0E	; 14
    a75e:	39 f0       	breq	.+14     	; 0xa76e <sim900_http_get+0xd0>
    a760:	60 e8       	ldi	r22, 0x80	; 128
    a762:	7c e1       	ldi	r23, 0x1C	; 28
    a764:	81 e0       	ldi	r24, 0x01	; 1
    a766:	14 d6       	rcall	.+3112   	; 0xb390 <debug_string_P>
    a768:	21 e0       	ldi	r18, 0x01	; 1
    a76a:	30 e0       	ldi	r19, 0x00	; 0
    a76c:	6a c0       	rjmp	.+212    	; 0xa842 <sim900_http_get+0x1a4>
    a76e:	89 ea       	ldi	r24, 0xA9	; 169
    a770:	9c e1       	ldi	r25, 0x1C	; 28
    a772:	13 db       	rcall	.-2522   	; 0x9d9a <sim900_wait_string.constprop.5>
    a774:	89 2b       	or	r24, r25
    a776:	39 f4       	brne	.+14     	; 0xa786 <sim900_http_get+0xe8>
    a778:	66 eb       	ldi	r22, 0xB6	; 182
    a77a:	7c e1       	ldi	r23, 0x1C	; 28
    a77c:	81 e0       	ldi	r24, 0x01	; 1
    a77e:	08 d6       	rcall	.+3088   	; 0xb390 <debug_string_P>
    a780:	21 e0       	ldi	r18, 0x01	; 1
    a782:	30 e0       	ldi	r19, 0x00	; 0
    a784:	5e c0       	rjmp	.+188    	; 0xa842 <sim900_http_get+0x1a4>
    a786:	80 e1       	ldi	r24, 0x10	; 16
    a788:	89 8b       	std	Y+17, r24	; 0x11
    a78a:	be 01       	movw	r22, r28
    a78c:	6f 5e       	subi	r22, 0xEF	; 239
    a78e:	7f 4f       	sbci	r23, 0xFF	; 255
    a790:	ce 01       	movw	r24, r28
    a792:	01 96       	adiw	r24, 0x01	; 1
    a794:	fc d9       	rcall	.-3080   	; 0x9b8e <sim900_read_string>
    a796:	81 30       	cpi	r24, 0x01	; 1
    a798:	31 f4       	brne	.+12     	; 0xa7a6 <sim900_http_get+0x108>
    a79a:	63 ee       	ldi	r22, 0xE3	; 227
    a79c:	7c e1       	ldi	r23, 0x1C	; 28
    a79e:	f8 d5       	rcall	.+3056   	; 0xb390 <debug_string_P>
    a7a0:	21 e0       	ldi	r18, 0x01	; 1
    a7a2:	30 e0       	ldi	r19, 0x00	; 0
    a7a4:	4e c0       	rjmp	.+156    	; 0xa842 <sim900_http_get+0x1a4>
    a7a6:	63 e2       	ldi	r22, 0x23	; 35
    a7a8:	7d e1       	ldi	r23, 0x1D	; 29
    a7aa:	81 e0       	ldi	r24, 0x01	; 1
    a7ac:	f1 d5       	rcall	.+3042   	; 0xb390 <debug_string_P>
    a7ae:	40 e0       	ldi	r20, 0x00	; 0
    a7b0:	be 01       	movw	r22, r28
    a7b2:	6f 5f       	subi	r22, 0xFF	; 255
    a7b4:	7f 4f       	sbci	r23, 0xFF	; 255
    a7b6:	81 e0       	ldi	r24, 0x01	; 1
    a7b8:	c1 d5       	rcall	.+2946   	; 0xb33c <debug_string>
    a7ba:	69 e1       	ldi	r22, 0x19	; 25
    a7bc:	70 e2       	ldi	r23, 0x20	; 32
    a7be:	81 e0       	ldi	r24, 0x01	; 1
    a7c0:	e7 d5       	rcall	.+3022   	; 0xb390 <debug_string_P>
    a7c2:	8b 81       	ldd	r24, Y+3	; 0x03
    a7c4:	82 33       	cpi	r24, 0x32	; 50
    a7c6:	31 f4       	brne	.+12     	; 0xa7d4 <sim900_http_get+0x136>
    a7c8:	8c 81       	ldd	r24, Y+4	; 0x04
    a7ca:	80 33       	cpi	r24, 0x30	; 48
    a7cc:	19 f4       	brne	.+6      	; 0xa7d4 <sim900_http_get+0x136>
    a7ce:	8d 81       	ldd	r24, Y+5	; 0x05
    a7d0:	80 33       	cpi	r24, 0x30	; 48
    a7d2:	39 f0       	breq	.+14     	; 0xa7e2 <sim900_http_get+0x144>
    a7d4:	6b e4       	ldi	r22, 0x4B	; 75
    a7d6:	7d e1       	ldi	r23, 0x1D	; 29
    a7d8:	81 e0       	ldi	r24, 0x01	; 1
    a7da:	da d5       	rcall	.+2996   	; 0xb390 <debug_string_P>
    a7dc:	21 e0       	ldi	r18, 0x01	; 1
    a7de:	30 e0       	ldi	r19, 0x00	; 0
    a7e0:	30 c0       	rjmp	.+96     	; 0xa842 <sim900_http_get+0x1a4>
    a7e2:	60 e8       	ldi	r22, 0x80	; 128
    a7e4:	74 e8       	ldi	r23, 0x84	; 132
    a7e6:	8e e1       	ldi	r24, 0x1E	; 30
    a7e8:	90 e0       	ldi	r25, 0x00	; 0
    a7ea:	76 d9       	rcall	.-3348   	; 0x9ad8 <__portable_avr_delay_cycles>
    a7ec:	8b e7       	ldi	r24, 0x7B	; 123
    a7ee:	9d e1       	ldi	r25, 0x1D	; 29
    a7f0:	52 da       	rcall	.-2908   	; 0x9c96 <sim900_put_string.part.0>
    a7f2:	89 e8       	ldi	r24, 0x89	; 137
    a7f4:	9d e1       	ldi	r25, 0x1D	; 29
    a7f6:	d1 da       	rcall	.-2654   	; 0x9d9a <sim900_wait_string.constprop.5>
    a7f8:	89 2b       	or	r24, r25
    a7fa:	09 f1       	breq	.+66     	; 0xa83e <sim900_http_get+0x1a0>
    a7fc:	80 e1       	ldi	r24, 0x10	; 16
    a7fe:	89 8b       	std	Y+17, r24	; 0x11
    a800:	be 01       	movw	r22, r28
    a802:	6f 5e       	subi	r22, 0xEF	; 239
    a804:	7f 4f       	sbci	r23, 0xFF	; 255
    a806:	ce 01       	movw	r24, r28
    a808:	01 96       	adiw	r24, 0x01	; 1
    a80a:	c1 d9       	rcall	.-3198   	; 0x9b8e <sim900_read_string>
    a80c:	81 30       	cpi	r24, 0x01	; 1
    a80e:	39 f4       	brne	.+14     	; 0xa81e <sim900_http_get+0x180>
    a810:	41 e0       	ldi	r20, 0x01	; 1
    a812:	64 e9       	ldi	r22, 0x94	; 148
    a814:	7d e1       	ldi	r23, 0x1D	; 29
    a816:	92 d5       	rcall	.+2852   	; 0xb33c <debug_string>
    a818:	21 e0       	ldi	r18, 0x01	; 1
    a81a:	30 e0       	ldi	r19, 0x00	; 0
    a81c:	12 c0       	rjmp	.+36     	; 0xa842 <sim900_http_get+0x1a4>
    a81e:	82 30       	cpi	r24, 0x02	; 2
    a820:	41 f4       	brne	.+16     	; 0xa832 <sim900_http_get+0x194>
    a822:	41 e0       	ldi	r20, 0x01	; 1
    a824:	63 ed       	ldi	r22, 0xD3	; 211
    a826:	7d e1       	ldi	r23, 0x1D	; 29
    a828:	81 e0       	ldi	r24, 0x01	; 1
    a82a:	88 d5       	rcall	.+2832   	; 0xb33c <debug_string>
    a82c:	22 e0       	ldi	r18, 0x02	; 2
    a82e:	30 e0       	ldi	r19, 0x00	; 0
    a830:	08 c0       	rjmp	.+16     	; 0xa842 <sim900_http_get+0x1a4>
    a832:	b6 01       	movw	r22, r12
    a834:	c7 01       	movw	r24, r14
    a836:	ab d9       	rcall	.-3242   	; 0x9b8e <sim900_read_string>
    a838:	20 e0       	ldi	r18, 0x00	; 0
    a83a:	30 e0       	ldi	r19, 0x00	; 0
    a83c:	02 c0       	rjmp	.+4      	; 0xa842 <sim900_http_get+0x1a4>
    a83e:	21 e0       	ldi	r18, 0x01	; 1
    a840:	30 e0       	ldi	r19, 0x00	; 0
    a842:	c9 01       	movw	r24, r18
    a844:	61 96       	adiw	r28, 0x11	; 17
    a846:	cd bf       	out	0x3d, r28	; 61
    a848:	de bf       	out	0x3e, r29	; 62
    a84a:	df 91       	pop	r29
    a84c:	cf 91       	pop	r28
    a84e:	1f 91       	pop	r17
    a850:	0f 91       	pop	r16
    a852:	ff 90       	pop	r15
    a854:	ef 90       	pop	r14
    a856:	df 90       	pop	r13
    a858:	cf 90       	pop	r12
    a85a:	bf 90       	pop	r11
    a85c:	08 95       	ret

0000a85e <sim900_http_post>:
    a85e:	af 92       	push	r10
    a860:	bf 92       	push	r11
    a862:	cf 92       	push	r12
    a864:	df 92       	push	r13
    a866:	ef 92       	push	r14
    a868:	ff 92       	push	r15
    a86a:	0f 93       	push	r16
    a86c:	1f 93       	push	r17
    a86e:	cf 93       	push	r28
    a870:	df 93       	push	r29
    a872:	cd b7       	in	r28, 0x3d	; 61
    a874:	de b7       	in	r29, 0x3e	; 62
    a876:	c1 54       	subi	r28, 0x41	; 65
    a878:	d1 09       	sbc	r29, r1
    a87a:	cd bf       	out	0x3d, r28	; 61
    a87c:	de bf       	out	0x3e, r29	; 62
    a87e:	7c 01       	movw	r14, r24
    a880:	a6 2e       	mov	r10, r22
    a882:	6a 01       	movw	r12, r20
    a884:	12 2f       	mov	r17, r18
    a886:	b3 2e       	mov	r11, r19
    a888:	60 e8       	ldi	r22, 0x80	; 128
    a88a:	74 e8       	ldi	r23, 0x84	; 132
    a88c:	8e e1       	ldi	r24, 0x1E	; 30
    a88e:	90 e0       	ldi	r25, 0x00	; 0
    a890:	23 d9       	rcall	.-3514   	; 0x9ad8 <__portable_avr_delay_cycles>
    a892:	8c e0       	ldi	r24, 0x0C	; 12
    a894:	9e e1       	ldi	r25, 0x1E	; 30
    a896:	7f db       	rcall	.-2306   	; 0x9f96 <sim900_cmd_with_retstring.constprop.3>
    a898:	89 2b       	or	r24, r25
    a89a:	41 f4       	brne	.+16     	; 0xa8ac <sim900_http_post+0x4e>
    a89c:	41 e0       	ldi	r20, 0x01	; 1
    a89e:	61 e1       	ldi	r22, 0x11	; 17
    a8a0:	7e e1       	ldi	r23, 0x1E	; 30
    a8a2:	83 e0       	ldi	r24, 0x03	; 3
    a8a4:	4b d5       	rcall	.+2710   	; 0xb33c <debug_string>
    a8a6:	21 e0       	ldi	r18, 0x01	; 1
    a8a8:	30 e0       	ldi	r19, 0x00	; 0
    a8aa:	b4 c0       	rjmp	.+360    	; 0xaa14 <sim900_http_post+0x1b6>
    a8ac:	60 e8       	ldi	r22, 0x80	; 128
    a8ae:	74 e8       	ldi	r23, 0x84	; 132
    a8b0:	8e e1       	ldi	r24, 0x1E	; 30
    a8b2:	90 e0       	ldi	r25, 0x00	; 0
    a8b4:	11 d9       	rcall	.-3550   	; 0x9ad8 <__portable_avr_delay_cycles>
    a8b6:	8d e3       	ldi	r24, 0x3D	; 61
    a8b8:	9e e1       	ldi	r25, 0x1E	; 30
    a8ba:	6d db       	rcall	.-2342   	; 0x9f96 <sim900_cmd_with_retstring.constprop.3>
    a8bc:	87 5f       	subi	r24, 0xF7	; 247
    a8be:	9e 40       	sbci	r25, 0x0E	; 14
    a8c0:	09 f0       	breq	.+2      	; 0xa8c4 <sim900_http_post+0x66>
    a8c2:	78 c0       	rjmp	.+240    	; 0xa9b4 <sim900_http_post+0x156>
    a8c4:	60 e8       	ldi	r22, 0x80	; 128
    a8c6:	74 e8       	ldi	r23, 0x84	; 132
    a8c8:	8e e1       	ldi	r24, 0x1E	; 30
    a8ca:	90 e0       	ldi	r25, 0x00	; 0
    a8cc:	05 d9       	rcall	.-3574   	; 0x9ad8 <__portable_avr_delay_cycles>
    a8ce:	8b e4       	ldi	r24, 0x4B	; 75
    a8d0:	9e e1       	ldi	r25, 0x1E	; 30
    a8d2:	61 db       	rcall	.-2366   	; 0x9f96 <sim900_cmd_with_retstring.constprop.3>
    a8d4:	87 5f       	subi	r24, 0xF7	; 247
    a8d6:	9e 40       	sbci	r25, 0x0E	; 14
    a8d8:	09 f0       	breq	.+2      	; 0xa8dc <sim900_http_post+0x7e>
    a8da:	6c c0       	rjmp	.+216    	; 0xa9b4 <sim900_http_post+0x156>
    a8dc:	60 e8       	ldi	r22, 0x80	; 128
    a8de:	74 e8       	ldi	r23, 0x84	; 132
    a8e0:	8e e1       	ldi	r24, 0x1E	; 30
    a8e2:	90 e0       	ldi	r25, 0x00	; 0
    a8e4:	f9 d8       	rcall	.-3598   	; 0x9ad8 <__portable_avr_delay_cycles>
    a8e6:	81 e6       	ldi	r24, 0x61	; 97
    a8e8:	9e e1       	ldi	r25, 0x1E	; 30
    a8ea:	d5 d9       	rcall	.-3158   	; 0x9c96 <sim900_put_string.part.0>
    a8ec:	6a 2d       	mov	r22, r10
    a8ee:	c7 01       	movw	r24, r14
    a8f0:	f2 d9       	rcall	.-3100   	; 0x9cd6 <sim900_put_string>
    a8f2:	85 e7       	ldi	r24, 0x75	; 117
    a8f4:	9e e1       	ldi	r25, 0x1E	; 30
    a8f6:	cf d9       	rcall	.-3170   	; 0x9c96 <sim900_put_string.part.0>
    a8f8:	4a db       	rcall	.-2412   	; 0x9f8e <sim900_wait_retstring>
    a8fa:	60 e8       	ldi	r22, 0x80	; 128
    a8fc:	74 e8       	ldi	r23, 0x84	; 132
    a8fe:	8e e1       	ldi	r24, 0x1E	; 30
    a900:	90 e0       	ldi	r25, 0x00	; 0
    a902:	ea d8       	rcall	.-3628   	; 0x9ad8 <__portable_avr_delay_cycles>
    a904:	85 e7       	ldi	r24, 0x75	; 117
    a906:	8f 93       	push	r24
    a908:	80 e3       	ldi	r24, 0x30	; 48
    a90a:	8f 93       	push	r24
    a90c:	bf 92       	push	r11
    a90e:	1f 93       	push	r17
    a910:	29 e7       	ldi	r18, 0x79	; 121
    a912:	3e e1       	ldi	r19, 0x1E	; 30
    a914:	3f 93       	push	r19
    a916:	2f 93       	push	r18
    a918:	ee 24       	eor	r14, r14
    a91a:	e3 94       	inc	r14
    a91c:	f1 2c       	mov	r15, r1
    a91e:	ec 0e       	add	r14, r28
    a920:	fd 1e       	adc	r15, r29
    a922:	ff 92       	push	r15
    a924:	ef 92       	push	r14
    a926:	0e 94 b5 74 	call	0xe96a	; 0xe96a <sprintf_P>
    a92a:	60 e0       	ldi	r22, 0x00	; 0
    a92c:	c7 01       	movw	r24, r14
    a92e:	d3 d9       	rcall	.-3162   	; 0x9cd6 <sim900_put_string>
    a930:	8d e8       	ldi	r24, 0x8D	; 141
    a932:	9e e1       	ldi	r25, 0x1E	; 30
    a934:	32 da       	rcall	.-2972   	; 0x9d9a <sim900_wait_string.constprop.5>
    a936:	cd bf       	out	0x3d, r28	; 61
    a938:	de bf       	out	0x3e, r29	; 62
    a93a:	89 2b       	or	r24, r25
    a93c:	09 f4       	brne	.+2      	; 0xa940 <sim900_http_post+0xe2>
    a93e:	3a c0       	rjmp	.+116    	; 0xa9b4 <sim900_http_post+0x156>
    a940:	60 e8       	ldi	r22, 0x80	; 128
    a942:	74 e8       	ldi	r23, 0x84	; 132
    a944:	8e e1       	ldi	r24, 0x1E	; 30
    a946:	90 e0       	ldi	r25, 0x00	; 0
    a948:	c7 d8       	rcall	.-3698   	; 0x9ad8 <__portable_avr_delay_cycles>
    a94a:	60 2f       	mov	r22, r16
    a94c:	c6 01       	movw	r24, r12
    a94e:	c3 d9       	rcall	.-3194   	; 0x9cd6 <sim900_put_string>
    a950:	1e db       	rcall	.-2500   	; 0x9f8e <sim900_wait_retstring>
    a952:	60 e8       	ldi	r22, 0x80	; 128
    a954:	74 e8       	ldi	r23, 0x84	; 132
    a956:	8e e1       	ldi	r24, 0x1E	; 30
    a958:	90 e0       	ldi	r25, 0x00	; 0
    a95a:	be d8       	rcall	.-3716   	; 0x9ad8 <__portable_avr_delay_cycles>
    a95c:	86 e9       	ldi	r24, 0x96	; 150
    a95e:	9e e1       	ldi	r25, 0x1E	; 30
    a960:	1a db       	rcall	.-2508   	; 0x9f96 <sim900_cmd_with_retstring.constprop.3>
    a962:	87 5f       	subi	r24, 0xF7	; 247
    a964:	9e 40       	sbci	r25, 0x0E	; 14
    a966:	41 f0       	breq	.+16     	; 0xa978 <sim900_http_post+0x11a>
    a968:	41 e0       	ldi	r20, 0x01	; 1
    a96a:	68 ea       	ldi	r22, 0xA8	; 168
    a96c:	7e e1       	ldi	r23, 0x1E	; 30
    a96e:	81 e0       	ldi	r24, 0x01	; 1
    a970:	e5 d4       	rcall	.+2506   	; 0xb33c <debug_string>
    a972:	21 e0       	ldi	r18, 0x01	; 1
    a974:	30 e0       	ldi	r19, 0x00	; 0
    a976:	4e c0       	rjmp	.+156    	; 0xaa14 <sim900_http_post+0x1b6>
    a978:	82 ed       	ldi	r24, 0xD2	; 210
    a97a:	9e e1       	ldi	r25, 0x1E	; 30
    a97c:	0e da       	rcall	.-3044   	; 0x9d9a <sim900_wait_string.constprop.5>
    a97e:	89 2b       	or	r24, r25
    a980:	e1 f4       	brne	.+56     	; 0xa9ba <sim900_http_post+0x15c>
    a982:	41 e0       	ldi	r20, 0x01	; 1
    a984:	6f ed       	ldi	r22, 0xDF	; 223
    a986:	7e e1       	ldi	r23, 0x1E	; 30
    a988:	81 e0       	ldi	r24, 0x01	; 1
    a98a:	d8 d4       	rcall	.+2480   	; 0xb33c <debug_string>
    a98c:	8b e0       	ldi	r24, 0x0B	; 11
    a98e:	9f e1       	ldi	r25, 0x1F	; 31
    a990:	04 da       	rcall	.-3064   	; 0x9d9a <sim900_wait_string.constprop.5>
    a992:	89 2b       	or	r24, r25
    a994:	91 f4       	brne	.+36     	; 0xa9ba <sim900_http_post+0x15c>
    a996:	41 e0       	ldi	r20, 0x01	; 1
    a998:	68 e1       	ldi	r22, 0x18	; 24
    a99a:	7f e1       	ldi	r23, 0x1F	; 31
    a99c:	81 e0       	ldi	r24, 0x01	; 1
    a99e:	ce d4       	rcall	.+2460   	; 0xb33c <debug_string>
    a9a0:	82 e4       	ldi	r24, 0x42	; 66
    a9a2:	9f e1       	ldi	r25, 0x1F	; 31
    a9a4:	fa d9       	rcall	.-3084   	; 0x9d9a <sim900_wait_string.constprop.5>
    a9a6:	89 2b       	or	r24, r25
    a9a8:	41 f4       	brne	.+16     	; 0xa9ba <sim900_http_post+0x15c>
    a9aa:	41 e0       	ldi	r20, 0x01	; 1
    a9ac:	6f e4       	ldi	r22, 0x4F	; 79
    a9ae:	7f e1       	ldi	r23, 0x1F	; 31
    a9b0:	81 e0       	ldi	r24, 0x01	; 1
    a9b2:	c4 d4       	rcall	.+2440   	; 0xb33c <debug_string>
    a9b4:	21 e0       	ldi	r18, 0x01	; 1
    a9b6:	30 e0       	ldi	r19, 0x00	; 0
    a9b8:	2d c0       	rjmp	.+90     	; 0xaa14 <sim900_http_post+0x1b6>
    a9ba:	80 e4       	ldi	r24, 0x40	; 64
    a9bc:	22 96       	adiw	r28, 0x02	; 2
    a9be:	8f af       	std	Y+63, r24	; 0x3f
    a9c0:	22 97       	sbiw	r28, 0x02	; 2
    a9c2:	be 01       	movw	r22, r28
    a9c4:	6f 5b       	subi	r22, 0xBF	; 191
    a9c6:	7f 4f       	sbci	r23, 0xFF	; 255
    a9c8:	ce 01       	movw	r24, r28
    a9ca:	01 96       	adiw	r24, 0x01	; 1
    a9cc:	e0 d8       	rcall	.-3648   	; 0x9b8e <sim900_read_string>
    a9ce:	41 e0       	ldi	r20, 0x01	; 1
    a9d0:	6d e7       	ldi	r22, 0x7D	; 125
    a9d2:	7f e1       	ldi	r23, 0x1F	; 31
    a9d4:	81 e0       	ldi	r24, 0x01	; 1
    a9d6:	b2 d4       	rcall	.+2404   	; 0xb33c <debug_string>
    a9d8:	40 e0       	ldi	r20, 0x00	; 0
    a9da:	be 01       	movw	r22, r28
    a9dc:	6f 5f       	subi	r22, 0xFF	; 255
    a9de:	7f 4f       	sbci	r23, 0xFF	; 255
    a9e0:	81 e0       	ldi	r24, 0x01	; 1
    a9e2:	ac d4       	rcall	.+2392   	; 0xb33c <debug_string>
    a9e4:	41 e0       	ldi	r20, 0x01	; 1
    a9e6:	69 e1       	ldi	r22, 0x19	; 25
    a9e8:	70 e2       	ldi	r23, 0x20	; 32
    a9ea:	81 e0       	ldi	r24, 0x01	; 1
    a9ec:	a7 d4       	rcall	.+2382   	; 0xb33c <debug_string>
    a9ee:	8b 81       	ldd	r24, Y+3	; 0x03
    a9f0:	82 33       	cpi	r24, 0x32	; 50
    a9f2:	31 f4       	brne	.+12     	; 0xaa00 <sim900_http_post+0x1a2>
    a9f4:	8c 81       	ldd	r24, Y+4	; 0x04
    a9f6:	80 33       	cpi	r24, 0x30	; 48
    a9f8:	19 f4       	brne	.+6      	; 0xaa00 <sim900_http_post+0x1a2>
    a9fa:	8d 81       	ldd	r24, Y+5	; 0x05
    a9fc:	80 33       	cpi	r24, 0x30	; 48
    a9fe:	41 f0       	breq	.+16     	; 0xaa10 <sim900_http_post+0x1b2>
    aa00:	41 e0       	ldi	r20, 0x01	; 1
    aa02:	66 ea       	ldi	r22, 0xA6	; 166
    aa04:	7f e1       	ldi	r23, 0x1F	; 31
    aa06:	81 e0       	ldi	r24, 0x01	; 1
    aa08:	99 d4       	rcall	.+2354   	; 0xb33c <debug_string>
    aa0a:	21 e0       	ldi	r18, 0x01	; 1
    aa0c:	30 e0       	ldi	r19, 0x00	; 0
    aa0e:	02 c0       	rjmp	.+4      	; 0xaa14 <sim900_http_post+0x1b6>
    aa10:	20 e0       	ldi	r18, 0x00	; 0
    aa12:	30 e0       	ldi	r19, 0x00	; 0
    aa14:	c9 01       	movw	r24, r18
    aa16:	cf 5b       	subi	r28, 0xBF	; 191
    aa18:	df 4f       	sbci	r29, 0xFF	; 255
    aa1a:	cd bf       	out	0x3d, r28	; 61
    aa1c:	de bf       	out	0x3e, r29	; 62
    aa1e:	df 91       	pop	r29
    aa20:	cf 91       	pop	r28
    aa22:	1f 91       	pop	r17
    aa24:	0f 91       	pop	r16
    aa26:	ff 90       	pop	r15
    aa28:	ef 90       	pop	r14
    aa2a:	df 90       	pop	r13
    aa2c:	cf 90       	pop	r12
    aa2e:	bf 90       	pop	r11
    aa30:	af 90       	pop	r10
    aa32:	08 95       	ret

0000aa34 <sim900_http_close>:
    aa34:	60 e8       	ldi	r22, 0x80	; 128
    aa36:	74 e8       	ldi	r23, 0x84	; 132
    aa38:	8e e1       	ldi	r24, 0x1E	; 30
    aa3a:	90 e0       	ldi	r25, 0x00	; 0
    aa3c:	4d d8       	rcall	.-3942   	; 0x9ad8 <__portable_avr_delay_cycles>
    aa3e:	87 ed       	ldi	r24, 0xD7	; 215
    aa40:	9f e1       	ldi	r25, 0x1F	; 31
    aa42:	a9 da       	rcall	.-2734   	; 0x9f96 <sim900_cmd_with_retstring.constprop.3>
    aa44:	21 e0       	ldi	r18, 0x01	; 1
    aa46:	87 5f       	subi	r24, 0xF7	; 247
    aa48:	9e 40       	sbci	r25, 0x0E	; 14
    aa4a:	09 f4       	brne	.+2      	; 0xaa4e <sim900_http_close+0x1a>
    aa4c:	20 e0       	ldi	r18, 0x00	; 0
    aa4e:	82 2f       	mov	r24, r18
    aa50:	08 95       	ret

0000aa52 <__vector_58>:

#ifndef SIM900_USART_POLLED
ISR(USART_GPRS_RX_Vect)
{
    aa52:	1f 92       	push	r1
    aa54:	0f 92       	push	r0
    aa56:	0f b6       	in	r0, 0x3f	; 63
    aa58:	0f 92       	push	r0
    aa5a:	11 24       	eor	r1, r1
    aa5c:	0b b6       	in	r0, 0x3b	; 59
    aa5e:	0f 92       	push	r0
    aa60:	2f 93       	push	r18
    aa62:	3f 93       	push	r19
    aa64:	4f 93       	push	r20
    aa66:	5f 93       	push	r21
    aa68:	6f 93       	push	r22
    aa6a:	7f 93       	push	r23
    aa6c:	8f 93       	push	r24
    aa6e:	9f 93       	push	r25
    aa70:	af 93       	push	r26
    aa72:	bf 93       	push	r27
    aa74:	ef 93       	push	r30
    aa76:	ff 93       	push	r31
	USART_RX_CBuffer_Complete(&sim900_usart_data);
    aa78:	84 e3       	ldi	r24, 0x34	; 52
    aa7a:	97 e2       	ldi	r25, 0x27	; 39
    aa7c:	1d d0       	rcall	.+58     	; 0xaab8 <USART_RX_CBuffer_Complete>
}
    aa7e:	ff 91       	pop	r31
    aa80:	ef 91       	pop	r30
    aa82:	bf 91       	pop	r27
    aa84:	af 91       	pop	r26
    aa86:	9f 91       	pop	r25
    aa88:	8f 91       	pop	r24
    aa8a:	7f 91       	pop	r23
    aa8c:	6f 91       	pop	r22
    aa8e:	5f 91       	pop	r21
    aa90:	4f 91       	pop	r20
    aa92:	3f 91       	pop	r19
    aa94:	2f 91       	pop	r18
    aa96:	0f 90       	pop	r0
    aa98:	0b be       	out	0x3b, r0	; 59
    aa9a:	0f 90       	pop	r0
    aa9c:	0f be       	out	0x3f, r0	; 63
    aa9e:	0f 90       	pop	r0
    aaa0:	1f 90       	pop	r1
    aaa2:	18 95       	reti

0000aaa4 <usart_interruptdriver_initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void usart_interruptdriver_initialize(/*volatile*/ USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
    aaa4:	fc 01       	movw	r30, r24
	usart_data->usart = usart;
    aaa6:	60 83       	st	Z, r22
    aaa8:	71 83       	std	Z+1, r23	; 0x01
	usart_data->dreIntLevel = dreIntLevel;
    aaaa:	42 83       	std	Z+2, r20	; 0x02
    aaac:	53 83       	std	Z+3, r21	; 0x03

	usart_data->RX_Tail = 0;
    aaae:	15 82       	std	Z+5, r1	; 0x05
	usart_data->RX_Head = 0;
    aab0:	14 82       	std	Z+4, r1	; 0x04
	usart_data->TX_Tail = 0;
    aab2:	17 82       	std	Z+7, r1	; 0x07
	usart_data->TX_Head = 0;
    aab4:	16 82       	std	Z+6, r1	; 0x06
    aab6:	08 95       	ret

0000aab8 <USART_RX_CBuffer_Complete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RX_CBuffer_Complete(/*volatile*/ USART_data_t * usart_data)
{
    aab8:	fc 01       	movw	r30, r24
	/*volatile*/ USART_data_t * const ad = usart_data;

	//USART_Buffer_t * const bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	const uint8_t idx = ad->RX_Head;
    aaba:	24 81       	ldd	r18, Z+4	; 0x04
	const uint8_t tempRX_Head = (idx + 1) & USART_RX_BUFFER_MASK;
    aabc:	82 2f       	mov	r24, r18
    aabe:	8f 5f       	subi	r24, 0xFF	; 255
    aac0:	87 70       	andi	r24, 0x07	; 7

	/* Check for overflow. */

	if (tempRX_Head == ad->RX_Tail) {
    aac2:	95 81       	ldd	r25, Z+5	; 0x05
    aac4:	89 13       	cpse	r24, r25
    aac6:	04 c0       	rjmp	.+8      	; 0xaad0 <USART_RX_CBuffer_Complete+0x18>
		ad->RX_Tail = (tempRX_Head + 1) & USART_RX_BUFFER_MASK;
    aac8:	98 2f       	mov	r25, r24
    aaca:	9f 5f       	subi	r25, 0xFF	; 255
    aacc:	97 70       	andi	r25, 0x07	; 7
    aace:	95 83       	std	Z+5, r25	; 0x05
	}
	
	const uint8_t data = ad->usart->DATA;
    aad0:	a0 81       	ld	r26, Z
    aad2:	b1 81       	ldd	r27, Z+1	; 0x01
    aad4:	6c 91       	ld	r22, X
	ad->RX[idx] = data;
    aad6:	df 01       	movw	r26, r30
    aad8:	a2 0f       	add	r26, r18
    aada:	b1 1d       	adc	r27, r1
    aadc:	18 96       	adiw	r26, 0x08	; 8
    aade:	6c 93       	st	X, r22
	ad->RX_Head = tempRX_Head;
    aae0:	84 83       	std	Z+4, r24	; 0x04

	if(g_log_verbosity>=VERY_VERBOSE)  usart_putchar(USART_DEBUG, data);
    aae2:	80 91 1d 20 	lds	r24, 0x201D
    aae6:	83 30       	cpi	r24, 0x03	; 3
    aae8:	20 f0       	brcs	.+8      	; 0xaaf2 <USART_RX_CBuffer_Complete+0x3a>
    aaea:	80 ea       	ldi	r24, 0xA0	; 160
    aaec:	9b e0       	ldi	r25, 0x0B	; 11
    aaee:	0e 94 f2 68 	call	0xd1e4	; 0xd1e4 <usart_putchar>
	//usart_putchar(USART_DEBUG, data);


	return true;
}
    aaf2:	81 e0       	ldi	r24, 0x01	; 1
    aaf4:	08 95       	ret

0000aaf6 <board_init>:
#include <conf_board.h>

void board_init(void)
{

	PR.PRPA |= PR_AC_bm | PR_ADC_bm; 
    aaf6:	e0 e7       	ldi	r30, 0x70	; 112
    aaf8:	f0 e0       	ldi	r31, 0x00	; 0
    aafa:	81 81       	ldd	r24, Z+1	; 0x01
    aafc:	83 60       	ori	r24, 0x03	; 3
    aafe:	81 83       	std	Z+1, r24	; 0x01
	PR.PRPB |= PR_AC_bm | PR_ADC_bm | PR_DAC_bm; 
    ab00:	82 81       	ldd	r24, Z+2	; 0x02
    ab02:	87 60       	ori	r24, 0x07	; 7
    ab04:	82 83       	std	Z+2, r24	; 0x02

	PORTCFG.MPCMASK = 0xFF;
    ab06:	e0 eb       	ldi	r30, 0xB0	; 176
    ab08:	f0 e0       	ldi	r31, 0x00	; 0
    ab0a:	9f ef       	ldi	r25, 0xFF	; 255
    ab0c:	90 83       	st	Z, r25
	PORTA.PIN0CTRL = PORT_OPC_PULLUP_gc;
    ab0e:	88 e1       	ldi	r24, 0x18	; 24
    ab10:	a0 e0       	ldi	r26, 0x00	; 0
    ab12:	b6 e0       	ldi	r27, 0x06	; 6
    ab14:	50 96       	adiw	r26, 0x10	; 16
    ab16:	8c 93       	st	X, r24

	PORTCFG.MPCMASK = 0xFF;
    ab18:	90 83       	st	Z, r25
	PORTB.PIN0CTRL = PORT_OPC_PULLUP_gc;
    ab1a:	e0 e2       	ldi	r30, 0x20	; 32
    ab1c:	f6 e0       	ldi	r31, 0x06	; 6
    ab1e:	80 8b       	std	Z+16, r24	; 0x10
	
	//By default the PORTF UART has been used for debugging purposes
	//Since on the PCB uses the UART pin for GPRS command
	//we remap the PORTF UART
	//so we can have the USART0 on PIN6 and PIN7
	PORTF.REMAP |= 16;
    ab20:	e0 ea       	ldi	r30, 0xA0	; 160
    ab22:	f6 e0       	ldi	r31, 0x06	; 6
    ab24:	86 85       	ldd	r24, Z+14	; 0x0e
    ab26:	80 61       	ori	r24, 0x10	; 16
    ab28:	86 87       	std	Z+14, r24	; 0x0e
    ab2a:	43 e0       	ldi	r20, 0x03	; 3
    ab2c:	50 e0       	ldi	r21, 0x00	; 0
    ab2e:	60 e8       	ldi	r22, 0x80	; 128
    ab30:	80 ea       	ldi	r24, 0xA0	; 160
    ab32:	96 e0       	ldi	r25, 0x06	; 6
    ab34:	a3 d5       	rcall	.+2886   	; 0xb67c <ioport_configure_port_pin>
    ab36:	40 e0       	ldi	r20, 0x00	; 0
    ab38:	50 e0       	ldi	r21, 0x00	; 0
    ab3a:	60 e4       	ldi	r22, 0x40	; 64
    ab3c:	80 ea       	ldi	r24, 0xA0	; 160
    ab3e:	96 e0       	ldi	r25, 0x06	; 6
    ab40:	9d d5       	rcall	.+2874   	; 0xb67c <ioport_configure_port_pin>
    ab42:	43 e0       	ldi	r20, 0x03	; 3
    ab44:	50 e0       	ldi	r21, 0x00	; 0
    ab46:	68 e0       	ldi	r22, 0x08	; 8
    ab48:	80 e8       	ldi	r24, 0x80	; 128
    ab4a:	96 e0       	ldi	r25, 0x06	; 6
    ab4c:	97 d5       	rcall	.+2862   	; 0xb67c <ioport_configure_port_pin>
    ab4e:	40 e0       	ldi	r20, 0x00	; 0
    ab50:	50 e0       	ldi	r21, 0x00	; 0
    ab52:	64 e0       	ldi	r22, 0x04	; 4
    ab54:	80 e8       	ldi	r24, 0x80	; 128
    ab56:	96 e0       	ldi	r25, 0x06	; 6
    ab58:	91 d5       	rcall	.+2850   	; 0xb67c <ioport_configure_port_pin>
    ab5a:	43 e0       	ldi	r20, 0x03	; 3
    ab5c:	50 e0       	ldi	r21, 0x00	; 0
    ab5e:	61 e0       	ldi	r22, 0x01	; 1
    ab60:	80 e6       	ldi	r24, 0x60	; 96
    ab62:	96 e0       	ldi	r25, 0x06	; 6
    ab64:	8b d5       	rcall	.+2838   	; 0xb67c <ioport_configure_port_pin>
    ab66:	41 e0       	ldi	r20, 0x01	; 1
    ab68:	50 e0       	ldi	r21, 0x00	; 0
    ab6a:	68 e0       	ldi	r22, 0x08	; 8
    ab6c:	80 ea       	ldi	r24, 0xA0	; 160
    ab6e:	96 e0       	ldi	r25, 0x06	; 6
    ab70:	85 d5       	rcall	.+2826   	; 0xb67c <ioport_configure_port_pin>
    ab72:	40 e0       	ldi	r20, 0x00	; 0
    ab74:	50 e0       	ldi	r21, 0x00	; 0
    ab76:	62 e0       	ldi	r22, 0x02	; 2
    ab78:	80 ea       	ldi	r24, 0xA0	; 160
    ab7a:	96 e0       	ldi	r25, 0x06	; 6
    ab7c:	7f d5       	rcall	.+2814   	; 0xb67c <ioport_configure_port_pin>
    ab7e:	40 e0       	ldi	r20, 0x00	; 0
    ab80:	51 e0       	ldi	r21, 0x01	; 1
    ab82:	61 e0       	ldi	r22, 0x01	; 1
    ab84:	80 ee       	ldi	r24, 0xE0	; 224
    ab86:	97 e0       	ldi	r25, 0x07	; 7
    ab88:	79 d5       	rcall	.+2802   	; 0xb67c <ioport_configure_port_pin>
    ab8a:	40 e0       	ldi	r20, 0x00	; 0
    ab8c:	51 e0       	ldi	r21, 0x01	; 1
    ab8e:	62 e0       	ldi	r22, 0x02	; 2
    ab90:	80 ee       	ldi	r24, 0xE0	; 224
    ab92:	97 e0       	ldi	r25, 0x07	; 7
    ab94:	73 d5       	rcall	.+2790   	; 0xb67c <ioport_configure_port_pin>
    ab96:	40 e0       	ldi	r20, 0x00	; 0
    ab98:	50 e8       	ldi	r21, 0x80	; 128
    ab9a:	60 e2       	ldi	r22, 0x20	; 32
    ab9c:	80 e6       	ldi	r24, 0x60	; 96
    ab9e:	96 e0       	ldi	r25, 0x06	; 6
    aba0:	6d d5       	rcall	.+2778   	; 0xb67c <ioport_configure_port_pin>
    aba2:	40 e0       	ldi	r20, 0x00	; 0
    aba4:	50 e0       	ldi	r21, 0x00	; 0
    aba6:	60 e1       	ldi	r22, 0x10	; 16
    aba8:	80 ea       	ldi	r24, 0xA0	; 160
    abaa:	96 e0       	ldi	r25, 0x06	; 6
    abac:	67 c5       	rjmp	.+2766   	; 0xb67c <ioport_configure_port_pin>

0000abae <calendar_leapyear>:
	if ((date->year < EPOCH_YEAR) || (date->year >= 2106)) {
		return false;
	} else {
		return true;
	}
}
    abae:	9c 01       	movw	r18, r24
    abb0:	83 70       	andi	r24, 0x03	; 3
    abb2:	99 27       	eor	r25, r25
    abb4:	89 2b       	or	r24, r25
    abb6:	81 f4       	brne	.+32     	; 0xabd8 <calendar_leapyear+0x2a>
    abb8:	c9 01       	movw	r24, r18
    abba:	64 e6       	ldi	r22, 0x64	; 100
    abbc:	70 e0       	ldi	r23, 0x00	; 0
    abbe:	0e 94 3d 72 	call	0xe47a	; 0xe47a <__udivmodhi4>
    abc2:	89 2b       	or	r24, r25
    abc4:	11 f0       	breq	.+4      	; 0xabca <calendar_leapyear+0x1c>
    abc6:	81 e0       	ldi	r24, 0x01	; 1
    abc8:	08 95       	ret
    abca:	c9 01       	movw	r24, r18
    abcc:	60 e9       	ldi	r22, 0x90	; 144
    abce:	71 e0       	ldi	r23, 0x01	; 1
    abd0:	0e 94 3d 72 	call	0xe47a	; 0xe47a <__udivmodhi4>
    abd4:	89 2b       	or	r24, r25
    abd6:	b9 f3       	breq	.-18     	; 0xabc6 <calendar_leapyear+0x18>
    abd8:	80 e0       	ldi	r24, 0x00	; 0
    abda:	08 95       	ret

0000abdc <calendar_timestamp_to_date>:
 * \param date_out   Date to store result
 *
 */
void calendar_timestamp_to_date(uint32_t timestamp,
		struct calendar_date *date_out)
{
    abdc:	4f 92       	push	r4
    abde:	5f 92       	push	r5
    abe0:	6f 92       	push	r6
    abe2:	7f 92       	push	r7
    abe4:	8f 92       	push	r8
    abe6:	9f 92       	push	r9
    abe8:	af 92       	push	r10
    abea:	bf 92       	push	r11
    abec:	cf 92       	push	r12
    abee:	df 92       	push	r13
    abf0:	ef 92       	push	r14
    abf2:	ff 92       	push	r15
    abf4:	cf 93       	push	r28
    abf6:	df 93       	push	r29
    abf8:	ea 01       	movw	r28, r20
	uint32_t day_number;
	uint32_t day_clock;

	date_out->year = EPOCH_YEAR;
    abfa:	22 eb       	ldi	r18, 0xB2	; 178
    abfc:	37 e0       	ldi	r19, 0x07	; 7
    abfe:	2d 83       	std	Y+5, r18	; 0x05
    ac00:	3e 83       	std	Y+6, r19	; 0x06
	date_out->month = 0;
    ac02:	1c 82       	std	Y+4, r1	; 0x04

	day_clock = timestamp % SECS_PER_DAY;
	day_number = timestamp / SECS_PER_DAY;
    ac04:	20 e8       	ldi	r18, 0x80	; 128
    ac06:	31 e5       	ldi	r19, 0x51	; 81
    ac08:	41 e0       	ldi	r20, 0x01	; 1
    ac0a:	50 e0       	ldi	r21, 0x00	; 0
    ac0c:	0e 94 64 72 	call	0xe4c8	; 0xe4c8 <__udivmodsi4>
    ac10:	69 01       	movw	r12, r18
    ac12:	7a 01       	movw	r14, r20
    ac14:	2b 01       	movw	r4, r22
    ac16:	3c 01       	movw	r6, r24

	date_out->second = day_clock % SECS_PER_MINUTE;
    ac18:	2c e3       	ldi	r18, 0x3C	; 60
    ac1a:	82 2e       	mov	r8, r18
    ac1c:	91 2c       	mov	r9, r1
    ac1e:	a1 2c       	mov	r10, r1
    ac20:	b1 2c       	mov	r11, r1
    ac22:	a5 01       	movw	r20, r10
    ac24:	94 01       	movw	r18, r8
    ac26:	0e 94 64 72 	call	0xe4c8	; 0xe4c8 <__udivmodsi4>
    ac2a:	68 83       	st	Y, r22
	date_out->minute = (day_clock % SECS_PER_HOUR) / SECS_PER_MINUTE;
    ac2c:	c3 01       	movw	r24, r6
    ac2e:	b2 01       	movw	r22, r4
    ac30:	20 e1       	ldi	r18, 0x10	; 16
    ac32:	3e e0       	ldi	r19, 0x0E	; 14
    ac34:	40 e0       	ldi	r20, 0x00	; 0
    ac36:	50 e0       	ldi	r21, 0x00	; 0
    ac38:	0e 94 64 72 	call	0xe4c8	; 0xe4c8 <__udivmodsi4>
    ac3c:	72 2e       	mov	r7, r18
    ac3e:	a5 01       	movw	r20, r10
    ac40:	94 01       	movw	r18, r8
    ac42:	0e 94 64 72 	call	0xe4c8	; 0xe4c8 <__udivmodsi4>
    ac46:	29 83       	std	Y+1, r18	; 0x01
	date_out->hour = day_clock / SECS_PER_HOUR;
    ac48:	7a 82       	std	Y+2, r7	; 0x02
	date_out->dayofweek = (day_number + 4) % 7;
    ac4a:	c7 01       	movw	r24, r14
    ac4c:	b6 01       	movw	r22, r12
    ac4e:	6c 5f       	subi	r22, 0xFC	; 252
    ac50:	7f 4f       	sbci	r23, 0xFF	; 255
    ac52:	8f 4f       	sbci	r24, 0xFF	; 255
    ac54:	9f 4f       	sbci	r25, 0xFF	; 255
    ac56:	27 e0       	ldi	r18, 0x07	; 7
    ac58:	30 e0       	ldi	r19, 0x00	; 0
    ac5a:	40 e0       	ldi	r20, 0x00	; 0
    ac5c:	50 e0       	ldi	r21, 0x00	; 0
    ac5e:	0e 94 64 72 	call	0xe4c8	; 0xe4c8 <__udivmodsi4>
    ac62:	6f 83       	std	Y+7, r22	; 0x07

	while (day_number >= calendar_yearsize(date_out->year)) {
    ac64:	09 c0       	rjmp	.+18     	; 0xac78 <calendar_timestamp_to_date+0x9c>
		day_number -= calendar_yearsize(date_out->year);
    ac66:	c4 1a       	sub	r12, r20
    ac68:	d5 0a       	sbc	r13, r21
    ac6a:	e6 0a       	sbc	r14, r22
    ac6c:	f7 0a       	sbc	r15, r23
		date_out->year++;
    ac6e:	2f ef       	ldi	r18, 0xFF	; 255
    ac70:	a2 1a       	sub	r10, r18
    ac72:	b2 0a       	sbc	r11, r18
    ac74:	ad 82       	std	Y+5, r10	; 0x05
    ac76:	be 82       	std	Y+6, r11	; 0x06
	date_out->second = day_clock % SECS_PER_MINUTE;
	date_out->minute = (day_clock % SECS_PER_HOUR) / SECS_PER_MINUTE;
	date_out->hour = day_clock / SECS_PER_HOUR;
	date_out->dayofweek = (day_number + 4) % 7;

	while (day_number >= calendar_yearsize(date_out->year)) {
    ac78:	ad 80       	ldd	r10, Y+5	; 0x05
    ac7a:	be 80       	ldd	r11, Y+6	; 0x06
 * \retval 366 if the year is a leap year
 * \retval 365 if the year is not a leap year
 */
static uint16_t calendar_yearsize(uint16_t year)
{
	if (calendar_leapyear(year)) {
    ac7c:	c5 01       	movw	r24, r10
    ac7e:	97 df       	rcall	.-210    	; 0xabae <calendar_leapyear>
    ac80:	88 23       	and	r24, r24
    ac82:	19 f0       	breq	.+6      	; 0xac8a <calendar_timestamp_to_date+0xae>
		return 366;
    ac84:	4e e6       	ldi	r20, 0x6E	; 110
    ac86:	51 e0       	ldi	r21, 0x01	; 1
    ac88:	02 c0       	rjmp	.+4      	; 0xac8e <calendar_timestamp_to_date+0xb2>
	} else {
		return 365;
    ac8a:	4d e6       	ldi	r20, 0x6D	; 109
    ac8c:	51 e0       	ldi	r21, 0x01	; 1
	date_out->second = day_clock % SECS_PER_MINUTE;
	date_out->minute = (day_clock % SECS_PER_HOUR) / SECS_PER_MINUTE;
	date_out->hour = day_clock / SECS_PER_HOUR;
	date_out->dayofweek = (day_number + 4) % 7;

	while (day_number >= calendar_yearsize(date_out->year)) {
    ac8e:	60 e0       	ldi	r22, 0x00	; 0
    ac90:	70 e0       	ldi	r23, 0x00	; 0
    ac92:	c4 16       	cp	r12, r20
    ac94:	d5 06       	cpc	r13, r21
    ac96:	e6 06       	cpc	r14, r22
    ac98:	f7 06       	cpc	r15, r23
    ac9a:	28 f7       	brcc	.-54     	; 0xac66 <calendar_timestamp_to_date+0x8a>
    ac9c:	07 c0       	rjmp	.+14     	; 0xacac <calendar_timestamp_to_date+0xd0>
		date_out->year++;
	}

	while (day_number >=
			month[calendar_leapyear(date_out->year)][date_out->month]) {
		day_number -= month[calendar_leapyear(date_out->year)][date_out->month];
    ac9e:	c4 1a       	sub	r12, r20
    aca0:	d5 0a       	sbc	r13, r21
    aca2:	e6 0a       	sbc	r14, r22
    aca4:	f7 0a       	sbc	r15, r23
		date_out->month++;
    aca6:	2f 5f       	subi	r18, 0xFF	; 255
    aca8:	2c 83       	std	Y+4, r18	; 0x04
    acaa:	04 c0       	rjmp	.+8      	; 0xacb4 <calendar_timestamp_to_date+0xd8>
		day_number -= calendar_yearsize(date_out->year);
		date_out->year++;
	}

	while (day_number >=
			month[calendar_leapyear(date_out->year)][date_out->month]) {
    acac:	2c e0       	ldi	r18, 0x0C	; 12
    acae:	82 9f       	mul	r24, r18
    acb0:	c0 01       	movw	r24, r0
    acb2:	11 24       	eor	r1, r1
    acb4:	2c 81       	ldd	r18, Y+4	; 0x04
    acb6:	fc 01       	movw	r30, r24
    acb8:	e2 0f       	add	r30, r18
    acba:	f1 1d       	adc	r31, r1
    acbc:	e9 5a       	subi	r30, 0xA9	; 169
    acbe:	fe 4d       	sbci	r31, 0xDE	; 222
	while (day_number >= calendar_yearsize(date_out->year)) {
		day_number -= calendar_yearsize(date_out->year);
		date_out->year++;
	}

	while (day_number >=
    acc0:	40 81       	ld	r20, Z
    acc2:	50 e0       	ldi	r21, 0x00	; 0
    acc4:	60 e0       	ldi	r22, 0x00	; 0
    acc6:	70 e0       	ldi	r23, 0x00	; 0
    acc8:	c4 16       	cp	r12, r20
    acca:	d5 06       	cpc	r13, r21
    accc:	e6 06       	cpc	r14, r22
    acce:	f7 06       	cpc	r15, r23
    acd0:	30 f7       	brcc	.-52     	; 0xac9e <calendar_timestamp_to_date+0xc2>
			month[calendar_leapyear(date_out->year)][date_out->month]) {
		day_number -= month[calendar_leapyear(date_out->year)][date_out->month];
		date_out->month++;
	}
	date_out->date = day_number;
    acd2:	cb 82       	std	Y+3, r12	; 0x03
}
    acd4:	df 91       	pop	r29
    acd6:	cf 91       	pop	r28
    acd8:	ff 90       	pop	r15
    acda:	ef 90       	pop	r14
    acdc:	df 90       	pop	r13
    acde:	cf 90       	pop	r12
    ace0:	bf 90       	pop	r11
    ace2:	af 90       	pop	r10
    ace4:	9f 90       	pop	r9
    ace6:	8f 90       	pop	r8
    ace8:	7f 90       	pop	r7
    acea:	6f 90       	pop	r6
    acec:	5f 90       	pop	r5
    acee:	4f 90       	pop	r4
    acf0:	08 95       	ret

0000acf2 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    acf2:	81 15       	cp	r24, r1
    acf4:	22 e0       	ldi	r18, 0x02	; 2
    acf6:	92 07       	cpc	r25, r18
    acf8:	61 f4       	brne	.+24     	; 0xad12 <adc_enable_clock+0x20>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    acfa:	80 91 53 24 	lds	r24, 0x2453
    acfe:	98 2f       	mov	r25, r24
    ad00:	9f 5f       	subi	r25, 0xFF	; 255
    ad02:	90 93 53 24 	sts	0x2453, r25
    ad06:	81 11       	cpse	r24, r1
    ad08:	13 c0       	rjmp	.+38     	; 0xad30 <adc_enable_clock+0x3e>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    ad0a:	62 e0       	ldi	r22, 0x02	; 2
    ad0c:	81 e0       	ldi	r24, 0x01	; 1
    ad0e:	90 e0       	ldi	r25, 0x00	; 0
    ad10:	0e c0       	rjmp	.+28     	; 0xad2e <adc_enable_clock+0x3c>
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    ad12:	80 34       	cpi	r24, 0x40	; 64
    ad14:	92 40       	sbci	r25, 0x02	; 2
    ad16:	61 f4       	brne	.+24     	; 0xad30 <adc_enable_clock+0x3e>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    ad18:	80 91 54 24 	lds	r24, 0x2454
    ad1c:	98 2f       	mov	r25, r24
    ad1e:	9f 5f       	subi	r25, 0xFF	; 255
    ad20:	90 93 54 24 	sts	0x2454, r25
    ad24:	81 11       	cpse	r24, r1
    ad26:	04 c0       	rjmp	.+8      	; 0xad30 <adc_enable_clock+0x3e>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    ad28:	62 e0       	ldi	r22, 0x02	; 2
    ad2a:	82 e0       	ldi	r24, 0x02	; 2
    ad2c:	90 e0       	ldi	r25, 0x00	; 0
    ad2e:	6e c4       	rjmp	.+2268   	; 0xb60c <sysclk_enable_module>
    ad30:	08 95       	ret

0000ad32 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    ad32:	81 15       	cp	r24, r1
    ad34:	22 e0       	ldi	r18, 0x02	; 2
    ad36:	92 07       	cpc	r25, r18
    ad38:	59 f4       	brne	.+22     	; 0xad50 <adc_disable_clock+0x1e>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    ad3a:	80 91 53 24 	lds	r24, 0x2453
    ad3e:	81 50       	subi	r24, 0x01	; 1
    ad40:	80 93 53 24 	sts	0x2453, r24
    ad44:	81 11       	cpse	r24, r1
    ad46:	12 c0       	rjmp	.+36     	; 0xad6c <adc_disable_clock+0x3a>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    ad48:	62 e0       	ldi	r22, 0x02	; 2
    ad4a:	81 e0       	ldi	r24, 0x01	; 1
    ad4c:	90 e0       	ldi	r25, 0x00	; 0
    ad4e:	0d c0       	rjmp	.+26     	; 0xad6a <adc_disable_clock+0x38>
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    ad50:	80 34       	cpi	r24, 0x40	; 64
    ad52:	92 40       	sbci	r25, 0x02	; 2
    ad54:	59 f4       	brne	.+22     	; 0xad6c <adc_disable_clock+0x3a>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    ad56:	80 91 54 24 	lds	r24, 0x2454
    ad5a:	81 50       	subi	r24, 0x01	; 1
    ad5c:	80 93 54 24 	sts	0x2454, r24
    ad60:	81 11       	cpse	r24, r1
    ad62:	04 c0       	rjmp	.+8      	; 0xad6c <adc_disable_clock+0x3a>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    ad64:	62 e0       	ldi	r22, 0x02	; 2
    ad66:	82 e0       	ldi	r24, 0x02	; 2
    ad68:	90 e0       	ldi	r25, 0x00	; 0
    ad6a:	5b c4       	rjmp	.+2230   	; 0xb622 <sysclk_disable_module>
    ad6c:	08 95       	ret

0000ad6e <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    ad6e:	1f 93       	push	r17
    ad70:	cf 93       	push	r28
    ad72:	df 93       	push	r29
    ad74:	ec 01       	movw	r28, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    ad76:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
    ad78:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    ad7a:	bb df       	rcall	.-138    	; 0xacf2 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    ad7c:	88 81       	ld	r24, Y
    ad7e:	81 60       	ori	r24, 0x01	; 1
    ad80:	88 83       	st	Y, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    ad82:	1f bf       	out	0x3f, r17	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    ad84:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    ad86:	f8 94       	cli
    ad88:	e3 e6       	ldi	r30, 0x63	; 99
    ad8a:	f7 e2       	ldi	r31, 0x27	; 39
    ad8c:	80 81       	ld	r24, Z
    ad8e:	8f 5f       	subi	r24, 0xFF	; 255
    ad90:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    ad92:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    ad94:	df 91       	pop	r29
    ad96:	cf 91       	pop	r28
    ad98:	1f 91       	pop	r17
    ad9a:	08 95       	ret

0000ad9c <adc_disable>:
 * Disables the ADC and unlocks IDLE mode for the sleep manager.
 *
 * \param adc Pointer to ADC module
 */
void adc_disable(ADC_t *adc)
{
    ad9c:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    ad9e:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    ada0:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc->CTRLA &= ~ADC_ENABLE_bm;
    ada2:	fc 01       	movw	r30, r24
    ada4:	20 81       	ld	r18, Z
    ada6:	2e 7f       	andi	r18, 0xFE	; 254
    ada8:	20 83       	st	Z, r18
	adc_disable_clock(adc);
    adaa:	c3 df       	rcall	.-122    	; 0xad32 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    adac:	cf bf       	out	0x3f, r28	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    adae:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    adb0:	f8 94       	cli
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    adb2:	e3 e6       	ldi	r30, 0x63	; 99
    adb4:	f7 e2       	ldi	r31, 0x27	; 39
    adb6:	80 81       	ld	r24, Z
    adb8:	81 50       	subi	r24, 0x01	; 1
    adba:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    adbc:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
    adbe:	cf 91       	pop	r28
    adc0:	08 95       	ret

0000adc2 <nvm_read_production_signature_row>:
    adc2:	68 2f       	mov	r22, r24
    adc4:	70 e0       	ldi	r23, 0x00	; 0
    adc6:	82 e0       	ldi	r24, 0x02	; 2
    adc8:	0c 94 44 5f 	jmp	0xbe88	; 0xbe88 <nvm_read_byte>

0000adcc <adc_get_calibration_data.part.0>:
/**
 * \brief Get calibration data
 *
 * \param cal Identifier for calibration data to get.
 */
static inline uint16_t adc_get_calibration_data(enum adc_calibration_data cal)
    adcc:	cf 93       	push	r28
    adce:	df 93       	push	r29
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    add0:	81 e2       	ldi	r24, 0x21	; 33
    add2:	f7 df       	rcall	.-18     	; 0xadc2 <nvm_read_production_signature_row>
		data <<= 8;
    add4:	d8 2f       	mov	r29, r24
    add6:	80 e0       	ldi	r24, 0x00	; 0
    add8:	c8 2f       	mov	r28, r24
		data |= nvm_read_production_signature_row(ADCACAL0);
    adda:	80 e2       	ldi	r24, 0x20	; 32
    addc:	f2 df       	rcall	.-28     	; 0xadc2 <nvm_read_production_signature_row>
    adde:	c8 2b       	or	r28, r24
		Assert(0);
		data = 0;
	}

	return data;
}
    ade0:	ce 01       	movw	r24, r28
    ade2:	df 91       	pop	r29
    ade4:	cf 91       	pop	r28
    ade6:	08 95       	ret

0000ade8 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    ade8:	1f 92       	push	r1
    adea:	0f 92       	push	r0
    adec:	0f b6       	in	r0, 0x3f	; 63
    adee:	0f 92       	push	r0
    adf0:	11 24       	eor	r1, r1
    adf2:	0b b6       	in	r0, 0x3b	; 59
    adf4:	0f 92       	push	r0
    adf6:	2f 93       	push	r18
    adf8:	3f 93       	push	r19
    adfa:	4f 93       	push	r20
    adfc:	5f 93       	push	r21
    adfe:	6f 93       	push	r22
    ae00:	7f 93       	push	r23
    ae02:	8f 93       	push	r24
    ae04:	9f 93       	push	r25
    ae06:	af 93       	push	r26
    ae08:	bf 93       	push	r27
    ae0a:	ef 93       	push	r30
    ae0c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    ae0e:	e0 e0       	ldi	r30, 0x00	; 0
    ae10:	f2 e0       	ldi	r31, 0x02	; 2
    ae12:	44 a1       	ldd	r20, Z+36	; 0x24
    ae14:	55 a1       	ldd	r21, Z+37	; 0x25
    ae16:	e0 91 60 27 	lds	r30, 0x2760
    ae1a:	f0 91 61 27 	lds	r31, 0x2761
    ae1e:	61 e0       	ldi	r22, 0x01	; 1
    ae20:	80 e0       	ldi	r24, 0x00	; 0
    ae22:	92 e0       	ldi	r25, 0x02	; 2
    ae24:	19 95       	eicall
}
    ae26:	ff 91       	pop	r31
    ae28:	ef 91       	pop	r30
    ae2a:	bf 91       	pop	r27
    ae2c:	af 91       	pop	r26
    ae2e:	9f 91       	pop	r25
    ae30:	8f 91       	pop	r24
    ae32:	7f 91       	pop	r23
    ae34:	6f 91       	pop	r22
    ae36:	5f 91       	pop	r21
    ae38:	4f 91       	pop	r20
    ae3a:	3f 91       	pop	r19
    ae3c:	2f 91       	pop	r18
    ae3e:	0f 90       	pop	r0
    ae40:	0b be       	out	0x3b, r0	; 59
    ae42:	0f 90       	pop	r0
    ae44:	0f be       	out	0x3f, r0	; 63
    ae46:	0f 90       	pop	r0
    ae48:	1f 90       	pop	r1
    ae4a:	18 95       	reti

0000ae4c <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    ae4c:	1f 92       	push	r1
    ae4e:	0f 92       	push	r0
    ae50:	0f b6       	in	r0, 0x3f	; 63
    ae52:	0f 92       	push	r0
    ae54:	11 24       	eor	r1, r1
    ae56:	0b b6       	in	r0, 0x3b	; 59
    ae58:	0f 92       	push	r0
    ae5a:	2f 93       	push	r18
    ae5c:	3f 93       	push	r19
    ae5e:	4f 93       	push	r20
    ae60:	5f 93       	push	r21
    ae62:	6f 93       	push	r22
    ae64:	7f 93       	push	r23
    ae66:	8f 93       	push	r24
    ae68:	9f 93       	push	r25
    ae6a:	af 93       	push	r26
    ae6c:	bf 93       	push	r27
    ae6e:	ef 93       	push	r30
    ae70:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    ae72:	e0 e0       	ldi	r30, 0x00	; 0
    ae74:	f2 e0       	ldi	r31, 0x02	; 2
    ae76:	44 a5       	ldd	r20, Z+44	; 0x2c
    ae78:	55 a5       	ldd	r21, Z+45	; 0x2d
    ae7a:	e0 91 60 27 	lds	r30, 0x2760
    ae7e:	f0 91 61 27 	lds	r31, 0x2761
    ae82:	62 e0       	ldi	r22, 0x02	; 2
    ae84:	80 e0       	ldi	r24, 0x00	; 0
    ae86:	92 e0       	ldi	r25, 0x02	; 2
    ae88:	19 95       	eicall
}
    ae8a:	ff 91       	pop	r31
    ae8c:	ef 91       	pop	r30
    ae8e:	bf 91       	pop	r27
    ae90:	af 91       	pop	r26
    ae92:	9f 91       	pop	r25
    ae94:	8f 91       	pop	r24
    ae96:	7f 91       	pop	r23
    ae98:	6f 91       	pop	r22
    ae9a:	5f 91       	pop	r21
    ae9c:	4f 91       	pop	r20
    ae9e:	3f 91       	pop	r19
    aea0:	2f 91       	pop	r18
    aea2:	0f 90       	pop	r0
    aea4:	0b be       	out	0x3b, r0	; 59
    aea6:	0f 90       	pop	r0
    aea8:	0f be       	out	0x3f, r0	; 63
    aeaa:	0f 90       	pop	r0
    aeac:	1f 90       	pop	r1
    aeae:	18 95       	reti

0000aeb0 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    aeb0:	1f 92       	push	r1
    aeb2:	0f 92       	push	r0
    aeb4:	0f b6       	in	r0, 0x3f	; 63
    aeb6:	0f 92       	push	r0
    aeb8:	11 24       	eor	r1, r1
    aeba:	0b b6       	in	r0, 0x3b	; 59
    aebc:	0f 92       	push	r0
    aebe:	2f 93       	push	r18
    aec0:	3f 93       	push	r19
    aec2:	4f 93       	push	r20
    aec4:	5f 93       	push	r21
    aec6:	6f 93       	push	r22
    aec8:	7f 93       	push	r23
    aeca:	8f 93       	push	r24
    aecc:	9f 93       	push	r25
    aece:	af 93       	push	r26
    aed0:	bf 93       	push	r27
    aed2:	ef 93       	push	r30
    aed4:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    aed6:	e0 e0       	ldi	r30, 0x00	; 0
    aed8:	f2 e0       	ldi	r31, 0x02	; 2
    aeda:	44 a9       	ldd	r20, Z+52	; 0x34
    aedc:	55 a9       	ldd	r21, Z+53	; 0x35
    aede:	e0 91 60 27 	lds	r30, 0x2760
    aee2:	f0 91 61 27 	lds	r31, 0x2761
    aee6:	64 e0       	ldi	r22, 0x04	; 4
    aee8:	80 e0       	ldi	r24, 0x00	; 0
    aeea:	92 e0       	ldi	r25, 0x02	; 2
    aeec:	19 95       	eicall
}
    aeee:	ff 91       	pop	r31
    aef0:	ef 91       	pop	r30
    aef2:	bf 91       	pop	r27
    aef4:	af 91       	pop	r26
    aef6:	9f 91       	pop	r25
    aef8:	8f 91       	pop	r24
    aefa:	7f 91       	pop	r23
    aefc:	6f 91       	pop	r22
    aefe:	5f 91       	pop	r21
    af00:	4f 91       	pop	r20
    af02:	3f 91       	pop	r19
    af04:	2f 91       	pop	r18
    af06:	0f 90       	pop	r0
    af08:	0b be       	out	0x3b, r0	; 59
    af0a:	0f 90       	pop	r0
    af0c:	0f be       	out	0x3f, r0	; 63
    af0e:	0f 90       	pop	r0
    af10:	1f 90       	pop	r1
    af12:	18 95       	reti

0000af14 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    af14:	1f 92       	push	r1
    af16:	0f 92       	push	r0
    af18:	0f b6       	in	r0, 0x3f	; 63
    af1a:	0f 92       	push	r0
    af1c:	11 24       	eor	r1, r1
    af1e:	0b b6       	in	r0, 0x3b	; 59
    af20:	0f 92       	push	r0
    af22:	2f 93       	push	r18
    af24:	3f 93       	push	r19
    af26:	4f 93       	push	r20
    af28:	5f 93       	push	r21
    af2a:	6f 93       	push	r22
    af2c:	7f 93       	push	r23
    af2e:	8f 93       	push	r24
    af30:	9f 93       	push	r25
    af32:	af 93       	push	r26
    af34:	bf 93       	push	r27
    af36:	ef 93       	push	r30
    af38:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    af3a:	e0 e0       	ldi	r30, 0x00	; 0
    af3c:	f2 e0       	ldi	r31, 0x02	; 2
    af3e:	44 ad       	ldd	r20, Z+60	; 0x3c
    af40:	55 ad       	ldd	r21, Z+61	; 0x3d
    af42:	e0 91 60 27 	lds	r30, 0x2760
    af46:	f0 91 61 27 	lds	r31, 0x2761
    af4a:	68 e0       	ldi	r22, 0x08	; 8
    af4c:	80 e0       	ldi	r24, 0x00	; 0
    af4e:	92 e0       	ldi	r25, 0x02	; 2
    af50:	19 95       	eicall
}
    af52:	ff 91       	pop	r31
    af54:	ef 91       	pop	r30
    af56:	bf 91       	pop	r27
    af58:	af 91       	pop	r26
    af5a:	9f 91       	pop	r25
    af5c:	8f 91       	pop	r24
    af5e:	7f 91       	pop	r23
    af60:	6f 91       	pop	r22
    af62:	5f 91       	pop	r21
    af64:	4f 91       	pop	r20
    af66:	3f 91       	pop	r19
    af68:	2f 91       	pop	r18
    af6a:	0f 90       	pop	r0
    af6c:	0b be       	out	0x3b, r0	; 59
    af6e:	0f 90       	pop	r0
    af70:	0f be       	out	0x3f, r0	; 63
    af72:	0f 90       	pop	r0
    af74:	1f 90       	pop	r1
    af76:	18 95       	reti

0000af78 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    af78:	1f 92       	push	r1
    af7a:	0f 92       	push	r0
    af7c:	0f b6       	in	r0, 0x3f	; 63
    af7e:	0f 92       	push	r0
    af80:	11 24       	eor	r1, r1
    af82:	0b b6       	in	r0, 0x3b	; 59
    af84:	0f 92       	push	r0
    af86:	2f 93       	push	r18
    af88:	3f 93       	push	r19
    af8a:	4f 93       	push	r20
    af8c:	5f 93       	push	r21
    af8e:	6f 93       	push	r22
    af90:	7f 93       	push	r23
    af92:	8f 93       	push	r24
    af94:	9f 93       	push	r25
    af96:	af 93       	push	r26
    af98:	bf 93       	push	r27
    af9a:	ef 93       	push	r30
    af9c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    af9e:	e0 e4       	ldi	r30, 0x40	; 64
    afa0:	f2 e0       	ldi	r31, 0x02	; 2
    afa2:	44 a1       	ldd	r20, Z+36	; 0x24
    afa4:	55 a1       	ldd	r21, Z+37	; 0x25
    afa6:	e0 91 5e 27 	lds	r30, 0x275E
    afaa:	f0 91 5f 27 	lds	r31, 0x275F
    afae:	61 e0       	ldi	r22, 0x01	; 1
    afb0:	80 e4       	ldi	r24, 0x40	; 64
    afb2:	92 e0       	ldi	r25, 0x02	; 2
    afb4:	19 95       	eicall
}
    afb6:	ff 91       	pop	r31
    afb8:	ef 91       	pop	r30
    afba:	bf 91       	pop	r27
    afbc:	af 91       	pop	r26
    afbe:	9f 91       	pop	r25
    afc0:	8f 91       	pop	r24
    afc2:	7f 91       	pop	r23
    afc4:	6f 91       	pop	r22
    afc6:	5f 91       	pop	r21
    afc8:	4f 91       	pop	r20
    afca:	3f 91       	pop	r19
    afcc:	2f 91       	pop	r18
    afce:	0f 90       	pop	r0
    afd0:	0b be       	out	0x3b, r0	; 59
    afd2:	0f 90       	pop	r0
    afd4:	0f be       	out	0x3f, r0	; 63
    afd6:	0f 90       	pop	r0
    afd8:	1f 90       	pop	r1
    afda:	18 95       	reti

0000afdc <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    afdc:	1f 92       	push	r1
    afde:	0f 92       	push	r0
    afe0:	0f b6       	in	r0, 0x3f	; 63
    afe2:	0f 92       	push	r0
    afe4:	11 24       	eor	r1, r1
    afe6:	0b b6       	in	r0, 0x3b	; 59
    afe8:	0f 92       	push	r0
    afea:	2f 93       	push	r18
    afec:	3f 93       	push	r19
    afee:	4f 93       	push	r20
    aff0:	5f 93       	push	r21
    aff2:	6f 93       	push	r22
    aff4:	7f 93       	push	r23
    aff6:	8f 93       	push	r24
    aff8:	9f 93       	push	r25
    affa:	af 93       	push	r26
    affc:	bf 93       	push	r27
    affe:	ef 93       	push	r30
    b000:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    b002:	e0 e4       	ldi	r30, 0x40	; 64
    b004:	f2 e0       	ldi	r31, 0x02	; 2
    b006:	44 a5       	ldd	r20, Z+44	; 0x2c
    b008:	55 a5       	ldd	r21, Z+45	; 0x2d
    b00a:	e0 91 5e 27 	lds	r30, 0x275E
    b00e:	f0 91 5f 27 	lds	r31, 0x275F
    b012:	62 e0       	ldi	r22, 0x02	; 2
    b014:	80 e4       	ldi	r24, 0x40	; 64
    b016:	92 e0       	ldi	r25, 0x02	; 2
    b018:	19 95       	eicall
}
    b01a:	ff 91       	pop	r31
    b01c:	ef 91       	pop	r30
    b01e:	bf 91       	pop	r27
    b020:	af 91       	pop	r26
    b022:	9f 91       	pop	r25
    b024:	8f 91       	pop	r24
    b026:	7f 91       	pop	r23
    b028:	6f 91       	pop	r22
    b02a:	5f 91       	pop	r21
    b02c:	4f 91       	pop	r20
    b02e:	3f 91       	pop	r19
    b030:	2f 91       	pop	r18
    b032:	0f 90       	pop	r0
    b034:	0b be       	out	0x3b, r0	; 59
    b036:	0f 90       	pop	r0
    b038:	0f be       	out	0x3f, r0	; 63
    b03a:	0f 90       	pop	r0
    b03c:	1f 90       	pop	r1
    b03e:	18 95       	reti

0000b040 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    b040:	1f 92       	push	r1
    b042:	0f 92       	push	r0
    b044:	0f b6       	in	r0, 0x3f	; 63
    b046:	0f 92       	push	r0
    b048:	11 24       	eor	r1, r1
    b04a:	0b b6       	in	r0, 0x3b	; 59
    b04c:	0f 92       	push	r0
    b04e:	2f 93       	push	r18
    b050:	3f 93       	push	r19
    b052:	4f 93       	push	r20
    b054:	5f 93       	push	r21
    b056:	6f 93       	push	r22
    b058:	7f 93       	push	r23
    b05a:	8f 93       	push	r24
    b05c:	9f 93       	push	r25
    b05e:	af 93       	push	r26
    b060:	bf 93       	push	r27
    b062:	ef 93       	push	r30
    b064:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    b066:	e0 e4       	ldi	r30, 0x40	; 64
    b068:	f2 e0       	ldi	r31, 0x02	; 2
    b06a:	44 a9       	ldd	r20, Z+52	; 0x34
    b06c:	55 a9       	ldd	r21, Z+53	; 0x35
    b06e:	e0 91 5e 27 	lds	r30, 0x275E
    b072:	f0 91 5f 27 	lds	r31, 0x275F
    b076:	64 e0       	ldi	r22, 0x04	; 4
    b078:	80 e4       	ldi	r24, 0x40	; 64
    b07a:	92 e0       	ldi	r25, 0x02	; 2
    b07c:	19 95       	eicall
}
    b07e:	ff 91       	pop	r31
    b080:	ef 91       	pop	r30
    b082:	bf 91       	pop	r27
    b084:	af 91       	pop	r26
    b086:	9f 91       	pop	r25
    b088:	8f 91       	pop	r24
    b08a:	7f 91       	pop	r23
    b08c:	6f 91       	pop	r22
    b08e:	5f 91       	pop	r21
    b090:	4f 91       	pop	r20
    b092:	3f 91       	pop	r19
    b094:	2f 91       	pop	r18
    b096:	0f 90       	pop	r0
    b098:	0b be       	out	0x3b, r0	; 59
    b09a:	0f 90       	pop	r0
    b09c:	0f be       	out	0x3f, r0	; 63
    b09e:	0f 90       	pop	r0
    b0a0:	1f 90       	pop	r1
    b0a2:	18 95       	reti

0000b0a4 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    b0a4:	1f 92       	push	r1
    b0a6:	0f 92       	push	r0
    b0a8:	0f b6       	in	r0, 0x3f	; 63
    b0aa:	0f 92       	push	r0
    b0ac:	11 24       	eor	r1, r1
    b0ae:	0b b6       	in	r0, 0x3b	; 59
    b0b0:	0f 92       	push	r0
    b0b2:	2f 93       	push	r18
    b0b4:	3f 93       	push	r19
    b0b6:	4f 93       	push	r20
    b0b8:	5f 93       	push	r21
    b0ba:	6f 93       	push	r22
    b0bc:	7f 93       	push	r23
    b0be:	8f 93       	push	r24
    b0c0:	9f 93       	push	r25
    b0c2:	af 93       	push	r26
    b0c4:	bf 93       	push	r27
    b0c6:	ef 93       	push	r30
    b0c8:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    b0ca:	e0 e4       	ldi	r30, 0x40	; 64
    b0cc:	f2 e0       	ldi	r31, 0x02	; 2
    b0ce:	44 ad       	ldd	r20, Z+60	; 0x3c
    b0d0:	55 ad       	ldd	r21, Z+61	; 0x3d
    b0d2:	e0 91 5e 27 	lds	r30, 0x275E
    b0d6:	f0 91 5f 27 	lds	r31, 0x275F
    b0da:	68 e0       	ldi	r22, 0x08	; 8
    b0dc:	80 e4       	ldi	r24, 0x40	; 64
    b0de:	92 e0       	ldi	r25, 0x02	; 2
    b0e0:	19 95       	eicall
}
    b0e2:	ff 91       	pop	r31
    b0e4:	ef 91       	pop	r30
    b0e6:	bf 91       	pop	r27
    b0e8:	af 91       	pop	r26
    b0ea:	9f 91       	pop	r25
    b0ec:	8f 91       	pop	r24
    b0ee:	7f 91       	pop	r23
    b0f0:	6f 91       	pop	r22
    b0f2:	5f 91       	pop	r21
    b0f4:	4f 91       	pop	r20
    b0f6:	3f 91       	pop	r19
    b0f8:	2f 91       	pop	r18
    b0fa:	0f 90       	pop	r0
    b0fc:	0b be       	out	0x3b, r0	; 59
    b0fe:	0f 90       	pop	r0
    b100:	0f be       	out	0x3f, r0	; 63
    b102:	0f 90       	pop	r0
    b104:	1f 90       	pop	r1
    b106:	18 95       	reti

0000b108 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    b108:	df 92       	push	r13
    b10a:	ef 92       	push	r14
    b10c:	ff 92       	push	r15
    b10e:	0f 93       	push	r16
    b110:	1f 93       	push	r17
    b112:	cf 93       	push	r28
    b114:	df 93       	push	r29
    b116:	ec 01       	movw	r28, r24
    b118:	8b 01       	movw	r16, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    b11a:	c1 15       	cp	r28, r1
    b11c:	82 e0       	ldi	r24, 0x02	; 2
    b11e:	d8 07       	cpc	r29, r24
    b120:	19 f4       	brne	.+6      	; 0xb128 <adc_write_configuration+0x20>
    b122:	54 de       	rcall	.-856    	; 0xadcc <adc_get_calibration_data.part.0>
    b124:	7c 01       	movw	r14, r24
    b126:	0d c0       	rjmp	.+26     	; 0xb142 <adc_write_configuration+0x3a>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    b128:	c0 34       	cpi	r28, 0x40	; 64
    b12a:	e2 e0       	ldi	r30, 0x02	; 2
    b12c:	de 07       	cpc	r29, r30
    b12e:	31 f5       	brne	.+76     	; 0xb17c <adc_write_configuration+0x74>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    b130:	85 e2       	ldi	r24, 0x25	; 37
    b132:	47 de       	rcall	.-882    	; 0xadc2 <nvm_read_production_signature_row>
    b134:	f8 2e       	mov	r15, r24
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    b136:	84 e2       	ldi	r24, 0x24	; 36
    b138:	44 de       	rcall	.-888    	; 0xadc2 <nvm_read_production_signature_row>
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
		data <<= 8;
    b13a:	3f 2d       	mov	r19, r15
    b13c:	20 e0       	ldi	r18, 0x00	; 0
		data |= nvm_read_production_signature_row(ADCBCAL0);
    b13e:	79 01       	movw	r14, r18
    b140:	e8 2a       	or	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    b142:	df b6       	in	r13, 0x3f	; 63
	cpu_irq_disable();
    b144:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    b146:	ce 01       	movw	r24, r28
    b148:	d4 dd       	rcall	.-1112   	; 0xacf2 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    b14a:	28 81       	ld	r18, Y

	adc->CTRLA = ADC_FLUSH_bm;
    b14c:	82 e0       	ldi	r24, 0x02	; 2
    b14e:	88 83       	st	Y, r24
	adc->CAL = cal;
    b150:	ec 86       	std	Y+12, r14	; 0x0c
    b152:	fd 86       	std	Y+13, r15	; 0x0d
	adc->CMP = conf->cmp;
    b154:	f8 01       	movw	r30, r16
    b156:	85 81       	ldd	r24, Z+5	; 0x05
    b158:	96 81       	ldd	r25, Z+6	; 0x06
    b15a:	88 8f       	std	Y+24, r24	; 0x18
    b15c:	99 8f       	std	Y+25, r25	; 0x19
	adc->REFCTRL = conf->refctrl;
    b15e:	82 81       	ldd	r24, Z+2	; 0x02
    b160:	8a 83       	std	Y+2, r24	; 0x02
	adc->PRESCALER = conf->prescaler;
    b162:	84 81       	ldd	r24, Z+4	; 0x04
    b164:	8c 83       	std	Y+4, r24	; 0x04
	adc->EVCTRL = conf->evctrl;
    b166:	83 81       	ldd	r24, Z+3	; 0x03
    b168:	8b 83       	std	Y+3, r24	; 0x03
	adc->CTRLB = conf->ctrlb;
    b16a:	81 81       	ldd	r24, Z+1	; 0x01
    b16c:	89 83       	std	Y+1, r24	; 0x01
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
	enable = adc->CTRLA & ADC_ENABLE_bm;
    b16e:	21 70       	andi	r18, 0x01	; 1
	adc->REFCTRL = conf->refctrl;
	adc->PRESCALER = conf->prescaler;
	adc->EVCTRL = conf->evctrl;
	adc->CTRLB = conf->ctrlb;

	adc->CTRLA = enable | conf->ctrla;
    b170:	80 81       	ld	r24, Z
    b172:	28 2b       	or	r18, r24
    b174:	28 83       	st	Y, r18

	adc_disable_clock(adc);
    b176:	ce 01       	movw	r24, r28
    b178:	dc dd       	rcall	.-1096   	; 0xad32 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    b17a:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    b17c:	df 91       	pop	r29
    b17e:	cf 91       	pop	r28
    b180:	1f 91       	pop	r17
    b182:	0f 91       	pop	r16
    b184:	ff 90       	pop	r15
    b186:	ef 90       	pop	r14
    b188:	df 90       	pop	r13
    b18a:	08 95       	ret

0000b18c <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    b18c:	ff 92       	push	r15
    b18e:	0f 93       	push	r16
    b190:	1f 93       	push	r17
    b192:	cf 93       	push	r28
    b194:	df 93       	push	r29
    b196:	ec 01       	movw	r28, r24
    b198:	8b 01       	movw	r16, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    b19a:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    b19c:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    b19e:	a9 dd       	rcall	.-1198   	; 0xacf2 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    b1a0:	88 81       	ld	r24, Y
    b1a2:	80 7c       	andi	r24, 0xC0	; 192
    b1a4:	f8 01       	movw	r30, r16
    b1a6:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    b1a8:	88 8d       	ldd	r24, Y+24	; 0x18
    b1aa:	99 8d       	ldd	r25, Y+25	; 0x19
    b1ac:	85 83       	std	Z+5, r24	; 0x05
    b1ae:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    b1b0:	8a 81       	ldd	r24, Y+2	; 0x02
    b1b2:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    b1b4:	8c 81       	ldd	r24, Y+4	; 0x04
    b1b6:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    b1b8:	8b 81       	ldd	r24, Y+3	; 0x03
    b1ba:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    b1bc:	89 81       	ldd	r24, Y+1	; 0x01
    b1be:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
    b1c0:	ce 01       	movw	r24, r28
    b1c2:	b7 dd       	rcall	.-1170   	; 0xad32 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    b1c4:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    b1c6:	df 91       	pop	r29
    b1c8:	cf 91       	pop	r28
    b1ca:	1f 91       	pop	r17
    b1cc:	0f 91       	pop	r16
    b1ce:	ff 90       	pop	r15
    b1d0:	08 95       	ret

0000b1d2 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    b1d2:	af 92       	push	r10
    b1d4:	bf 92       	push	r11
    b1d6:	df 92       	push	r13
    b1d8:	ef 92       	push	r14
    b1da:	ff 92       	push	r15
    b1dc:	0f 93       	push	r16
    b1de:	1f 93       	push	r17
    b1e0:	cf 93       	push	r28
    b1e2:	df 93       	push	r29
    b1e4:	1f 92       	push	r1
    b1e6:	cd b7       	in	r28, 0x3d	; 61
    b1e8:	de b7       	in	r29, 0x3e	; 62
    b1ea:	7c 01       	movw	r14, r24
    b1ec:	8a 01       	movw	r16, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    b1ee:	86 2f       	mov	r24, r22
    b1f0:	83 70       	andi	r24, 0x03	; 3
		index += 2;
		ch_mask >>= 2;
    b1f2:	96 2f       	mov	r25, r22
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    b1f4:	21 f4       	brne	.+8      	; 0xb1fe <adcch_write_configuration+0x2c>
		index += 2;
		ch_mask >>= 2;
    b1f6:	96 95       	lsr	r25
    b1f8:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    b1fa:	82 e0       	ldi	r24, 0x02	; 2
    b1fc:	01 c0       	rjmp	.+2      	; 0xb200 <adcch_write_configuration+0x2e>
 */
__always_inline ADC_CH_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask);

__always_inline ADC_CH_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    b1fe:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    b200:	90 ff       	sbrs	r25, 0
		index++;
    b202:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    b204:	57 01       	movw	r10, r14
    b206:	90 e2       	ldi	r25, 0x20	; 32
    b208:	a9 0e       	add	r10, r25
    b20a:	b1 1c       	adc	r11, r1
    b20c:	e8 e0       	ldi	r30, 0x08	; 8
    b20e:	8e 9f       	mul	r24, r30
    b210:	a0 0c       	add	r10, r0
    b212:	b1 1c       	adc	r11, r1
    b214:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    b216:	df b6       	in	r13, 0x3f	; 63
	cpu_irq_disable();
    b218:	f8 94       	cli
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    b21a:	c7 01       	movw	r24, r14
    b21c:	69 83       	std	Y+1, r22	; 0x01
    b21e:	69 dd       	rcall	.-1326   	; 0xacf2 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    b220:	f8 01       	movw	r30, r16
    b222:	80 81       	ld	r24, Z
    b224:	f5 01       	movw	r30, r10
    b226:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    b228:	f8 01       	movw	r30, r16
    b22a:	82 81       	ldd	r24, Z+2	; 0x02
    b22c:	f5 01       	movw	r30, r10
    b22e:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    b230:	f8 01       	movw	r30, r16
    b232:	81 81       	ldd	r24, Z+1	; 0x01
    b234:	f5 01       	movw	r30, r10
    b236:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    b238:	69 81       	ldd	r22, Y+1	; 0x01
    b23a:	60 ff       	sbrs	r22, 0
    b23c:	04 c0       	rjmp	.+8      	; 0xb246 <adcch_write_configuration+0x74>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    b23e:	f8 01       	movw	r30, r16
    b240:	83 81       	ldd	r24, Z+3	; 0x03
    b242:	f5 01       	movw	r30, r10
    b244:	86 83       	std	Z+6, r24	; 0x06
	}
	adc_disable_clock(adc);
    b246:	c7 01       	movw	r24, r14
    b248:	74 dd       	rcall	.-1304   	; 0xad32 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    b24a:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    b24c:	0f 90       	pop	r0
    b24e:	df 91       	pop	r29
    b250:	cf 91       	pop	r28
    b252:	1f 91       	pop	r17
    b254:	0f 91       	pop	r16
    b256:	ff 90       	pop	r15
    b258:	ef 90       	pop	r14
    b25a:	df 90       	pop	r13
    b25c:	bf 90       	pop	r11
    b25e:	af 90       	pop	r10
    b260:	08 95       	ret

0000b262 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    b262:	af 92       	push	r10
    b264:	bf 92       	push	r11
    b266:	df 92       	push	r13
    b268:	ef 92       	push	r14
    b26a:	ff 92       	push	r15
    b26c:	0f 93       	push	r16
    b26e:	1f 93       	push	r17
    b270:	cf 93       	push	r28
    b272:	df 93       	push	r29
    b274:	1f 92       	push	r1
    b276:	cd b7       	in	r28, 0x3d	; 61
    b278:	de b7       	in	r29, 0x3e	; 62
    b27a:	7c 01       	movw	r14, r24
    b27c:	8a 01       	movw	r16, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    b27e:	86 2f       	mov	r24, r22
    b280:	83 70       	andi	r24, 0x03	; 3
		index += 2;
		ch_mask >>= 2;
    b282:	96 2f       	mov	r25, r22
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    b284:	21 f4       	brne	.+8      	; 0xb28e <adcch_read_configuration+0x2c>
		index += 2;
		ch_mask >>= 2;
    b286:	96 95       	lsr	r25
    b288:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    b28a:	82 e0       	ldi	r24, 0x02	; 2
    b28c:	01 c0       	rjmp	.+2      	; 0xb290 <adcch_read_configuration+0x2e>
 */
__always_inline ADC_CH_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask);

__always_inline ADC_CH_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    b28e:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    b290:	90 ff       	sbrs	r25, 0
		index++;
    b292:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    b294:	57 01       	movw	r10, r14
    b296:	90 e2       	ldi	r25, 0x20	; 32
    b298:	a9 0e       	add	r10, r25
    b29a:	b1 1c       	adc	r11, r1
    b29c:	e8 e0       	ldi	r30, 0x08	; 8
    b29e:	8e 9f       	mul	r24, r30
    b2a0:	a0 0c       	add	r10, r0
    b2a2:	b1 1c       	adc	r11, r1
    b2a4:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    b2a6:	df b6       	in	r13, 0x3f	; 63
	cpu_irq_disable();
    b2a8:	f8 94       	cli

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    b2aa:	c7 01       	movw	r24, r14
    b2ac:	69 83       	std	Y+1, r22	; 0x01
    b2ae:	21 dd       	rcall	.-1470   	; 0xacf2 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    b2b0:	f5 01       	movw	r30, r10
    b2b2:	80 81       	ld	r24, Z
    b2b4:	f8 01       	movw	r30, r16
    b2b6:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    b2b8:	f5 01       	movw	r30, r10
    b2ba:	82 81       	ldd	r24, Z+2	; 0x02
    b2bc:	f8 01       	movw	r30, r16
    b2be:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    b2c0:	f5 01       	movw	r30, r10
    b2c2:	81 81       	ldd	r24, Z+1	; 0x01
    b2c4:	f8 01       	movw	r30, r16
    b2c6:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    b2c8:	69 81       	ldd	r22, Y+1	; 0x01
    b2ca:	60 ff       	sbrs	r22, 0
    b2cc:	04 c0       	rjmp	.+8      	; 0xb2d6 <adcch_read_configuration+0x74>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    b2ce:	f5 01       	movw	r30, r10
    b2d0:	86 81       	ldd	r24, Z+6	; 0x06
    b2d2:	f8 01       	movw	r30, r16
    b2d4:	83 83       	std	Z+3, r24	; 0x03
	}
	adc_disable_clock(adc);
    b2d6:	c7 01       	movw	r24, r14
    b2d8:	2c dd       	rcall	.-1448   	; 0xad32 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    b2da:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    b2dc:	0f 90       	pop	r0
    b2de:	df 91       	pop	r29
    b2e0:	cf 91       	pop	r28
    b2e2:	1f 91       	pop	r17
    b2e4:	0f 91       	pop	r16
    b2e6:	ff 90       	pop	r15
    b2e8:	ef 90       	pop	r14
    b2ea:	df 90       	pop	r13
    b2ec:	bf 90       	pop	r11
    b2ee:	af 90       	pop	r10
    b2f0:	08 95       	ret

0000b2f2 <wdt_wait_while_busy>:
	uint8_t temp = (WDT.WINCTRL & WDT_WPER_gm) |
			(1 << WDT_WEN_bp) | (1 << WDT_WCEN_bp);
	ccp_write_io((void *)&WDT.WINCTRL, temp);
	wdt_wait_while_busy();
	return true;
}
    b2f2:	80 91 82 00 	lds	r24, 0x0082
    b2f6:	80 fd       	sbrc	r24, 0
    b2f8:	fc cf       	rjmp	.-8      	; 0xb2f2 <wdt_wait_while_busy>
    b2fa:	08 95       	ret

0000b2fc <wdt_set_timeout_period>:
    b2fc:	60 91 80 00 	lds	r22, 0x0080
    b300:	62 70       	andi	r22, 0x02	; 2
    b302:	61 60       	ori	r22, 0x01	; 1
    b304:	88 0f       	add	r24, r24
    b306:	88 0f       	add	r24, r24
    b308:	8c 73       	andi	r24, 0x3C	; 60
    b30a:	68 2b       	or	r22, r24
    b30c:	80 e8       	ldi	r24, 0x80	; 128
    b30e:	90 e0       	ldi	r25, 0x00	; 0
    b310:	4c d5       	rcall	.+2712   	; 0xbdaa <ccp_write_io>
    b312:	ef cf       	rjmp	.-34     	; 0xb2f2 <wdt_wait_while_busy>

0000b314 <wdt_enable>:
    b314:	60 91 80 00 	lds	r22, 0x0080
    b318:	6c 73       	andi	r22, 0x3C	; 60
    b31a:	63 60       	ori	r22, 0x03	; 3
    b31c:	80 e8       	ldi	r24, 0x80	; 128
    b31e:	90 e0       	ldi	r25, 0x00	; 0
    b320:	44 d5       	rcall	.+2696   	; 0xbdaa <ccp_write_io>
    b322:	e7 cf       	rjmp	.-50     	; 0xb2f2 <wdt_wait_while_busy>

0000b324 <wdt_reset_mcu>:
uint8_t temp;
	/*
	 * WDT enabled (minimum timeout period for max. security)
	 */
	temp = WDT_PER_8CLK_gc | (1 << WDT_ENABLE_bp) | (1 << WDT_CEN_bp);
	ccp_write_io((void *)&WDT.CTRL, temp);
    b324:	63 e0       	ldi	r22, 0x03	; 3
    b326:	80 e8       	ldi	r24, 0x80	; 128
    b328:	90 e0       	ldi	r25, 0x00	; 0
    b32a:	3f d5       	rcall	.+2686   	; 0xbdaa <ccp_write_io>
	wdt_wait_while_busy();
    b32c:	e2 df       	rcall	.-60     	; 0xb2f2 <wdt_wait_while_busy>
	/*
	 * WDT enabled (maximum window period for max. security)
	 */
	temp = WDT_WPER_8KCLK_gc | (1 << WDT_WEN_bp) | (1 << WDT_WCEN_bp);
	ccp_write_io((void *)&WDT.WINCTRL, temp);
    b32e:	6b e2       	ldi	r22, 0x2B	; 43
    b330:	81 e8       	ldi	r24, 0x81	; 129
    b332:	90 e0       	ldi	r25, 0x00	; 0
    b334:	3a d5       	rcall	.+2676   	; 0xbdaa <ccp_write_io>
	wdt_wait_while_busy();
    b336:	dd df       	rcall	.-70     	; 0xb2f2 <wdt_wait_while_busy>
	/*
	 * WDT Reset during window => WDT generates an Hard Reset.
	 */
	wdt_reset();
    b338:	a8 95       	wdr
    b33a:	ff cf       	rjmp	.-2      	; 0xb33a <wdt_reset_mcu+0x16>

0000b33c <debug_string>:
	debug_string(level,sz,PGM_STRING);
}

void debug_string(uint8_t level,const char * const sz,const uint8_t isPGM)
{
	if(level>g_log_verbosity) return;
    b33c:	90 91 1d 20 	lds	r25, 0x201D
    b340:	98 17       	cp	r25, r24
    b342:	28 f1       	brcs	.+74     	; 0xb38e <debug_string+0x52>

	const char * p = sz;

	if(isPGM) {
    b344:	41 11       	cpse	r20, r1
    b346:	02 c0       	rjmp	.+4      	; 0xb34c <debug_string+0x10>
    b348:	fb 01       	movw	r30, r22
    b34a:	1e c0       	rjmp	.+60     	; 0xb388 <debug_string+0x4c>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    b34c:	80 91 cf 01 	lds	r24, 0x01CF
    b350:	87 fd       	sbrc	r24, 7
    b352:	fc cf       	rjmp	.-8      	; 0xb34c <debug_string+0x10>
    b354:	9b 01       	movw	r18, r22
		nvm_wait_until_ready();
		while(1) {
			const uint8_t c = nvm_flash_read_byte( p++ );
    b356:	c9 01       	movw	r24, r18
    b358:	aa 27       	eor	r26, r26
    b35a:	97 fd       	sbrc	r25, 7
    b35c:	a0 95       	com	r26
    b35e:	ba 2f       	mov	r27, r26
    b360:	2f 5f       	subi	r18, 0xFF	; 255
    b362:	3f 4f       	sbci	r19, 0xFF	; 255
 * \return Byte from program memory
 */
static inline uint8_t nvm_flash_read_byte(flash_addr_t addr)
{
#if defined(__GNUC__)
	return pgm_read_byte_far(addr);
    b364:	ab bf       	out	0x3b, r26	; 59
    b366:	fc 01       	movw	r30, r24
    b368:	87 91       	elpm	r24, Z+
			if(c==0) break;
    b36a:	88 23       	and	r24, r24
    b36c:	81 f0       	breq	.+32     	; 0xb38e <debug_string+0x52>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    b36e:	90 91 a1 0b 	lds	r25, 0x0BA1
//			while (udi_cdc_is_tx_ready()) {}
//			udi_cdc_putc(c);
			while (usart_data_register_is_empty(USART_DEBUG) == false) {}
    b372:	95 ff       	sbrs	r25, 5
    b374:	fc cf       	rjmp	.-8      	; 0xb36e <debug_string+0x32>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    b376:	80 93 a0 0b 	sts	0x0BA0, r24
    b37a:	ed cf       	rjmp	.-38     	; 0xb356 <debug_string+0x1a>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    b37c:	90 91 a1 0b 	lds	r25, 0x0BA1
			usart_put(USART_DEBUG, c);
		}
		
	} else {
		while(*p) {
			while (usart_data_register_is_empty(USART_DEBUG) == false) {}
    b380:	95 ff       	sbrs	r25, 5
    b382:	fc cf       	rjmp	.-8      	; 0xb37c <debug_string+0x40>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    b384:	80 93 a0 0b 	sts	0x0BA0, r24
			while (usart_data_register_is_empty(USART_DEBUG) == false) {}
			usart_put(USART_DEBUG, c);
		}
		
	} else {
		while(*p) {
    b388:	81 91       	ld	r24, Z+
    b38a:	81 11       	cpse	r24, r1
    b38c:	f7 cf       	rjmp	.-18     	; 0xb37c <debug_string+0x40>
    b38e:	08 95       	ret

0000b390 <debug_string_P>:
//Static declarations
static volatile bool g_cdc_enable = false;

void debug_string_P(uint8_t level,const char * const sz)
{
	debug_string(level,sz,PGM_STRING);
    b390:	41 e0       	ldi	r20, 0x01	; 1
    b392:	d4 cf       	rjmp	.-88     	; 0xb33c <debug_string>

0000b394 <debug_function_out_name_print>:
	}
}


void debug_function_out_name_print(const char * const fname[])
{
    b394:	cf 93       	push	r28
    b396:	df 93       	push	r29
    b398:	ec 01       	movw	r28, r24
	debug_string(VERBOSE,PSTR("  [OUT]\t/\\ "),PGM_STRING);
    b39a:	41 e0       	ldi	r20, 0x01	; 1
    b39c:	6c e1       	ldi	r22, 0x1C	; 28
    b39e:	70 e2       	ldi	r23, 0x20	; 32
    b3a0:	82 e0       	ldi	r24, 0x02	; 2
    b3a2:	cc df       	rcall	.-104    	; 0xb33c <debug_string>
	debug_string(VERBOSE,*fname,RAM_STRING);
    b3a4:	68 81       	ld	r22, Y
    b3a6:	79 81       	ldd	r23, Y+1	; 0x01
    b3a8:	40 e0       	ldi	r20, 0x00	; 0
    b3aa:	82 e0       	ldi	r24, 0x02	; 2
    b3ac:	c7 df       	rcall	.-114    	; 0xb33c <debug_string>
	debug_string(VERBOSE,PSTR("\r\n"),PGM_STRING);
    b3ae:	41 e0       	ldi	r20, 0x01	; 1
    b3b0:	68 e2       	ldi	r22, 0x28	; 40
    b3b2:	70 e2       	ldi	r23, 0x20	; 32
    b3b4:	82 e0       	ldi	r24, 0x02	; 2
}
    b3b6:	df 91       	pop	r29
    b3b8:	cf 91       	pop	r28

void debug_function_out_name_print(const char * const fname[])
{
	debug_string(VERBOSE,PSTR("  [OUT]\t/\\ "),PGM_STRING);
	debug_string(VERBOSE,*fname,RAM_STRING);
	debug_string(VERBOSE,PSTR("\r\n"),PGM_STRING);
    b3ba:	c0 cf       	rjmp	.-128    	; 0xb33c <debug_string>

0000b3bc <debug_function_in_name_print>:
}

void debug_function_in_name_print(const uint8_t level,const char fname[])
{
    b3bc:	1f 93       	push	r17
    b3be:	cf 93       	push	r28
    b3c0:	df 93       	push	r29
    b3c2:	18 2f       	mov	r17, r24
    b3c4:	eb 01       	movw	r28, r22
	debug_string(level,PSTR("  [IN]\t\\/ "),PGM_STRING);\
    b3c6:	41 e0       	ldi	r20, 0x01	; 1
    b3c8:	6b e2       	ldi	r22, 0x2B	; 43
    b3ca:	70 e2       	ldi	r23, 0x20	; 32
    b3cc:	b7 df       	rcall	.-146    	; 0xb33c <debug_string>
	debug_string(level,fname,RAM_STRING);\
    b3ce:	40 e0       	ldi	r20, 0x00	; 0
    b3d0:	be 01       	movw	r22, r28
    b3d2:	81 2f       	mov	r24, r17
    b3d4:	b3 df       	rcall	.-154    	; 0xb33c <debug_string>
	debug_string(level,PSTR("\r\n"),PGM_STRING);
    b3d6:	41 e0       	ldi	r20, 0x01	; 1
    b3d8:	66 e3       	ldi	r22, 0x36	; 54
    b3da:	70 e2       	ldi	r23, 0x20	; 32
    b3dc:	81 2f       	mov	r24, r17
}
    b3de:	df 91       	pop	r29
    b3e0:	cf 91       	pop	r28
    b3e2:	1f 91       	pop	r17

void debug_function_in_name_print(const uint8_t level,const char fname[])
{
	debug_string(level,PSTR("  [IN]\t\\/ "),PGM_STRING);\
	debug_string(level,fname,RAM_STRING);\
	debug_string(level,PSTR("\r\n"),PGM_STRING);
    b3e4:	ab cf       	rjmp	.-170    	; 0xb33c <debug_string>

0000b3e6 <debug_function_in_name_print_P>:
}

void debug_function_in_name_print_P(const uint8_t level,const char fname[])
{
    b3e6:	cf 93       	push	r28
    b3e8:	df 93       	push	r29
    b3ea:	eb 01       	movw	r28, r22
	debug_string(VERBOSE,PSTR("  [IN]\t\\/ "),PGM_STRING);
    b3ec:	41 e0       	ldi	r20, 0x01	; 1
    b3ee:	69 e3       	ldi	r22, 0x39	; 57
    b3f0:	70 e2       	ldi	r23, 0x20	; 32
    b3f2:	82 e0       	ldi	r24, 0x02	; 2
    b3f4:	a3 df       	rcall	.-186    	; 0xb33c <debug_string>
	debug_string(VERBOSE,fname,PGM_STRING);
    b3f6:	41 e0       	ldi	r20, 0x01	; 1
    b3f8:	be 01       	movw	r22, r28
    b3fa:	82 e0       	ldi	r24, 0x02	; 2
    b3fc:	9f df       	rcall	.-194    	; 0xb33c <debug_string>
	debug_string(VERBOSE,PSTR("\r\n"),PGM_STRING);
    b3fe:	41 e0       	ldi	r20, 0x01	; 1
    b400:	64 e4       	ldi	r22, 0x44	; 68
    b402:	70 e2       	ldi	r23, 0x20	; 32
    b404:	82 e0       	ldi	r24, 0x02	; 2

}
    b406:	df 91       	pop	r29
    b408:	cf 91       	pop	r28

void debug_function_in_name_print_P(const uint8_t level,const char fname[])
{
	debug_string(VERBOSE,PSTR("  [IN]\t\\/ "),PGM_STRING);
	debug_string(VERBOSE,fname,PGM_STRING);
	debug_string(VERBOSE,PSTR("\r\n"),PGM_STRING);
    b40a:	98 cf       	rjmp	.-208    	; 0xb33c <debug_string>

0000b40c <debug_function_out_name_print_P>:

}

void debug_function_out_name_print_P(const char * const fname[])
{
    b40c:	cf 93       	push	r28
    b40e:	df 93       	push	r29
    b410:	ec 01       	movw	r28, r24
	debug_string(VERBOSE,PSTR("  [OUT]\t/\\ "),PGM_STRING);
    b412:	41 e0       	ldi	r20, 0x01	; 1
    b414:	67 e4       	ldi	r22, 0x47	; 71
    b416:	70 e2       	ldi	r23, 0x20	; 32
    b418:	82 e0       	ldi	r24, 0x02	; 2
    b41a:	90 df       	rcall	.-224    	; 0xb33c <debug_string>
	debug_string(VERBOSE,*fname,PGM_STRING);
    b41c:	68 81       	ld	r22, Y
    b41e:	79 81       	ldd	r23, Y+1	; 0x01
    b420:	41 e0       	ldi	r20, 0x01	; 1
    b422:	82 e0       	ldi	r24, 0x02	; 2
    b424:	8b df       	rcall	.-234    	; 0xb33c <debug_string>
	debug_string(VERBOSE,PSTR("\r\n"),PGM_STRING);
    b426:	41 e0       	ldi	r20, 0x01	; 1
    b428:	63 e5       	ldi	r22, 0x53	; 83
    b42a:	70 e2       	ldi	r23, 0x20	; 32
    b42c:	82 e0       	ldi	r24, 0x02	; 2
}
    b42e:	df 91       	pop	r29
    b430:	cf 91       	pop	r28

void debug_function_out_name_print_P(const char * const fname[])
{
	debug_string(VERBOSE,PSTR("  [OUT]\t/\\ "),PGM_STRING);
	debug_string(VERBOSE,*fname,PGM_STRING);
	debug_string(VERBOSE,PSTR("\r\n"),PGM_STRING);
    b432:	84 cf       	rjmp	.-248    	; 0xb33c <debug_string>

0000b434 <dump_rainstats_to_log>:
}

void dump_rainstats_to_log(const uint8_t id)
{
    b434:	0f 93       	push	r16
    b436:	1f 93       	push	r17
    b438:	cf 93       	push	r28
    b43a:	df 93       	push	r29
    b43c:	cd b7       	in	r28, 0x3d	; 61
    b43e:	de b7       	in	r29, 0x3e	; 62
    b440:	ca 50       	subi	r28, 0x0A	; 10
    b442:	d1 40       	sbci	r29, 0x01	; 1
    b444:	cd bf       	out	0x3d, r28	; 61
    b446:	de bf       	out	0x3e, r29	; 62
	RAINGAUGE_STATS rs;
	raingauge_get_stats(id,&rs);
    b448:	be 01       	movw	r22, r28
    b44a:	6f 5f       	subi	r22, 0xFF	; 255
    b44c:	7e 4f       	sbci	r23, 0xFE	; 254
    b44e:	0e 94 a7 4a 	call	0x954e	; 0x954e <raingauge_get_stats>

	char szBuf[256];
	sprintf_P(szBuf,PSTR("\tfirst tip cents: %u\r\n\tlast tip cents:%u\r\n\tmax slope cents: %u\r\n\ttips: %u\r\n\tmax slope %u\r\n")
    b452:	c8 5f       	subi	r28, 0xF8	; 248
    b454:	de 4f       	sbci	r29, 0xFE	; 254
    b456:	88 81       	ld	r24, Y
    b458:	c8 50       	subi	r28, 0x08	; 8
    b45a:	d1 40       	sbci	r29, 0x01	; 1
    b45c:	8f 93       	push	r24
    b45e:	c9 5f       	subi	r28, 0xF9	; 249
    b460:	de 4f       	sbci	r29, 0xFE	; 254
    b462:	88 81       	ld	r24, Y
    b464:	c7 50       	subi	r28, 0x07	; 7
    b466:	d1 40       	sbci	r29, 0x01	; 1
    b468:	8f 93       	push	r24
    b46a:	c6 5f       	subi	r28, 0xF6	; 246
    b46c:	de 4f       	sbci	r29, 0xFE	; 254
    b46e:	88 81       	ld	r24, Y
    b470:	ca 50       	subi	r28, 0x0A	; 10
    b472:	d1 40       	sbci	r29, 0x01	; 1
    b474:	8f 93       	push	r24
    b476:	c7 5f       	subi	r28, 0xF7	; 247
    b478:	de 4f       	sbci	r29, 0xFE	; 254
    b47a:	88 81       	ld	r24, Y
    b47c:	c9 50       	subi	r28, 0x09	; 9
    b47e:	d1 40       	sbci	r29, 0x01	; 1
    b480:	8f 93       	push	r24
    b482:	ca 5f       	subi	r28, 0xFA	; 250
    b484:	de 4f       	sbci	r29, 0xFE	; 254
    b486:	88 81       	ld	r24, Y
    b488:	c6 50       	subi	r28, 0x06	; 6
    b48a:	d1 40       	sbci	r29, 0x01	; 1
    b48c:	8f 93       	push	r24
    b48e:	cb 5f       	subi	r28, 0xFB	; 251
    b490:	de 4f       	sbci	r29, 0xFE	; 254
    b492:	88 81       	ld	r24, Y
    b494:	c5 50       	subi	r28, 0x05	; 5
    b496:	d1 40       	sbci	r29, 0x01	; 1
    b498:	8f 93       	push	r24
    b49a:	cc 5f       	subi	r28, 0xFC	; 252
    b49c:	de 4f       	sbci	r29, 0xFE	; 254
    b49e:	88 81       	ld	r24, Y
    b4a0:	c4 50       	subi	r28, 0x04	; 4
    b4a2:	d1 40       	sbci	r29, 0x01	; 1
    b4a4:	8f 93       	push	r24
    b4a6:	cd 5f       	subi	r28, 0xFD	; 253
    b4a8:	de 4f       	sbci	r29, 0xFE	; 254
    b4aa:	88 81       	ld	r24, Y
    b4ac:	c3 50       	subi	r28, 0x03	; 3
    b4ae:	d1 40       	sbci	r29, 0x01	; 1
    b4b0:	8f 93       	push	r24
    b4b2:	ce 5f       	subi	r28, 0xFE	; 254
    b4b4:	de 4f       	sbci	r29, 0xFE	; 254
    b4b6:	88 81       	ld	r24, Y
    b4b8:	c2 50       	subi	r28, 0x02	; 2
    b4ba:	d1 40       	sbci	r29, 0x01	; 1
    b4bc:	8f 93       	push	r24
    b4be:	cf 5f       	subi	r28, 0xFF	; 255
    b4c0:	de 4f       	sbci	r29, 0xFE	; 254
    b4c2:	88 81       	ld	r24, Y
    b4c4:	c1 50       	subi	r28, 0x01	; 1
    b4c6:	d1 40       	sbci	r29, 0x01	; 1
    b4c8:	8f 93       	push	r24
    b4ca:	86 e5       	ldi	r24, 0x56	; 86
    b4cc:	90 e2       	ldi	r25, 0x20	; 32
    b4ce:	9f 93       	push	r25
    b4d0:	8f 93       	push	r24
    b4d2:	8e 01       	movw	r16, r28
    b4d4:	0f 5f       	subi	r16, 0xFF	; 255
    b4d6:	1f 4f       	sbci	r17, 0xFF	; 255
    b4d8:	1f 93       	push	r17
    b4da:	0f 93       	push	r16
    b4dc:	0e 94 b5 74 	call	0xe96a	; 0xe96a <sprintf_P>
	,rs.lastTip_cents
	,rs.maxSlope_cents
	,rs.tips
	,rs.maxSlope);

	debug_string(NORMAL,szBuf,false);
    b4e0:	40 e0       	ldi	r20, 0x00	; 0
    b4e2:	b8 01       	movw	r22, r16
    b4e4:	81 e0       	ldi	r24, 0x01	; 1
    b4e6:	2a df       	rcall	.-428    	; 0xb33c <debug_string>
    b4e8:	cd bf       	out	0x3d, r28	; 61
    b4ea:	de bf       	out	0x3e, r29	; 62
}
    b4ec:	c6 5f       	subi	r28, 0xF6	; 246
    b4ee:	de 4f       	sbci	r29, 0xFE	; 254
    b4f0:	cd bf       	out	0x3d, r28	; 61
    b4f2:	de bf       	out	0x3e, r29	; 62
    b4f4:	df 91       	pop	r29
    b4f6:	cf 91       	pop	r28
    b4f8:	1f 91       	pop	r17
    b4fa:	0f 91       	pop	r16
    b4fc:	08 95       	ret

0000b4fe <vbus_action>:

void vbus_action(bool b_high)
{
	if (b_high) {
    b4fe:	81 11       	cpse	r24, r1
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
    b500:	0c 94 a6 6c 	jmp	0xd94c	; 0xd94c <udd_attach>
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
    b504:	0c 94 3f 6d 	jmp	0xda7e	; 0xda7e <udd_detach>

0000b508 <cdc_enable>:
}


bool cdc_enable(void)
{
	g_cdc_enable = true;
    b508:	81 e0       	ldi	r24, 0x01	; 1
    b50a:	80 93 55 24 	sts	0x2455, r24
	return true;
}
    b50e:	08 95       	ret

0000b510 <cdc_disable>:

void cdc_disable(void)
{
	g_cdc_enable = false;
    b510:	10 92 55 24 	sts	0x2455, r1
    b514:	08 95       	ret

0000b516 <cdc_set_dtr>:
}

void cdc_set_dtr(bool b_enable)
{
	if (b_enable) {
    b516:	88 23       	and	r24, r24
    b518:	21 f0       	breq	.+8      	; 0xb522 <cdc_set_dtr+0xc>
		g_cdc_enable = true;
    b51a:	81 e0       	ldi	r24, 0x01	; 1
    b51c:	80 93 55 24 	sts	0x2455, r24
    b520:	08 95       	ret
	}else{
		g_cdc_enable = false;
    b522:	10 92 55 24 	sts	0x2455, r1
    b526:	08 95       	ret

0000b528 <osc_enable_internal>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    b528:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    b52a:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    b52c:	e0 e5       	ldi	r30, 0x50	; 80
    b52e:	f0 e0       	ldi	r31, 0x00	; 0
    b530:	20 81       	ld	r18, Z
    b532:	82 2b       	or	r24, r18
    b534:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    b536:	9f bf       	out	0x3f, r25	; 63
    b538:	08 95       	ret

0000b53a <osc_enable_autocalibration.constprop.4>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    b53a:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    b53c:	f8 94       	cli
#if XMEGA_AU || XMEGA_B || XMEGA_C || XMEGA_E
		Assert((ref_id == OSC_ID_RC32KHZ)
				|| (ref_id == OSC_ID_XOSC)
				|| (ref_id == OSC_ID_USBSOF));

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    b53e:	a0 e5       	ldi	r26, 0x50	; 80
    b540:	b0 e0       	ldi	r27, 0x00	; 0
    b542:	16 96       	adiw	r26, 0x06	; 6
    b544:	8c 91       	ld	r24, X
    b546:	16 97       	sbiw	r26, 0x06	; 6
    b548:	89 7f       	andi	r24, 0xF9	; 249
    b54a:	16 96       	adiw	r26, 0x06	; 6
    b54c:	8c 93       	st	X, r24
    b54e:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    b550:	e0 e6       	ldi	r30, 0x60	; 96
    b552:	f0 e0       	ldi	r31, 0x00	; 0
    b554:	80 e8       	ldi	r24, 0x80	; 128
    b556:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    b558:	8b eb       	ldi	r24, 0xBB	; 187
    b55a:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    b55c:	16 96       	adiw	r26, 0x06	; 6
    b55e:	8c 91       	ld	r24, X
    b560:	16 97       	sbiw	r26, 0x06	; 6
    b562:	84 60       	ori	r24, 0x04	; 4
    b564:	16 96       	adiw	r26, 0x06	; 6
    b566:	8c 93       	st	X, r24
		}
		else if (ref_id == OSC_ID_RC32KHZ) {
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
		}
#endif
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    b568:	80 81       	ld	r24, Z
    b56a:	81 60       	ori	r24, 0x01	; 1
    b56c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    b56e:	9f bf       	out	0x3f, r25	; 63
    b570:	08 95       	ret

0000b572 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    b572:	cf 93       	push	r28
    b574:	df 93       	push	r29
    b576:	00 d0       	rcall	.+0      	; 0xb578 <sysclk_init+0x6>
    b578:	1f 92       	push	r1
    b57a:	cd b7       	in	r28, 0x3d	; 61
    b57c:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    b57e:	8f ef       	ldi	r24, 0xFF	; 255
    b580:	80 93 70 00 	sts	0x0070, r24
    b584:	80 93 71 00 	sts	0x0071, r24
    b588:	80 93 72 00 	sts	0x0072, r24
    b58c:	80 93 73 00 	sts	0x0073, r24
    b590:	80 93 74 00 	sts	0x0074, r24
    b594:	80 93 75 00 	sts	0x0075, r24
    b598:	80 93 76 00 	sts	0x0076, r24
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    b59c:	64 e0       	ldi	r22, 0x04	; 4
    b59e:	81 e4       	ldi	r24, 0x41	; 65
    b5a0:	90 e0       	ldi	r25, 0x00	; 0
    b5a2:	03 d4       	rcall	.+2054   	; 0xbdaa <ccp_write_io>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    b5a4:	6c e1       	ldi	r22, 0x1C	; 28
    b5a6:	70 e0       	ldi	r23, 0x00	; 0
    b5a8:	82 e0       	ldi	r24, 0x02	; 2
    b5aa:	6e d4       	rcall	.+2268   	; 0xbe88 <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    b5ac:	8c 83       	std	Y+4, r24	; 0x04
    b5ae:	6d e1       	ldi	r22, 0x1D	; 29
    b5b0:	70 e0       	ldi	r23, 0x00	; 0
    b5b2:	82 e0       	ldi	r24, 0x02	; 2
    b5b4:	69 d4       	rcall	.+2258   	; 0xbe88 <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    b5b6:	8b 83       	std	Y+3, r24	; 0x03
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    b5b8:	8b 81       	ldd	r24, Y+3	; 0x03
    b5ba:	9c 81       	ldd	r25, Y+4	; 0x04
    b5bc:	01 96       	adiw	r24, 0x01	; 1
    b5be:	21 f4       	brne	.+8      	; 0xb5c8 <sysclk_init+0x56>
		cal = 0x2340;
    b5c0:	80 e4       	ldi	r24, 0x40	; 64
    b5c2:	93 e2       	ldi	r25, 0x23	; 35
    b5c4:	8b 83       	std	Y+3, r24	; 0x03
    b5c6:	9c 83       	std	Y+4, r25	; 0x04
    b5c8:	8b 81       	ldd	r24, Y+3	; 0x03
    b5ca:	9c 81       	ldd	r25, Y+4	; 0x04
    b5cc:	89 83       	std	Y+1, r24	; 0x01
    b5ce:	9a 83       	std	Y+2, r25	; 0x02
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    b5d0:	80 93 62 00 	sts	0x0062, r24
		DFLLRC32M.CALB=MSB(calib);
    b5d4:	8a 81       	ldd	r24, Y+2	; 0x02
    b5d6:	80 93 63 00 	sts	0x0063, r24
}

static inline void osc_enable(uint8_t id)
{
	if (id != OSC_ID_XOSC) {
		osc_enable_internal(id);
    b5da:	82 e0       	ldi	r24, 0x02	; 2
    b5dc:	a5 df       	rcall	.-182    	; 0xb528 <osc_enable_internal>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    b5de:	80 91 51 00 	lds	r24, 0x0051
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    b5e2:	81 ff       	sbrs	r24, 1
    b5e4:	fc cf       	rjmp	.-8      	; 0xb5de <sysclk_init+0x6c>
			if (CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC
					!= OSC_ID_USBSOF) {
				osc_enable(CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
				osc_wait_ready(CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
    b5e6:	a9 df       	rcall	.-174    	; 0xb53a <osc_enable_autocalibration.constprop.4>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    b5e8:	61 e0       	ldi	r22, 0x01	; 1
    b5ea:	80 e4       	ldi	r24, 0x40	; 64
    b5ec:	90 e0       	ldi	r25, 0x00	; 0
    b5ee:	dd d3       	rcall	.+1978   	; 0xbdaa <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    b5f0:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    b5f2:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    b5f4:	80 91 50 00 	lds	r24, 0x0050
    b5f8:	8e 7f       	andi	r24, 0xFE	; 254
    b5fa:	80 93 50 00 	sts	0x0050, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    b5fe:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    b600:	24 96       	adiw	r28, 0x04	; 4
    b602:	cd bf       	out	0x3d, r28	; 61
    b604:	de bf       	out	0x3e, r29	; 62
    b606:	df 91       	pop	r29
    b608:	cf 91       	pop	r28
    b60a:	08 95       	ret

0000b60c <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    b60c:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
    b60e:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    b610:	fc 01       	movw	r30, r24
    b612:	e0 59       	subi	r30, 0x90	; 144
    b614:	ff 4f       	sbci	r31, 0xFF	; 255
    b616:	60 95       	com	r22
    b618:	80 81       	ld	r24, Z
    b61a:	86 23       	and	r24, r22
    b61c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    b61e:	2f bf       	out	0x3f, r18	; 63
    b620:	08 95       	ret

0000b622 <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    b622:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
    b624:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    b626:	fc 01       	movw	r30, r24
    b628:	e0 59       	subi	r30, 0x90	; 144
    b62a:	ff 4f       	sbci	r31, 0xFF	; 255
    b62c:	80 81       	ld	r24, Z
    b62e:	86 2b       	or	r24, r22
    b630:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    b632:	2f bf       	out	0x3f, r18	; 63
    b634:	08 95       	ret

0000b636 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    b636:	cf 93       	push	r28

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    b638:	86 30       	cpi	r24, 0x06	; 6
    b63a:	11 f4       	brne	.+4      	; 0xb640 <sysclk_enable_usb+0xa>
		prescaler = CLK_USBPSDIV_8_gc;
    b63c:	c8 e1       	ldi	r28, 0x18	; 24
    b63e:	01 c0       	rjmp	.+2      	; 0xb642 <sysclk_enable_usb+0xc>
	}
	else {
		prescaler = 0;
    b640:	c0 e0       	ldi	r28, 0x00	; 0

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    b642:	80 91 51 00 	lds	r24, 0x0051
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    b646:	81 fd       	sbrc	r24, 1
    b648:	07 c0       	rjmp	.+14     	; 0xb658 <sysclk_enable_usb+0x22>
}

static inline void osc_enable(uint8_t id)
{
	if (id != OSC_ID_XOSC) {
		osc_enable_internal(id);
    b64a:	82 e0       	ldi	r24, 0x02	; 2
    b64c:	6d df       	rcall	.-294    	; 0xb528 <osc_enable_internal>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    b64e:	80 91 51 00 	lds	r24, 0x0051
    b652:	81 ff       	sbrs	r24, 1
    b654:	fc cf       	rjmp	.-8      	; 0xb64e <sysclk_enable_usb+0x18>
			if (CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC
					!= OSC_ID_USBSOF) {
				osc_enable(CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
				osc_wait_ready(CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
    b656:	71 df       	rcall	.-286    	; 0xb53a <osc_enable_autocalibration.constprop.4>
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    b658:	6c 2f       	mov	r22, r28
    b65a:	63 60       	ori	r22, 0x03	; 3
    b65c:	84 e4       	ldi	r24, 0x44	; 68
    b65e:	90 e0       	ldi	r25, 0x00	; 0
    b660:	a4 d3       	rcall	.+1864   	; 0xbdaa <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    b662:	60 e4       	ldi	r22, 0x40	; 64
    b664:	80 e0       	ldi	r24, 0x00	; 0
    b666:	90 e0       	ldi	r25, 0x00	; 0
}
    b668:	cf 91       	pop	r28
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    b66a:	d0 cf       	rjmp	.-96     	; 0xb60c <sysclk_enable_module>

0000b66c <sysclk_disable_usb>:
/**
 * \brief Disable clock for the USB module
 */
void sysclk_disable_usb(void)
{
	sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    b66c:	60 e4       	ldi	r22, 0x40	; 64
    b66e:	80 e0       	ldi	r24, 0x00	; 0
    b670:	90 e0       	ldi	r25, 0x00	; 0
    b672:	d7 df       	rcall	.-82     	; 0xb622 <sysclk_disable_module>
	ccp_write_io((uint8_t *)&CLK.USBCTRL, 0);
    b674:	60 e0       	ldi	r22, 0x00	; 0
    b676:	84 e4       	ldi	r24, 0x44	; 68
    b678:	90 e0       	ldi	r25, 0x00	; 0
    b67a:	97 c3       	rjmp	.+1838   	; 0xbdaa <ccp_write_io>

0000b67c <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    b67c:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    b67e:	80 e0       	ldi	r24, 0x00	; 0
    b680:	90 e0       	ldi	r25, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    b682:	26 2f       	mov	r18, r22
    b684:	30 e0       	ldi	r19, 0x00	; 0
    b686:	d9 01       	movw	r26, r18
    b688:	08 2e       	mov	r0, r24
    b68a:	02 c0       	rjmp	.+4      	; 0xb690 <ioport_configure_port_pin+0x14>
    b68c:	b5 95       	asr	r27
    b68e:	a7 95       	ror	r26
    b690:	0a 94       	dec	r0
    b692:	e2 f7       	brpl	.-8      	; 0xb68c <ioport_configure_port_pin+0x10>
    b694:	a0 ff       	sbrs	r26, 0
    b696:	05 c0       	rjmp	.+10     	; 0xb6a2 <ioport_configure_port_pin+0x26>
 *
 */
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
    b698:	df 01       	movw	r26, r30
    b69a:	a8 0f       	add	r26, r24
    b69c:	b9 1f       	adc	r27, r25
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    b69e:	50 96       	adiw	r26, 0x10	; 16
    b6a0:	5c 93       	st	X, r21
    b6a2:	01 96       	adiw	r24, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    b6a4:	88 30       	cpi	r24, 0x08	; 8
    b6a6:	91 05       	cpc	r25, r1
    b6a8:	71 f7       	brne	.-36     	; 0xb686 <ioport_configure_port_pin+0xa>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    b6aa:	40 ff       	sbrs	r20, 0
    b6ac:	07 c0       	rjmp	.+14     	; 0xb6bc <ioport_configure_port_pin+0x40>
		if (flags & IOPORT_INIT_HIGH) {
    b6ae:	41 ff       	sbrs	r20, 1
    b6b0:	02 c0       	rjmp	.+4      	; 0xb6b6 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    b6b2:	65 83       	std	Z+5, r22	; 0x05
    b6b4:	01 c0       	rjmp	.+2      	; 0xb6b8 <ioport_configure_port_pin+0x3c>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    b6b6:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    b6b8:	61 83       	std	Z+1, r22	; 0x01
    b6ba:	08 95       	ret
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    b6bc:	62 83       	std	Z+2, r22	; 0x02
    b6be:	08 95       	ret

0000b6c0 <udc_valid_address>:
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
	return udc_ptr_iface;
}
    b6c0:	80 91 6c 27 	lds	r24, 0x276C
    b6c4:	8f 77       	andi	r24, 0x7F	; 127
    b6c6:	0c 94 47 6d 	jmp	0xda8e	; 0xda8e <udd_set_address>

0000b6ca <udc_update_iface_desc>:
    b6ca:	90 91 58 24 	lds	r25, 0x2458
    b6ce:	99 23       	and	r25, r25
    b6d0:	69 f1       	breq	.+90     	; 0xb72c <udc_update_iface_desc+0x62>
    b6d2:	e0 91 59 24 	lds	r30, 0x2459
    b6d6:	f0 91 5a 24 	lds	r31, 0x245A
    b6da:	01 90       	ld	r0, Z+
    b6dc:	f0 81       	ld	r31, Z
    b6de:	e0 2d       	mov	r30, r0
    b6e0:	94 81       	ldd	r25, Z+4	; 0x04
    b6e2:	89 17       	cp	r24, r25
    b6e4:	08 f0       	brcs	.+2      	; 0xb6e8 <udc_update_iface_desc+0x1e>
    b6e6:	22 c0       	rjmp	.+68     	; 0xb72c <udc_update_iface_desc+0x62>
    b6e8:	e0 93 56 24 	sts	0x2456, r30
    b6ec:	f0 93 57 24 	sts	0x2457, r31
    b6f0:	22 81       	ldd	r18, Z+2	; 0x02
    b6f2:	33 81       	ldd	r19, Z+3	; 0x03
    b6f4:	2e 0f       	add	r18, r30
    b6f6:	3f 1f       	adc	r19, r31
    b6f8:	12 c0       	rjmp	.+36     	; 0xb71e <udc_update_iface_desc+0x54>
    b6fa:	91 81       	ldd	r25, Z+1	; 0x01
    b6fc:	94 30       	cpi	r25, 0x04	; 4
    b6fe:	61 f4       	brne	.+24     	; 0xb718 <udc_update_iface_desc+0x4e>
    b700:	92 81       	ldd	r25, Z+2	; 0x02
    b702:	89 13       	cpse	r24, r25
    b704:	09 c0       	rjmp	.+18     	; 0xb718 <udc_update_iface_desc+0x4e>
    b706:	93 81       	ldd	r25, Z+3	; 0x03
    b708:	69 13       	cpse	r22, r25
    b70a:	06 c0       	rjmp	.+12     	; 0xb718 <udc_update_iface_desc+0x4e>
    b70c:	e0 93 56 24 	sts	0x2456, r30
    b710:	f0 93 57 24 	sts	0x2457, r31
    b714:	81 e0       	ldi	r24, 0x01	; 1
    b716:	08 95       	ret
    b718:	90 81       	ld	r25, Z
    b71a:	e9 0f       	add	r30, r25
    b71c:	f1 1d       	adc	r31, r1
    b71e:	e2 17       	cp	r30, r18
    b720:	f3 07       	cpc	r31, r19
    b722:	58 f3       	brcs	.-42     	; 0xb6fa <udc_update_iface_desc+0x30>
    b724:	e0 93 56 24 	sts	0x2456, r30
    b728:	f0 93 57 24 	sts	0x2457, r31
    b72c:	80 e0       	ldi	r24, 0x00	; 0
    b72e:	08 95       	ret

0000b730 <udc_next_desc_in_iface.constprop.3>:
    b730:	e0 91 59 24 	lds	r30, 0x2459
    b734:	f0 91 5a 24 	lds	r31, 0x245A
    b738:	01 90       	ld	r0, Z+
    b73a:	f0 81       	ld	r31, Z
    b73c:	e0 2d       	mov	r30, r0
    b73e:	22 81       	ldd	r18, Z+2	; 0x02
    b740:	33 81       	ldd	r19, Z+3	; 0x03
    b742:	2e 0f       	add	r18, r30
    b744:	3f 1f       	adc	r19, r31
    b746:	fc 01       	movw	r30, r24
    b748:	40 81       	ld	r20, Z
    b74a:	e4 0f       	add	r30, r20
    b74c:	f1 1d       	adc	r31, r1
    b74e:	08 c0       	rjmp	.+16     	; 0xb760 <udc_next_desc_in_iface.constprop.3+0x30>
    b750:	81 81       	ldd	r24, Z+1	; 0x01
    b752:	84 30       	cpi	r24, 0x04	; 4
    b754:	41 f0       	breq	.+16     	; 0xb766 <udc_next_desc_in_iface.constprop.3+0x36>
    b756:	85 30       	cpi	r24, 0x05	; 5
    b758:	41 f0       	breq	.+16     	; 0xb76a <udc_next_desc_in_iface.constprop.3+0x3a>
    b75a:	80 81       	ld	r24, Z
    b75c:	e8 0f       	add	r30, r24
    b75e:	f1 1d       	adc	r31, r1
    b760:	e2 17       	cp	r30, r18
    b762:	f3 07       	cpc	r31, r19
    b764:	a8 f3       	brcs	.-22     	; 0xb750 <udc_next_desc_in_iface.constprop.3+0x20>
    b766:	e0 e0       	ldi	r30, 0x00	; 0
    b768:	f0 e0       	ldi	r31, 0x00	; 0
    b76a:	cf 01       	movw	r24, r30
    b76c:	08 95       	ret

0000b76e <udc_iface_disable>:
    b76e:	0f 93       	push	r16
    b770:	1f 93       	push	r17
    b772:	cf 93       	push	r28
    b774:	df 93       	push	r29
    b776:	c8 2f       	mov	r28, r24
    b778:	60 e0       	ldi	r22, 0x00	; 0
    b77a:	a7 df       	rcall	.-178    	; 0xb6ca <udc_update_iface_desc>
    b77c:	88 23       	and	r24, r24
    b77e:	71 f1       	breq	.+92     	; 0xb7dc <udc_iface_disable+0x6e>
    b780:	e0 91 59 24 	lds	r30, 0x2459
    b784:	f0 91 5a 24 	lds	r31, 0x245A
    b788:	92 81       	ldd	r25, Z+2	; 0x02
    b78a:	83 81       	ldd	r24, Z+3	; 0x03
    b78c:	e9 2f       	mov	r30, r25
    b78e:	f8 2f       	mov	r31, r24
    b790:	ec 0f       	add	r30, r28
    b792:	f1 1d       	adc	r31, r1
    b794:	ec 0f       	add	r30, r28
    b796:	f1 1d       	adc	r31, r1
    b798:	00 81       	ld	r16, Z
    b79a:	11 81       	ldd	r17, Z+1	; 0x01
    b79c:	d8 01       	movw	r26, r16
    b79e:	16 96       	adiw	r26, 0x06	; 6
    b7a0:	ed 91       	ld	r30, X+
    b7a2:	fc 91       	ld	r31, X
    b7a4:	17 97       	sbiw	r26, 0x07	; 7
    b7a6:	19 95       	eicall
    b7a8:	68 2f       	mov	r22, r24
    b7aa:	8c 2f       	mov	r24, r28
    b7ac:	8e df       	rcall	.-228    	; 0xb6ca <udc_update_iface_desc>
    b7ae:	88 23       	and	r24, r24
    b7b0:	a9 f0       	breq	.+42     	; 0xb7dc <udc_iface_disable+0x6e>
    b7b2:	c0 91 56 24 	lds	r28, 0x2456
    b7b6:	d0 91 57 24 	lds	r29, 0x2457
    b7ba:	ce 01       	movw	r24, r28
    b7bc:	b9 df       	rcall	.-142    	; 0xb730 <udc_next_desc_in_iface.constprop.3>
    b7be:	ec 01       	movw	r28, r24
    b7c0:	00 97       	sbiw	r24, 0x00	; 0
    b7c2:	21 f0       	breq	.+8      	; 0xb7cc <udc_iface_disable+0x5e>
    b7c4:	8a 81       	ldd	r24, Y+2	; 0x02
    b7c6:	0e 94 a4 6e 	call	0xdd48	; 0xdd48 <udd_ep_free>
    b7ca:	f7 cf       	rjmp	.-18     	; 0xb7ba <udc_iface_disable+0x4c>
    b7cc:	d8 01       	movw	r26, r16
    b7ce:	12 96       	adiw	r26, 0x02	; 2
    b7d0:	ed 91       	ld	r30, X+
    b7d2:	fc 91       	ld	r31, X
    b7d4:	13 97       	sbiw	r26, 0x03	; 3
    b7d6:	19 95       	eicall
    b7d8:	81 e0       	ldi	r24, 0x01	; 1
    b7da:	01 c0       	rjmp	.+2      	; 0xb7de <udc_iface_disable+0x70>
    b7dc:	80 e0       	ldi	r24, 0x00	; 0
    b7de:	df 91       	pop	r29
    b7e0:	cf 91       	pop	r28
    b7e2:	1f 91       	pop	r17
    b7e4:	0f 91       	pop	r16
    b7e6:	08 95       	ret

0000b7e8 <udc_iface_enable>:
    b7e8:	1f 93       	push	r17
    b7ea:	cf 93       	push	r28
    b7ec:	df 93       	push	r29
    b7ee:	18 2f       	mov	r17, r24
    b7f0:	6c df       	rcall	.-296    	; 0xb6ca <udc_update_iface_desc>
    b7f2:	88 23       	and	r24, r24
    b7f4:	41 f1       	breq	.+80     	; 0xb846 <udc_iface_enable+0x5e>
    b7f6:	c0 91 56 24 	lds	r28, 0x2456
    b7fa:	d0 91 57 24 	lds	r29, 0x2457
    b7fe:	ce 01       	movw	r24, r28
    b800:	97 df       	rcall	.-210    	; 0xb730 <udc_next_desc_in_iface.constprop.3>
    b802:	ec 01       	movw	r28, r24
    b804:	00 97       	sbiw	r24, 0x00	; 0
    b806:	49 f0       	breq	.+18     	; 0xb81a <udc_iface_enable+0x32>
    b808:	4c 81       	ldd	r20, Y+4	; 0x04
    b80a:	5d 81       	ldd	r21, Y+5	; 0x05
    b80c:	6b 81       	ldd	r22, Y+3	; 0x03
    b80e:	8a 81       	ldd	r24, Y+2	; 0x02
    b810:	0e 94 5f 6d 	call	0xdabe	; 0xdabe <udd_ep_alloc>
    b814:	81 11       	cpse	r24, r1
    b816:	f3 cf       	rjmp	.-26     	; 0xb7fe <udc_iface_enable+0x16>
    b818:	16 c0       	rjmp	.+44     	; 0xb846 <udc_iface_enable+0x5e>
    b81a:	e0 91 59 24 	lds	r30, 0x2459
    b81e:	f0 91 5a 24 	lds	r31, 0x245A
    b822:	92 81       	ldd	r25, Z+2	; 0x02
    b824:	83 81       	ldd	r24, Z+3	; 0x03
    b826:	e9 2f       	mov	r30, r25
    b828:	f8 2f       	mov	r31, r24
    b82a:	e1 0f       	add	r30, r17
    b82c:	f1 1d       	adc	r31, r1
    b82e:	e1 0f       	add	r30, r17
    b830:	f1 1d       	adc	r31, r1
    b832:	01 90       	ld	r0, Z+
    b834:	f0 81       	ld	r31, Z
    b836:	e0 2d       	mov	r30, r0
    b838:	01 90       	ld	r0, Z+
    b83a:	f0 81       	ld	r31, Z
    b83c:	e0 2d       	mov	r30, r0
    b83e:	df 91       	pop	r29
    b840:	cf 91       	pop	r28
    b842:	1f 91       	pop	r17
    b844:	19 94       	eijmp
    b846:	80 e0       	ldi	r24, 0x00	; 0
    b848:	df 91       	pop	r29
    b84a:	cf 91       	pop	r28
    b84c:	1f 91       	pop	r17
    b84e:	08 95       	ret

0000b850 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
	udd_enable();
    b850:	0c 94 c9 6c 	jmp	0xd992	; 0xd992 <udd_enable>

0000b854 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
    b854:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    b856:	80 91 58 24 	lds	r24, 0x2458
    b85a:	81 11       	cpse	r24, r1
    b85c:	0d c0       	rjmp	.+26     	; 0xb878 <udc_reset+0x24>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
    b85e:	10 92 58 24 	sts	0x2458, r1
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
    b862:	81 e0       	ldi	r24, 0x01	; 1
    b864:	90 e0       	ldi	r25, 0x00	; 0
    b866:	80 93 5b 24 	sts	0x245B, r24
    b86a:	90 93 5c 24 	sts	0x245C, r25
    b86e:	10 c0       	rjmp	.+32     	; 0xb890 <udc_reset+0x3c>

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    b870:	8c 2f       	mov	r24, r28
    b872:	7d df       	rcall	.-262    	; 0xb76e <udc_iface_disable>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    b874:	cf 5f       	subi	r28, 0xFF	; 255
    b876:	01 c0       	rjmp	.+2      	; 0xb87a <udc_reset+0x26>
 */
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
    b878:	c0 e0       	ldi	r28, 0x00	; 0
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    b87a:	e0 91 59 24 	lds	r30, 0x2459
    b87e:	f0 91 5a 24 	lds	r31, 0x245A
    b882:	01 90       	ld	r0, Z+
    b884:	f0 81       	ld	r31, Z
    b886:	e0 2d       	mov	r30, r0
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    b888:	84 81       	ldd	r24, Z+4	; 0x04
    b88a:	c8 17       	cp	r28, r24
    b88c:	88 f3       	brcs	.-30     	; 0xb870 <udc_reset+0x1c>
    b88e:	e7 cf       	rjmp	.-50     	; 0xb85e <udc_reset+0xa>
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
    b890:	cf 91       	pop	r28
    b892:	08 95       	ret

0000b894 <udc_stop>:

/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
    b894:	0e 94 8c 6c 	call	0xd918	; 0xd918 <udd_disable>
	udc_reset();
    b898:	dd cf       	rjmp	.-70     	; 0xb854 <udc_reset>

0000b89a <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    b89a:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    b89c:	80 91 58 24 	lds	r24, 0x2458
    b8a0:	81 11       	cpse	r24, r1
    b8a2:	14 c0       	rjmp	.+40     	; 0xb8cc <udc_sof_notify+0x32>
    b8a4:	1e c0       	rjmp	.+60     	; 0xb8e2 <udc_sof_notify+0x48>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    b8a6:	92 81       	ldd	r25, Z+2	; 0x02
    b8a8:	83 81       	ldd	r24, Z+3	; 0x03
    b8aa:	e9 2f       	mov	r30, r25
    b8ac:	f8 2f       	mov	r31, r24
    b8ae:	ec 0f       	add	r30, r28
    b8b0:	f1 1d       	adc	r31, r1
    b8b2:	ec 0f       	add	r30, r28
    b8b4:	f1 1d       	adc	r31, r1
    b8b6:	01 90       	ld	r0, Z+
    b8b8:	f0 81       	ld	r31, Z
    b8ba:	e0 2d       	mov	r30, r0
    b8bc:	00 84       	ldd	r0, Z+8	; 0x08
    b8be:	f1 85       	ldd	r31, Z+9	; 0x09
    b8c0:	e0 2d       	mov	r30, r0
    b8c2:	30 97       	sbiw	r30, 0x00	; 0
    b8c4:	09 f0       	breq	.+2      	; 0xb8c8 <udc_sof_notify+0x2e>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    b8c6:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    b8c8:	cf 5f       	subi	r28, 0xFF	; 255
    b8ca:	01 c0       	rjmp	.+2      	; 0xb8ce <udc_sof_notify+0x34>

void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
    b8cc:	c0 e0       	ldi	r28, 0x00	; 0
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    b8ce:	e0 91 59 24 	lds	r30, 0x2459
    b8d2:	f0 91 5a 24 	lds	r31, 0x245A
    b8d6:	a0 81       	ld	r26, Z
    b8d8:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    b8da:	14 96       	adiw	r26, 0x04	; 4
    b8dc:	8c 91       	ld	r24, X
    b8de:	c8 17       	cp	r28, r24
    b8e0:	10 f3       	brcs	.-60     	; 0xb8a6 <udc_sof_notify+0xc>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    b8e2:	cf 91       	pop	r28
    b8e4:	08 95       	ret

0000b8e6 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    b8e6:	ef 92       	push	r14
    b8e8:	ff 92       	push	r15
    b8ea:	0f 93       	push	r16
    b8ec:	1f 93       	push	r17
    b8ee:	cf 93       	push	r28
    b8f0:	df 93       	push	r29
    b8f2:	1f 92       	push	r1
    b8f4:	cd b7       	in	r28, 0x3d	; 61
    b8f6:	de b7       	in	r29, 0x3e	; 62
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    b8f8:	10 92 74 27 	sts	0x2774, r1
    b8fc:	10 92 75 27 	sts	0x2775, r1
	udd_g_ctrlreq.callback = NULL;
    b900:	10 92 76 27 	sts	0x2776, r1
    b904:	10 92 77 27 	sts	0x2777, r1
	udd_g_ctrlreq.over_under_run = NULL;
    b908:	10 92 78 27 	sts	0x2778, r1
    b90c:	10 92 79 27 	sts	0x2779, r1

	if (Udd_setup_is_in()) {
    b910:	20 91 6a 27 	lds	r18, 0x276A
    b914:	27 ff       	sbrs	r18, 7
    b916:	07 c0       	rjmp	.+14     	; 0xb926 <udc_process_setup+0x40>
		if (udd_g_ctrlreq.req.wLength == 0) {
    b918:	80 91 70 27 	lds	r24, 0x2770
    b91c:	90 91 71 27 	lds	r25, 0x2771
    b920:	89 2b       	or	r24, r25
    b922:	09 f4       	brne	.+2      	; 0xb926 <udc_process_setup+0x40>
    b924:	39 c2       	rjmp	.+1138   	; 0xbd98 <udc_process_setup+0x4b2>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    b926:	82 2f       	mov	r24, r18
    b928:	80 76       	andi	r24, 0x60	; 96
    b92a:	09 f0       	breq	.+2      	; 0xb92e <udc_process_setup+0x48>
    b92c:	bd c1       	rjmp	.+890    	; 0xbca8 <udc_process_setup+0x3c2>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
    b92e:	27 ff       	sbrs	r18, 7
    b930:	e7 c0       	rjmp	.+462    	; 0xbb00 <udc_process_setup+0x21a>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    b932:	80 91 70 27 	lds	r24, 0x2770
    b936:	90 91 71 27 	lds	r25, 0x2771
    b93a:	00 97       	sbiw	r24, 0x00	; 0
    b93c:	09 f4       	brne	.+2      	; 0xb940 <udc_process_setup+0x5a>
    b93e:	b4 c1       	rjmp	.+872    	; 0xbca8 <udc_process_setup+0x3c2>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    b940:	2f 71       	andi	r18, 0x1F	; 31
    b942:	09 f0       	breq	.+2      	; 0xb946 <udc_process_setup+0x60>
    b944:	88 c0       	rjmp	.+272    	; 0xba56 <udc_process_setup+0x170>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    b946:	20 91 6b 27 	lds	r18, 0x276B
    b94a:	26 30       	cpi	r18, 0x06	; 6
    b94c:	69 f0       	breq	.+26     	; 0xb968 <udc_process_setup+0x82>
    b94e:	28 30       	cpi	r18, 0x08	; 8
    b950:	09 f4       	brne	.+2      	; 0xb954 <udc_process_setup+0x6e>
    b952:	79 c0       	rjmp	.+242    	; 0xba46 <udc_process_setup+0x160>
    b954:	21 11       	cpse	r18, r1
    b956:	a8 c1       	rjmp	.+848    	; 0xbca8 <udc_process_setup+0x3c2>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    b958:	02 97       	sbiw	r24, 0x02	; 2
    b95a:	09 f0       	breq	.+2      	; 0xb95e <udc_process_setup+0x78>
    b95c:	a5 c1       	rjmp	.+842    	; 0xbca8 <udc_process_setup+0x3c2>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    b95e:	62 e0       	ldi	r22, 0x02	; 2
    b960:	70 e0       	ldi	r23, 0x00	; 0
    b962:	8b e5       	ldi	r24, 0x5B	; 91
    b964:	94 e2       	ldi	r25, 0x24	; 36
    b966:	c9 c0       	rjmp	.+402    	; 0xbafa <udc_process_setup+0x214>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    b968:	80 91 6c 27 	lds	r24, 0x276C
    b96c:	90 91 6d 27 	lds	r25, 0x276D
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    b970:	29 2f       	mov	r18, r25
    b972:	33 27       	eor	r19, r19
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    b974:	22 30       	cpi	r18, 0x02	; 2
    b976:	31 05       	cpc	r19, r1
    b978:	79 f0       	breq	.+30     	; 0xb998 <udc_process_setup+0xb2>
    b97a:	23 30       	cpi	r18, 0x03	; 3
    b97c:	31 05       	cpc	r19, r1
    b97e:	69 f1       	breq	.+90     	; 0xb9da <udc_process_setup+0xf4>
    b980:	21 30       	cpi	r18, 0x01	; 1
    b982:	31 05       	cpc	r19, r1
    b984:	09 f0       	breq	.+2      	; 0xb988 <udc_process_setup+0xa2>
    b986:	90 c1       	rjmp	.+800    	; 0xbca8 <udc_process_setup+0x3c2>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    b988:	80 91 50 20 	lds	r24, 0x2050
    b98c:	90 91 51 20 	lds	r25, 0x2051
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    b990:	dc 01       	movw	r26, r24
    b992:	6c 91       	ld	r22, X
    b994:	70 e0       	ldi	r23, 0x00	; 0
    b996:	44 c0       	rjmp	.+136    	; 0xba20 <udc_process_setup+0x13a>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    b998:	e0 91 50 20 	lds	r30, 0x2050
    b99c:	f0 91 51 20 	lds	r31, 0x2051
    b9a0:	21 89       	ldd	r18, Z+17	; 0x11
    b9a2:	82 17       	cp	r24, r18
    b9a4:	08 f0       	brcs	.+2      	; 0xb9a8 <udc_process_setup+0xc2>
    b9a6:	80 c1       	rjmp	.+768    	; 0xbca8 <udc_process_setup+0x3c2>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    b9a8:	99 27       	eor	r25, r25
    b9aa:	88 0f       	add	r24, r24
    b9ac:	99 1f       	adc	r25, r25
    b9ae:	88 0f       	add	r24, r24
    b9b0:	99 1f       	adc	r25, r25
    b9b2:	e0 91 52 20 	lds	r30, 0x2052
    b9b6:	f0 91 53 20 	lds	r31, 0x2053
    b9ba:	e8 0f       	add	r30, r24
    b9bc:	f9 1f       	adc	r31, r25
    b9be:	80 81       	ld	r24, Z
    b9c0:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    b9c2:	fc 01       	movw	r30, r24
    b9c4:	62 81       	ldd	r22, Z+2	; 0x02
    b9c6:	73 81       	ldd	r23, Z+3	; 0x03
    b9c8:	0e 94 56 6d 	call	0xdaac	; 0xdaac <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    b9cc:	e0 91 72 27 	lds	r30, 0x2772
    b9d0:	f0 91 73 27 	lds	r31, 0x2773
    b9d4:	82 e0       	ldi	r24, 0x02	; 2
    b9d6:	81 83       	std	Z+1, r24	; 0x01
    b9d8:	25 c0       	rjmp	.+74     	; 0xba24 <udc_process_setup+0x13e>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    b9da:	99 27       	eor	r25, r25
    b9dc:	81 30       	cpi	r24, 0x01	; 1
    b9de:	91 05       	cpc	r25, r1
    b9e0:	29 f0       	breq	.+10     	; 0xb9ec <udc_process_setup+0x106>
    b9e2:	40 f0       	brcs	.+16     	; 0xb9f4 <udc_process_setup+0x10e>
    b9e4:	02 97       	sbiw	r24, 0x02	; 2
    b9e6:	09 f0       	breq	.+2      	; 0xb9ea <udc_process_setup+0x104>
    b9e8:	5f c1       	rjmp	.+702    	; 0xbca8 <udc_process_setup+0x3c2>
    b9ea:	ce c1       	rjmp	.+924    	; 0xbd88 <udc_process_setup+0x4a2>
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    b9ec:	69 e0       	ldi	r22, 0x09	; 9
		str = udc_string_manufacturer_name;
    b9ee:	8e e2       	ldi	r24, 0x2E	; 46
    b9f0:	90 e2       	ldi	r25, 0x20	; 32
    b9f2:	cd c1       	rjmp	.+922    	; 0xbd8e <udc_process_setup+0x4a8>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    b9f4:	64 e0       	ldi	r22, 0x04	; 4
    b9f6:	70 e0       	ldi	r23, 0x00	; 0
    b9f8:	8a e2       	ldi	r24, 0x2A	; 42
    b9fa:	90 e2       	ldi	r25, 0x20	; 32
    b9fc:	11 c0       	rjmp	.+34     	; 0xba20 <udc_process_setup+0x13a>
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    b9fe:	81 91       	ld	r24, Z+
    ba00:	8c 93       	st	X, r24
    ba02:	11 96       	adiw	r26, 0x01	; 1
    ba04:	1c 92       	st	X, r1
    ba06:	11 97       	sbiw	r26, 0x01	; 1
    ba08:	12 96       	adiw	r26, 0x02	; 2
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    ba0a:	8e 2f       	mov	r24, r30
    ba0c:	82 1b       	sub	r24, r18
    ba0e:	86 17       	cp	r24, r22
    ba10:	b0 f3       	brcs	.-20     	; 0xb9fe <udc_process_setup+0x118>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    ba12:	66 0f       	add	r22, r22
    ba14:	6e 5f       	subi	r22, 0xFE	; 254
    ba16:	60 93 3c 20 	sts	0x203C, r22
		udd_set_setup_payload(
    ba1a:	70 e0       	ldi	r23, 0x00	; 0
    ba1c:	8c e3       	ldi	r24, 0x3C	; 60
    ba1e:	90 e2       	ldi	r25, 0x20	; 32
    ba20:	0e 94 56 6d 	call	0xdaac	; 0xdaac <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    ba24:	80 91 70 27 	lds	r24, 0x2770
    ba28:	90 91 71 27 	lds	r25, 0x2771
    ba2c:	20 91 74 27 	lds	r18, 0x2774
    ba30:	30 91 75 27 	lds	r19, 0x2775
    ba34:	82 17       	cp	r24, r18
    ba36:	93 07       	cpc	r25, r19
    ba38:	08 f0       	brcs	.+2      	; 0xba3c <udc_process_setup+0x156>
    ba3a:	34 c1       	rjmp	.+616    	; 0xbca4 <udc_process_setup+0x3be>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    ba3c:	80 93 74 27 	sts	0x2774, r24
    ba40:	90 93 75 27 	sts	0x2775, r25
    ba44:	2f c1       	rjmp	.+606    	; 0xbca4 <udc_process_setup+0x3be>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    ba46:	01 97       	sbiw	r24, 0x01	; 1
    ba48:	09 f0       	breq	.+2      	; 0xba4c <udc_process_setup+0x166>
    ba4a:	2e c1       	rjmp	.+604    	; 0xbca8 <udc_process_setup+0x3c2>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    ba4c:	61 e0       	ldi	r22, 0x01	; 1
    ba4e:	70 e0       	ldi	r23, 0x00	; 0
    ba50:	88 e5       	ldi	r24, 0x58	; 88
    ba52:	94 e2       	ldi	r25, 0x24	; 36
    ba54:	52 c0       	rjmp	.+164    	; 0xbafa <udc_process_setup+0x214>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    ba56:	21 30       	cpi	r18, 0x01	; 1
    ba58:	d1 f5       	brne	.+116    	; 0xbace <udc_process_setup+0x1e8>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    ba5a:	20 91 6b 27 	lds	r18, 0x276B
    ba5e:	2a 30       	cpi	r18, 0x0A	; 10
    ba60:	09 f0       	breq	.+2      	; 0xba64 <udc_process_setup+0x17e>
    ba62:	22 c1       	rjmp	.+580    	; 0xbca8 <udc_process_setup+0x3c2>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    ba64:	01 97       	sbiw	r24, 0x01	; 1
    ba66:	09 f0       	breq	.+2      	; 0xba6a <udc_process_setup+0x184>
    ba68:	1f c1       	rjmp	.+574    	; 0xbca8 <udc_process_setup+0x3c2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    ba6a:	80 91 58 24 	lds	r24, 0x2458
    ba6e:	88 23       	and	r24, r24
    ba70:	09 f4       	brne	.+2      	; 0xba74 <udc_process_setup+0x18e>
    ba72:	1a c1       	rjmp	.+564    	; 0xbca8 <udc_process_setup+0x3c2>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    ba74:	e0 90 6e 27 	lds	r14, 0x276E
    ba78:	f0 90 6f 27 	lds	r15, 0x276F
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    ba7c:	00 91 59 24 	lds	r16, 0x2459
    ba80:	10 91 5a 24 	lds	r17, 0x245A
    ba84:	d8 01       	movw	r26, r16
    ba86:	ed 91       	ld	r30, X+
    ba88:	fc 91       	ld	r31, X
    ba8a:	84 81       	ldd	r24, Z+4	; 0x04
    ba8c:	e8 16       	cp	r14, r24
    ba8e:	08 f0       	brcs	.+2      	; 0xba92 <udc_process_setup+0x1ac>
    ba90:	0b c1       	rjmp	.+534    	; 0xbca8 <udc_process_setup+0x3c2>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    ba92:	60 e0       	ldi	r22, 0x00	; 0
    ba94:	8e 2d       	mov	r24, r14
    ba96:	19 de       	rcall	.-974    	; 0xb6ca <udc_update_iface_desc>
    ba98:	88 23       	and	r24, r24
    ba9a:	09 f4       	brne	.+2      	; 0xba9e <udc_process_setup+0x1b8>
    ba9c:	05 c1       	rjmp	.+522    	; 0xbca8 <udc_process_setup+0x3c2>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    ba9e:	ff 24       	eor	r15, r15
    baa0:	ee 0c       	add	r14, r14
    baa2:	ff 1c       	adc	r15, r15
    baa4:	d8 01       	movw	r26, r16
    baa6:	12 96       	adiw	r26, 0x02	; 2
    baa8:	ed 91       	ld	r30, X+
    baaa:	fc 91       	ld	r31, X
    baac:	13 97       	sbiw	r26, 0x03	; 3
    baae:	ee 0d       	add	r30, r14
    bab0:	ff 1d       	adc	r31, r15
	udc_iface_setting = udi_api->getsetting();
    bab2:	01 90       	ld	r0, Z+
    bab4:	f0 81       	ld	r31, Z
    bab6:	e0 2d       	mov	r30, r0
    bab8:	06 80       	ldd	r0, Z+6	; 0x06
    baba:	f7 81       	ldd	r31, Z+7	; 0x07
    babc:	e0 2d       	mov	r30, r0
    babe:	19 95       	eicall
    bac0:	80 93 5d 24 	sts	0x245D, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    bac4:	61 e0       	ldi	r22, 0x01	; 1
    bac6:	70 e0       	ldi	r23, 0x00	; 0
    bac8:	8d e5       	ldi	r24, 0x5D	; 93
    baca:	94 e2       	ldi	r25, 0x24	; 36
    bacc:	16 c0       	rjmp	.+44     	; 0xbafa <udc_process_setup+0x214>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    bace:	22 30       	cpi	r18, 0x02	; 2
    bad0:	09 f0       	breq	.+2      	; 0xbad4 <udc_process_setup+0x1ee>
    bad2:	ea c0       	rjmp	.+468    	; 0xbca8 <udc_process_setup+0x3c2>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    bad4:	20 91 6b 27 	lds	r18, 0x276B
    bad8:	21 11       	cpse	r18, r1
    bada:	e6 c0       	rjmp	.+460    	; 0xbca8 <udc_process_setup+0x3c2>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    badc:	02 97       	sbiw	r24, 0x02	; 2
    bade:	09 f0       	breq	.+2      	; 0xbae2 <udc_process_setup+0x1fc>
    bae0:	e3 c0       	rjmp	.+454    	; 0xbca8 <udc_process_setup+0x3c2>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    bae2:	80 91 6e 27 	lds	r24, 0x276E
    bae6:	0e 94 c5 6d 	call	0xdb8a	; 0xdb8a <udd_ep_is_halted>
    baea:	80 93 5e 24 	sts	0x245E, r24
    baee:	10 92 5f 24 	sts	0x245F, r1
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    baf2:	62 e0       	ldi	r22, 0x02	; 2
    baf4:	70 e0       	ldi	r23, 0x00	; 0
    baf6:	8e e5       	ldi	r24, 0x5E	; 94
    baf8:	94 e2       	ldi	r25, 0x24	; 36
    bafa:	0e 94 56 6d 	call	0xdaac	; 0xdaac <udd_set_setup_payload>
    bafe:	d2 c0       	rjmp	.+420    	; 0xbca4 <udc_process_setup+0x3be>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    bb00:	2f 71       	andi	r18, 0x1F	; 31
    bb02:	09 f0       	breq	.+2      	; 0xbb06 <udc_process_setup+0x220>
    bb04:	7f c0       	rjmp	.+254    	; 0xbc04 <udc_process_setup+0x31e>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    bb06:	80 91 6b 27 	lds	r24, 0x276B
    bb0a:	83 30       	cpi	r24, 0x03	; 3
    bb0c:	09 f4       	brne	.+2      	; 0xbb10 <udc_process_setup+0x22a>
    bb0e:	cc c0       	rjmp	.+408    	; 0xbca8 <udc_process_setup+0x3c2>
    bb10:	20 f4       	brcc	.+8      	; 0xbb1a <udc_process_setup+0x234>
    bb12:	81 30       	cpi	r24, 0x01	; 1
    bb14:	09 f0       	breq	.+2      	; 0xbb18 <udc_process_setup+0x232>
    bb16:	c8 c0       	rjmp	.+400    	; 0xbca8 <udc_process_setup+0x3c2>
    bb18:	14 c0       	rjmp	.+40     	; 0xbb42 <udc_process_setup+0x25c>
    bb1a:	85 30       	cpi	r24, 0x05	; 5
    bb1c:	21 f0       	breq	.+8      	; 0xbb26 <udc_process_setup+0x240>
    bb1e:	89 30       	cpi	r24, 0x09	; 9
    bb20:	09 f0       	breq	.+2      	; 0xbb24 <udc_process_setup+0x23e>
    bb22:	c2 c0       	rjmp	.+388    	; 0xbca8 <udc_process_setup+0x3c2>
    bb24:	26 c0       	rjmp	.+76     	; 0xbb72 <udc_process_setup+0x28c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    bb26:	80 91 70 27 	lds	r24, 0x2770
    bb2a:	90 91 71 27 	lds	r25, 0x2771
    bb2e:	89 2b       	or	r24, r25
    bb30:	09 f0       	breq	.+2      	; 0xbb34 <udc_process_setup+0x24e>
    bb32:	ba c0       	rjmp	.+372    	; 0xbca8 <udc_process_setup+0x3c2>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    bb34:	80 e6       	ldi	r24, 0x60	; 96
    bb36:	9b e5       	ldi	r25, 0x5B	; 91
    bb38:	80 93 76 27 	sts	0x2776, r24
    bb3c:	90 93 77 27 	sts	0x2777, r25
    bb40:	b1 c0       	rjmp	.+354    	; 0xbca4 <udc_process_setup+0x3be>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    bb42:	80 91 70 27 	lds	r24, 0x2770
    bb46:	90 91 71 27 	lds	r25, 0x2771
    bb4a:	89 2b       	or	r24, r25
    bb4c:	09 f0       	breq	.+2      	; 0xbb50 <udc_process_setup+0x26a>
    bb4e:	ac c0       	rjmp	.+344    	; 0xbca8 <udc_process_setup+0x3c2>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    bb50:	80 91 6c 27 	lds	r24, 0x276C
    bb54:	90 91 6d 27 	lds	r25, 0x276D
    bb58:	01 97       	sbiw	r24, 0x01	; 1
    bb5a:	09 f0       	breq	.+2      	; 0xbb5e <udc_process_setup+0x278>
    bb5c:	a5 c0       	rjmp	.+330    	; 0xbca8 <udc_process_setup+0x3c2>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    bb5e:	80 91 5b 24 	lds	r24, 0x245B
    bb62:	90 91 5c 24 	lds	r25, 0x245C
    bb66:	8d 7f       	andi	r24, 0xFD	; 253
    bb68:	80 93 5b 24 	sts	0x245B, r24
    bb6c:	90 93 5c 24 	sts	0x245C, r25
    bb70:	99 c0       	rjmp	.+306    	; 0xbca4 <udc_process_setup+0x3be>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    bb72:	80 91 70 27 	lds	r24, 0x2770
    bb76:	90 91 71 27 	lds	r25, 0x2771
    bb7a:	89 2b       	or	r24, r25
    bb7c:	09 f0       	breq	.+2      	; 0xbb80 <udc_process_setup+0x29a>
    bb7e:	94 c0       	rjmp	.+296    	; 0xbca8 <udc_process_setup+0x3c2>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    bb80:	0e 94 4a 6d 	call	0xda94	; 0xda94 <udd_getaddress>
    bb84:	88 23       	and	r24, r24
    bb86:	09 f4       	brne	.+2      	; 0xbb8a <udc_process_setup+0x2a4>
    bb88:	8f c0       	rjmp	.+286    	; 0xbca8 <udc_process_setup+0x3c2>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    bb8a:	80 91 6c 27 	lds	r24, 0x276C
    bb8e:	90 91 6d 27 	lds	r25, 0x276D
    bb92:	99 27       	eor	r25, r25
				udc_config.confdev_lsfs->bNumConfigurations) {
    bb94:	e0 91 50 20 	lds	r30, 0x2050
    bb98:	f0 91 51 20 	lds	r31, 0x2051
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    bb9c:	21 89       	ldd	r18, Z+17	; 0x11
    bb9e:	30 e0       	ldi	r19, 0x00	; 0
    bba0:	28 17       	cp	r18, r24
    bba2:	39 07       	cpc	r19, r25
    bba4:	08 f4       	brcc	.+2      	; 0xbba8 <udc_process_setup+0x2c2>
    bba6:	80 c0       	rjmp	.+256    	; 0xbca8 <udc_process_setup+0x3c2>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    bba8:	55 de       	rcall	.-854    	; 0xb854 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    bbaa:	80 91 6c 27 	lds	r24, 0x276C
    bbae:	90 91 6d 27 	lds	r25, 0x276D
    bbb2:	80 93 58 24 	sts	0x2458, r24
	if (udc_num_configuration == 0) {
    bbb6:	88 23       	and	r24, r24
    bbb8:	09 f4       	brne	.+2      	; 0xbbbc <udc_process_setup+0x2d6>
    bbba:	74 c0       	rjmp	.+232    	; 0xbca4 <udc_process_setup+0x3be>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    bbbc:	99 27       	eor	r25, r25
    bbbe:	01 97       	sbiw	r24, 0x01	; 1
    bbc0:	88 0f       	add	r24, r24
    bbc2:	99 1f       	adc	r25, r25
    bbc4:	88 0f       	add	r24, r24
    bbc6:	99 1f       	adc	r25, r25
    bbc8:	20 91 52 20 	lds	r18, 0x2052
    bbcc:	30 91 53 20 	lds	r19, 0x2053
    bbd0:	28 0f       	add	r18, r24
    bbd2:	39 1f       	adc	r19, r25
    bbd4:	20 93 59 24 	sts	0x2459, r18
    bbd8:	30 93 5a 24 	sts	0x245A, r19
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    bbdc:	10 e0       	ldi	r17, 0x00	; 0
    bbde:	07 c0       	rjmp	.+14     	; 0xbbee <udc_process_setup+0x308>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    bbe0:	60 e0       	ldi	r22, 0x00	; 0
    bbe2:	81 2f       	mov	r24, r17
    bbe4:	01 de       	rcall	.-1022   	; 0xb7e8 <udc_iface_enable>
    bbe6:	88 23       	and	r24, r24
    bbe8:	09 f4       	brne	.+2      	; 0xbbec <udc_process_setup+0x306>
    bbea:	5e c0       	rjmp	.+188    	; 0xbca8 <udc_process_setup+0x3c2>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    bbec:	1f 5f       	subi	r17, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    bbee:	e0 91 59 24 	lds	r30, 0x2459
    bbf2:	f0 91 5a 24 	lds	r31, 0x245A
    bbf6:	01 90       	ld	r0, Z+
    bbf8:	f0 81       	ld	r31, Z
    bbfa:	e0 2d       	mov	r30, r0
    bbfc:	84 81       	ldd	r24, Z+4	; 0x04
    bbfe:	18 17       	cp	r17, r24
    bc00:	78 f3       	brcs	.-34     	; 0xbbe0 <udc_process_setup+0x2fa>
    bc02:	50 c0       	rjmp	.+160    	; 0xbca4 <udc_process_setup+0x3be>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    bc04:	21 30       	cpi	r18, 0x01	; 1
    bc06:	f1 f4       	brne	.+60     	; 0xbc44 <udc_process_setup+0x35e>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    bc08:	80 91 6b 27 	lds	r24, 0x276B
    bc0c:	8b 30       	cpi	r24, 0x0B	; 11
    bc0e:	09 f0       	breq	.+2      	; 0xbc12 <udc_process_setup+0x32c>
    bc10:	4b c0       	rjmp	.+150    	; 0xbca8 <udc_process_setup+0x3c2>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    bc12:	80 91 70 27 	lds	r24, 0x2770
    bc16:	90 91 71 27 	lds	r25, 0x2771
    bc1a:	89 2b       	or	r24, r25
    bc1c:	09 f0       	breq	.+2      	; 0xbc20 <udc_process_setup+0x33a>
    bc1e:	44 c0       	rjmp	.+136    	; 0xbca8 <udc_process_setup+0x3c2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    bc20:	80 91 58 24 	lds	r24, 0x2458
    bc24:	88 23       	and	r24, r24
    bc26:	09 f4       	brne	.+2      	; 0xbc2a <udc_process_setup+0x344>
    bc28:	3f c0       	rjmp	.+126    	; 0xbca8 <udc_process_setup+0x3c2>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    bc2a:	10 91 6e 27 	lds	r17, 0x276E
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    bc2e:	60 91 6c 27 	lds	r22, 0x276C

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    bc32:	81 2f       	mov	r24, r17
    bc34:	69 83       	std	Y+1, r22	; 0x01
    bc36:	9b dd       	rcall	.-1226   	; 0xb76e <udc_iface_disable>
    bc38:	69 81       	ldd	r22, Y+1	; 0x01
    bc3a:	88 23       	and	r24, r24
    bc3c:	a9 f1       	breq	.+106    	; 0xbca8 <udc_process_setup+0x3c2>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    bc3e:	81 2f       	mov	r24, r17
    bc40:	d3 dd       	rcall	.-1114   	; 0xb7e8 <udc_iface_enable>
    bc42:	2e c0       	rjmp	.+92     	; 0xbca0 <udc_process_setup+0x3ba>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    bc44:	22 30       	cpi	r18, 0x02	; 2
    bc46:	81 f5       	brne	.+96     	; 0xbca8 <udc_process_setup+0x3c2>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    bc48:	80 91 6b 27 	lds	r24, 0x276B
    bc4c:	81 30       	cpi	r24, 0x01	; 1
    bc4e:	19 f0       	breq	.+6      	; 0xbc56 <udc_process_setup+0x370>
    bc50:	83 30       	cpi	r24, 0x03	; 3
    bc52:	51 f5       	brne	.+84     	; 0xbca8 <udc_process_setup+0x3c2>
    bc54:	11 c0       	rjmp	.+34     	; 0xbc78 <udc_process_setup+0x392>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    bc56:	80 91 70 27 	lds	r24, 0x2770
    bc5a:	90 91 71 27 	lds	r25, 0x2771
    bc5e:	89 2b       	or	r24, r25
    bc60:	19 f5       	brne	.+70     	; 0xbca8 <udc_process_setup+0x3c2>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    bc62:	80 91 6c 27 	lds	r24, 0x276C
    bc66:	90 91 6d 27 	lds	r25, 0x276D
    bc6a:	89 2b       	or	r24, r25
    bc6c:	e9 f4       	brne	.+58     	; 0xbca8 <udc_process_setup+0x3c2>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    bc6e:	80 91 6e 27 	lds	r24, 0x276E
    bc72:	0e 94 cc 6d 	call	0xdb98	; 0xdb98 <udd_ep_clear_halt>
    bc76:	14 c0       	rjmp	.+40     	; 0xbca0 <udc_process_setup+0x3ba>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    bc78:	80 91 70 27 	lds	r24, 0x2770
    bc7c:	90 91 71 27 	lds	r25, 0x2771
    bc80:	89 2b       	or	r24, r25
    bc82:	91 f4       	brne	.+36     	; 0xbca8 <udc_process_setup+0x3c2>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    bc84:	80 91 6c 27 	lds	r24, 0x276C
    bc88:	90 91 6d 27 	lds	r25, 0x276D
    bc8c:	89 2b       	or	r24, r25
    bc8e:	61 f4       	brne	.+24     	; 0xbca8 <udc_process_setup+0x3c2>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    bc90:	80 91 6e 27 	lds	r24, 0x276E
    bc94:	0e 94 68 6e 	call	0xdcd0	; 0xdcd0 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    bc98:	80 91 6e 27 	lds	r24, 0x276E
    bc9c:	0e 94 94 6e 	call	0xdd28	; 0xdd28 <udd_ep_set_halt>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    bca0:	88 23       	and	r24, r24
    bca2:	11 f0       	breq	.+4      	; 0xbca8 <udc_process_setup+0x3c2>
			return true;
    bca4:	81 e0       	ldi	r24, 0x01	; 1
    bca6:	79 c0       	rjmp	.+242    	; 0xbd9a <udc_process_setup+0x4b4>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    bca8:	80 91 6a 27 	lds	r24, 0x276A
    bcac:	8f 71       	andi	r24, 0x1F	; 31
    bcae:	81 30       	cpi	r24, 0x01	; 1
    bcb0:	b9 f5       	brne	.+110    	; 0xbd20 <udc_process_setup+0x43a>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    bcb2:	80 91 58 24 	lds	r24, 0x2458
    bcb6:	88 23       	and	r24, r24
    bcb8:	99 f1       	breq	.+102    	; 0xbd20 <udc_process_setup+0x43a>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    bcba:	e0 90 6e 27 	lds	r14, 0x276E
    bcbe:	f0 90 6f 27 	lds	r15, 0x276F
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    bcc2:	00 91 59 24 	lds	r16, 0x2459
    bcc6:	10 91 5a 24 	lds	r17, 0x245A
    bcca:	d8 01       	movw	r26, r16
    bccc:	ed 91       	ld	r30, X+
    bcce:	fc 91       	ld	r31, X
    bcd0:	84 81       	ldd	r24, Z+4	; 0x04
    bcd2:	e8 16       	cp	r14, r24
    bcd4:	28 f5       	brcc	.+74     	; 0xbd20 <udc_process_setup+0x43a>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    bcd6:	60 e0       	ldi	r22, 0x00	; 0
    bcd8:	8e 2d       	mov	r24, r14
    bcda:	f7 dc       	rcall	.-1554   	; 0xb6ca <udc_update_iface_desc>
    bcdc:	88 23       	and	r24, r24
    bcde:	01 f1       	breq	.+64     	; 0xbd20 <udc_process_setup+0x43a>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    bce0:	c7 01       	movw	r24, r14
    bce2:	99 27       	eor	r25, r25
    bce4:	88 0f       	add	r24, r24
    bce6:	99 1f       	adc	r25, r25
    bce8:	d8 01       	movw	r26, r16
    bcea:	12 96       	adiw	r26, 0x02	; 2
    bcec:	ed 91       	ld	r30, X+
    bcee:	fc 91       	ld	r31, X
    bcf0:	13 97       	sbiw	r26, 0x03	; 3
    bcf2:	e8 0f       	add	r30, r24
    bcf4:	f9 1f       	adc	r31, r25
    bcf6:	00 81       	ld	r16, Z
    bcf8:	11 81       	ldd	r17, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    bcfa:	d8 01       	movw	r26, r16
    bcfc:	16 96       	adiw	r26, 0x06	; 6
    bcfe:	ed 91       	ld	r30, X+
    bd00:	fc 91       	ld	r31, X
    bd02:	17 97       	sbiw	r26, 0x07	; 7
    bd04:	19 95       	eicall
    bd06:	68 2f       	mov	r22, r24
    bd08:	8e 2d       	mov	r24, r14
    bd0a:	df dc       	rcall	.-1602   	; 0xb6ca <udc_update_iface_desc>
    bd0c:	88 23       	and	r24, r24
    bd0e:	41 f0       	breq	.+16     	; 0xbd20 <udc_process_setup+0x43a>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    bd10:	d8 01       	movw	r26, r16
    bd12:	14 96       	adiw	r26, 0x04	; 4
    bd14:	ed 91       	ld	r30, X+
    bd16:	fc 91       	ld	r31, X
    bd18:	15 97       	sbiw	r26, 0x05	; 5
    bd1a:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    bd1c:	81 11       	cpse	r24, r1
    bd1e:	c2 cf       	rjmp	.-124    	; 0xbca4 <udc_process_setup+0x3be>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    bd20:	80 91 6a 27 	lds	r24, 0x276A
    bd24:	8f 71       	andi	r24, 0x1F	; 31
    bd26:	82 30       	cpi	r24, 0x02	; 2
    bd28:	b9 f5       	brne	.+110    	; 0xbd98 <udc_process_setup+0x4b2>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    bd2a:	80 91 58 24 	lds	r24, 0x2458
    bd2e:	88 23       	and	r24, r24
    bd30:	99 f1       	breq	.+102    	; 0xbd98 <udc_process_setup+0x4b2>
    bd32:	10 e0       	ldi	r17, 0x00	; 0
    bd34:	1e c0       	rjmp	.+60     	; 0xbd72 <udc_process_setup+0x48c>
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    bd36:	92 81       	ldd	r25, Z+2	; 0x02
    bd38:	83 81       	ldd	r24, Z+3	; 0x03
    bd3a:	e9 2f       	mov	r30, r25
    bd3c:	f8 2f       	mov	r31, r24
    bd3e:	e1 0f       	add	r30, r17
    bd40:	f1 1d       	adc	r31, r1
    bd42:	e1 0f       	add	r30, r17
    bd44:	f1 1d       	adc	r31, r1
    bd46:	e0 80       	ld	r14, Z
    bd48:	f1 80       	ldd	r15, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    bd4a:	d7 01       	movw	r26, r14
    bd4c:	16 96       	adiw	r26, 0x06	; 6
    bd4e:	ed 91       	ld	r30, X+
    bd50:	fc 91       	ld	r31, X
    bd52:	17 97       	sbiw	r26, 0x07	; 7
    bd54:	19 95       	eicall
    bd56:	68 2f       	mov	r22, r24
    bd58:	81 2f       	mov	r24, r17
    bd5a:	b7 dc       	rcall	.-1682   	; 0xb6ca <udc_update_iface_desc>
    bd5c:	88 23       	and	r24, r24
    bd5e:	e1 f0       	breq	.+56     	; 0xbd98 <udc_process_setup+0x4b2>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    bd60:	d7 01       	movw	r26, r14
    bd62:	14 96       	adiw	r26, 0x04	; 4
    bd64:	ed 91       	ld	r30, X+
    bd66:	fc 91       	ld	r31, X
    bd68:	15 97       	sbiw	r26, 0x05	; 5
    bd6a:	19 95       	eicall
    bd6c:	81 11       	cpse	r24, r1
    bd6e:	9a cf       	rjmp	.-204    	; 0xbca4 <udc_process_setup+0x3be>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    bd70:	1f 5f       	subi	r17, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    bd72:	e0 91 59 24 	lds	r30, 0x2459
    bd76:	f0 91 5a 24 	lds	r31, 0x245A
    bd7a:	a0 81       	ld	r26, Z
    bd7c:	b1 81       	ldd	r27, Z+1	; 0x01
    bd7e:	14 96       	adiw	r26, 0x04	; 4
    bd80:	8c 91       	ld	r24, X
    bd82:	18 17       	cp	r17, r24
    bd84:	c0 f2       	brcs	.-80     	; 0xbd36 <udc_process_setup+0x450>
    bd86:	08 c0       	rjmp	.+16     	; 0xbd98 <udc_process_setup+0x4b2>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    bd88:	63 e0       	ldi	r22, 0x03	; 3
		str = udc_string_product_name;
    bd8a:	88 e3       	ldi	r24, 0x38	; 56
    bd8c:	90 e2       	ldi	r25, 0x20	; 32
    bd8e:	28 2f       	mov	r18, r24
    bd90:	ae e3       	ldi	r26, 0x3E	; 62
    bd92:	b0 e2       	ldi	r27, 0x20	; 32
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
			sizeof(udc_device_status));
	return true;
    bd94:	fc 01       	movw	r30, r24
    bd96:	33 ce       	rjmp	.-922    	; 0xb9fe <udc_process_setup+0x118>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    bd98:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
    bd9a:	0f 90       	pop	r0
    bd9c:	df 91       	pop	r29
    bd9e:	cf 91       	pop	r28
    bda0:	1f 91       	pop	r17
    bda2:	0f 91       	pop	r16
    bda4:	ff 90       	pop	r15
    bda6:	ef 90       	pop	r14
    bda8:	08 95       	ret

0000bdaa <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    bdaa:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    bdac:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    bdae:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    bdb0:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    bdb2:	60 83       	st	Z, r22
	ret                             // Return to caller
    bdb4:	08 95       	ret

0000bdb6 <nvm_wait_until_ready>:
	// Execute command
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);

	// Restore command register
	NVM.CMD = old_cmd;
}
    bdb6:	80 91 cf 01 	lds	r24, 0x01CF
    bdba:	87 fd       	sbrc	r24, 7
    bdbc:	fc cf       	rjmp	.-8      	; 0xbdb6 <nvm_wait_until_ready>
    bdbe:	08 95       	ret

0000bdc0 <nvm_eeprom_read_buffer>:
    bdc0:	ef 92       	push	r14
    bdc2:	ff 92       	push	r15
    bdc4:	0f 93       	push	r16
    bdc6:	1f 93       	push	r17
    bdc8:	cf 93       	push	r28
    bdca:	df 93       	push	r29
    bdcc:	00 d0       	rcall	.+0      	; 0xbdce <nvm_eeprom_read_buffer+0xe>
    bdce:	1f 92       	push	r1
    bdd0:	cd b7       	in	r28, 0x3d	; 61
    bdd2:	de b7       	in	r29, 0x3e	; 62
    bdd4:	8c 01       	movw	r16, r24
    bdd6:	cb 01       	movw	r24, r22
    bdd8:	4b 83       	std	Y+3, r20	; 0x03
    bdda:	5c 83       	std	Y+4, r21	; 0x04
    bddc:	69 83       	std	Y+1, r22	; 0x01
    bdde:	9a 83       	std	Y+2, r25	; 0x02
    bde0:	ea df       	rcall	.-44     	; 0xbdb6 <nvm_wait_until_ready>
    bde2:	8c ec       	ldi	r24, 0xCC	; 204
    bde4:	e8 2e       	mov	r14, r24
    bde6:	ff 24       	eor	r15, r15
    bde8:	f3 94       	inc	r15
    bdea:	f7 01       	movw	r30, r14
    bdec:	20 81       	ld	r18, Z
    bdee:	28 60       	ori	r18, 0x08	; 8
    bdf0:	20 83       	st	Z, r18
    bdf2:	98 01       	movw	r18, r16
    bdf4:	30 5f       	subi	r19, 0xF0	; 240
    bdf6:	4b 81       	ldd	r20, Y+3	; 0x03
    bdf8:	5c 81       	ldd	r21, Y+4	; 0x04
    bdfa:	b9 01       	movw	r22, r18
    bdfc:	89 81       	ldd	r24, Y+1	; 0x01
    bdfe:	9a 81       	ldd	r25, Y+2	; 0x02
    be00:	0e 94 4c 74 	call	0xe898	; 0xe898 <memcpy>
    be04:	f7 01       	movw	r30, r14
    be06:	80 81       	ld	r24, Z
    be08:	87 7f       	andi	r24, 0xF7	; 247
    be0a:	80 83       	st	Z, r24
    be0c:	24 96       	adiw	r28, 0x04	; 4
    be0e:	cd bf       	out	0x3d, r28	; 61
    be10:	de bf       	out	0x3e, r29	; 62
    be12:	df 91       	pop	r29
    be14:	cf 91       	pop	r28
    be16:	1f 91       	pop	r17
    be18:	0f 91       	pop	r16
    be1a:	ff 90       	pop	r15
    be1c:	ef 90       	pop	r14
    be1e:	08 95       	ret

0000be20 <nvm_flash_read_buffer>:
 * \param address	the address to where to read
 * \param buf		pointer to the data
 * \param len		the number of bytes to read
 */
void nvm_flash_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
    be20:	ef 92       	push	r14
    be22:	ff 92       	push	r15
    be24:	0f 93       	push	r16
    be26:	1f 93       	push	r17
    be28:	cf 93       	push	r28
    be2a:	df 93       	push	r29
    be2c:	00 d0       	rcall	.+0      	; 0xbe2e <nvm_flash_read_buffer+0xe>
    be2e:	1f 92       	push	r1
    be30:	cd b7       	in	r28, 0x3d	; 61
    be32:	de b7       	in	r29, 0x3e	; 62
    be34:	7a 01       	movw	r14, r20
    be36:	89 01       	movw	r16, r18
#if (FLASH_SIZE>0x10000)
	uint32_t opt_address = address;
#else
	uint16_t opt_address = (uint16_t)address;
#endif
	nvm_wait_until_ready();
    be38:	69 83       	std	Y+1, r22	; 0x01
    be3a:	7a 83       	std	Y+2, r23	; 0x02
    be3c:	8b 83       	std	Y+3, r24	; 0x03
    be3e:	9c 83       	std	Y+4, r25	; 0x04
    be40:	ba df       	rcall	.-140    	; 0xbdb6 <nvm_wait_until_ready>
 *
 * \param address	the address to where to read
 * \param buf		pointer to the data
 * \param len		the number of bytes to read
 */
void nvm_flash_read_buffer(flash_addr_t address, void *buf, uint16_t len)
    be42:	a7 01       	movw	r20, r14
    be44:	40 0f       	add	r20, r16
    be46:	51 1f       	adc	r21, r17
{
#if (FLASH_SIZE>0x10000)
	uint32_t opt_address = address;
    be48:	69 81       	ldd	r22, Y+1	; 0x01
    be4a:	06 2f       	mov	r16, r22
    be4c:	7a 81       	ldd	r23, Y+2	; 0x02
    be4e:	17 2f       	mov	r17, r23
    be50:	8b 81       	ldd	r24, Y+3	; 0x03
    be52:	28 2f       	mov	r18, r24
    be54:	9c 81       	ldd	r25, Y+4	; 0x04
    be56:	39 2f       	mov	r19, r25
#else
	uint16_t opt_address = (uint16_t)address;
#endif
	nvm_wait_until_ready();
	while ( len ) {
    be58:	0a c0       	rjmp	.+20     	; 0xbe6e <nvm_flash_read_buffer+0x4e>
 * \return Byte from program memory
 */
static inline uint8_t nvm_flash_read_byte(flash_addr_t addr)
{
#if defined(__GNUC__)
	return pgm_read_byte_far(addr);
    be5a:	2b bf       	out	0x3b, r18	; 59
    be5c:	f8 01       	movw	r30, r16
    be5e:	87 91       	elpm	r24, Z+
		*(uint8_t*)buf = nvm_flash_read_byte(opt_address);
    be60:	f7 01       	movw	r30, r14
    be62:	81 93       	st	Z+, r24
    be64:	7f 01       	movw	r14, r30
		buf=(uint8_t*)buf+1;
		opt_address++;
    be66:	0f 5f       	subi	r16, 0xFF	; 255
    be68:	1f 4f       	sbci	r17, 0xFF	; 255
    be6a:	2f 4f       	sbci	r18, 0xFF	; 255
    be6c:	3f 4f       	sbci	r19, 0xFF	; 255
	uint32_t opt_address = address;
#else
	uint16_t opt_address = (uint16_t)address;
#endif
	nvm_wait_until_ready();
	while ( len ) {
    be6e:	e4 16       	cp	r14, r20
    be70:	f5 06       	cpc	r15, r21
    be72:	99 f7       	brne	.-26     	; 0xbe5a <nvm_flash_read_buffer+0x3a>
		*(uint8_t*)buf = nvm_flash_read_byte(opt_address);
		buf=(uint8_t*)buf+1;
		opt_address++;
		len--;
	}
}
    be74:	24 96       	adiw	r28, 0x04	; 4
    be76:	cd bf       	out	0x3d, r28	; 61
    be78:	de bf       	out	0x3e, r29	; 62
    be7a:	df 91       	pop	r29
    be7c:	cf 91       	pop	r28
    be7e:	1f 91       	pop	r17
    be80:	0f 91       	pop	r16
    be82:	ff 90       	pop	r15
    be84:	ef 90       	pop	r14
    be86:	08 95       	ret

0000be88 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    be88:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    be8c:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    be8e:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    be90:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    be94:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    be96:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    be9a:	08 95       	ret

0000be9c <__portable_avr_delay_cycles.constprop.0>:
 */
bool rtc_alarm_has_triggered(void)
{
	// Interrupt enable is used on pending alarm
	return !(RTC32.INTCTRL & RTC32_COMPARE_INT_LEVEL);
}
    be9c:	80 e0       	ldi	r24, 0x00	; 0
    be9e:	90 e0       	ldi	r25, 0x00	; 0
    bea0:	01 96       	adiw	r24, 0x01	; 1
    bea2:	80 32       	cpi	r24, 0x20	; 32
    bea4:	23 e0       	ldi	r18, 0x03	; 3
    bea6:	92 07       	cpc	r25, r18
    bea8:	d9 f7       	brne	.-10     	; 0xbea0 <__portable_avr_delay_cycles.constprop.0+0x4>
    beaa:	08 95       	ret

0000beac <rtc_set_time>:
    beac:	10 92 20 04 	sts	0x0420, r1
    beb0:	20 91 21 04 	lds	r18, 0x0421
    beb4:	20 fd       	sbrc	r18, 0
    beb6:	fc cf       	rjmp	.-8      	; 0xbeb0 <rtc_set_time+0x4>
    beb8:	60 93 24 04 	sts	0x0424, r22
    bebc:	70 93 25 04 	sts	0x0425, r23
    bec0:	80 93 26 04 	sts	0x0426, r24
    bec4:	90 93 27 04 	sts	0x0427, r25
    bec8:	81 e0       	ldi	r24, 0x01	; 1
    beca:	80 93 20 04 	sts	0x0420, r24
    bece:	08 95       	ret

0000bed0 <rtc_get_time>:
    bed0:	0f 93       	push	r16
    bed2:	1f 93       	push	r17
    bed4:	80 e1       	ldi	r24, 0x10	; 16
    bed6:	80 93 21 04 	sts	0x0421, r24
    beda:	80 91 21 04 	lds	r24, 0x0421
    bede:	84 fd       	sbrc	r24, 4
    bee0:	fc cf       	rjmp	.-8      	; 0xbeda <rtc_get_time+0xa>
    bee2:	00 91 24 04 	lds	r16, 0x0424
    bee6:	10 91 25 04 	lds	r17, 0x0425
    beea:	20 91 26 04 	lds	r18, 0x0426
    beee:	30 91 27 04 	lds	r19, 0x0427
    bef2:	b8 01       	movw	r22, r16
    bef4:	c9 01       	movw	r24, r18
    bef6:	1f 91       	pop	r17
    bef8:	0f 91       	pop	r16
    befa:	08 95       	ret

0000befc <rtc_set_alarm>:
    befc:	e0 e2       	ldi	r30, 0x20	; 32
    befe:	f4 e0       	ldi	r31, 0x04	; 4
    bf00:	24 e0       	ldi	r18, 0x04	; 4
    bf02:	22 83       	std	Z+2, r18	; 0x02
    bf04:	64 87       	std	Z+12, r22	; 0x0c
    bf06:	75 87       	std	Z+13, r23	; 0x0d
    bf08:	86 87       	std	Z+14, r24	; 0x0e
    bf0a:	97 87       	std	Z+15, r25	; 0x0f
    bf0c:	82 e0       	ldi	r24, 0x02	; 2
    bf0e:	83 83       	std	Z+3, r24	; 0x03
    bf10:	08 95       	ret

0000bf12 <rtc_set_callback>:
 *
 * \param callback Callback function pointer
 */
void rtc_set_callback(rtc_callback_t callback)
{
	rtc_data.callback = callback;
    bf12:	80 93 68 27 	sts	0x2768, r24
    bf16:	90 93 69 27 	sts	0x2769, r25
    bf1a:	08 95       	ret

0000bf1c <rtc_vbat_system_check>:
 * when main system power is lost.
 *
 * \returns Battery backup system status.
 */
enum vbat_status_code rtc_vbat_system_check(bool first_time_startup)
{
    bf1c:	cf 93       	push	r28
    bf1e:	df 93       	push	r29
    bf20:	d8 2f       	mov	r29, r24
	enum vbat_status_code vbat_status;
	uint8_t flags = VBAT.STATUS;
    bf22:	c0 91 f1 00 	lds	r28, 0x00F1

	/* Ensure the module is clocked to be able to check the registers */
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    bf26:	64 e0       	ldi	r22, 0x04	; 4
    bf28:	80 e0       	ldi	r24, 0x00	; 0
    bf2a:	90 e0       	ldi	r25, 0x00	; 0
    bf2c:	6f db       	rcall	.-2338   	; 0xb60c <sysclk_enable_module>
	/*
	 * Check if a sufficient voltage was detected on the VBAT input.
	 * The brown-out detector (BBBOD) will be sampled once when the
	 * device starts up and the result is visible as the BBPWR flag.
	 */
	if (flags & VBAT_BBPWR_bm) {
    bf2e:	c7 fd       	sbrc	r28, 7
    bf30:	11 c0       	rjmp	.+34     	; 0xbf54 <rtc_vbat_system_check+0x38>
		/*
		 * We have sufficient power, now we check if a power-on-reset
		 * (BBPOR) was detected on VBAT. This is visible from the BBPORF
		 * flag which is also only updated once when the device starts.
		 */
		if (flags & VBAT_BBPORF_bm) {
    bf32:	c0 ff       	sbrs	r28, 0
    bf34:	05 c0       	rjmp	.+10     	; 0xbf40 <rtc_vbat_system_check+0x24>
			if (first_time_startup) {
    bf36:	dd 23       	and	r29, r29
    bf38:	81 f0       	breq	.+32     	; 0xbf5a <rtc_vbat_system_check+0x3e>
				vbat_status = VBAT_STATUS_INIT;
    bf3a:	22 e0       	ldi	r18, 0x02	; 2
    bf3c:	30 e0       	ldi	r19, 0x00	; 0
    bf3e:	15 c0       	rjmp	.+42     	; 0xbf6a <rtc_vbat_system_check+0x4e>
			} else {
				vbat_status = VBAT_STATUS_BBPOR;
			}
		} else if (flags & VBAT_BBBORF_bm) {
    bf40:	c1 fd       	sbrc	r28, 1
    bf42:	0e c0       	rjmp	.+28     	; 0xbf60 <rtc_vbat_system_check+0x44>
			vbat_status = VBAT_STATUS_BBBOD;
		} else {
			VBAT.CTRL = VBAT_ACCEN_bm;
    bf44:	82 e0       	ldi	r24, 0x02	; 2
    bf46:	80 93 f0 00 	sts	0x00F0, r24
			if (flags & VBAT_XOSCFAIL_bm) {
    bf4a:	c2 ff       	sbrs	r28, 2
    bf4c:	0c c0       	rjmp	.+24     	; 0xbf66 <rtc_vbat_system_check+0x4a>
				vbat_status = VBAT_STATUS_XOSCFAIL;
    bf4e:	25 e0       	ldi	r18, 0x05	; 5
    bf50:	30 e0       	ldi	r19, 0x00	; 0
    bf52:	0b c0       	rjmp	.+22     	; 0xbf6a <rtc_vbat_system_check+0x4e>
	 * Check if a sufficient voltage was detected on the VBAT input.
	 * The brown-out detector (BBBOD) will be sampled once when the
	 * device starts up and the result is visible as the BBPWR flag.
	 */
	if (flags & VBAT_BBPWR_bm) {
		vbat_status = VBAT_STATUS_NO_POWER;
    bf54:	21 e0       	ldi	r18, 0x01	; 1
    bf56:	30 e0       	ldi	r19, 0x00	; 0
    bf58:	08 c0       	rjmp	.+16     	; 0xbf6a <rtc_vbat_system_check+0x4e>
		 */
		if (flags & VBAT_BBPORF_bm) {
			if (first_time_startup) {
				vbat_status = VBAT_STATUS_INIT;
			} else {
				vbat_status = VBAT_STATUS_BBPOR;
    bf5a:	23 e0       	ldi	r18, 0x03	; 3
    bf5c:	30 e0       	ldi	r19, 0x00	; 0
    bf5e:	05 c0       	rjmp	.+10     	; 0xbf6a <rtc_vbat_system_check+0x4e>
			}
		} else if (flags & VBAT_BBBORF_bm) {
			vbat_status = VBAT_STATUS_BBBOD;
    bf60:	24 e0       	ldi	r18, 0x04	; 4
    bf62:	30 e0       	ldi	r19, 0x00	; 0
    bf64:	02 c0       	rjmp	.+4      	; 0xbf6a <rtc_vbat_system_check+0x4e>
		} else {
			VBAT.CTRL = VBAT_ACCEN_bm;
			if (flags & VBAT_XOSCFAIL_bm) {
				vbat_status = VBAT_STATUS_XOSCFAIL;
			} else {
				vbat_status = VBAT_STATUS_OK;
    bf66:	20 e0       	ldi	r18, 0x00	; 0
    bf68:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}
	return vbat_status;
}
    bf6a:	c9 01       	movw	r24, r18
    bf6c:	df 91       	pop	r29
    bf6e:	cf 91       	pop	r28
    bf70:	08 95       	ret

0000bf72 <rtc_init>:
 * rtc_vbat_system_check should be called to determine if a re-initialization
 * must be done.
 */
void rtc_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    bf72:	64 e0       	ldi	r22, 0x04	; 4
    bf74:	80 e0       	ldi	r24, 0x00	; 0
    bf76:	90 e0       	ldi	r25, 0x00	; 0
    bf78:	49 db       	rcall	.-2414   	; 0xb60c <sysclk_enable_module>
 * \ref CONFIG_RTC32_CLOCK_1024HZ.
 */
static void vbat_init(void)
{
	// Enable access to VBAT
	VBAT.CTRL |= VBAT_ACCEN_bm;
    bf7a:	80 91 f0 00 	lds	r24, 0x00F0
    bf7e:	82 60       	ori	r24, 0x02	; 2
    bf80:	80 93 f0 00 	sts	0x00F0, r24

	ccp_write_io((void *)&VBAT.CTRL, VBAT_RESET_bm);
    bf84:	61 e0       	ldi	r22, 0x01	; 1
    bf86:	80 ef       	ldi	r24, 0xF0	; 240
    bf88:	90 e0       	ldi	r25, 0x00	; 0
    bf8a:	0f df       	rcall	.-482    	; 0xbdaa <ccp_write_io>

	VBAT.CTRL |= VBAT_XOSCFDEN_bm;
    bf8c:	80 91 f0 00 	lds	r24, 0x00F0
    bf90:	84 60       	ori	r24, 0x04	; 4
    bf92:	80 93 f0 00 	sts	0x00F0, r24
	/* This delay is needed to give the voltage in the backup system some
	* time to stabilize before we turn on the oscillator. If we do not
	* have this delay we may get a failure detection.
	*/
	delay_us(200);
    bf96:	82 df       	rcall	.-252    	; 0xbe9c <__portable_avr_delay_cycles.constprop.0>
	VBAT.CTRL |= VBAT_XOSCEN_bm | RTC32_CLOCK;
    bf98:	80 91 f0 00 	lds	r24, 0x00F0
    bf9c:	88 60       	ori	r24, 0x08	; 8
    bf9e:	80 93 f0 00 	sts	0x00F0, r24
	while (!(VBAT.STATUS & VBAT_XOSCRDY_bm));
    bfa2:	80 91 f1 00 	lds	r24, 0x00F1
    bfa6:	83 ff       	sbrs	r24, 3
    bfa8:	fc cf       	rjmp	.-8      	; 0xbfa2 <rtc_init+0x30>
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	// Set up VBAT system and start oscillator
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;
    bfaa:	10 92 20 04 	sts	0x0420, r1
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    bfae:	80 91 21 04 	lds	r24, 0x0421
	vbat_init();

	// Disable the RTC32 module before setting it up
	RTC32.CTRL = 0;

	while (rtc_is_busy());
    bfb2:	80 fd       	sbrc	r24, 0
    bfb4:	fc cf       	rjmp	.-8      	; 0xbfae <rtc_init+0x3c>

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
    bfb6:	8f ef       	ldi	r24, 0xFF	; 255
    bfb8:	9f ef       	ldi	r25, 0xFF	; 255
    bfba:	dc 01       	movw	r26, r24
    bfbc:	80 93 28 04 	sts	0x0428, r24
    bfc0:	90 93 29 04 	sts	0x0429, r25
    bfc4:	a0 93 2a 04 	sts	0x042A, r26
    bfc8:	b0 93 2b 04 	sts	0x042B, r27
	RTC32.CNT = 0;
    bfcc:	10 92 24 04 	sts	0x0424, r1
    bfd0:	10 92 25 04 	sts	0x0425, r1
    bfd4:	10 92 26 04 	sts	0x0426, r1
    bfd8:	10 92 27 04 	sts	0x0427, r1
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    bfdc:	80 91 21 04 	lds	r24, 0x0421

	// Set up maximum period and start at 0
	RTC32.PER = 0xffffffff;
	RTC32.CNT = 0;

	while (rtc_is_busy());
    bfe0:	80 fd       	sbrc	r24, 0
    bfe2:	fc cf       	rjmp	.-8      	; 0xbfdc <rtc_init+0x6a>

	RTC32.INTCTRL = 0;
    bfe4:	10 92 22 04 	sts	0x0422, r1
	RTC32.CTRL = RTC32_ENABLE_bm;
    bfe8:	81 e0       	ldi	r24, 0x01	; 1
    bfea:	80 93 20 04 	sts	0x0420, r24
 * \retval true  Is busy
 * \retval false Is ready
 */
static __always_inline bool rtc_is_busy(void)
{
	return RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm;
    bfee:	80 91 21 04 	lds	r24, 0x0421

	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
    bff2:	80 fd       	sbrc	r24, 0
    bff4:	fc cf       	rjmp	.-8      	; 0xbfee <rtc_init+0x7c>
}
    bff6:	08 95       	ret

0000bff8 <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
    bff8:	1f 92       	push	r1
    bffa:	0f 92       	push	r0
    bffc:	0f b6       	in	r0, 0x3f	; 63
    bffe:	0f 92       	push	r0
    c000:	11 24       	eor	r1, r1
    c002:	0b b6       	in	r0, 0x3b	; 59
    c004:	0f 92       	push	r0
    c006:	2f 93       	push	r18
    c008:	3f 93       	push	r19
    c00a:	4f 93       	push	r20
    c00c:	5f 93       	push	r21
    c00e:	6f 93       	push	r22
    c010:	7f 93       	push	r23
    c012:	8f 93       	push	r24
    c014:	9f 93       	push	r25
    c016:	af 93       	push	r26
    c018:	bf 93       	push	r27
    c01a:	ef 93       	push	r30
    c01c:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
    c01e:	10 92 22 04 	sts	0x0422, r1
	if (rtc_data.callback)
    c022:	e0 91 68 27 	lds	r30, 0x2768
    c026:	f0 91 69 27 	lds	r31, 0x2769
    c02a:	30 97       	sbiw	r30, 0x00	; 0
    c02c:	81 f0       	breq	.+32     	; 0xc04e <__vector_11+0x56>
 *
 * \return Counter value
 */
static inline uint32_t rtc_get_counter(void)
{
	RTC32.SYNCCTRL = RTC32_SYNCCNT_bm;
    c02e:	80 e1       	ldi	r24, 0x10	; 16
    c030:	80 93 21 04 	sts	0x0421, r24
	while (RTC32.SYNCCTRL & RTC32_SYNCCNT_bm);
    c034:	80 91 21 04 	lds	r24, 0x0421
    c038:	84 fd       	sbrc	r24, 4
    c03a:	fc cf       	rjmp	.-8      	; 0xc034 <__vector_11+0x3c>
	return RTC32.CNT;
    c03c:	60 91 24 04 	lds	r22, 0x0424
    c040:	70 91 25 04 	lds	r23, 0x0425
    c044:	80 91 26 04 	lds	r24, 0x0426
    c048:	90 91 27 04 	lds	r25, 0x0427
 */
ISR(RTC32_COMP_vect)
{
	RTC32.INTCTRL = 0;
	if (rtc_data.callback)
		rtc_data.callback(rtc_get_time());
    c04c:	19 95       	eicall
}
    c04e:	ff 91       	pop	r31
    c050:	ef 91       	pop	r30
    c052:	bf 91       	pop	r27
    c054:	af 91       	pop	r26
    c056:	9f 91       	pop	r25
    c058:	8f 91       	pop	r24
    c05a:	7f 91       	pop	r23
    c05c:	6f 91       	pop	r22
    c05e:	5f 91       	pop	r21
    c060:	4f 91       	pop	r20
    c062:	3f 91       	pop	r19
    c064:	2f 91       	pop	r18
    c066:	0f 90       	pop	r0
    c068:	0b be       	out	0x3b, r0	; 59
    c06a:	0f 90       	pop	r0
    c06c:	0f be       	out	0x3f, r0	; 63
    c06e:	0f 90       	pop	r0
    c070:	1f 90       	pop	r1
    c072:	18 95       	reti

0000c074 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
    c074:	1f 92       	push	r1
    c076:	0f 92       	push	r0
    c078:	0f b6       	in	r0, 0x3f	; 63
    c07a:	0f 92       	push	r0
    c07c:	11 24       	eor	r1, r1
    c07e:	0b b6       	in	r0, 0x3b	; 59
    c080:	0f 92       	push	r0
    c082:	2f 93       	push	r18
    c084:	3f 93       	push	r19
    c086:	4f 93       	push	r20
    c088:	5f 93       	push	r21
    c08a:	6f 93       	push	r22
    c08c:	7f 93       	push	r23
    c08e:	8f 93       	push	r24
    c090:	9f 93       	push	r25
    c092:	af 93       	push	r26
    c094:	bf 93       	push	r27
    c096:	ef 93       	push	r30
    c098:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
    c09a:	e0 91 60 24 	lds	r30, 0x2460
    c09e:	f0 91 61 24 	lds	r31, 0x2461
    c0a2:	30 97       	sbiw	r30, 0x00	; 0
    c0a4:	09 f0       	breq	.+2      	; 0xc0a8 <__vector_14+0x34>
		tc_tcc0_ovf_callback();
    c0a6:	19 95       	eicall
	}
}
    c0a8:	ff 91       	pop	r31
    c0aa:	ef 91       	pop	r30
    c0ac:	bf 91       	pop	r27
    c0ae:	af 91       	pop	r26
    c0b0:	9f 91       	pop	r25
    c0b2:	8f 91       	pop	r24
    c0b4:	7f 91       	pop	r23
    c0b6:	6f 91       	pop	r22
    c0b8:	5f 91       	pop	r21
    c0ba:	4f 91       	pop	r20
    c0bc:	3f 91       	pop	r19
    c0be:	2f 91       	pop	r18
    c0c0:	0f 90       	pop	r0
    c0c2:	0b be       	out	0x3b, r0	; 59
    c0c4:	0f 90       	pop	r0
    c0c6:	0f be       	out	0x3f, r0	; 63
    c0c8:	0f 90       	pop	r0
    c0ca:	1f 90       	pop	r1
    c0cc:	18 95       	reti

0000c0ce <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
    c0ce:	1f 92       	push	r1
    c0d0:	0f 92       	push	r0
    c0d2:	0f b6       	in	r0, 0x3f	; 63
    c0d4:	0f 92       	push	r0
    c0d6:	11 24       	eor	r1, r1
    c0d8:	0b b6       	in	r0, 0x3b	; 59
    c0da:	0f 92       	push	r0
    c0dc:	2f 93       	push	r18
    c0de:	3f 93       	push	r19
    c0e0:	4f 93       	push	r20
    c0e2:	5f 93       	push	r21
    c0e4:	6f 93       	push	r22
    c0e6:	7f 93       	push	r23
    c0e8:	8f 93       	push	r24
    c0ea:	9f 93       	push	r25
    c0ec:	af 93       	push	r26
    c0ee:	bf 93       	push	r27
    c0f0:	ef 93       	push	r30
    c0f2:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
    c0f4:	e0 91 62 24 	lds	r30, 0x2462
    c0f8:	f0 91 63 24 	lds	r31, 0x2463
    c0fc:	30 97       	sbiw	r30, 0x00	; 0
    c0fe:	09 f0       	breq	.+2      	; 0xc102 <__vector_15+0x34>
		tc_tcc0_err_callback();
    c100:	19 95       	eicall
	}
}
    c102:	ff 91       	pop	r31
    c104:	ef 91       	pop	r30
    c106:	bf 91       	pop	r27
    c108:	af 91       	pop	r26
    c10a:	9f 91       	pop	r25
    c10c:	8f 91       	pop	r24
    c10e:	7f 91       	pop	r23
    c110:	6f 91       	pop	r22
    c112:	5f 91       	pop	r21
    c114:	4f 91       	pop	r20
    c116:	3f 91       	pop	r19
    c118:	2f 91       	pop	r18
    c11a:	0f 90       	pop	r0
    c11c:	0b be       	out	0x3b, r0	; 59
    c11e:	0f 90       	pop	r0
    c120:	0f be       	out	0x3f, r0	; 63
    c122:	0f 90       	pop	r0
    c124:	1f 90       	pop	r1
    c126:	18 95       	reti

0000c128 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
    c128:	1f 92       	push	r1
    c12a:	0f 92       	push	r0
    c12c:	0f b6       	in	r0, 0x3f	; 63
    c12e:	0f 92       	push	r0
    c130:	11 24       	eor	r1, r1
    c132:	0b b6       	in	r0, 0x3b	; 59
    c134:	0f 92       	push	r0
    c136:	2f 93       	push	r18
    c138:	3f 93       	push	r19
    c13a:	4f 93       	push	r20
    c13c:	5f 93       	push	r21
    c13e:	6f 93       	push	r22
    c140:	7f 93       	push	r23
    c142:	8f 93       	push	r24
    c144:	9f 93       	push	r25
    c146:	af 93       	push	r26
    c148:	bf 93       	push	r27
    c14a:	ef 93       	push	r30
    c14c:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
    c14e:	e0 91 64 24 	lds	r30, 0x2464
    c152:	f0 91 65 24 	lds	r31, 0x2465
    c156:	30 97       	sbiw	r30, 0x00	; 0
    c158:	09 f0       	breq	.+2      	; 0xc15c <__vector_16+0x34>
		tc_tcc0_cca_callback();
    c15a:	19 95       	eicall
	}
}
    c15c:	ff 91       	pop	r31
    c15e:	ef 91       	pop	r30
    c160:	bf 91       	pop	r27
    c162:	af 91       	pop	r26
    c164:	9f 91       	pop	r25
    c166:	8f 91       	pop	r24
    c168:	7f 91       	pop	r23
    c16a:	6f 91       	pop	r22
    c16c:	5f 91       	pop	r21
    c16e:	4f 91       	pop	r20
    c170:	3f 91       	pop	r19
    c172:	2f 91       	pop	r18
    c174:	0f 90       	pop	r0
    c176:	0b be       	out	0x3b, r0	; 59
    c178:	0f 90       	pop	r0
    c17a:	0f be       	out	0x3f, r0	; 63
    c17c:	0f 90       	pop	r0
    c17e:	1f 90       	pop	r1
    c180:	18 95       	reti

0000c182 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
    c182:	1f 92       	push	r1
    c184:	0f 92       	push	r0
    c186:	0f b6       	in	r0, 0x3f	; 63
    c188:	0f 92       	push	r0
    c18a:	11 24       	eor	r1, r1
    c18c:	0b b6       	in	r0, 0x3b	; 59
    c18e:	0f 92       	push	r0
    c190:	2f 93       	push	r18
    c192:	3f 93       	push	r19
    c194:	4f 93       	push	r20
    c196:	5f 93       	push	r21
    c198:	6f 93       	push	r22
    c19a:	7f 93       	push	r23
    c19c:	8f 93       	push	r24
    c19e:	9f 93       	push	r25
    c1a0:	af 93       	push	r26
    c1a2:	bf 93       	push	r27
    c1a4:	ef 93       	push	r30
    c1a6:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
    c1a8:	e0 91 66 24 	lds	r30, 0x2466
    c1ac:	f0 91 67 24 	lds	r31, 0x2467
    c1b0:	30 97       	sbiw	r30, 0x00	; 0
    c1b2:	09 f0       	breq	.+2      	; 0xc1b6 <__vector_17+0x34>
		tc_tcc0_ccb_callback();
    c1b4:	19 95       	eicall
	}
}
    c1b6:	ff 91       	pop	r31
    c1b8:	ef 91       	pop	r30
    c1ba:	bf 91       	pop	r27
    c1bc:	af 91       	pop	r26
    c1be:	9f 91       	pop	r25
    c1c0:	8f 91       	pop	r24
    c1c2:	7f 91       	pop	r23
    c1c4:	6f 91       	pop	r22
    c1c6:	5f 91       	pop	r21
    c1c8:	4f 91       	pop	r20
    c1ca:	3f 91       	pop	r19
    c1cc:	2f 91       	pop	r18
    c1ce:	0f 90       	pop	r0
    c1d0:	0b be       	out	0x3b, r0	; 59
    c1d2:	0f 90       	pop	r0
    c1d4:	0f be       	out	0x3f, r0	; 63
    c1d6:	0f 90       	pop	r0
    c1d8:	1f 90       	pop	r1
    c1da:	18 95       	reti

0000c1dc <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
    c1dc:	1f 92       	push	r1
    c1de:	0f 92       	push	r0
    c1e0:	0f b6       	in	r0, 0x3f	; 63
    c1e2:	0f 92       	push	r0
    c1e4:	11 24       	eor	r1, r1
    c1e6:	0b b6       	in	r0, 0x3b	; 59
    c1e8:	0f 92       	push	r0
    c1ea:	2f 93       	push	r18
    c1ec:	3f 93       	push	r19
    c1ee:	4f 93       	push	r20
    c1f0:	5f 93       	push	r21
    c1f2:	6f 93       	push	r22
    c1f4:	7f 93       	push	r23
    c1f6:	8f 93       	push	r24
    c1f8:	9f 93       	push	r25
    c1fa:	af 93       	push	r26
    c1fc:	bf 93       	push	r27
    c1fe:	ef 93       	push	r30
    c200:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
    c202:	e0 91 68 24 	lds	r30, 0x2468
    c206:	f0 91 69 24 	lds	r31, 0x2469
    c20a:	30 97       	sbiw	r30, 0x00	; 0
    c20c:	09 f0       	breq	.+2      	; 0xc210 <__vector_18+0x34>
		tc_tcc0_ccc_callback();
    c20e:	19 95       	eicall
	}
}
    c210:	ff 91       	pop	r31
    c212:	ef 91       	pop	r30
    c214:	bf 91       	pop	r27
    c216:	af 91       	pop	r26
    c218:	9f 91       	pop	r25
    c21a:	8f 91       	pop	r24
    c21c:	7f 91       	pop	r23
    c21e:	6f 91       	pop	r22
    c220:	5f 91       	pop	r21
    c222:	4f 91       	pop	r20
    c224:	3f 91       	pop	r19
    c226:	2f 91       	pop	r18
    c228:	0f 90       	pop	r0
    c22a:	0b be       	out	0x3b, r0	; 59
    c22c:	0f 90       	pop	r0
    c22e:	0f be       	out	0x3f, r0	; 63
    c230:	0f 90       	pop	r0
    c232:	1f 90       	pop	r1
    c234:	18 95       	reti

0000c236 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    c236:	1f 92       	push	r1
    c238:	0f 92       	push	r0
    c23a:	0f b6       	in	r0, 0x3f	; 63
    c23c:	0f 92       	push	r0
    c23e:	11 24       	eor	r1, r1
    c240:	0b b6       	in	r0, 0x3b	; 59
    c242:	0f 92       	push	r0
    c244:	2f 93       	push	r18
    c246:	3f 93       	push	r19
    c248:	4f 93       	push	r20
    c24a:	5f 93       	push	r21
    c24c:	6f 93       	push	r22
    c24e:	7f 93       	push	r23
    c250:	8f 93       	push	r24
    c252:	9f 93       	push	r25
    c254:	af 93       	push	r26
    c256:	bf 93       	push	r27
    c258:	ef 93       	push	r30
    c25a:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
    c25c:	e0 91 6a 24 	lds	r30, 0x246A
    c260:	f0 91 6b 24 	lds	r31, 0x246B
    c264:	30 97       	sbiw	r30, 0x00	; 0
    c266:	09 f0       	breq	.+2      	; 0xc26a <__vector_19+0x34>
		tc_tcc0_ccd_callback();
    c268:	19 95       	eicall
	}
}
    c26a:	ff 91       	pop	r31
    c26c:	ef 91       	pop	r30
    c26e:	bf 91       	pop	r27
    c270:	af 91       	pop	r26
    c272:	9f 91       	pop	r25
    c274:	8f 91       	pop	r24
    c276:	7f 91       	pop	r23
    c278:	6f 91       	pop	r22
    c27a:	5f 91       	pop	r21
    c27c:	4f 91       	pop	r20
    c27e:	3f 91       	pop	r19
    c280:	2f 91       	pop	r18
    c282:	0f 90       	pop	r0
    c284:	0b be       	out	0x3b, r0	; 59
    c286:	0f 90       	pop	r0
    c288:	0f be       	out	0x3f, r0	; 63
    c28a:	0f 90       	pop	r0
    c28c:	1f 90       	pop	r1
    c28e:	18 95       	reti

0000c290 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    c290:	1f 92       	push	r1
    c292:	0f 92       	push	r0
    c294:	0f b6       	in	r0, 0x3f	; 63
    c296:	0f 92       	push	r0
    c298:	11 24       	eor	r1, r1
    c29a:	0b b6       	in	r0, 0x3b	; 59
    c29c:	0f 92       	push	r0
    c29e:	2f 93       	push	r18
    c2a0:	3f 93       	push	r19
    c2a2:	4f 93       	push	r20
    c2a4:	5f 93       	push	r21
    c2a6:	6f 93       	push	r22
    c2a8:	7f 93       	push	r23
    c2aa:	8f 93       	push	r24
    c2ac:	9f 93       	push	r25
    c2ae:	af 93       	push	r26
    c2b0:	bf 93       	push	r27
    c2b2:	ef 93       	push	r30
    c2b4:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
    c2b6:	e0 91 6c 24 	lds	r30, 0x246C
    c2ba:	f0 91 6d 24 	lds	r31, 0x246D
    c2be:	30 97       	sbiw	r30, 0x00	; 0
    c2c0:	09 f0       	breq	.+2      	; 0xc2c4 <__vector_20+0x34>
		tc_tcc1_ovf_callback();
    c2c2:	19 95       	eicall
	}
}
    c2c4:	ff 91       	pop	r31
    c2c6:	ef 91       	pop	r30
    c2c8:	bf 91       	pop	r27
    c2ca:	af 91       	pop	r26
    c2cc:	9f 91       	pop	r25
    c2ce:	8f 91       	pop	r24
    c2d0:	7f 91       	pop	r23
    c2d2:	6f 91       	pop	r22
    c2d4:	5f 91       	pop	r21
    c2d6:	4f 91       	pop	r20
    c2d8:	3f 91       	pop	r19
    c2da:	2f 91       	pop	r18
    c2dc:	0f 90       	pop	r0
    c2de:	0b be       	out	0x3b, r0	; 59
    c2e0:	0f 90       	pop	r0
    c2e2:	0f be       	out	0x3f, r0	; 63
    c2e4:	0f 90       	pop	r0
    c2e6:	1f 90       	pop	r1
    c2e8:	18 95       	reti

0000c2ea <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    c2ea:	1f 92       	push	r1
    c2ec:	0f 92       	push	r0
    c2ee:	0f b6       	in	r0, 0x3f	; 63
    c2f0:	0f 92       	push	r0
    c2f2:	11 24       	eor	r1, r1
    c2f4:	0b b6       	in	r0, 0x3b	; 59
    c2f6:	0f 92       	push	r0
    c2f8:	2f 93       	push	r18
    c2fa:	3f 93       	push	r19
    c2fc:	4f 93       	push	r20
    c2fe:	5f 93       	push	r21
    c300:	6f 93       	push	r22
    c302:	7f 93       	push	r23
    c304:	8f 93       	push	r24
    c306:	9f 93       	push	r25
    c308:	af 93       	push	r26
    c30a:	bf 93       	push	r27
    c30c:	ef 93       	push	r30
    c30e:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
    c310:	e0 91 6e 24 	lds	r30, 0x246E
    c314:	f0 91 6f 24 	lds	r31, 0x246F
    c318:	30 97       	sbiw	r30, 0x00	; 0
    c31a:	09 f0       	breq	.+2      	; 0xc31e <__vector_21+0x34>
		tc_tcc1_err_callback();
    c31c:	19 95       	eicall
	}
}
    c31e:	ff 91       	pop	r31
    c320:	ef 91       	pop	r30
    c322:	bf 91       	pop	r27
    c324:	af 91       	pop	r26
    c326:	9f 91       	pop	r25
    c328:	8f 91       	pop	r24
    c32a:	7f 91       	pop	r23
    c32c:	6f 91       	pop	r22
    c32e:	5f 91       	pop	r21
    c330:	4f 91       	pop	r20
    c332:	3f 91       	pop	r19
    c334:	2f 91       	pop	r18
    c336:	0f 90       	pop	r0
    c338:	0b be       	out	0x3b, r0	; 59
    c33a:	0f 90       	pop	r0
    c33c:	0f be       	out	0x3f, r0	; 63
    c33e:	0f 90       	pop	r0
    c340:	1f 90       	pop	r1
    c342:	18 95       	reti

0000c344 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    c344:	1f 92       	push	r1
    c346:	0f 92       	push	r0
    c348:	0f b6       	in	r0, 0x3f	; 63
    c34a:	0f 92       	push	r0
    c34c:	11 24       	eor	r1, r1
    c34e:	0b b6       	in	r0, 0x3b	; 59
    c350:	0f 92       	push	r0
    c352:	2f 93       	push	r18
    c354:	3f 93       	push	r19
    c356:	4f 93       	push	r20
    c358:	5f 93       	push	r21
    c35a:	6f 93       	push	r22
    c35c:	7f 93       	push	r23
    c35e:	8f 93       	push	r24
    c360:	9f 93       	push	r25
    c362:	af 93       	push	r26
    c364:	bf 93       	push	r27
    c366:	ef 93       	push	r30
    c368:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
    c36a:	e0 91 70 24 	lds	r30, 0x2470
    c36e:	f0 91 71 24 	lds	r31, 0x2471
    c372:	30 97       	sbiw	r30, 0x00	; 0
    c374:	09 f0       	breq	.+2      	; 0xc378 <__vector_22+0x34>
		tc_tcc1_cca_callback();
    c376:	19 95       	eicall
	}
}
    c378:	ff 91       	pop	r31
    c37a:	ef 91       	pop	r30
    c37c:	bf 91       	pop	r27
    c37e:	af 91       	pop	r26
    c380:	9f 91       	pop	r25
    c382:	8f 91       	pop	r24
    c384:	7f 91       	pop	r23
    c386:	6f 91       	pop	r22
    c388:	5f 91       	pop	r21
    c38a:	4f 91       	pop	r20
    c38c:	3f 91       	pop	r19
    c38e:	2f 91       	pop	r18
    c390:	0f 90       	pop	r0
    c392:	0b be       	out	0x3b, r0	; 59
    c394:	0f 90       	pop	r0
    c396:	0f be       	out	0x3f, r0	; 63
    c398:	0f 90       	pop	r0
    c39a:	1f 90       	pop	r1
    c39c:	18 95       	reti

0000c39e <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    c39e:	1f 92       	push	r1
    c3a0:	0f 92       	push	r0
    c3a2:	0f b6       	in	r0, 0x3f	; 63
    c3a4:	0f 92       	push	r0
    c3a6:	11 24       	eor	r1, r1
    c3a8:	0b b6       	in	r0, 0x3b	; 59
    c3aa:	0f 92       	push	r0
    c3ac:	2f 93       	push	r18
    c3ae:	3f 93       	push	r19
    c3b0:	4f 93       	push	r20
    c3b2:	5f 93       	push	r21
    c3b4:	6f 93       	push	r22
    c3b6:	7f 93       	push	r23
    c3b8:	8f 93       	push	r24
    c3ba:	9f 93       	push	r25
    c3bc:	af 93       	push	r26
    c3be:	bf 93       	push	r27
    c3c0:	ef 93       	push	r30
    c3c2:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    c3c4:	e0 91 72 24 	lds	r30, 0x2472
    c3c8:	f0 91 73 24 	lds	r31, 0x2473
    c3cc:	30 97       	sbiw	r30, 0x00	; 0
    c3ce:	09 f0       	breq	.+2      	; 0xc3d2 <__vector_23+0x34>
		tc_tcc1_ccb_callback();
    c3d0:	19 95       	eicall
	}
}
    c3d2:	ff 91       	pop	r31
    c3d4:	ef 91       	pop	r30
    c3d6:	bf 91       	pop	r27
    c3d8:	af 91       	pop	r26
    c3da:	9f 91       	pop	r25
    c3dc:	8f 91       	pop	r24
    c3de:	7f 91       	pop	r23
    c3e0:	6f 91       	pop	r22
    c3e2:	5f 91       	pop	r21
    c3e4:	4f 91       	pop	r20
    c3e6:	3f 91       	pop	r19
    c3e8:	2f 91       	pop	r18
    c3ea:	0f 90       	pop	r0
    c3ec:	0b be       	out	0x3b, r0	; 59
    c3ee:	0f 90       	pop	r0
    c3f0:	0f be       	out	0x3f, r0	; 63
    c3f2:	0f 90       	pop	r0
    c3f4:	1f 90       	pop	r1
    c3f6:	18 95       	reti

0000c3f8 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    c3f8:	1f 92       	push	r1
    c3fa:	0f 92       	push	r0
    c3fc:	0f b6       	in	r0, 0x3f	; 63
    c3fe:	0f 92       	push	r0
    c400:	11 24       	eor	r1, r1
    c402:	0b b6       	in	r0, 0x3b	; 59
    c404:	0f 92       	push	r0
    c406:	2f 93       	push	r18
    c408:	3f 93       	push	r19
    c40a:	4f 93       	push	r20
    c40c:	5f 93       	push	r21
    c40e:	6f 93       	push	r22
    c410:	7f 93       	push	r23
    c412:	8f 93       	push	r24
    c414:	9f 93       	push	r25
    c416:	af 93       	push	r26
    c418:	bf 93       	push	r27
    c41a:	ef 93       	push	r30
    c41c:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    c41e:	e0 91 74 24 	lds	r30, 0x2474
    c422:	f0 91 75 24 	lds	r31, 0x2475
    c426:	30 97       	sbiw	r30, 0x00	; 0
    c428:	09 f0       	breq	.+2      	; 0xc42c <__vector_77+0x34>
		tc_tcd0_ovf_callback();
    c42a:	19 95       	eicall
	}
}
    c42c:	ff 91       	pop	r31
    c42e:	ef 91       	pop	r30
    c430:	bf 91       	pop	r27
    c432:	af 91       	pop	r26
    c434:	9f 91       	pop	r25
    c436:	8f 91       	pop	r24
    c438:	7f 91       	pop	r23
    c43a:	6f 91       	pop	r22
    c43c:	5f 91       	pop	r21
    c43e:	4f 91       	pop	r20
    c440:	3f 91       	pop	r19
    c442:	2f 91       	pop	r18
    c444:	0f 90       	pop	r0
    c446:	0b be       	out	0x3b, r0	; 59
    c448:	0f 90       	pop	r0
    c44a:	0f be       	out	0x3f, r0	; 63
    c44c:	0f 90       	pop	r0
    c44e:	1f 90       	pop	r1
    c450:	18 95       	reti

0000c452 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    c452:	1f 92       	push	r1
    c454:	0f 92       	push	r0
    c456:	0f b6       	in	r0, 0x3f	; 63
    c458:	0f 92       	push	r0
    c45a:	11 24       	eor	r1, r1
    c45c:	0b b6       	in	r0, 0x3b	; 59
    c45e:	0f 92       	push	r0
    c460:	2f 93       	push	r18
    c462:	3f 93       	push	r19
    c464:	4f 93       	push	r20
    c466:	5f 93       	push	r21
    c468:	6f 93       	push	r22
    c46a:	7f 93       	push	r23
    c46c:	8f 93       	push	r24
    c46e:	9f 93       	push	r25
    c470:	af 93       	push	r26
    c472:	bf 93       	push	r27
    c474:	ef 93       	push	r30
    c476:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    c478:	e0 91 76 24 	lds	r30, 0x2476
    c47c:	f0 91 77 24 	lds	r31, 0x2477
    c480:	30 97       	sbiw	r30, 0x00	; 0
    c482:	09 f0       	breq	.+2      	; 0xc486 <__vector_78+0x34>
		tc_tcd0_err_callback();
    c484:	19 95       	eicall
	}
}
    c486:	ff 91       	pop	r31
    c488:	ef 91       	pop	r30
    c48a:	bf 91       	pop	r27
    c48c:	af 91       	pop	r26
    c48e:	9f 91       	pop	r25
    c490:	8f 91       	pop	r24
    c492:	7f 91       	pop	r23
    c494:	6f 91       	pop	r22
    c496:	5f 91       	pop	r21
    c498:	4f 91       	pop	r20
    c49a:	3f 91       	pop	r19
    c49c:	2f 91       	pop	r18
    c49e:	0f 90       	pop	r0
    c4a0:	0b be       	out	0x3b, r0	; 59
    c4a2:	0f 90       	pop	r0
    c4a4:	0f be       	out	0x3f, r0	; 63
    c4a6:	0f 90       	pop	r0
    c4a8:	1f 90       	pop	r1
    c4aa:	18 95       	reti

0000c4ac <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    c4ac:	1f 92       	push	r1
    c4ae:	0f 92       	push	r0
    c4b0:	0f b6       	in	r0, 0x3f	; 63
    c4b2:	0f 92       	push	r0
    c4b4:	11 24       	eor	r1, r1
    c4b6:	0b b6       	in	r0, 0x3b	; 59
    c4b8:	0f 92       	push	r0
    c4ba:	2f 93       	push	r18
    c4bc:	3f 93       	push	r19
    c4be:	4f 93       	push	r20
    c4c0:	5f 93       	push	r21
    c4c2:	6f 93       	push	r22
    c4c4:	7f 93       	push	r23
    c4c6:	8f 93       	push	r24
    c4c8:	9f 93       	push	r25
    c4ca:	af 93       	push	r26
    c4cc:	bf 93       	push	r27
    c4ce:	ef 93       	push	r30
    c4d0:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    c4d2:	e0 91 78 24 	lds	r30, 0x2478
    c4d6:	f0 91 79 24 	lds	r31, 0x2479
    c4da:	30 97       	sbiw	r30, 0x00	; 0
    c4dc:	09 f0       	breq	.+2      	; 0xc4e0 <__vector_79+0x34>
		tc_tcd0_cca_callback();
    c4de:	19 95       	eicall
	}
}
    c4e0:	ff 91       	pop	r31
    c4e2:	ef 91       	pop	r30
    c4e4:	bf 91       	pop	r27
    c4e6:	af 91       	pop	r26
    c4e8:	9f 91       	pop	r25
    c4ea:	8f 91       	pop	r24
    c4ec:	7f 91       	pop	r23
    c4ee:	6f 91       	pop	r22
    c4f0:	5f 91       	pop	r21
    c4f2:	4f 91       	pop	r20
    c4f4:	3f 91       	pop	r19
    c4f6:	2f 91       	pop	r18
    c4f8:	0f 90       	pop	r0
    c4fa:	0b be       	out	0x3b, r0	; 59
    c4fc:	0f 90       	pop	r0
    c4fe:	0f be       	out	0x3f, r0	; 63
    c500:	0f 90       	pop	r0
    c502:	1f 90       	pop	r1
    c504:	18 95       	reti

0000c506 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    c506:	1f 92       	push	r1
    c508:	0f 92       	push	r0
    c50a:	0f b6       	in	r0, 0x3f	; 63
    c50c:	0f 92       	push	r0
    c50e:	11 24       	eor	r1, r1
    c510:	0b b6       	in	r0, 0x3b	; 59
    c512:	0f 92       	push	r0
    c514:	2f 93       	push	r18
    c516:	3f 93       	push	r19
    c518:	4f 93       	push	r20
    c51a:	5f 93       	push	r21
    c51c:	6f 93       	push	r22
    c51e:	7f 93       	push	r23
    c520:	8f 93       	push	r24
    c522:	9f 93       	push	r25
    c524:	af 93       	push	r26
    c526:	bf 93       	push	r27
    c528:	ef 93       	push	r30
    c52a:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    c52c:	e0 91 7a 24 	lds	r30, 0x247A
    c530:	f0 91 7b 24 	lds	r31, 0x247B
    c534:	30 97       	sbiw	r30, 0x00	; 0
    c536:	09 f0       	breq	.+2      	; 0xc53a <__vector_80+0x34>
		tc_tcd0_ccb_callback();
    c538:	19 95       	eicall
	}
}
    c53a:	ff 91       	pop	r31
    c53c:	ef 91       	pop	r30
    c53e:	bf 91       	pop	r27
    c540:	af 91       	pop	r26
    c542:	9f 91       	pop	r25
    c544:	8f 91       	pop	r24
    c546:	7f 91       	pop	r23
    c548:	6f 91       	pop	r22
    c54a:	5f 91       	pop	r21
    c54c:	4f 91       	pop	r20
    c54e:	3f 91       	pop	r19
    c550:	2f 91       	pop	r18
    c552:	0f 90       	pop	r0
    c554:	0b be       	out	0x3b, r0	; 59
    c556:	0f 90       	pop	r0
    c558:	0f be       	out	0x3f, r0	; 63
    c55a:	0f 90       	pop	r0
    c55c:	1f 90       	pop	r1
    c55e:	18 95       	reti

0000c560 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    c560:	1f 92       	push	r1
    c562:	0f 92       	push	r0
    c564:	0f b6       	in	r0, 0x3f	; 63
    c566:	0f 92       	push	r0
    c568:	11 24       	eor	r1, r1
    c56a:	0b b6       	in	r0, 0x3b	; 59
    c56c:	0f 92       	push	r0
    c56e:	2f 93       	push	r18
    c570:	3f 93       	push	r19
    c572:	4f 93       	push	r20
    c574:	5f 93       	push	r21
    c576:	6f 93       	push	r22
    c578:	7f 93       	push	r23
    c57a:	8f 93       	push	r24
    c57c:	9f 93       	push	r25
    c57e:	af 93       	push	r26
    c580:	bf 93       	push	r27
    c582:	ef 93       	push	r30
    c584:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    c586:	e0 91 7c 24 	lds	r30, 0x247C
    c58a:	f0 91 7d 24 	lds	r31, 0x247D
    c58e:	30 97       	sbiw	r30, 0x00	; 0
    c590:	09 f0       	breq	.+2      	; 0xc594 <__vector_81+0x34>
		tc_tcd0_ccc_callback();
    c592:	19 95       	eicall
	}
}
    c594:	ff 91       	pop	r31
    c596:	ef 91       	pop	r30
    c598:	bf 91       	pop	r27
    c59a:	af 91       	pop	r26
    c59c:	9f 91       	pop	r25
    c59e:	8f 91       	pop	r24
    c5a0:	7f 91       	pop	r23
    c5a2:	6f 91       	pop	r22
    c5a4:	5f 91       	pop	r21
    c5a6:	4f 91       	pop	r20
    c5a8:	3f 91       	pop	r19
    c5aa:	2f 91       	pop	r18
    c5ac:	0f 90       	pop	r0
    c5ae:	0b be       	out	0x3b, r0	; 59
    c5b0:	0f 90       	pop	r0
    c5b2:	0f be       	out	0x3f, r0	; 63
    c5b4:	0f 90       	pop	r0
    c5b6:	1f 90       	pop	r1
    c5b8:	18 95       	reti

0000c5ba <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    c5ba:	1f 92       	push	r1
    c5bc:	0f 92       	push	r0
    c5be:	0f b6       	in	r0, 0x3f	; 63
    c5c0:	0f 92       	push	r0
    c5c2:	11 24       	eor	r1, r1
    c5c4:	0b b6       	in	r0, 0x3b	; 59
    c5c6:	0f 92       	push	r0
    c5c8:	2f 93       	push	r18
    c5ca:	3f 93       	push	r19
    c5cc:	4f 93       	push	r20
    c5ce:	5f 93       	push	r21
    c5d0:	6f 93       	push	r22
    c5d2:	7f 93       	push	r23
    c5d4:	8f 93       	push	r24
    c5d6:	9f 93       	push	r25
    c5d8:	af 93       	push	r26
    c5da:	bf 93       	push	r27
    c5dc:	ef 93       	push	r30
    c5de:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    c5e0:	e0 91 7e 24 	lds	r30, 0x247E
    c5e4:	f0 91 7f 24 	lds	r31, 0x247F
    c5e8:	30 97       	sbiw	r30, 0x00	; 0
    c5ea:	09 f0       	breq	.+2      	; 0xc5ee <__vector_82+0x34>
		tc_tcd0_ccd_callback();
    c5ec:	19 95       	eicall
	}
}
    c5ee:	ff 91       	pop	r31
    c5f0:	ef 91       	pop	r30
    c5f2:	bf 91       	pop	r27
    c5f4:	af 91       	pop	r26
    c5f6:	9f 91       	pop	r25
    c5f8:	8f 91       	pop	r24
    c5fa:	7f 91       	pop	r23
    c5fc:	6f 91       	pop	r22
    c5fe:	5f 91       	pop	r21
    c600:	4f 91       	pop	r20
    c602:	3f 91       	pop	r19
    c604:	2f 91       	pop	r18
    c606:	0f 90       	pop	r0
    c608:	0b be       	out	0x3b, r0	; 59
    c60a:	0f 90       	pop	r0
    c60c:	0f be       	out	0x3f, r0	; 63
    c60e:	0f 90       	pop	r0
    c610:	1f 90       	pop	r1
    c612:	18 95       	reti

0000c614 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    c614:	1f 92       	push	r1
    c616:	0f 92       	push	r0
    c618:	0f b6       	in	r0, 0x3f	; 63
    c61a:	0f 92       	push	r0
    c61c:	11 24       	eor	r1, r1
    c61e:	0b b6       	in	r0, 0x3b	; 59
    c620:	0f 92       	push	r0
    c622:	2f 93       	push	r18
    c624:	3f 93       	push	r19
    c626:	4f 93       	push	r20
    c628:	5f 93       	push	r21
    c62a:	6f 93       	push	r22
    c62c:	7f 93       	push	r23
    c62e:	8f 93       	push	r24
    c630:	9f 93       	push	r25
    c632:	af 93       	push	r26
    c634:	bf 93       	push	r27
    c636:	ef 93       	push	r30
    c638:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    c63a:	e0 91 80 24 	lds	r30, 0x2480
    c63e:	f0 91 81 24 	lds	r31, 0x2481
    c642:	30 97       	sbiw	r30, 0x00	; 0
    c644:	09 f0       	breq	.+2      	; 0xc648 <__vector_83+0x34>
		tc_tcd1_ovf_callback();
    c646:	19 95       	eicall
	}
}
    c648:	ff 91       	pop	r31
    c64a:	ef 91       	pop	r30
    c64c:	bf 91       	pop	r27
    c64e:	af 91       	pop	r26
    c650:	9f 91       	pop	r25
    c652:	8f 91       	pop	r24
    c654:	7f 91       	pop	r23
    c656:	6f 91       	pop	r22
    c658:	5f 91       	pop	r21
    c65a:	4f 91       	pop	r20
    c65c:	3f 91       	pop	r19
    c65e:	2f 91       	pop	r18
    c660:	0f 90       	pop	r0
    c662:	0b be       	out	0x3b, r0	; 59
    c664:	0f 90       	pop	r0
    c666:	0f be       	out	0x3f, r0	; 63
    c668:	0f 90       	pop	r0
    c66a:	1f 90       	pop	r1
    c66c:	18 95       	reti

0000c66e <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    c66e:	1f 92       	push	r1
    c670:	0f 92       	push	r0
    c672:	0f b6       	in	r0, 0x3f	; 63
    c674:	0f 92       	push	r0
    c676:	11 24       	eor	r1, r1
    c678:	0b b6       	in	r0, 0x3b	; 59
    c67a:	0f 92       	push	r0
    c67c:	2f 93       	push	r18
    c67e:	3f 93       	push	r19
    c680:	4f 93       	push	r20
    c682:	5f 93       	push	r21
    c684:	6f 93       	push	r22
    c686:	7f 93       	push	r23
    c688:	8f 93       	push	r24
    c68a:	9f 93       	push	r25
    c68c:	af 93       	push	r26
    c68e:	bf 93       	push	r27
    c690:	ef 93       	push	r30
    c692:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    c694:	e0 91 82 24 	lds	r30, 0x2482
    c698:	f0 91 83 24 	lds	r31, 0x2483
    c69c:	30 97       	sbiw	r30, 0x00	; 0
    c69e:	09 f0       	breq	.+2      	; 0xc6a2 <__vector_84+0x34>
		tc_tcd1_err_callback();
    c6a0:	19 95       	eicall
	}
}
    c6a2:	ff 91       	pop	r31
    c6a4:	ef 91       	pop	r30
    c6a6:	bf 91       	pop	r27
    c6a8:	af 91       	pop	r26
    c6aa:	9f 91       	pop	r25
    c6ac:	8f 91       	pop	r24
    c6ae:	7f 91       	pop	r23
    c6b0:	6f 91       	pop	r22
    c6b2:	5f 91       	pop	r21
    c6b4:	4f 91       	pop	r20
    c6b6:	3f 91       	pop	r19
    c6b8:	2f 91       	pop	r18
    c6ba:	0f 90       	pop	r0
    c6bc:	0b be       	out	0x3b, r0	; 59
    c6be:	0f 90       	pop	r0
    c6c0:	0f be       	out	0x3f, r0	; 63
    c6c2:	0f 90       	pop	r0
    c6c4:	1f 90       	pop	r1
    c6c6:	18 95       	reti

0000c6c8 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    c6c8:	1f 92       	push	r1
    c6ca:	0f 92       	push	r0
    c6cc:	0f b6       	in	r0, 0x3f	; 63
    c6ce:	0f 92       	push	r0
    c6d0:	11 24       	eor	r1, r1
    c6d2:	0b b6       	in	r0, 0x3b	; 59
    c6d4:	0f 92       	push	r0
    c6d6:	2f 93       	push	r18
    c6d8:	3f 93       	push	r19
    c6da:	4f 93       	push	r20
    c6dc:	5f 93       	push	r21
    c6de:	6f 93       	push	r22
    c6e0:	7f 93       	push	r23
    c6e2:	8f 93       	push	r24
    c6e4:	9f 93       	push	r25
    c6e6:	af 93       	push	r26
    c6e8:	bf 93       	push	r27
    c6ea:	ef 93       	push	r30
    c6ec:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    c6ee:	e0 91 84 24 	lds	r30, 0x2484
    c6f2:	f0 91 85 24 	lds	r31, 0x2485
    c6f6:	30 97       	sbiw	r30, 0x00	; 0
    c6f8:	09 f0       	breq	.+2      	; 0xc6fc <__vector_85+0x34>
		tc_tcd1_cca_callback();
    c6fa:	19 95       	eicall
	}
}
    c6fc:	ff 91       	pop	r31
    c6fe:	ef 91       	pop	r30
    c700:	bf 91       	pop	r27
    c702:	af 91       	pop	r26
    c704:	9f 91       	pop	r25
    c706:	8f 91       	pop	r24
    c708:	7f 91       	pop	r23
    c70a:	6f 91       	pop	r22
    c70c:	5f 91       	pop	r21
    c70e:	4f 91       	pop	r20
    c710:	3f 91       	pop	r19
    c712:	2f 91       	pop	r18
    c714:	0f 90       	pop	r0
    c716:	0b be       	out	0x3b, r0	; 59
    c718:	0f 90       	pop	r0
    c71a:	0f be       	out	0x3f, r0	; 63
    c71c:	0f 90       	pop	r0
    c71e:	1f 90       	pop	r1
    c720:	18 95       	reti

0000c722 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    c722:	1f 92       	push	r1
    c724:	0f 92       	push	r0
    c726:	0f b6       	in	r0, 0x3f	; 63
    c728:	0f 92       	push	r0
    c72a:	11 24       	eor	r1, r1
    c72c:	0b b6       	in	r0, 0x3b	; 59
    c72e:	0f 92       	push	r0
    c730:	2f 93       	push	r18
    c732:	3f 93       	push	r19
    c734:	4f 93       	push	r20
    c736:	5f 93       	push	r21
    c738:	6f 93       	push	r22
    c73a:	7f 93       	push	r23
    c73c:	8f 93       	push	r24
    c73e:	9f 93       	push	r25
    c740:	af 93       	push	r26
    c742:	bf 93       	push	r27
    c744:	ef 93       	push	r30
    c746:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    c748:	e0 91 86 24 	lds	r30, 0x2486
    c74c:	f0 91 87 24 	lds	r31, 0x2487
    c750:	30 97       	sbiw	r30, 0x00	; 0
    c752:	09 f0       	breq	.+2      	; 0xc756 <__vector_86+0x34>
		tc_tcd1_ccb_callback();
    c754:	19 95       	eicall
	}
}
    c756:	ff 91       	pop	r31
    c758:	ef 91       	pop	r30
    c75a:	bf 91       	pop	r27
    c75c:	af 91       	pop	r26
    c75e:	9f 91       	pop	r25
    c760:	8f 91       	pop	r24
    c762:	7f 91       	pop	r23
    c764:	6f 91       	pop	r22
    c766:	5f 91       	pop	r21
    c768:	4f 91       	pop	r20
    c76a:	3f 91       	pop	r19
    c76c:	2f 91       	pop	r18
    c76e:	0f 90       	pop	r0
    c770:	0b be       	out	0x3b, r0	; 59
    c772:	0f 90       	pop	r0
    c774:	0f be       	out	0x3f, r0	; 63
    c776:	0f 90       	pop	r0
    c778:	1f 90       	pop	r1
    c77a:	18 95       	reti

0000c77c <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    c77c:	1f 92       	push	r1
    c77e:	0f 92       	push	r0
    c780:	0f b6       	in	r0, 0x3f	; 63
    c782:	0f 92       	push	r0
    c784:	11 24       	eor	r1, r1
    c786:	0b b6       	in	r0, 0x3b	; 59
    c788:	0f 92       	push	r0
    c78a:	2f 93       	push	r18
    c78c:	3f 93       	push	r19
    c78e:	4f 93       	push	r20
    c790:	5f 93       	push	r21
    c792:	6f 93       	push	r22
    c794:	7f 93       	push	r23
    c796:	8f 93       	push	r24
    c798:	9f 93       	push	r25
    c79a:	af 93       	push	r26
    c79c:	bf 93       	push	r27
    c79e:	ef 93       	push	r30
    c7a0:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    c7a2:	e0 91 88 24 	lds	r30, 0x2488
    c7a6:	f0 91 89 24 	lds	r31, 0x2489
    c7aa:	30 97       	sbiw	r30, 0x00	; 0
    c7ac:	09 f0       	breq	.+2      	; 0xc7b0 <__vector_47+0x34>
		tc_tce0_ovf_callback();
    c7ae:	19 95       	eicall
	}
}
    c7b0:	ff 91       	pop	r31
    c7b2:	ef 91       	pop	r30
    c7b4:	bf 91       	pop	r27
    c7b6:	af 91       	pop	r26
    c7b8:	9f 91       	pop	r25
    c7ba:	8f 91       	pop	r24
    c7bc:	7f 91       	pop	r23
    c7be:	6f 91       	pop	r22
    c7c0:	5f 91       	pop	r21
    c7c2:	4f 91       	pop	r20
    c7c4:	3f 91       	pop	r19
    c7c6:	2f 91       	pop	r18
    c7c8:	0f 90       	pop	r0
    c7ca:	0b be       	out	0x3b, r0	; 59
    c7cc:	0f 90       	pop	r0
    c7ce:	0f be       	out	0x3f, r0	; 63
    c7d0:	0f 90       	pop	r0
    c7d2:	1f 90       	pop	r1
    c7d4:	18 95       	reti

0000c7d6 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    c7d6:	1f 92       	push	r1
    c7d8:	0f 92       	push	r0
    c7da:	0f b6       	in	r0, 0x3f	; 63
    c7dc:	0f 92       	push	r0
    c7de:	11 24       	eor	r1, r1
    c7e0:	0b b6       	in	r0, 0x3b	; 59
    c7e2:	0f 92       	push	r0
    c7e4:	2f 93       	push	r18
    c7e6:	3f 93       	push	r19
    c7e8:	4f 93       	push	r20
    c7ea:	5f 93       	push	r21
    c7ec:	6f 93       	push	r22
    c7ee:	7f 93       	push	r23
    c7f0:	8f 93       	push	r24
    c7f2:	9f 93       	push	r25
    c7f4:	af 93       	push	r26
    c7f6:	bf 93       	push	r27
    c7f8:	ef 93       	push	r30
    c7fa:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    c7fc:	e0 91 8a 24 	lds	r30, 0x248A
    c800:	f0 91 8b 24 	lds	r31, 0x248B
    c804:	30 97       	sbiw	r30, 0x00	; 0
    c806:	09 f0       	breq	.+2      	; 0xc80a <__vector_48+0x34>
		tc_tce0_err_callback();
    c808:	19 95       	eicall
	}
}
    c80a:	ff 91       	pop	r31
    c80c:	ef 91       	pop	r30
    c80e:	bf 91       	pop	r27
    c810:	af 91       	pop	r26
    c812:	9f 91       	pop	r25
    c814:	8f 91       	pop	r24
    c816:	7f 91       	pop	r23
    c818:	6f 91       	pop	r22
    c81a:	5f 91       	pop	r21
    c81c:	4f 91       	pop	r20
    c81e:	3f 91       	pop	r19
    c820:	2f 91       	pop	r18
    c822:	0f 90       	pop	r0
    c824:	0b be       	out	0x3b, r0	; 59
    c826:	0f 90       	pop	r0
    c828:	0f be       	out	0x3f, r0	; 63
    c82a:	0f 90       	pop	r0
    c82c:	1f 90       	pop	r1
    c82e:	18 95       	reti

0000c830 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    c830:	1f 92       	push	r1
    c832:	0f 92       	push	r0
    c834:	0f b6       	in	r0, 0x3f	; 63
    c836:	0f 92       	push	r0
    c838:	11 24       	eor	r1, r1
    c83a:	0b b6       	in	r0, 0x3b	; 59
    c83c:	0f 92       	push	r0
    c83e:	2f 93       	push	r18
    c840:	3f 93       	push	r19
    c842:	4f 93       	push	r20
    c844:	5f 93       	push	r21
    c846:	6f 93       	push	r22
    c848:	7f 93       	push	r23
    c84a:	8f 93       	push	r24
    c84c:	9f 93       	push	r25
    c84e:	af 93       	push	r26
    c850:	bf 93       	push	r27
    c852:	ef 93       	push	r30
    c854:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    c856:	e0 91 8c 24 	lds	r30, 0x248C
    c85a:	f0 91 8d 24 	lds	r31, 0x248D
    c85e:	30 97       	sbiw	r30, 0x00	; 0
    c860:	09 f0       	breq	.+2      	; 0xc864 <__vector_49+0x34>
		tc_tce0_cca_callback();
    c862:	19 95       	eicall
	}
}
    c864:	ff 91       	pop	r31
    c866:	ef 91       	pop	r30
    c868:	bf 91       	pop	r27
    c86a:	af 91       	pop	r26
    c86c:	9f 91       	pop	r25
    c86e:	8f 91       	pop	r24
    c870:	7f 91       	pop	r23
    c872:	6f 91       	pop	r22
    c874:	5f 91       	pop	r21
    c876:	4f 91       	pop	r20
    c878:	3f 91       	pop	r19
    c87a:	2f 91       	pop	r18
    c87c:	0f 90       	pop	r0
    c87e:	0b be       	out	0x3b, r0	; 59
    c880:	0f 90       	pop	r0
    c882:	0f be       	out	0x3f, r0	; 63
    c884:	0f 90       	pop	r0
    c886:	1f 90       	pop	r1
    c888:	18 95       	reti

0000c88a <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    c88a:	1f 92       	push	r1
    c88c:	0f 92       	push	r0
    c88e:	0f b6       	in	r0, 0x3f	; 63
    c890:	0f 92       	push	r0
    c892:	11 24       	eor	r1, r1
    c894:	0b b6       	in	r0, 0x3b	; 59
    c896:	0f 92       	push	r0
    c898:	2f 93       	push	r18
    c89a:	3f 93       	push	r19
    c89c:	4f 93       	push	r20
    c89e:	5f 93       	push	r21
    c8a0:	6f 93       	push	r22
    c8a2:	7f 93       	push	r23
    c8a4:	8f 93       	push	r24
    c8a6:	9f 93       	push	r25
    c8a8:	af 93       	push	r26
    c8aa:	bf 93       	push	r27
    c8ac:	ef 93       	push	r30
    c8ae:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    c8b0:	e0 91 8e 24 	lds	r30, 0x248E
    c8b4:	f0 91 8f 24 	lds	r31, 0x248F
    c8b8:	30 97       	sbiw	r30, 0x00	; 0
    c8ba:	09 f0       	breq	.+2      	; 0xc8be <__vector_50+0x34>
		tc_tce0_ccb_callback();
    c8bc:	19 95       	eicall
	}
}
    c8be:	ff 91       	pop	r31
    c8c0:	ef 91       	pop	r30
    c8c2:	bf 91       	pop	r27
    c8c4:	af 91       	pop	r26
    c8c6:	9f 91       	pop	r25
    c8c8:	8f 91       	pop	r24
    c8ca:	7f 91       	pop	r23
    c8cc:	6f 91       	pop	r22
    c8ce:	5f 91       	pop	r21
    c8d0:	4f 91       	pop	r20
    c8d2:	3f 91       	pop	r19
    c8d4:	2f 91       	pop	r18
    c8d6:	0f 90       	pop	r0
    c8d8:	0b be       	out	0x3b, r0	; 59
    c8da:	0f 90       	pop	r0
    c8dc:	0f be       	out	0x3f, r0	; 63
    c8de:	0f 90       	pop	r0
    c8e0:	1f 90       	pop	r1
    c8e2:	18 95       	reti

0000c8e4 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    c8e4:	1f 92       	push	r1
    c8e6:	0f 92       	push	r0
    c8e8:	0f b6       	in	r0, 0x3f	; 63
    c8ea:	0f 92       	push	r0
    c8ec:	11 24       	eor	r1, r1
    c8ee:	0b b6       	in	r0, 0x3b	; 59
    c8f0:	0f 92       	push	r0
    c8f2:	2f 93       	push	r18
    c8f4:	3f 93       	push	r19
    c8f6:	4f 93       	push	r20
    c8f8:	5f 93       	push	r21
    c8fa:	6f 93       	push	r22
    c8fc:	7f 93       	push	r23
    c8fe:	8f 93       	push	r24
    c900:	9f 93       	push	r25
    c902:	af 93       	push	r26
    c904:	bf 93       	push	r27
    c906:	ef 93       	push	r30
    c908:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    c90a:	e0 91 90 24 	lds	r30, 0x2490
    c90e:	f0 91 91 24 	lds	r31, 0x2491
    c912:	30 97       	sbiw	r30, 0x00	; 0
    c914:	09 f0       	breq	.+2      	; 0xc918 <__vector_51+0x34>
		tc_tce0_ccc_callback();
    c916:	19 95       	eicall
	}
}
    c918:	ff 91       	pop	r31
    c91a:	ef 91       	pop	r30
    c91c:	bf 91       	pop	r27
    c91e:	af 91       	pop	r26
    c920:	9f 91       	pop	r25
    c922:	8f 91       	pop	r24
    c924:	7f 91       	pop	r23
    c926:	6f 91       	pop	r22
    c928:	5f 91       	pop	r21
    c92a:	4f 91       	pop	r20
    c92c:	3f 91       	pop	r19
    c92e:	2f 91       	pop	r18
    c930:	0f 90       	pop	r0
    c932:	0b be       	out	0x3b, r0	; 59
    c934:	0f 90       	pop	r0
    c936:	0f be       	out	0x3f, r0	; 63
    c938:	0f 90       	pop	r0
    c93a:	1f 90       	pop	r1
    c93c:	18 95       	reti

0000c93e <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    c93e:	1f 92       	push	r1
    c940:	0f 92       	push	r0
    c942:	0f b6       	in	r0, 0x3f	; 63
    c944:	0f 92       	push	r0
    c946:	11 24       	eor	r1, r1
    c948:	0b b6       	in	r0, 0x3b	; 59
    c94a:	0f 92       	push	r0
    c94c:	2f 93       	push	r18
    c94e:	3f 93       	push	r19
    c950:	4f 93       	push	r20
    c952:	5f 93       	push	r21
    c954:	6f 93       	push	r22
    c956:	7f 93       	push	r23
    c958:	8f 93       	push	r24
    c95a:	9f 93       	push	r25
    c95c:	af 93       	push	r26
    c95e:	bf 93       	push	r27
    c960:	ef 93       	push	r30
    c962:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    c964:	e0 91 92 24 	lds	r30, 0x2492
    c968:	f0 91 93 24 	lds	r31, 0x2493
    c96c:	30 97       	sbiw	r30, 0x00	; 0
    c96e:	09 f0       	breq	.+2      	; 0xc972 <__vector_52+0x34>
		tc_tce0_ccd_callback();
    c970:	19 95       	eicall
	}
}
    c972:	ff 91       	pop	r31
    c974:	ef 91       	pop	r30
    c976:	bf 91       	pop	r27
    c978:	af 91       	pop	r26
    c97a:	9f 91       	pop	r25
    c97c:	8f 91       	pop	r24
    c97e:	7f 91       	pop	r23
    c980:	6f 91       	pop	r22
    c982:	5f 91       	pop	r21
    c984:	4f 91       	pop	r20
    c986:	3f 91       	pop	r19
    c988:	2f 91       	pop	r18
    c98a:	0f 90       	pop	r0
    c98c:	0b be       	out	0x3b, r0	; 59
    c98e:	0f 90       	pop	r0
    c990:	0f be       	out	0x3f, r0	; 63
    c992:	0f 90       	pop	r0
    c994:	1f 90       	pop	r1
    c996:	18 95       	reti

0000c998 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    c998:	1f 92       	push	r1
    c99a:	0f 92       	push	r0
    c99c:	0f b6       	in	r0, 0x3f	; 63
    c99e:	0f 92       	push	r0
    c9a0:	11 24       	eor	r1, r1
    c9a2:	0b b6       	in	r0, 0x3b	; 59
    c9a4:	0f 92       	push	r0
    c9a6:	2f 93       	push	r18
    c9a8:	3f 93       	push	r19
    c9aa:	4f 93       	push	r20
    c9ac:	5f 93       	push	r21
    c9ae:	6f 93       	push	r22
    c9b0:	7f 93       	push	r23
    c9b2:	8f 93       	push	r24
    c9b4:	9f 93       	push	r25
    c9b6:	af 93       	push	r26
    c9b8:	bf 93       	push	r27
    c9ba:	ef 93       	push	r30
    c9bc:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    c9be:	e0 91 94 24 	lds	r30, 0x2494
    c9c2:	f0 91 95 24 	lds	r31, 0x2495
    c9c6:	30 97       	sbiw	r30, 0x00	; 0
    c9c8:	09 f0       	breq	.+2      	; 0xc9cc <__vector_53+0x34>
		tc_tce1_ovf_callback();
    c9ca:	19 95       	eicall
	}
}
    c9cc:	ff 91       	pop	r31
    c9ce:	ef 91       	pop	r30
    c9d0:	bf 91       	pop	r27
    c9d2:	af 91       	pop	r26
    c9d4:	9f 91       	pop	r25
    c9d6:	8f 91       	pop	r24
    c9d8:	7f 91       	pop	r23
    c9da:	6f 91       	pop	r22
    c9dc:	5f 91       	pop	r21
    c9de:	4f 91       	pop	r20
    c9e0:	3f 91       	pop	r19
    c9e2:	2f 91       	pop	r18
    c9e4:	0f 90       	pop	r0
    c9e6:	0b be       	out	0x3b, r0	; 59
    c9e8:	0f 90       	pop	r0
    c9ea:	0f be       	out	0x3f, r0	; 63
    c9ec:	0f 90       	pop	r0
    c9ee:	1f 90       	pop	r1
    c9f0:	18 95       	reti

0000c9f2 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    c9f2:	1f 92       	push	r1
    c9f4:	0f 92       	push	r0
    c9f6:	0f b6       	in	r0, 0x3f	; 63
    c9f8:	0f 92       	push	r0
    c9fa:	11 24       	eor	r1, r1
    c9fc:	0b b6       	in	r0, 0x3b	; 59
    c9fe:	0f 92       	push	r0
    ca00:	2f 93       	push	r18
    ca02:	3f 93       	push	r19
    ca04:	4f 93       	push	r20
    ca06:	5f 93       	push	r21
    ca08:	6f 93       	push	r22
    ca0a:	7f 93       	push	r23
    ca0c:	8f 93       	push	r24
    ca0e:	9f 93       	push	r25
    ca10:	af 93       	push	r26
    ca12:	bf 93       	push	r27
    ca14:	ef 93       	push	r30
    ca16:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    ca18:	e0 91 96 24 	lds	r30, 0x2496
    ca1c:	f0 91 97 24 	lds	r31, 0x2497
    ca20:	30 97       	sbiw	r30, 0x00	; 0
    ca22:	09 f0       	breq	.+2      	; 0xca26 <__vector_54+0x34>
		tc_tce1_err_callback();
    ca24:	19 95       	eicall
	}
}
    ca26:	ff 91       	pop	r31
    ca28:	ef 91       	pop	r30
    ca2a:	bf 91       	pop	r27
    ca2c:	af 91       	pop	r26
    ca2e:	9f 91       	pop	r25
    ca30:	8f 91       	pop	r24
    ca32:	7f 91       	pop	r23
    ca34:	6f 91       	pop	r22
    ca36:	5f 91       	pop	r21
    ca38:	4f 91       	pop	r20
    ca3a:	3f 91       	pop	r19
    ca3c:	2f 91       	pop	r18
    ca3e:	0f 90       	pop	r0
    ca40:	0b be       	out	0x3b, r0	; 59
    ca42:	0f 90       	pop	r0
    ca44:	0f be       	out	0x3f, r0	; 63
    ca46:	0f 90       	pop	r0
    ca48:	1f 90       	pop	r1
    ca4a:	18 95       	reti

0000ca4c <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    ca4c:	1f 92       	push	r1
    ca4e:	0f 92       	push	r0
    ca50:	0f b6       	in	r0, 0x3f	; 63
    ca52:	0f 92       	push	r0
    ca54:	11 24       	eor	r1, r1
    ca56:	0b b6       	in	r0, 0x3b	; 59
    ca58:	0f 92       	push	r0
    ca5a:	2f 93       	push	r18
    ca5c:	3f 93       	push	r19
    ca5e:	4f 93       	push	r20
    ca60:	5f 93       	push	r21
    ca62:	6f 93       	push	r22
    ca64:	7f 93       	push	r23
    ca66:	8f 93       	push	r24
    ca68:	9f 93       	push	r25
    ca6a:	af 93       	push	r26
    ca6c:	bf 93       	push	r27
    ca6e:	ef 93       	push	r30
    ca70:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    ca72:	e0 91 98 24 	lds	r30, 0x2498
    ca76:	f0 91 99 24 	lds	r31, 0x2499
    ca7a:	30 97       	sbiw	r30, 0x00	; 0
    ca7c:	09 f0       	breq	.+2      	; 0xca80 <__vector_55+0x34>
		tc_tce1_cca_callback();
    ca7e:	19 95       	eicall
	}
}
    ca80:	ff 91       	pop	r31
    ca82:	ef 91       	pop	r30
    ca84:	bf 91       	pop	r27
    ca86:	af 91       	pop	r26
    ca88:	9f 91       	pop	r25
    ca8a:	8f 91       	pop	r24
    ca8c:	7f 91       	pop	r23
    ca8e:	6f 91       	pop	r22
    ca90:	5f 91       	pop	r21
    ca92:	4f 91       	pop	r20
    ca94:	3f 91       	pop	r19
    ca96:	2f 91       	pop	r18
    ca98:	0f 90       	pop	r0
    ca9a:	0b be       	out	0x3b, r0	; 59
    ca9c:	0f 90       	pop	r0
    ca9e:	0f be       	out	0x3f, r0	; 63
    caa0:	0f 90       	pop	r0
    caa2:	1f 90       	pop	r1
    caa4:	18 95       	reti

0000caa6 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    caa6:	1f 92       	push	r1
    caa8:	0f 92       	push	r0
    caaa:	0f b6       	in	r0, 0x3f	; 63
    caac:	0f 92       	push	r0
    caae:	11 24       	eor	r1, r1
    cab0:	0b b6       	in	r0, 0x3b	; 59
    cab2:	0f 92       	push	r0
    cab4:	2f 93       	push	r18
    cab6:	3f 93       	push	r19
    cab8:	4f 93       	push	r20
    caba:	5f 93       	push	r21
    cabc:	6f 93       	push	r22
    cabe:	7f 93       	push	r23
    cac0:	8f 93       	push	r24
    cac2:	9f 93       	push	r25
    cac4:	af 93       	push	r26
    cac6:	bf 93       	push	r27
    cac8:	ef 93       	push	r30
    caca:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    cacc:	e0 91 9a 24 	lds	r30, 0x249A
    cad0:	f0 91 9b 24 	lds	r31, 0x249B
    cad4:	30 97       	sbiw	r30, 0x00	; 0
    cad6:	09 f0       	breq	.+2      	; 0xcada <__vector_56+0x34>
		tc_tce1_ccb_callback();
    cad8:	19 95       	eicall
	}
}
    cada:	ff 91       	pop	r31
    cadc:	ef 91       	pop	r30
    cade:	bf 91       	pop	r27
    cae0:	af 91       	pop	r26
    cae2:	9f 91       	pop	r25
    cae4:	8f 91       	pop	r24
    cae6:	7f 91       	pop	r23
    cae8:	6f 91       	pop	r22
    caea:	5f 91       	pop	r21
    caec:	4f 91       	pop	r20
    caee:	3f 91       	pop	r19
    caf0:	2f 91       	pop	r18
    caf2:	0f 90       	pop	r0
    caf4:	0b be       	out	0x3b, r0	; 59
    caf6:	0f 90       	pop	r0
    caf8:	0f be       	out	0x3f, r0	; 63
    cafa:	0f 90       	pop	r0
    cafc:	1f 90       	pop	r1
    cafe:	18 95       	reti

0000cb00 <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    cb00:	1f 92       	push	r1
    cb02:	0f 92       	push	r0
    cb04:	0f b6       	in	r0, 0x3f	; 63
    cb06:	0f 92       	push	r0
    cb08:	11 24       	eor	r1, r1
    cb0a:	0b b6       	in	r0, 0x3b	; 59
    cb0c:	0f 92       	push	r0
    cb0e:	2f 93       	push	r18
    cb10:	3f 93       	push	r19
    cb12:	4f 93       	push	r20
    cb14:	5f 93       	push	r21
    cb16:	6f 93       	push	r22
    cb18:	7f 93       	push	r23
    cb1a:	8f 93       	push	r24
    cb1c:	9f 93       	push	r25
    cb1e:	af 93       	push	r26
    cb20:	bf 93       	push	r27
    cb22:	ef 93       	push	r30
    cb24:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    cb26:	e0 91 9c 24 	lds	r30, 0x249C
    cb2a:	f0 91 9d 24 	lds	r31, 0x249D
    cb2e:	30 97       	sbiw	r30, 0x00	; 0
    cb30:	09 f0       	breq	.+2      	; 0xcb34 <__vector_108+0x34>
		tc_tcf0_ovf_callback();
    cb32:	19 95       	eicall
	}
}
    cb34:	ff 91       	pop	r31
    cb36:	ef 91       	pop	r30
    cb38:	bf 91       	pop	r27
    cb3a:	af 91       	pop	r26
    cb3c:	9f 91       	pop	r25
    cb3e:	8f 91       	pop	r24
    cb40:	7f 91       	pop	r23
    cb42:	6f 91       	pop	r22
    cb44:	5f 91       	pop	r21
    cb46:	4f 91       	pop	r20
    cb48:	3f 91       	pop	r19
    cb4a:	2f 91       	pop	r18
    cb4c:	0f 90       	pop	r0
    cb4e:	0b be       	out	0x3b, r0	; 59
    cb50:	0f 90       	pop	r0
    cb52:	0f be       	out	0x3f, r0	; 63
    cb54:	0f 90       	pop	r0
    cb56:	1f 90       	pop	r1
    cb58:	18 95       	reti

0000cb5a <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    cb5a:	1f 92       	push	r1
    cb5c:	0f 92       	push	r0
    cb5e:	0f b6       	in	r0, 0x3f	; 63
    cb60:	0f 92       	push	r0
    cb62:	11 24       	eor	r1, r1
    cb64:	0b b6       	in	r0, 0x3b	; 59
    cb66:	0f 92       	push	r0
    cb68:	2f 93       	push	r18
    cb6a:	3f 93       	push	r19
    cb6c:	4f 93       	push	r20
    cb6e:	5f 93       	push	r21
    cb70:	6f 93       	push	r22
    cb72:	7f 93       	push	r23
    cb74:	8f 93       	push	r24
    cb76:	9f 93       	push	r25
    cb78:	af 93       	push	r26
    cb7a:	bf 93       	push	r27
    cb7c:	ef 93       	push	r30
    cb7e:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    cb80:	e0 91 9e 24 	lds	r30, 0x249E
    cb84:	f0 91 9f 24 	lds	r31, 0x249F
    cb88:	30 97       	sbiw	r30, 0x00	; 0
    cb8a:	09 f0       	breq	.+2      	; 0xcb8e <__vector_109+0x34>
		tc_tcf0_err_callback();
    cb8c:	19 95       	eicall
	}
}
    cb8e:	ff 91       	pop	r31
    cb90:	ef 91       	pop	r30
    cb92:	bf 91       	pop	r27
    cb94:	af 91       	pop	r26
    cb96:	9f 91       	pop	r25
    cb98:	8f 91       	pop	r24
    cb9a:	7f 91       	pop	r23
    cb9c:	6f 91       	pop	r22
    cb9e:	5f 91       	pop	r21
    cba0:	4f 91       	pop	r20
    cba2:	3f 91       	pop	r19
    cba4:	2f 91       	pop	r18
    cba6:	0f 90       	pop	r0
    cba8:	0b be       	out	0x3b, r0	; 59
    cbaa:	0f 90       	pop	r0
    cbac:	0f be       	out	0x3f, r0	; 63
    cbae:	0f 90       	pop	r0
    cbb0:	1f 90       	pop	r1
    cbb2:	18 95       	reti

0000cbb4 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    cbb4:	1f 92       	push	r1
    cbb6:	0f 92       	push	r0
    cbb8:	0f b6       	in	r0, 0x3f	; 63
    cbba:	0f 92       	push	r0
    cbbc:	11 24       	eor	r1, r1
    cbbe:	0b b6       	in	r0, 0x3b	; 59
    cbc0:	0f 92       	push	r0
    cbc2:	2f 93       	push	r18
    cbc4:	3f 93       	push	r19
    cbc6:	4f 93       	push	r20
    cbc8:	5f 93       	push	r21
    cbca:	6f 93       	push	r22
    cbcc:	7f 93       	push	r23
    cbce:	8f 93       	push	r24
    cbd0:	9f 93       	push	r25
    cbd2:	af 93       	push	r26
    cbd4:	bf 93       	push	r27
    cbd6:	ef 93       	push	r30
    cbd8:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    cbda:	e0 91 a0 24 	lds	r30, 0x24A0
    cbde:	f0 91 a1 24 	lds	r31, 0x24A1
    cbe2:	30 97       	sbiw	r30, 0x00	; 0
    cbe4:	09 f0       	breq	.+2      	; 0xcbe8 <__vector_110+0x34>
		tc_tcf0_cca_callback();
    cbe6:	19 95       	eicall
	}
}
    cbe8:	ff 91       	pop	r31
    cbea:	ef 91       	pop	r30
    cbec:	bf 91       	pop	r27
    cbee:	af 91       	pop	r26
    cbf0:	9f 91       	pop	r25
    cbf2:	8f 91       	pop	r24
    cbf4:	7f 91       	pop	r23
    cbf6:	6f 91       	pop	r22
    cbf8:	5f 91       	pop	r21
    cbfa:	4f 91       	pop	r20
    cbfc:	3f 91       	pop	r19
    cbfe:	2f 91       	pop	r18
    cc00:	0f 90       	pop	r0
    cc02:	0b be       	out	0x3b, r0	; 59
    cc04:	0f 90       	pop	r0
    cc06:	0f be       	out	0x3f, r0	; 63
    cc08:	0f 90       	pop	r0
    cc0a:	1f 90       	pop	r1
    cc0c:	18 95       	reti

0000cc0e <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    cc0e:	1f 92       	push	r1
    cc10:	0f 92       	push	r0
    cc12:	0f b6       	in	r0, 0x3f	; 63
    cc14:	0f 92       	push	r0
    cc16:	11 24       	eor	r1, r1
    cc18:	0b b6       	in	r0, 0x3b	; 59
    cc1a:	0f 92       	push	r0
    cc1c:	2f 93       	push	r18
    cc1e:	3f 93       	push	r19
    cc20:	4f 93       	push	r20
    cc22:	5f 93       	push	r21
    cc24:	6f 93       	push	r22
    cc26:	7f 93       	push	r23
    cc28:	8f 93       	push	r24
    cc2a:	9f 93       	push	r25
    cc2c:	af 93       	push	r26
    cc2e:	bf 93       	push	r27
    cc30:	ef 93       	push	r30
    cc32:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    cc34:	e0 91 a2 24 	lds	r30, 0x24A2
    cc38:	f0 91 a3 24 	lds	r31, 0x24A3
    cc3c:	30 97       	sbiw	r30, 0x00	; 0
    cc3e:	09 f0       	breq	.+2      	; 0xcc42 <__vector_111+0x34>
		tc_tcf0_ccb_callback();
    cc40:	19 95       	eicall
	}
}
    cc42:	ff 91       	pop	r31
    cc44:	ef 91       	pop	r30
    cc46:	bf 91       	pop	r27
    cc48:	af 91       	pop	r26
    cc4a:	9f 91       	pop	r25
    cc4c:	8f 91       	pop	r24
    cc4e:	7f 91       	pop	r23
    cc50:	6f 91       	pop	r22
    cc52:	5f 91       	pop	r21
    cc54:	4f 91       	pop	r20
    cc56:	3f 91       	pop	r19
    cc58:	2f 91       	pop	r18
    cc5a:	0f 90       	pop	r0
    cc5c:	0b be       	out	0x3b, r0	; 59
    cc5e:	0f 90       	pop	r0
    cc60:	0f be       	out	0x3f, r0	; 63
    cc62:	0f 90       	pop	r0
    cc64:	1f 90       	pop	r1
    cc66:	18 95       	reti

0000cc68 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    cc68:	1f 92       	push	r1
    cc6a:	0f 92       	push	r0
    cc6c:	0f b6       	in	r0, 0x3f	; 63
    cc6e:	0f 92       	push	r0
    cc70:	11 24       	eor	r1, r1
    cc72:	0b b6       	in	r0, 0x3b	; 59
    cc74:	0f 92       	push	r0
    cc76:	2f 93       	push	r18
    cc78:	3f 93       	push	r19
    cc7a:	4f 93       	push	r20
    cc7c:	5f 93       	push	r21
    cc7e:	6f 93       	push	r22
    cc80:	7f 93       	push	r23
    cc82:	8f 93       	push	r24
    cc84:	9f 93       	push	r25
    cc86:	af 93       	push	r26
    cc88:	bf 93       	push	r27
    cc8a:	ef 93       	push	r30
    cc8c:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    cc8e:	e0 91 a4 24 	lds	r30, 0x24A4
    cc92:	f0 91 a5 24 	lds	r31, 0x24A5
    cc96:	30 97       	sbiw	r30, 0x00	; 0
    cc98:	09 f0       	breq	.+2      	; 0xcc9c <__vector_112+0x34>
		tc_tcf0_ccc_callback();
    cc9a:	19 95       	eicall
	}
}
    cc9c:	ff 91       	pop	r31
    cc9e:	ef 91       	pop	r30
    cca0:	bf 91       	pop	r27
    cca2:	af 91       	pop	r26
    cca4:	9f 91       	pop	r25
    cca6:	8f 91       	pop	r24
    cca8:	7f 91       	pop	r23
    ccaa:	6f 91       	pop	r22
    ccac:	5f 91       	pop	r21
    ccae:	4f 91       	pop	r20
    ccb0:	3f 91       	pop	r19
    ccb2:	2f 91       	pop	r18
    ccb4:	0f 90       	pop	r0
    ccb6:	0b be       	out	0x3b, r0	; 59
    ccb8:	0f 90       	pop	r0
    ccba:	0f be       	out	0x3f, r0	; 63
    ccbc:	0f 90       	pop	r0
    ccbe:	1f 90       	pop	r1
    ccc0:	18 95       	reti

0000ccc2 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    ccc2:	1f 92       	push	r1
    ccc4:	0f 92       	push	r0
    ccc6:	0f b6       	in	r0, 0x3f	; 63
    ccc8:	0f 92       	push	r0
    ccca:	11 24       	eor	r1, r1
    cccc:	0b b6       	in	r0, 0x3b	; 59
    ccce:	0f 92       	push	r0
    ccd0:	2f 93       	push	r18
    ccd2:	3f 93       	push	r19
    ccd4:	4f 93       	push	r20
    ccd6:	5f 93       	push	r21
    ccd8:	6f 93       	push	r22
    ccda:	7f 93       	push	r23
    ccdc:	8f 93       	push	r24
    ccde:	9f 93       	push	r25
    cce0:	af 93       	push	r26
    cce2:	bf 93       	push	r27
    cce4:	ef 93       	push	r30
    cce6:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    cce8:	e0 91 a6 24 	lds	r30, 0x24A6
    ccec:	f0 91 a7 24 	lds	r31, 0x24A7
    ccf0:	30 97       	sbiw	r30, 0x00	; 0
    ccf2:	09 f0       	breq	.+2      	; 0xccf6 <__vector_113+0x34>
		tc_tcf0_ccd_callback();
    ccf4:	19 95       	eicall
	}
}
    ccf6:	ff 91       	pop	r31
    ccf8:	ef 91       	pop	r30
    ccfa:	bf 91       	pop	r27
    ccfc:	af 91       	pop	r26
    ccfe:	9f 91       	pop	r25
    cd00:	8f 91       	pop	r24
    cd02:	7f 91       	pop	r23
    cd04:	6f 91       	pop	r22
    cd06:	5f 91       	pop	r21
    cd08:	4f 91       	pop	r20
    cd0a:	3f 91       	pop	r19
    cd0c:	2f 91       	pop	r18
    cd0e:	0f 90       	pop	r0
    cd10:	0b be       	out	0x3b, r0	; 59
    cd12:	0f 90       	pop	r0
    cd14:	0f be       	out	0x3f, r0	; 63
    cd16:	0f 90       	pop	r0
    cd18:	1f 90       	pop	r1
    cd1a:	18 95       	reti

0000cd1c <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    cd1c:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    cd1e:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    cd20:	f8 94       	cli
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    cd22:	81 15       	cp	r24, r1
    cd24:	28 e0       	ldi	r18, 0x08	; 8
    cd26:	92 07       	cpc	r25, r18
    cd28:	11 f4       	brne	.+4      	; 0xcd2e <tc_enable+0x12>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    cd2a:	61 e0       	ldi	r22, 0x01	; 1
    cd2c:	05 c0       	rjmp	.+10     	; 0xcd38 <tc_enable+0x1c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    cd2e:	80 34       	cpi	r24, 0x40	; 64
    cd30:	28 e0       	ldi	r18, 0x08	; 8
    cd32:	92 07       	cpc	r25, r18
    cd34:	49 f4       	brne	.+18     	; 0xcd48 <tc_enable+0x2c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    cd36:	62 e0       	ldi	r22, 0x02	; 2
    cd38:	83 e0       	ldi	r24, 0x03	; 3
    cd3a:	90 e0       	ldi	r25, 0x00	; 0
    cd3c:	0e 94 06 5b 	call	0xb60c	; 0xb60c <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    cd40:	64 e0       	ldi	r22, 0x04	; 4
    cd42:	83 e0       	ldi	r24, 0x03	; 3
    cd44:	90 e0       	ldi	r25, 0x00	; 0
    cd46:	31 c0       	rjmp	.+98     	; 0xcdaa <tc_enable+0x8e>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    cd48:	81 15       	cp	r24, r1
    cd4a:	29 e0       	ldi	r18, 0x09	; 9
    cd4c:	92 07       	cpc	r25, r18
    cd4e:	11 f4       	brne	.+4      	; 0xcd54 <tc_enable+0x38>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    cd50:	61 e0       	ldi	r22, 0x01	; 1
    cd52:	05 c0       	rjmp	.+10     	; 0xcd5e <tc_enable+0x42>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    cd54:	80 34       	cpi	r24, 0x40	; 64
    cd56:	29 e0       	ldi	r18, 0x09	; 9
    cd58:	92 07       	cpc	r25, r18
    cd5a:	49 f4       	brne	.+18     	; 0xcd6e <tc_enable+0x52>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    cd5c:	62 e0       	ldi	r22, 0x02	; 2
    cd5e:	84 e0       	ldi	r24, 0x04	; 4
    cd60:	90 e0       	ldi	r25, 0x00	; 0
    cd62:	0e 94 06 5b 	call	0xb60c	; 0xb60c <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    cd66:	64 e0       	ldi	r22, 0x04	; 4
    cd68:	84 e0       	ldi	r24, 0x04	; 4
    cd6a:	90 e0       	ldi	r25, 0x00	; 0
    cd6c:	1e c0       	rjmp	.+60     	; 0xcdaa <tc_enable+0x8e>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    cd6e:	81 15       	cp	r24, r1
    cd70:	2a e0       	ldi	r18, 0x0A	; 10
    cd72:	92 07       	cpc	r25, r18
    cd74:	11 f4       	brne	.+4      	; 0xcd7a <tc_enable+0x5e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    cd76:	61 e0       	ldi	r22, 0x01	; 1
    cd78:	05 c0       	rjmp	.+10     	; 0xcd84 <tc_enable+0x68>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    cd7a:	80 34       	cpi	r24, 0x40	; 64
    cd7c:	2a e0       	ldi	r18, 0x0A	; 10
    cd7e:	92 07       	cpc	r25, r18
    cd80:	49 f4       	brne	.+18     	; 0xcd94 <tc_enable+0x78>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    cd82:	62 e0       	ldi	r22, 0x02	; 2
    cd84:	85 e0       	ldi	r24, 0x05	; 5
    cd86:	90 e0       	ldi	r25, 0x00	; 0
    cd88:	0e 94 06 5b 	call	0xb60c	; 0xb60c <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    cd8c:	64 e0       	ldi	r22, 0x04	; 4
    cd8e:	85 e0       	ldi	r24, 0x05	; 5
    cd90:	90 e0       	ldi	r25, 0x00	; 0
    cd92:	0b c0       	rjmp	.+22     	; 0xcdaa <tc_enable+0x8e>
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    cd94:	81 15       	cp	r24, r1
    cd96:	9b 40       	sbci	r25, 0x0B	; 11
    cd98:	91 f4       	brne	.+36     	; 0xcdbe <tc_enable+0xa2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    cd9a:	61 e0       	ldi	r22, 0x01	; 1
    cd9c:	86 e0       	ldi	r24, 0x06	; 6
    cd9e:	90 e0       	ldi	r25, 0x00	; 0
    cda0:	0e 94 06 5b 	call	0xb60c	; 0xb60c <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    cda4:	64 e0       	ldi	r22, 0x04	; 4
    cda6:	86 e0       	ldi	r24, 0x06	; 6
    cda8:	90 e0       	ldi	r25, 0x00	; 0
    cdaa:	0e 94 06 5b 	call	0xb60c	; 0xb60c <sysclk_enable_module>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    cdae:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    cdb0:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    cdb2:	80 91 63 27 	lds	r24, 0x2763
    cdb6:	8f 5f       	subi	r24, 0xFF	; 255
    cdb8:	80 93 63 27 	sts	0x2763, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    cdbc:	9f bf       	out	0x3f, r25	; 63
    cdbe:	cf bf       	out	0x3f, r28	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    cdc0:	cf 91       	pop	r28
    cdc2:	08 95       	ret

0000cdc4 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    cdc4:	cf 93       	push	r28
    cdc6:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    cdc8:	e0 91 a8 24 	lds	r30, 0x24A8
    cdcc:	f0 91 a9 24 	lds	r31, 0x24A9
    cdd0:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    cdd2:	83 ff       	sbrs	r24, 3
    cdd4:	07 c0       	rjmp	.+14     	; 0xcde4 <twim_interrupt_handler+0x20>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    cdd6:	88 60       	ori	r24, 0x08	; 8
    cdd8:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    cdda:	83 e0       	ldi	r24, 0x03	; 3
    cddc:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    cdde:	86 ef       	ldi	r24, 0xF6	; 246
    cde0:	9f ef       	ldi	r25, 0xFF	; 255
    cde2:	7d c0       	rjmp	.+250    	; 0xcede <twim_interrupt_handler+0x11a>
 *
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
    cde4:	98 2f       	mov	r25, r24
    cde6:	94 71       	andi	r25, 0x14	; 20

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    cde8:	29 f0       	breq	.+10     	; 0xcdf4 <twim_interrupt_handler+0x30>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    cdea:	83 e0       	ldi	r24, 0x03	; 3
    cdec:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    cdee:	8f ef       	ldi	r24, 0xFF	; 255
    cdf0:	9f ef       	ldi	r25, 0xFF	; 255
    cdf2:	75 c0       	rjmp	.+234    	; 0xcede <twim_interrupt_handler+0x11a>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    cdf4:	86 ff       	sbrs	r24, 6
    cdf6:	3d c0       	rjmp	.+122    	; 0xce72 <twim_interrupt_handler+0xae>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    cdf8:	a0 91 aa 24 	lds	r26, 0x24AA
    cdfc:	b0 91 ab 24 	lds	r27, 0x24AB

	if (transfer.addr_count < pkg->addr_length) {
    ce00:	80 91 ac 24 	lds	r24, 0x24AC
    ce04:	90 91 ad 24 	lds	r25, 0x24AD
    ce08:	14 96       	adiw	r26, 0x04	; 4
    ce0a:	2d 91       	ld	r18, X+
    ce0c:	3c 91       	ld	r19, X
    ce0e:	15 97       	sbiw	r26, 0x05	; 5
    ce10:	82 17       	cp	r24, r18
    ce12:	93 07       	cpc	r25, r19
    ce14:	5c f4       	brge	.+22     	; 0xce2c <twim_interrupt_handler+0x68>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    ce16:	a8 0f       	add	r26, r24
    ce18:	b9 1f       	adc	r27, r25
    ce1a:	11 96       	adiw	r26, 0x01	; 1
    ce1c:	2c 91       	ld	r18, X
    ce1e:	27 83       	std	Z+7, r18	; 0x07
    ce20:	01 96       	adiw	r24, 0x01	; 1
    ce22:	80 93 ac 24 	sts	0x24AC, r24
    ce26:	90 93 ad 24 	sts	0x24AD, r25
    ce2a:	5d c0       	rjmp	.+186    	; 0xcee6 <twim_interrupt_handler+0x122>

	} else if (transfer.data_count < pkg->length) {
    ce2c:	80 91 ae 24 	lds	r24, 0x24AE
    ce30:	90 91 af 24 	lds	r25, 0x24AF
    ce34:	18 96       	adiw	r26, 0x08	; 8
    ce36:	2d 91       	ld	r18, X+
    ce38:	3c 91       	ld	r19, X
    ce3a:	19 97       	sbiw	r26, 0x09	; 9
    ce3c:	82 17       	cp	r24, r18
    ce3e:	93 07       	cpc	r25, r19
    ce40:	b0 f4       	brcc	.+44     	; 0xce6e <twim_interrupt_handler+0xaa>

		if (transfer.read) {
    ce42:	20 91 b0 24 	lds	r18, 0x24B0
    ce46:	22 23       	and	r18, r18
    ce48:	21 f0       	breq	.+8      	; 0xce52 <twim_interrupt_handler+0x8e>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    ce4a:	86 81       	ldd	r24, Z+6	; 0x06
    ce4c:	81 60       	ori	r24, 0x01	; 1
    ce4e:	86 83       	std	Z+6, r24	; 0x06
    ce50:	4a c0       	rjmp	.+148    	; 0xcee6 <twim_interrupt_handler+0x122>

		} else {
			const uint8_t * const data = pkg->buffer;
			bus->MASTER.DATA = data[transfer.data_count++];
    ce52:	16 96       	adiw	r26, 0x06	; 6
    ce54:	0d 90       	ld	r0, X+
    ce56:	bc 91       	ld	r27, X
    ce58:	a0 2d       	mov	r26, r0
    ce5a:	a8 0f       	add	r26, r24
    ce5c:	b9 1f       	adc	r27, r25
    ce5e:	2c 91       	ld	r18, X
    ce60:	27 83       	std	Z+7, r18	; 0x07
    ce62:	01 96       	adiw	r24, 0x01	; 1
    ce64:	80 93 ae 24 	sts	0x24AE, r24
    ce68:	90 93 af 24 	sts	0x24AF, r25
    ce6c:	3c c0       	rjmp	.+120    	; 0xcee6 <twim_interrupt_handler+0x122>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    ce6e:	83 e0       	ldi	r24, 0x03	; 3
    ce70:	29 c0       	rjmp	.+82     	; 0xcec4 <twim_interrupt_handler+0x100>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    ce72:	87 ff       	sbrs	r24, 7
    ce74:	32 c0       	rjmp	.+100    	; 0xceda <twim_interrupt_handler+0x116>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    ce76:	a0 91 aa 24 	lds	r26, 0x24AA
    ce7a:	b0 91 ab 24 	lds	r27, 0x24AB

	if (transfer.data_count < pkg->length) {
    ce7e:	80 91 ae 24 	lds	r24, 0x24AE
    ce82:	90 91 af 24 	lds	r25, 0x24AF
    ce86:	18 96       	adiw	r26, 0x08	; 8
    ce88:	2d 91       	ld	r18, X+
    ce8a:	3c 91       	ld	r19, X
    ce8c:	19 97       	sbiw	r26, 0x09	; 9
    ce8e:	82 17       	cp	r24, r18
    ce90:	93 07       	cpc	r25, r19
    ce92:	f0 f4       	brcc	.+60     	; 0xced0 <twim_interrupt_handler+0x10c>

		uint8_t * const data = pkg->buffer;
		data[transfer.data_count++] = bus->MASTER.DATA;
    ce94:	27 81       	ldd	r18, Z+7	; 0x07
    ce96:	16 96       	adiw	r26, 0x06	; 6
    ce98:	cd 91       	ld	r28, X+
    ce9a:	dc 91       	ld	r29, X
    ce9c:	17 97       	sbiw	r26, 0x07	; 7
    ce9e:	c8 0f       	add	r28, r24
    cea0:	d9 1f       	adc	r29, r25
    cea2:	28 83       	st	Y, r18
    cea4:	01 96       	adiw	r24, 0x01	; 1
    cea6:	80 93 ae 24 	sts	0x24AE, r24
    ceaa:	90 93 af 24 	sts	0x24AF, r25

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    ceae:	18 96       	adiw	r26, 0x08	; 8
    ceb0:	2d 91       	ld	r18, X+
    ceb2:	3c 91       	ld	r19, X
    ceb4:	19 97       	sbiw	r26, 0x09	; 9
    ceb6:	82 17       	cp	r24, r18
    ceb8:	93 07       	cpc	r25, r19
    ceba:	18 f4       	brcc	.+6      	; 0xcec2 <twim_interrupt_handler+0xfe>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    cebc:	82 e0       	ldi	r24, 0x02	; 2
    cebe:	83 83       	std	Z+3, r24	; 0x03
    cec0:	12 c0       	rjmp	.+36     	; 0xcee6 <twim_interrupt_handler+0x122>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    cec2:	87 e0       	ldi	r24, 0x07	; 7
    cec4:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    cec6:	10 92 b2 24 	sts	0x24B2, r1
    ceca:	10 92 b3 24 	sts	0x24B3, r1
    cece:	0b c0       	rjmp	.+22     	; 0xcee6 <twim_interrupt_handler+0x122>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    ced0:	83 e0       	ldi	r24, 0x03	; 3
    ced2:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    ced4:	89 ef       	ldi	r24, 0xF9	; 249
    ced6:	9f ef       	ldi	r25, 0xFF	; 255
    ced8:	02 c0       	rjmp	.+4      	; 0xcede <twim_interrupt_handler+0x11a>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    ceda:	8b ef       	ldi	r24, 0xFB	; 251
    cedc:	9f ef       	ldi	r25, 0xFF	; 255
    cede:	80 93 b2 24 	sts	0x24B2, r24
    cee2:	90 93 b3 24 	sts	0x24B3, r25
	}
}
    cee6:	df 91       	pop	r29
    cee8:	cf 91       	pop	r28
    ceea:	08 95       	ret

0000ceec <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    ceec:	1f 92       	push	r1
    ceee:	0f 92       	push	r0
    cef0:	0f b6       	in	r0, 0x3f	; 63
    cef2:	0f 92       	push	r0
    cef4:	11 24       	eor	r1, r1
    cef6:	0b b6       	in	r0, 0x3b	; 59
    cef8:	0f 92       	push	r0
    cefa:	2f 93       	push	r18
    cefc:	3f 93       	push	r19
    cefe:	4f 93       	push	r20
    cf00:	5f 93       	push	r21
    cf02:	6f 93       	push	r22
    cf04:	7f 93       	push	r23
    cf06:	8f 93       	push	r24
    cf08:	9f 93       	push	r25
    cf0a:	af 93       	push	r26
    cf0c:	bf 93       	push	r27
    cf0e:	ef 93       	push	r30
    cf10:	ff 93       	push	r31
    cf12:	58 df       	rcall	.-336    	; 0xcdc4 <twim_interrupt_handler>
    cf14:	ff 91       	pop	r31
    cf16:	ef 91       	pop	r30
    cf18:	bf 91       	pop	r27
    cf1a:	af 91       	pop	r26
    cf1c:	9f 91       	pop	r25
    cf1e:	8f 91       	pop	r24
    cf20:	7f 91       	pop	r23
    cf22:	6f 91       	pop	r22
    cf24:	5f 91       	pop	r21
    cf26:	4f 91       	pop	r20
    cf28:	3f 91       	pop	r19
    cf2a:	2f 91       	pop	r18
    cf2c:	0f 90       	pop	r0
    cf2e:	0b be       	out	0x3b, r0	; 59
    cf30:	0f 90       	pop	r0
    cf32:	0f be       	out	0x3f, r0	; 63
    cf34:	0f 90       	pop	r0
    cf36:	1f 90       	pop	r1
    cf38:	18 95       	reti

0000cf3a <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    cf3a:	1f 92       	push	r1
    cf3c:	0f 92       	push	r0
    cf3e:	0f b6       	in	r0, 0x3f	; 63
    cf40:	0f 92       	push	r0
    cf42:	11 24       	eor	r1, r1
    cf44:	0b b6       	in	r0, 0x3b	; 59
    cf46:	0f 92       	push	r0
    cf48:	2f 93       	push	r18
    cf4a:	3f 93       	push	r19
    cf4c:	4f 93       	push	r20
    cf4e:	5f 93       	push	r21
    cf50:	6f 93       	push	r22
    cf52:	7f 93       	push	r23
    cf54:	8f 93       	push	r24
    cf56:	9f 93       	push	r25
    cf58:	af 93       	push	r26
    cf5a:	bf 93       	push	r27
    cf5c:	ef 93       	push	r30
    cf5e:	ff 93       	push	r31
    cf60:	31 df       	rcall	.-414    	; 0xcdc4 <twim_interrupt_handler>
    cf62:	ff 91       	pop	r31
    cf64:	ef 91       	pop	r30
    cf66:	bf 91       	pop	r27
    cf68:	af 91       	pop	r26
    cf6a:	9f 91       	pop	r25
    cf6c:	8f 91       	pop	r24
    cf6e:	7f 91       	pop	r23
    cf70:	6f 91       	pop	r22
    cf72:	5f 91       	pop	r21
    cf74:	4f 91       	pop	r20
    cf76:	3f 91       	pop	r19
    cf78:	2f 91       	pop	r18
    cf7a:	0f 90       	pop	r0
    cf7c:	0b be       	out	0x3b, r0	; 59
    cf7e:	0f 90       	pop	r0
    cf80:	0f be       	out	0x3f, r0	; 63
    cf82:	0f 90       	pop	r0
    cf84:	1f 90       	pop	r1
    cf86:	18 95       	reti

0000cf88 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    cf88:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    cf8a:	db 01       	movw	r26, r22
    cf8c:	14 96       	adiw	r26, 0x04	; 4
    cf8e:	8c 91       	ld	r24, X
    cf90:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    cf92:	88 eb       	ldi	r24, 0xB8	; 184
    cf94:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    cf96:	81 e0       	ldi	r24, 0x01	; 1
    cf98:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    cf9a:	10 92 b1 24 	sts	0x24B1, r1
	transfer.status    = STATUS_OK;
    cf9e:	10 92 b2 24 	sts	0x24B2, r1
    cfa2:	10 92 b3 24 	sts	0x24B3, r1

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    cfa6:	e0 ea       	ldi	r30, 0xA0	; 160
    cfa8:	f0 e0       	ldi	r31, 0x00	; 0
    cfaa:	82 81       	ldd	r24, Z+2	; 0x02
    cfac:	82 60       	ori	r24, 0x02	; 2
    cfae:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    cfb0:	78 94       	sei

	return STATUS_OK;
}
    cfb2:	80 e0       	ldi	r24, 0x00	; 0
    cfb4:	90 e0       	ldi	r25, 0x00	; 0
    cfb6:	08 95       	ret

0000cfb8 <twi_master_transfer>:
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
#include "globals.h"
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    cfb8:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    cfba:	00 97       	sbiw	r24, 0x00	; 0
    cfbc:	09 f4       	brne	.+2      	; 0xcfc0 <twi_master_transfer+0x8>
    cfbe:	4c c0       	rjmp	.+152    	; 0xd058 <twi_master_transfer+0xa0>
    cfc0:	30 97       	sbiw	r30, 0x00	; 0
    cfc2:	09 f4       	brne	.+2      	; 0xcfc6 <twi_master_transfer+0xe>
    cfc4:	49 c0       	rjmp	.+146    	; 0xd058 <twi_master_transfer+0xa0>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    cfc6:	32 85       	ldd	r19, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    cfc8:	20 91 b1 24 	lds	r18, 0x24B1
    cfcc:	02 c0       	rjmp	.+4      	; 0xcfd2 <twi_master_transfer+0x1a>

		if (no_wait) { return ERR_BUSY; }
    cfce:	31 11       	cpse	r19, r1
    cfd0:	46 c0       	rjmp	.+140    	; 0xd05e <twi_master_transfer+0xa6>
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    cfd2:	21 11       	cpse	r18, r1
    cfd4:	fc cf       	rjmp	.-8      	; 0xcfce <twi_master_transfer+0x16>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    cfd6:	5f b7       	in	r21, 0x3f	; 63
	cpu_irq_disable();
    cfd8:	f8 94       	cli
		if (no_wait) { return ERR_BUSY; }
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    cfda:	21 e0       	ldi	r18, 0x01	; 1
    cfdc:	20 93 b1 24 	sts	0x24B1, r18
	transfer.status = OPERATION_IN_PROGRESS;
    cfe0:	20 e8       	ldi	r18, 0x80	; 128
    cfe2:	3f ef       	ldi	r19, 0xFF	; 255
    cfe4:	20 93 b2 24 	sts	0x24B2, r18
    cfe8:	30 93 b3 24 	sts	0x24B3, r19
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    cfec:	5f bf       	out	0x3f, r21	; 63
	status_code_t status = twim_acquire(package->no_wait);

//	debug_string(VERY_VERBOSE,PSTR("[twi_master_transfer] twi acquired\r\n"),true);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    cfee:	80 93 a8 24 	sts	0x24A8, r24
    cff2:	90 93 a9 24 	sts	0x24A9, r25
		transfer.pkg         = (twi_package_t *) package;
    cff6:	e0 93 aa 24 	sts	0x24AA, r30
    cffa:	f0 93 ab 24 	sts	0x24AB, r31
		transfer.addr_count  = 0;
    cffe:	10 92 ac 24 	sts	0x24AC, r1
    d002:	10 92 ad 24 	sts	0x24AD, r1
		transfer.data_count  = 0;
    d006:	10 92 ae 24 	sts	0x24AE, r1
    d00a:	10 92 af 24 	sts	0x24AF, r1
		transfer.read        = read;
    d00e:	40 93 b0 24 	sts	0x24B0, r20

		uint8_t const chip = (package->chip) << 1;
    d012:	50 81       	ld	r21, Z
    d014:	55 0f       	add	r21, r21

		if (package->addr_length || (false == read)) {
    d016:	24 81       	ldd	r18, Z+4	; 0x04
    d018:	35 81       	ldd	r19, Z+5	; 0x05
    d01a:	23 2b       	or	r18, r19
    d01c:	21 f4       	brne	.+8      	; 0xd026 <twi_master_transfer+0x6e>
    d01e:	41 11       	cpse	r20, r1
    d020:	01 c0       	rjmp	.+2      	; 0xd024 <twi_master_transfer+0x6c>
    d022:	01 c0       	rjmp	.+2      	; 0xd026 <twi_master_transfer+0x6e>
			transfer.bus->MASTER.ADDR = chip;
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    d024:	51 60       	ori	r21, 0x01	; 1
    d026:	fc 01       	movw	r30, r24
    d028:	56 83       	std	Z+6, r21	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    d02a:	80 91 b2 24 	lds	r24, 0x24B2
    d02e:	90 91 b3 24 	lds	r25, 0x24B3
    d032:	80 38       	cpi	r24, 0x80	; 128
    d034:	9f 4f       	sbci	r25, 0xFF	; 255
    d036:	c9 f3       	breq	.-14     	; 0xd02a <twi_master_transfer+0x72>
    d038:	00 c0       	rjmp	.+0      	; 0xd03a <twi_master_transfer+0x82>

	while (! twim_idle(transfer.bus)) { barrier(); }
    d03a:	e0 91 a8 24 	lds	r30, 0x24A8
    d03e:	f0 91 a9 24 	lds	r31, 0x24A9
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    d042:	84 81       	ldd	r24, Z+4	; 0x04
    d044:	83 70       	andi	r24, 0x03	; 3
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    d046:	81 30       	cpi	r24, 0x01	; 1
    d048:	c1 f7       	brne	.-16     	; 0xd03a <twi_master_transfer+0x82>

	status_code_t const status = transfer.status;
    d04a:	20 91 b2 24 	lds	r18, 0x24B2
    d04e:	30 91 b3 24 	lds	r19, 0x24B3

	transfer.locked = false;
    d052:	10 92 b1 24 	sts	0x24B1, r1
    d056:	05 c0       	rjmp	.+10     	; 0xd062 <twi_master_transfer+0xaa>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    d058:	28 ef       	ldi	r18, 0xF8	; 248
    d05a:	3f ef       	ldi	r19, 0xFF	; 255
    d05c:	02 c0       	rjmp	.+4      	; 0xd062 <twi_master_transfer+0xaa>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    d05e:	26 ef       	ldi	r18, 0xF6	; 246
    d060:	3f ef       	ldi	r19, 0xFF	; 255

		status = twim_release();
	}

	return status;
}
    d062:	c9 01       	movw	r24, r18
    d064:	08 95       	ret

0000d066 <sysclk_enable_peripheral_clock>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    d066:	00 97       	sbiw	r24, 0x00	; 0
    d068:	09 f4       	brne	.+2      	; 0xd06c <sysclk_enable_peripheral_clock+0x6>
    d06a:	bb c0       	rjmp	.+374    	; 0xd1e2 <sysclk_enable_peripheral_clock+0x17c>
    d06c:	80 3c       	cpi	r24, 0xC0	; 192
    d06e:	91 05       	cpc	r25, r1
    d070:	11 f4       	brne	.+4      	; 0xd076 <sysclk_enable_peripheral_clock+0x10>
    d072:	60 e1       	ldi	r22, 0x10	; 16
    d074:	05 c0       	rjmp	.+10     	; 0xd080 <sysclk_enable_peripheral_clock+0x1a>
    d076:	80 38       	cpi	r24, 0x80	; 128
    d078:	21 e0       	ldi	r18, 0x01	; 1
    d07a:	92 07       	cpc	r25, r18
    d07c:	21 f4       	brne	.+8      	; 0xd086 <sysclk_enable_peripheral_clock+0x20>
    d07e:	62 e0       	ldi	r22, 0x02	; 2
    d080:	80 e0       	ldi	r24, 0x00	; 0
    d082:	90 e0       	ldi	r25, 0x00	; 0
    d084:	ac c0       	rjmp	.+344    	; 0xd1de <sysclk_enable_peripheral_clock+0x178>
    d086:	81 15       	cp	r24, r1
    d088:	21 e0       	ldi	r18, 0x01	; 1
    d08a:	92 07       	cpc	r25, r18
    d08c:	11 f4       	brne	.+4      	; 0xd092 <sysclk_enable_peripheral_clock+0x2c>
    d08e:	61 e0       	ldi	r22, 0x01	; 1
    d090:	f7 cf       	rjmp	.-18     	; 0xd080 <sysclk_enable_peripheral_clock+0x1a>
    d092:	80 38       	cpi	r24, 0x80	; 128
    d094:	23 e0       	ldi	r18, 0x03	; 3
    d096:	92 07       	cpc	r25, r18
    d098:	11 f4       	brne	.+4      	; 0xd09e <sysclk_enable_peripheral_clock+0x38>
    d09a:	61 e0       	ldi	r22, 0x01	; 1
    d09c:	0b c0       	rjmp	.+22     	; 0xd0b4 <sysclk_enable_peripheral_clock+0x4e>
    d09e:	80 39       	cpi	r24, 0x90	; 144
    d0a0:	23 e0       	ldi	r18, 0x03	; 3
    d0a2:	92 07       	cpc	r25, r18
    d0a4:	11 f4       	brne	.+4      	; 0xd0aa <sysclk_enable_peripheral_clock+0x44>
    d0a6:	61 e0       	ldi	r22, 0x01	; 1
    d0a8:	13 c0       	rjmp	.+38     	; 0xd0d0 <sysclk_enable_peripheral_clock+0x6a>
    d0aa:	81 15       	cp	r24, r1
    d0ac:	22 e0       	ldi	r18, 0x02	; 2
    d0ae:	92 07       	cpc	r25, r18
    d0b0:	21 f4       	brne	.+8      	; 0xd0ba <sysclk_enable_peripheral_clock+0x54>
    d0b2:	62 e0       	ldi	r22, 0x02	; 2
    d0b4:	81 e0       	ldi	r24, 0x01	; 1
    d0b6:	90 e0       	ldi	r25, 0x00	; 0
    d0b8:	92 c0       	rjmp	.+292    	; 0xd1de <sysclk_enable_peripheral_clock+0x178>
    d0ba:	80 34       	cpi	r24, 0x40	; 64
    d0bc:	22 e0       	ldi	r18, 0x02	; 2
    d0be:	92 07       	cpc	r25, r18
    d0c0:	11 f4       	brne	.+4      	; 0xd0c6 <sysclk_enable_peripheral_clock+0x60>
    d0c2:	62 e0       	ldi	r22, 0x02	; 2
    d0c4:	05 c0       	rjmp	.+10     	; 0xd0d0 <sysclk_enable_peripheral_clock+0x6a>
    d0c6:	80 32       	cpi	r24, 0x20	; 32
    d0c8:	23 e0       	ldi	r18, 0x03	; 3
    d0ca:	92 07       	cpc	r25, r18
    d0cc:	21 f4       	brne	.+8      	; 0xd0d6 <sysclk_enable_peripheral_clock+0x70>
    d0ce:	64 e0       	ldi	r22, 0x04	; 4
    d0d0:	82 e0       	ldi	r24, 0x02	; 2
    d0d2:	90 e0       	ldi	r25, 0x00	; 0
    d0d4:	84 c0       	rjmp	.+264    	; 0xd1de <sysclk_enable_peripheral_clock+0x178>
    d0d6:	81 15       	cp	r24, r1
    d0d8:	28 e0       	ldi	r18, 0x08	; 8
    d0da:	92 07       	cpc	r25, r18
    d0dc:	11 f4       	brne	.+4      	; 0xd0e2 <sysclk_enable_peripheral_clock+0x7c>
    d0de:	61 e0       	ldi	r22, 0x01	; 1
    d0e0:	75 c0       	rjmp	.+234    	; 0xd1cc <sysclk_enable_peripheral_clock+0x166>
    d0e2:	81 15       	cp	r24, r1
    d0e4:	29 e0       	ldi	r18, 0x09	; 9
    d0e6:	92 07       	cpc	r25, r18
    d0e8:	11 f4       	brne	.+4      	; 0xd0ee <sysclk_enable_peripheral_clock+0x88>
    d0ea:	61 e0       	ldi	r22, 0x01	; 1
    d0ec:	67 c0       	rjmp	.+206    	; 0xd1bc <sysclk_enable_peripheral_clock+0x156>
    d0ee:	81 15       	cp	r24, r1
    d0f0:	2a e0       	ldi	r18, 0x0A	; 10
    d0f2:	92 07       	cpc	r25, r18
    d0f4:	11 f4       	brne	.+4      	; 0xd0fa <sysclk_enable_peripheral_clock+0x94>
    d0f6:	61 e0       	ldi	r22, 0x01	; 1
    d0f8:	70 c0       	rjmp	.+224    	; 0xd1da <sysclk_enable_peripheral_clock+0x174>
    d0fa:	81 15       	cp	r24, r1
    d0fc:	2b e0       	ldi	r18, 0x0B	; 11
    d0fe:	92 07       	cpc	r25, r18
    d100:	11 f4       	brne	.+4      	; 0xd106 <sysclk_enable_peripheral_clock+0xa0>
    d102:	61 e0       	ldi	r22, 0x01	; 1
    d104:	4d c0       	rjmp	.+154    	; 0xd1a0 <sysclk_enable_peripheral_clock+0x13a>
    d106:	80 34       	cpi	r24, 0x40	; 64
    d108:	28 e0       	ldi	r18, 0x08	; 8
    d10a:	92 07       	cpc	r25, r18
    d10c:	11 f4       	brne	.+4      	; 0xd112 <sysclk_enable_peripheral_clock+0xac>
    d10e:	62 e0       	ldi	r22, 0x02	; 2
    d110:	5d c0       	rjmp	.+186    	; 0xd1cc <sysclk_enable_peripheral_clock+0x166>
    d112:	80 34       	cpi	r24, 0x40	; 64
    d114:	29 e0       	ldi	r18, 0x09	; 9
    d116:	92 07       	cpc	r25, r18
    d118:	11 f4       	brne	.+4      	; 0xd11e <sysclk_enable_peripheral_clock+0xb8>
    d11a:	62 e0       	ldi	r22, 0x02	; 2
    d11c:	4f c0       	rjmp	.+158    	; 0xd1bc <sysclk_enable_peripheral_clock+0x156>
    d11e:	80 34       	cpi	r24, 0x40	; 64
    d120:	2a e0       	ldi	r18, 0x0A	; 10
    d122:	92 07       	cpc	r25, r18
    d124:	11 f4       	brne	.+4      	; 0xd12a <sysclk_enable_peripheral_clock+0xc4>
    d126:	62 e0       	ldi	r22, 0x02	; 2
    d128:	58 c0       	rjmp	.+176    	; 0xd1da <sysclk_enable_peripheral_clock+0x174>
    d12a:	80 39       	cpi	r24, 0x90	; 144
    d12c:	28 e0       	ldi	r18, 0x08	; 8
    d12e:	92 07       	cpc	r25, r18
    d130:	11 f4       	brne	.+4      	; 0xd136 <sysclk_enable_peripheral_clock+0xd0>
    d132:	64 e0       	ldi	r22, 0x04	; 4
    d134:	4b c0       	rjmp	.+150    	; 0xd1cc <sysclk_enable_peripheral_clock+0x166>
    d136:	80 39       	cpi	r24, 0x90	; 144
    d138:	29 e0       	ldi	r18, 0x09	; 9
    d13a:	92 07       	cpc	r25, r18
    d13c:	11 f4       	brne	.+4      	; 0xd142 <sysclk_enable_peripheral_clock+0xdc>
    d13e:	64 e0       	ldi	r22, 0x04	; 4
    d140:	3d c0       	rjmp	.+122    	; 0xd1bc <sysclk_enable_peripheral_clock+0x156>
    d142:	80 39       	cpi	r24, 0x90	; 144
    d144:	2a e0       	ldi	r18, 0x0A	; 10
    d146:	92 07       	cpc	r25, r18
    d148:	11 f4       	brne	.+4      	; 0xd14e <sysclk_enable_peripheral_clock+0xe8>
    d14a:	64 e0       	ldi	r22, 0x04	; 4
    d14c:	46 c0       	rjmp	.+140    	; 0xd1da <sysclk_enable_peripheral_clock+0x174>
    d14e:	80 39       	cpi	r24, 0x90	; 144
    d150:	2b e0       	ldi	r18, 0x0B	; 11
    d152:	92 07       	cpc	r25, r18
    d154:	11 f4       	brne	.+4      	; 0xd15a <sysclk_enable_peripheral_clock+0xf4>
    d156:	64 e0       	ldi	r22, 0x04	; 4
    d158:	23 c0       	rjmp	.+70     	; 0xd1a0 <sysclk_enable_peripheral_clock+0x13a>
    d15a:	80 3c       	cpi	r24, 0xC0	; 192
    d15c:	28 e0       	ldi	r18, 0x08	; 8
    d15e:	92 07       	cpc	r25, r18
    d160:	11 f4       	brne	.+4      	; 0xd166 <sysclk_enable_peripheral_clock+0x100>
    d162:	68 e0       	ldi	r22, 0x08	; 8
    d164:	33 c0       	rjmp	.+102    	; 0xd1cc <sysclk_enable_peripheral_clock+0x166>
    d166:	80 3c       	cpi	r24, 0xC0	; 192
    d168:	29 e0       	ldi	r18, 0x09	; 9
    d16a:	92 07       	cpc	r25, r18
    d16c:	11 f4       	brne	.+4      	; 0xd172 <sysclk_enable_peripheral_clock+0x10c>
    d16e:	68 e0       	ldi	r22, 0x08	; 8
    d170:	25 c0       	rjmp	.+74     	; 0xd1bc <sysclk_enable_peripheral_clock+0x156>
    d172:	80 3a       	cpi	r24, 0xA0	; 160
    d174:	28 e0       	ldi	r18, 0x08	; 8
    d176:	92 07       	cpc	r25, r18
    d178:	11 f4       	brne	.+4      	; 0xd17e <sysclk_enable_peripheral_clock+0x118>
    d17a:	60 e1       	ldi	r22, 0x10	; 16
    d17c:	27 c0       	rjmp	.+78     	; 0xd1cc <sysclk_enable_peripheral_clock+0x166>
    d17e:	80 3a       	cpi	r24, 0xA0	; 160
    d180:	29 e0       	ldi	r18, 0x09	; 9
    d182:	92 07       	cpc	r25, r18
    d184:	11 f4       	brne	.+4      	; 0xd18a <sysclk_enable_peripheral_clock+0x124>
    d186:	60 e1       	ldi	r22, 0x10	; 16
    d188:	19 c0       	rjmp	.+50     	; 0xd1bc <sysclk_enable_peripheral_clock+0x156>
    d18a:	80 3a       	cpi	r24, 0xA0	; 160
    d18c:	2a e0       	ldi	r18, 0x0A	; 10
    d18e:	92 07       	cpc	r25, r18
    d190:	11 f4       	brne	.+4      	; 0xd196 <sysclk_enable_peripheral_clock+0x130>
    d192:	60 e1       	ldi	r22, 0x10	; 16
    d194:	22 c0       	rjmp	.+68     	; 0xd1da <sysclk_enable_peripheral_clock+0x174>
    d196:	80 3a       	cpi	r24, 0xA0	; 160
    d198:	2b e0       	ldi	r18, 0x0B	; 11
    d19a:	92 07       	cpc	r25, r18
    d19c:	21 f4       	brne	.+8      	; 0xd1a6 <sysclk_enable_peripheral_clock+0x140>
    d19e:	60 e1       	ldi	r22, 0x10	; 16
    d1a0:	86 e0       	ldi	r24, 0x06	; 6
    d1a2:	90 e0       	ldi	r25, 0x00	; 0
    d1a4:	1c c0       	rjmp	.+56     	; 0xd1de <sysclk_enable_peripheral_clock+0x178>
    d1a6:	80 3b       	cpi	r24, 0xB0	; 176
    d1a8:	28 e0       	ldi	r18, 0x08	; 8
    d1aa:	92 07       	cpc	r25, r18
    d1ac:	11 f4       	brne	.+4      	; 0xd1b2 <sysclk_enable_peripheral_clock+0x14c>
    d1ae:	60 e2       	ldi	r22, 0x20	; 32
    d1b0:	0d c0       	rjmp	.+26     	; 0xd1cc <sysclk_enable_peripheral_clock+0x166>
    d1b2:	80 3b       	cpi	r24, 0xB0	; 176
    d1b4:	29 e0       	ldi	r18, 0x09	; 9
    d1b6:	92 07       	cpc	r25, r18
    d1b8:	21 f4       	brne	.+8      	; 0xd1c2 <sysclk_enable_peripheral_clock+0x15c>
    d1ba:	60 e2       	ldi	r22, 0x20	; 32
    d1bc:	84 e0       	ldi	r24, 0x04	; 4
    d1be:	90 e0       	ldi	r25, 0x00	; 0
    d1c0:	0e c0       	rjmp	.+28     	; 0xd1de <sysclk_enable_peripheral_clock+0x178>
    d1c2:	80 38       	cpi	r24, 0x80	; 128
    d1c4:	24 e0       	ldi	r18, 0x04	; 4
    d1c6:	92 07       	cpc	r25, r18
    d1c8:	21 f4       	brne	.+8      	; 0xd1d2 <sysclk_enable_peripheral_clock+0x16c>
    d1ca:	60 e4       	ldi	r22, 0x40	; 64
    d1cc:	83 e0       	ldi	r24, 0x03	; 3
    d1ce:	90 e0       	ldi	r25, 0x00	; 0
    d1d0:	06 c0       	rjmp	.+12     	; 0xd1de <sysclk_enable_peripheral_clock+0x178>
    d1d2:	80 3a       	cpi	r24, 0xA0	; 160
    d1d4:	94 40       	sbci	r25, 0x04	; 4
    d1d6:	29 f4       	brne	.+10     	; 0xd1e2 <sysclk_enable_peripheral_clock+0x17c>
    d1d8:	60 e4       	ldi	r22, 0x40	; 64
    d1da:	85 e0       	ldi	r24, 0x05	; 5
    d1dc:	90 e0       	ldi	r25, 0x00	; 0
    d1de:	0c 94 06 5b 	jmp	0xb60c	; 0xb60c <sysclk_enable_module>
    d1e2:	08 95       	ret

0000d1e4 <usart_putchar>:
    d1e4:	fc 01       	movw	r30, r24
    d1e6:	21 81       	ldd	r18, Z+1	; 0x01
    d1e8:	25 ff       	sbrs	r18, 5
    d1ea:	fc cf       	rjmp	.-8      	; 0xd1e4 <usart_putchar>
    d1ec:	60 83       	st	Z, r22
    d1ee:	80 e0       	ldi	r24, 0x00	; 0
    d1f0:	90 e0       	ldi	r25, 0x00	; 0
    d1f2:	08 95       	ret

0000d1f4 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    d1f4:	8f 92       	push	r8
    d1f6:	9f 92       	push	r9
    d1f8:	af 92       	push	r10
    d1fa:	bf 92       	push	r11
    d1fc:	cf 92       	push	r12
    d1fe:	df 92       	push	r13
    d200:	ef 92       	push	r14
    d202:	ff 92       	push	r15
    d204:	0f 93       	push	r16
    d206:	1f 93       	push	r17
    d208:	cf 93       	push	r28
    d20a:	df 93       	push	r29
    d20c:	ec 01       	movw	r28, r24
    d20e:	6a 01       	movw	r12, r20
    d210:	7b 01       	movw	r14, r22
    d212:	48 01       	movw	r8, r16
    d214:	59 01       	movw	r10, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    d216:	b9 01       	movw	r22, r18
    d218:	a8 01       	movw	r20, r16
    d21a:	a3 e0       	ldi	r26, 0x03	; 3
    d21c:	76 95       	lsr	r23
    d21e:	67 95       	ror	r22
    d220:	57 95       	ror	r21
    d222:	47 95       	ror	r20
    d224:	aa 95       	dec	r26
    d226:	d1 f7       	brne	.-12     	; 0xd21c <usart_set_baudrate+0x28>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    d228:	d9 01       	movw	r26, r18
    d22a:	c8 01       	movw	r24, r16
    d22c:	16 e1       	ldi	r17, 0x16	; 22
    d22e:	b6 95       	lsr	r27
    d230:	a7 95       	ror	r26
    d232:	97 95       	ror	r25
    d234:	87 95       	ror	r24
    d236:	1a 95       	dec	r17
    d238:	d1 f7       	brne	.-12     	; 0xd22e <usart_set_baudrate+0x3a>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    d23a:	2c 81       	ldd	r18, Y+4	; 0x04
    d23c:	22 fd       	sbrc	r18, 2
    d23e:	08 c0       	rjmp	.+16     	; 0xd250 <usart_set_baudrate+0x5c>
		max_rate /= 2;
    d240:	76 95       	lsr	r23
    d242:	67 95       	ror	r22
    d244:	57 95       	ror	r21
    d246:	47 95       	ror	r20
		min_rate /= 2;
    d248:	b6 95       	lsr	r27
    d24a:	a7 95       	ror	r26
    d24c:	97 95       	ror	r25
    d24e:	87 95       	ror	r24
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    d250:	4c 15       	cp	r20, r12
    d252:	5d 05       	cpc	r21, r13
    d254:	6e 05       	cpc	r22, r14
    d256:	7f 05       	cpc	r23, r15
    d258:	08 f4       	brcc	.+2      	; 0xd25c <usart_set_baudrate+0x68>
    d25a:	9e c0       	rjmp	.+316    	; 0xd398 <usart_set_baudrate+0x1a4>
    d25c:	c8 16       	cp	r12, r24
    d25e:	d9 06       	cpc	r13, r25
    d260:	ea 06       	cpc	r14, r26
    d262:	fb 06       	cpc	r15, r27
    d264:	08 f4       	brcc	.+2      	; 0xd268 <usart_set_baudrate+0x74>
    d266:	98 c0       	rjmp	.+304    	; 0xd398 <usart_set_baudrate+0x1a4>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    d268:	8c 81       	ldd	r24, Y+4	; 0x04
    d26a:	82 fd       	sbrc	r24, 2
    d26c:	04 c0       	rjmp	.+8      	; 0xd276 <usart_set_baudrate+0x82>
		baud *= 2;
    d26e:	cc 0c       	add	r12, r12
    d270:	dd 1c       	adc	r13, r13
    d272:	ee 1c       	adc	r14, r14
    d274:	ff 1c       	adc	r15, r15
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    d276:	c5 01       	movw	r24, r10
    d278:	b4 01       	movw	r22, r8
    d27a:	a7 01       	movw	r20, r14
    d27c:	96 01       	movw	r18, r12
    d27e:	0e 94 64 72 	call	0xe4c8	; 0xe4c8 <__udivmodsi4>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    d282:	8f ef       	ldi	r24, 0xFF	; 255
    d284:	90 e0       	ldi	r25, 0x00	; 0
    d286:	a0 e0       	ldi	r26, 0x00	; 0
    d288:	b0 e0       	ldi	r27, 0x00	; 0
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    d28a:	19 ef       	ldi	r17, 0xF9	; 249
		if (ratio < limit) {
    d28c:	28 17       	cp	r18, r24
    d28e:	39 07       	cpc	r19, r25
    d290:	4a 07       	cpc	r20, r26
    d292:	5b 07       	cpc	r21, r27
    d294:	58 f0       	brcs	.+22     	; 0xd2ac <usart_set_baudrate+0xb8>
			break;
		}

		limit <<= 1;
    d296:	88 0f       	add	r24, r24
    d298:	99 1f       	adc	r25, r25
    d29a:	aa 1f       	adc	r26, r26
    d29c:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    d29e:	1d 3f       	cpi	r17, 0xFD	; 253
    d2a0:	0c f4       	brge	.+2      	; 0xd2a4 <usart_set_baudrate+0xb0>
			limit |= 1;
    d2a2:	81 60       	ori	r24, 0x01	; 1

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    d2a4:	1f 5f       	subi	r17, 0xFF	; 255
    d2a6:	17 30       	cpi	r17, 0x07	; 7
    d2a8:	89 f7       	brne	.-30     	; 0xd28c <usart_set_baudrate+0x98>
    d2aa:	4c c0       	rjmp	.+152    	; 0xd344 <usart_set_baudrate+0x150>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    d2ac:	17 ff       	sbrs	r17, 7
    d2ae:	4a c0       	rjmp	.+148    	; 0xd344 <usart_set_baudrate+0x150>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    d2b0:	d7 01       	movw	r26, r14
    d2b2:	c6 01       	movw	r24, r12
    d2b4:	03 e0       	ldi	r16, 0x03	; 3
    d2b6:	88 0f       	add	r24, r24
    d2b8:	99 1f       	adc	r25, r25
    d2ba:	aa 1f       	adc	r26, r26
    d2bc:	bb 1f       	adc	r27, r27
    d2be:	0a 95       	dec	r16
    d2c0:	d1 f7       	brne	.-12     	; 0xd2b6 <usart_set_baudrate+0xc2>
    d2c2:	88 1a       	sub	r8, r24
    d2c4:	99 0a       	sbc	r9, r25
    d2c6:	aa 0a       	sbc	r10, r26
    d2c8:	bb 0a       	sbc	r11, r27
    d2ca:	81 2f       	mov	r24, r17
    d2cc:	99 27       	eor	r25, r25
    d2ce:	87 fd       	sbrc	r24, 7
    d2d0:	90 95       	com	r25
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    d2d2:	1e 3f       	cpi	r17, 0xFE	; 254
    d2d4:	e4 f4       	brge	.+56     	; 0xd30e <usart_set_baudrate+0x11a>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    d2d6:	6d ef       	ldi	r22, 0xFD	; 253
    d2d8:	7f ef       	ldi	r23, 0xFF	; 255
    d2da:	68 1b       	sub	r22, r24
    d2dc:	79 0b       	sbc	r23, r25
    d2de:	a5 01       	movw	r20, r10
    d2e0:	94 01       	movw	r18, r8
    d2e2:	04 c0       	rjmp	.+8      	; 0xd2ec <usart_set_baudrate+0xf8>
    d2e4:	22 0f       	add	r18, r18
    d2e6:	33 1f       	adc	r19, r19
    d2e8:	44 1f       	adc	r20, r20
    d2ea:	55 1f       	adc	r21, r21
    d2ec:	6a 95       	dec	r22
    d2ee:	d2 f7       	brpl	.-12     	; 0xd2e4 <usart_set_baudrate+0xf0>
    d2f0:	ca 01       	movw	r24, r20
    d2f2:	b9 01       	movw	r22, r18
    d2f4:	46 01       	movw	r8, r12
    d2f6:	57 01       	movw	r10, r14
    d2f8:	b6 94       	lsr	r11
    d2fa:	a7 94       	ror	r10
    d2fc:	97 94       	ror	r9
    d2fe:	87 94       	ror	r8
    d300:	68 0d       	add	r22, r8
    d302:	79 1d       	adc	r23, r9
    d304:	8a 1d       	adc	r24, r10
    d306:	9b 1d       	adc	r25, r11
    d308:	a7 01       	movw	r20, r14
    d30a:	96 01       	movw	r18, r12
    d30c:	18 c0       	rjmp	.+48     	; 0xd33e <usart_set_baudrate+0x14a>
		} else {
			baud <<= exp + 3;
    d30e:	9c 01       	movw	r18, r24
    d310:	2d 5f       	subi	r18, 0xFD	; 253
    d312:	3f 4f       	sbci	r19, 0xFF	; 255
    d314:	d7 01       	movw	r26, r14
    d316:	c6 01       	movw	r24, r12
    d318:	04 c0       	rjmp	.+8      	; 0xd322 <usart_set_baudrate+0x12e>
    d31a:	88 0f       	add	r24, r24
    d31c:	99 1f       	adc	r25, r25
    d31e:	aa 1f       	adc	r26, r26
    d320:	bb 1f       	adc	r27, r27
    d322:	2a 95       	dec	r18
    d324:	d2 f7       	brpl	.-12     	; 0xd31a <usart_set_baudrate+0x126>
    d326:	9c 01       	movw	r18, r24
    d328:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
    d32a:	bc 01       	movw	r22, r24
    d32c:	cd 01       	movw	r24, r26
    d32e:	96 95       	lsr	r25
    d330:	87 95       	ror	r24
    d332:	77 95       	ror	r23
    d334:	67 95       	ror	r22
    d336:	68 0d       	add	r22, r8
    d338:	79 1d       	adc	r23, r9
    d33a:	8a 1d       	adc	r24, r10
    d33c:	9b 1d       	adc	r25, r11
    d33e:	0e 94 64 72 	call	0xe4c8	; 0xe4c8 <__udivmodsi4>
    d342:	21 c0       	rjmp	.+66     	; 0xd386 <usart_set_baudrate+0x192>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    d344:	21 2f       	mov	r18, r17
    d346:	33 27       	eor	r19, r19
    d348:	27 fd       	sbrc	r18, 7
    d34a:	30 95       	com	r19
    d34c:	2d 5f       	subi	r18, 0xFD	; 253
    d34e:	3f 4f       	sbci	r19, 0xFF	; 255
    d350:	d7 01       	movw	r26, r14
    d352:	c6 01       	movw	r24, r12
    d354:	04 c0       	rjmp	.+8      	; 0xd35e <usart_set_baudrate+0x16a>
    d356:	88 0f       	add	r24, r24
    d358:	99 1f       	adc	r25, r25
    d35a:	aa 1f       	adc	r26, r26
    d35c:	bb 1f       	adc	r27, r27
    d35e:	2a 95       	dec	r18
    d360:	d2 f7       	brpl	.-12     	; 0xd356 <usart_set_baudrate+0x162>
    d362:	9c 01       	movw	r18, r24
    d364:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
    d366:	bc 01       	movw	r22, r24
    d368:	cd 01       	movw	r24, r26
    d36a:	96 95       	lsr	r25
    d36c:	87 95       	ror	r24
    d36e:	77 95       	ror	r23
    d370:	67 95       	ror	r22
    d372:	68 0d       	add	r22, r8
    d374:	79 1d       	adc	r23, r9
    d376:	8a 1d       	adc	r24, r10
    d378:	9b 1d       	adc	r25, r11
    d37a:	0e 94 64 72 	call	0xe4c8	; 0xe4c8 <__udivmodsi4>
    d37e:	21 50       	subi	r18, 0x01	; 1
    d380:	31 09       	sbc	r19, r1
    d382:	41 09       	sbc	r20, r1
    d384:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    d386:	83 2f       	mov	r24, r19
    d388:	8f 70       	andi	r24, 0x0F	; 15
    d38a:	12 95       	swap	r17
    d38c:	10 7f       	andi	r17, 0xF0	; 240
    d38e:	81 2b       	or	r24, r17
    d390:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    d392:	2e 83       	std	Y+6, r18	; 0x06

	return true;
    d394:	81 e0       	ldi	r24, 0x01	; 1
    d396:	01 c0       	rjmp	.+2      	; 0xd39a <usart_set_baudrate+0x1a6>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    d398:	80 e0       	ldi	r24, 0x00	; 0

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    d39a:	df 91       	pop	r29
    d39c:	cf 91       	pop	r28
    d39e:	1f 91       	pop	r17
    d3a0:	0f 91       	pop	r16
    d3a2:	ff 90       	pop	r15
    d3a4:	ef 90       	pop	r14
    d3a6:	df 90       	pop	r13
    d3a8:	cf 90       	pop	r12
    d3aa:	bf 90       	pop	r11
    d3ac:	af 90       	pop	r10
    d3ae:	9f 90       	pop	r9
    d3b0:	8f 90       	pop	r8
    d3b2:	08 95       	ret

0000d3b4 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    d3b4:	0f 93       	push	r16
    d3b6:	1f 93       	push	r17
    d3b8:	cf 93       	push	r28
    d3ba:	df 93       	push	r29
    d3bc:	ec 01       	movw	r28, r24
    d3be:	8b 01       	movw	r16, r22
	bool result;
	sysclk_enable_peripheral_clock(usart);
    d3c0:	52 de       	rcall	.-860    	; 0xd066 <sysclk_enable_peripheral_clock>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    d3c2:	8d 81       	ldd	r24, Y+5	; 0x05
    d3c4:	8f 73       	andi	r24, 0x3F	; 63
    d3c6:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    d3c8:	f8 01       	movw	r30, r16
    d3ca:	86 81       	ldd	r24, Z+6	; 0x06
    d3cc:	94 81       	ldd	r25, Z+4	; 0x04
    d3ce:	89 2b       	or	r24, r25
    d3d0:	90 85       	ldd	r25, Z+8	; 0x08
    d3d2:	99 23       	and	r25, r25
    d3d4:	11 f0       	breq	.+4      	; 0xd3da <usart_init_rs232+0x26>
    d3d6:	98 e0       	ldi	r25, 0x08	; 8
    d3d8:	01 c0       	rjmp	.+2      	; 0xd3dc <usart_init_rs232+0x28>
    d3da:	90 e0       	ldi	r25, 0x00	; 0
    d3dc:	89 2b       	or	r24, r25
    d3de:	8d 83       	std	Y+5, r24	; 0x05
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    d3e0:	f8 01       	movw	r30, r16
    d3e2:	40 81       	ld	r20, Z
    d3e4:	51 81       	ldd	r21, Z+1	; 0x01
    d3e6:	62 81       	ldd	r22, Z+2	; 0x02
    d3e8:	73 81       	ldd	r23, Z+3	; 0x03
    d3ea:	00 e0       	ldi	r16, 0x00	; 0
    d3ec:	16 e3       	ldi	r17, 0x36	; 54
    d3ee:	2e e6       	ldi	r18, 0x6E	; 110
    d3f0:	31 e0       	ldi	r19, 0x01	; 1
    d3f2:	ce 01       	movw	r24, r28
    d3f4:	ff de       	rcall	.-514    	; 0xd1f4 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    d3f6:	9c 81       	ldd	r25, Y+4	; 0x04
    d3f8:	98 60       	ori	r25, 0x08	; 8
    d3fa:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    d3fc:	9c 81       	ldd	r25, Y+4	; 0x04
    d3fe:	90 61       	ori	r25, 0x10	; 16
    d400:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    d402:	df 91       	pop	r29
    d404:	cf 91       	pop	r28
    d406:	1f 91       	pop	r17
    d408:	0f 91       	pop	r16
    d40a:	08 95       	ret

0000d40c <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    d40c:	90 91 18 25 	lds	r25, 0x2518
    d410:	81 11       	cpse	r24, r1
    d412:	13 c0       	rjmp	.+38     	; 0xd43a <udd_sleep_mode+0x2e>
    d414:	99 23       	and	r25, r25
    d416:	71 f0       	breq	.+28     	; 0xd434 <udd_sleep_mode+0x28>
    d418:	2f b7       	in	r18, 0x3f	; 63
    d41a:	f8 94       	cli
    d41c:	90 91 63 27 	lds	r25, 0x2763
    d420:	91 50       	subi	r25, 0x01	; 1
    d422:	05 c0       	rjmp	.+10     	; 0xd42e <udd_sleep_mode+0x22>
    d424:	2f b7       	in	r18, 0x3f	; 63
    d426:	f8 94       	cli
    d428:	90 91 63 27 	lds	r25, 0x2763
    d42c:	9f 5f       	subi	r25, 0xFF	; 255
    d42e:	90 93 63 27 	sts	0x2763, r25
    d432:	2f bf       	out	0x3f, r18	; 63
    d434:	80 93 18 25 	sts	0x2518, r24
    d438:	08 95       	ret
    d43a:	91 11       	cpse	r25, r1
    d43c:	fb cf       	rjmp	.-10     	; 0xd434 <udd_sleep_mode+0x28>
    d43e:	f2 cf       	rjmp	.-28     	; 0xd424 <udd_sleep_mode+0x18>

0000d440 <udd_ep_get_ctrl>:
    d440:	98 2f       	mov	r25, r24
    d442:	9f 70       	andi	r25, 0x0F	; 15
    d444:	28 2f       	mov	r18, r24
    d446:	33 27       	eor	r19, r19
    d448:	27 fd       	sbrc	r18, 7
    d44a:	30 95       	com	r19
    d44c:	22 27       	eor	r18, r18
    d44e:	33 0f       	add	r19, r19
    d450:	22 1f       	adc	r18, r18
    d452:	33 27       	eor	r19, r19
    d454:	29 0f       	add	r18, r25
    d456:	31 1d       	adc	r19, r1
    d458:	29 0f       	add	r18, r25
    d45a:	31 1d       	adc	r19, r1
    d45c:	93 e0       	ldi	r25, 0x03	; 3
    d45e:	22 0f       	add	r18, r18
    d460:	33 1f       	adc	r19, r19
    d462:	9a 95       	dec	r25
    d464:	e1 f7       	brne	.-8      	; 0xd45e <udd_ep_get_ctrl+0x1e>
    d466:	20 54       	subi	r18, 0x40	; 64
    d468:	3b 4d       	sbci	r19, 0xDB	; 219
    d46a:	c9 01       	movw	r24, r18
    d46c:	08 95       	ret

0000d46e <udd_ctrl_init>:
    d46e:	0f 93       	push	r16
    d470:	e8 ec       	ldi	r30, 0xC8	; 200
    d472:	f4 e0       	ldi	r31, 0x04	; 4
    d474:	80 81       	ld	r24, Z
    d476:	8f 7d       	andi	r24, 0xDF	; 223
    d478:	80 83       	st	Z, r24
    d47a:	80 81       	ld	r24, Z
    d47c:	8f 7d       	andi	r24, 0xDF	; 223
    d47e:	80 83       	st	Z, r24
    d480:	e8 ec       	ldi	r30, 0xC8	; 200
    d482:	f4 e2       	ldi	r31, 0x24	; 36
    d484:	02 e0       	ldi	r16, 0x02	; 2
    d486:	05 93       	las	Z, r16
    d488:	10 92 ca 24 	sts	0x24CA, r1
    d48c:	10 92 cb 24 	sts	0x24CB, r1
    d490:	00 e2       	ldi	r16, 0x20	; 32
    d492:	06 93       	lac	Z, r16
    d494:	00 e4       	ldi	r16, 0x40	; 64
    d496:	06 93       	lac	Z, r16
    d498:	e0 ec       	ldi	r30, 0xC0	; 192
    d49a:	f4 e2       	ldi	r31, 0x24	; 36
    d49c:	00 e2       	ldi	r16, 0x20	; 32
    d49e:	06 93       	lac	Z, r16
    d4a0:	00 e4       	ldi	r16, 0x40	; 64
    d4a2:	06 93       	lac	Z, r16
    d4a4:	10 92 76 27 	sts	0x2776, r1
    d4a8:	10 92 77 27 	sts	0x2777, r1
    d4ac:	10 92 78 27 	sts	0x2778, r1
    d4b0:	10 92 79 27 	sts	0x2779, r1
    d4b4:	10 92 74 27 	sts	0x2774, r1
    d4b8:	10 92 75 27 	sts	0x2775, r1
    d4bc:	10 92 d9 25 	sts	0x25D9, r1
    d4c0:	10 92 da 25 	sts	0x25DA, r1
    d4c4:	0f 91       	pop	r16
    d4c6:	08 95       	ret

0000d4c8 <udd_ctrl_stall_data>:
    d4c8:	0f 93       	push	r16
    d4ca:	85 e0       	ldi	r24, 0x05	; 5
    d4cc:	90 e0       	ldi	r25, 0x00	; 0
    d4ce:	80 93 d9 25 	sts	0x25D9, r24
    d4d2:	90 93 da 25 	sts	0x25DA, r25
    d4d6:	e9 ec       	ldi	r30, 0xC9	; 201
    d4d8:	f4 e2       	ldi	r31, 0x24	; 36
    d4da:	04 e0       	ldi	r16, 0x04	; 4
    d4dc:	05 93       	las	Z, r16
    d4de:	e1 ec       	ldi	r30, 0xC1	; 193
    d4e0:	f4 e2       	ldi	r31, 0x24	; 36
    d4e2:	04 e0       	ldi	r16, 0x04	; 4
    d4e4:	05 93       	las	Z, r16
    d4e6:	0f 91       	pop	r16
    d4e8:	08 95       	ret

0000d4ea <udd_ctrl_send_zlp_in>:
    d4ea:	0f 93       	push	r16
    d4ec:	83 e0       	ldi	r24, 0x03	; 3
    d4ee:	90 e0       	ldi	r25, 0x00	; 0
    d4f0:	80 93 d9 25 	sts	0x25D9, r24
    d4f4:	90 93 da 25 	sts	0x25DA, r25
    d4f8:	10 92 ca 24 	sts	0x24CA, r1
    d4fc:	10 92 cb 24 	sts	0x24CB, r1
    d500:	e8 ec       	ldi	r30, 0xC8	; 200
    d502:	f4 e2       	ldi	r31, 0x24	; 36
    d504:	02 e0       	ldi	r16, 0x02	; 2
    d506:	06 93       	lac	Z, r16
    d508:	0f 91       	pop	r16
    d50a:	08 95       	ret

0000d50c <udd_ctrl_endofrequest>:
    d50c:	e0 91 76 27 	lds	r30, 0x2776
    d510:	f0 91 77 27 	lds	r31, 0x2777
    d514:	30 97       	sbiw	r30, 0x00	; 0
    d516:	09 f0       	breq	.+2      	; 0xd51a <udd_ctrl_endofrequest+0xe>
    d518:	19 94       	eijmp
    d51a:	08 95       	ret

0000d51c <udd_ep_get_job>:
    d51c:	98 2f       	mov	r25, r24
    d51e:	9f 70       	andi	r25, 0x0F	; 15
    d520:	28 2f       	mov	r18, r24
    d522:	33 27       	eor	r19, r19
    d524:	27 fd       	sbrc	r18, 7
    d526:	30 95       	com	r19
    d528:	22 27       	eor	r18, r18
    d52a:	33 0f       	add	r19, r19
    d52c:	22 1f       	adc	r18, r18
    d52e:	33 27       	eor	r19, r19
    d530:	29 0f       	add	r18, r25
    d532:	31 1d       	adc	r19, r1
    d534:	29 0f       	add	r18, r25
    d536:	31 1d       	adc	r19, r1
    d538:	22 50       	subi	r18, 0x02	; 2
    d53a:	31 09       	sbc	r19, r1
    d53c:	89 e0       	ldi	r24, 0x09	; 9
    d53e:	82 9f       	mul	r24, r18
    d540:	a0 01       	movw	r20, r0
    d542:	83 9f       	mul	r24, r19
    d544:	50 0d       	add	r21, r0
    d546:	11 24       	eor	r1, r1
    d548:	4c 50       	subi	r20, 0x0C	; 12
    d54a:	5b 4d       	sbci	r21, 0xDB	; 219
    d54c:	ca 01       	movw	r24, r20
    d54e:	08 95       	ret

0000d550 <udd_ep_trans_complet>:
    d550:	bf 92       	push	r11
    d552:	cf 92       	push	r12
    d554:	df 92       	push	r13
    d556:	ef 92       	push	r14
    d558:	ff 92       	push	r15
    d55a:	0f 93       	push	r16
    d55c:	1f 93       	push	r17
    d55e:	cf 93       	push	r28
    d560:	df 93       	push	r29
    d562:	b8 2e       	mov	r11, r24
    d564:	db df       	rcall	.-74     	; 0xd51c <udd_ep_get_job>
    d566:	ec 01       	movw	r28, r24
    d568:	8b 2d       	mov	r24, r11
    d56a:	6a df       	rcall	.-300    	; 0xd440 <udd_ep_get_ctrl>
    d56c:	7c 01       	movw	r14, r24
    d56e:	dc 01       	movw	r26, r24
    d570:	11 96       	adiw	r26, 0x01	; 1
    d572:	ec 91       	ld	r30, X
    d574:	e7 70       	andi	r30, 0x07	; 7
    d576:	e1 50       	subi	r30, 0x01	; 1
    d578:	e7 30       	cpi	r30, 0x07	; 7
    d57a:	40 f4       	brcc	.+16     	; 0xd58c <udd_ep_trans_complet+0x3c>
    d57c:	f0 e0       	ldi	r31, 0x00	; 0
    d57e:	ee 0f       	add	r30, r30
    d580:	ff 1f       	adc	r31, r31
    d582:	e1 59       	subi	r30, 0x91	; 145
    d584:	fe 4d       	sbci	r31, 0xDE	; 222
    d586:	00 81       	ld	r16, Z
    d588:	11 81       	ldd	r17, Z+1	; 0x01
    d58a:	02 c0       	rjmp	.+4      	; 0xd590 <udd_ep_trans_complet+0x40>
    d58c:	08 e0       	ldi	r16, 0x08	; 8
    d58e:	10 e0       	ldi	r17, 0x00	; 0
    d590:	8d 81       	ldd	r24, Y+5	; 0x05
    d592:	9e 81       	ldd	r25, Y+6	; 0x06
    d594:	b7 fe       	sbrs	r11, 7
    d596:	4f c0       	rjmp	.+158    	; 0xd636 <udd_ep_trans_complet+0xe6>
    d598:	f7 01       	movw	r30, r14
    d59a:	26 81       	ldd	r18, Z+6	; 0x06
    d59c:	37 81       	ldd	r19, Z+7	; 0x07
    d59e:	28 0f       	add	r18, r24
    d5a0:	39 1f       	adc	r19, r25
    d5a2:	2d 83       	std	Y+5, r18	; 0x05
    d5a4:	3e 83       	std	Y+6, r19	; 0x06
    d5a6:	8b 81       	ldd	r24, Y+3	; 0x03
    d5a8:	9c 81       	ldd	r25, Y+4	; 0x04
    d5aa:	48 81       	ld	r20, Y
    d5ac:	28 17       	cp	r18, r24
    d5ae:	39 07       	cpc	r19, r25
    d5b0:	b1 f1       	breq	.+108    	; 0xd61e <udd_ep_trans_complet+0xce>
    d5b2:	bc 01       	movw	r22, r24
    d5b4:	62 1b       	sub	r22, r18
    d5b6:	73 0b       	sbc	r23, r19
    d5b8:	9b 01       	movw	r18, r22
    d5ba:	21 15       	cp	r18, r1
    d5bc:	74 e0       	ldi	r23, 0x04	; 4
    d5be:	37 07       	cpc	r19, r23
    d5c0:	38 f0       	brcs	.+14     	; 0xd5d0 <udd_ep_trans_complet+0x80>
    d5c2:	2f ef       	ldi	r18, 0xFF	; 255
    d5c4:	33 e0       	ldi	r19, 0x03	; 3
    d5c6:	c9 01       	movw	r24, r18
    d5c8:	b8 01       	movw	r22, r16
    d5ca:	57 d7       	rcall	.+3758   	; 0xe47a <__udivmodhi4>
    d5cc:	28 1b       	sub	r18, r24
    d5ce:	39 0b       	sbc	r19, r25
    d5d0:	41 ff       	sbrs	r20, 1
    d5d2:	0b c0       	rjmp	.+22     	; 0xd5ea <udd_ep_trans_complet+0x9a>
    d5d4:	c9 01       	movw	r24, r18
    d5d6:	b8 01       	movw	r22, r16
    d5d8:	50 d7       	rcall	.+3744   	; 0xe47a <__udivmodhi4>
    d5da:	41 e0       	ldi	r20, 0x01	; 1
    d5dc:	50 e0       	ldi	r21, 0x00	; 0
    d5de:	89 2b       	or	r24, r25
    d5e0:	11 f0       	breq	.+4      	; 0xd5e6 <udd_ep_trans_complet+0x96>
    d5e2:	40 e0       	ldi	r20, 0x00	; 0
    d5e4:	50 e0       	ldi	r21, 0x00	; 0
    d5e6:	ca 01       	movw	r24, r20
    d5e8:	02 c0       	rjmp	.+4      	; 0xd5ee <udd_ep_trans_complet+0x9e>
    d5ea:	80 e0       	ldi	r24, 0x00	; 0
    d5ec:	90 e0       	ldi	r25, 0x00	; 0
    d5ee:	98 81       	ld	r25, Y
    d5f0:	80 fb       	bst	r24, 0
    d5f2:	91 f9       	bld	r25, 1
    d5f4:	98 83       	st	Y, r25
    d5f6:	d7 01       	movw	r26, r14
    d5f8:	16 96       	adiw	r26, 0x06	; 6
    d5fa:	1d 92       	st	X+, r1
    d5fc:	1c 92       	st	X, r1
    d5fe:	17 97       	sbiw	r26, 0x07	; 7
    d600:	12 96       	adiw	r26, 0x02	; 2
    d602:	2d 93       	st	X+, r18
    d604:	3c 93       	st	X, r19
    d606:	13 97       	sbiw	r26, 0x03	; 3
    d608:	89 81       	ldd	r24, Y+1	; 0x01
    d60a:	9a 81       	ldd	r25, Y+2	; 0x02
    d60c:	2d 81       	ldd	r18, Y+5	; 0x05
    d60e:	3e 81       	ldd	r19, Y+6	; 0x06
    d610:	82 0f       	add	r24, r18
    d612:	93 1f       	adc	r25, r19
    d614:	14 96       	adiw	r26, 0x04	; 4
    d616:	8d 93       	st	X+, r24
    d618:	9c 93       	st	X, r25
    d61a:	15 97       	sbiw	r26, 0x05	; 5
    d61c:	08 c0       	rjmp	.+16     	; 0xd62e <udd_ep_trans_complet+0xde>
    d61e:	41 ff       	sbrs	r20, 1
    d620:	71 c0       	rjmp	.+226    	; 0xd704 <udd_ep_trans_complet+0x1b4>
    d622:	4d 7f       	andi	r20, 0xFD	; 253
    d624:	48 83       	st	Y, r20
    d626:	16 82       	std	Z+6, r1	; 0x06
    d628:	17 82       	std	Z+7, r1	; 0x07
    d62a:	12 82       	std	Z+2, r1	; 0x02
    d62c:	13 82       	std	Z+3, r1	; 0x03
    d62e:	f7 01       	movw	r30, r14
    d630:	02 e0       	ldi	r16, 0x02	; 2
    d632:	06 93       	lac	Z, r16
    d634:	7f c0       	rjmp	.+254    	; 0xd734 <udd_ep_trans_complet+0x1e4>
    d636:	d7 01       	movw	r26, r14
    d638:	12 96       	adiw	r26, 0x02	; 2
    d63a:	cd 90       	ld	r12, X+
    d63c:	dc 90       	ld	r13, X
    d63e:	13 97       	sbiw	r26, 0x03	; 3
    d640:	28 81       	ld	r18, Y
    d642:	22 ff       	sbrs	r18, 2
    d644:	13 c0       	rjmp	.+38     	; 0xd66c <udd_ep_trans_complet+0x11c>
    d646:	29 81       	ldd	r18, Y+1	; 0x01
    d648:	3a 81       	ldd	r19, Y+2	; 0x02
    d64a:	28 0f       	add	r18, r24
    d64c:	39 1f       	adc	r19, r25
    d64e:	8b 81       	ldd	r24, Y+3	; 0x03
    d650:	9c 81       	ldd	r25, Y+4	; 0x04
    d652:	b8 01       	movw	r22, r16
    d654:	12 d7       	rcall	.+3620   	; 0xe47a <__udivmodhi4>
    d656:	b0 e4       	ldi	r27, 0x40	; 64
    d658:	bb 9e       	mul	r11, r27
    d65a:	f0 01       	movw	r30, r0
    d65c:	11 24       	eor	r1, r1
    d65e:	e7 52       	subi	r30, 0x27	; 39
    d660:	fb 4d       	sbci	r31, 0xDB	; 219
    d662:	ac 01       	movw	r20, r24
    d664:	bf 01       	movw	r22, r30
    d666:	c9 01       	movw	r24, r18
    d668:	0e 94 4c 74 	call	0xe898	; 0xe898 <memcpy>
    d66c:	8d 81       	ldd	r24, Y+5	; 0x05
    d66e:	9e 81       	ldd	r25, Y+6	; 0x06
    d670:	8c 0d       	add	r24, r12
    d672:	9d 1d       	adc	r25, r13
    d674:	8d 83       	std	Y+5, r24	; 0x05
    d676:	9e 83       	std	Y+6, r25	; 0x06
    d678:	2b 81       	ldd	r18, Y+3	; 0x03
    d67a:	3c 81       	ldd	r19, Y+4	; 0x04
    d67c:	28 17       	cp	r18, r24
    d67e:	39 07       	cpc	r19, r25
    d680:	10 f4       	brcc	.+4      	; 0xd686 <udd_ep_trans_complet+0x136>
    d682:	2d 83       	std	Y+5, r18	; 0x05
    d684:	3e 83       	std	Y+6, r19	; 0x06
    d686:	f7 01       	movw	r30, r14
    d688:	86 81       	ldd	r24, Z+6	; 0x06
    d68a:	97 81       	ldd	r25, Z+7	; 0x07
    d68c:	c8 16       	cp	r12, r24
    d68e:	d9 06       	cpc	r13, r25
    d690:	c9 f5       	brne	.+114    	; 0xd704 <udd_ep_trans_complet+0x1b4>
    d692:	8d 81       	ldd	r24, Y+5	; 0x05
    d694:	9e 81       	ldd	r25, Y+6	; 0x06
    d696:	82 17       	cp	r24, r18
    d698:	93 07       	cpc	r25, r19
    d69a:	a1 f1       	breq	.+104    	; 0xd704 <udd_ep_trans_complet+0x1b4>
    d69c:	28 1b       	sub	r18, r24
    d69e:	39 0b       	sbc	r19, r25
    d6a0:	21 15       	cp	r18, r1
    d6a2:	f4 e0       	ldi	r31, 0x04	; 4
    d6a4:	3f 07       	cpc	r19, r31
    d6a6:	10 f0       	brcs	.+4      	; 0xd6ac <udd_ep_trans_complet+0x15c>
    d6a8:	2f ef       	ldi	r18, 0xFF	; 255
    d6aa:	33 e0       	ldi	r19, 0x03	; 3
    d6ac:	c9 01       	movw	r24, r18
    d6ae:	b8 01       	movw	r22, r16
    d6b0:	e4 d6       	rcall	.+3528   	; 0xe47a <__udivmodhi4>
    d6b2:	28 1b       	sub	r18, r24
    d6b4:	39 0b       	sbc	r19, r25
    d6b6:	d7 01       	movw	r26, r14
    d6b8:	12 96       	adiw	r26, 0x02	; 2
    d6ba:	1d 92       	st	X+, r1
    d6bc:	1c 92       	st	X, r1
    d6be:	13 97       	sbiw	r26, 0x03	; 3
    d6c0:	20 17       	cp	r18, r16
    d6c2:	31 07       	cpc	r19, r17
    d6c4:	78 f4       	brcc	.+30     	; 0xd6e4 <udd_ep_trans_complet+0x194>
    d6c6:	88 81       	ld	r24, Y
    d6c8:	84 60       	ori	r24, 0x04	; 4
    d6ca:	88 83       	st	Y, r24
    d6cc:	b0 e4       	ldi	r27, 0x40	; 64
    d6ce:	bb 9e       	mul	r11, r27
    d6d0:	c0 01       	movw	r24, r0
    d6d2:	11 24       	eor	r1, r1
    d6d4:	87 52       	subi	r24, 0x27	; 39
    d6d6:	9b 4d       	sbci	r25, 0xDB	; 219
    d6d8:	f7 01       	movw	r30, r14
    d6da:	84 83       	std	Z+4, r24	; 0x04
    d6dc:	95 83       	std	Z+5, r25	; 0x05
    d6de:	06 83       	std	Z+6, r16	; 0x06
    d6e0:	17 83       	std	Z+7, r17	; 0x07
    d6e2:	a5 cf       	rjmp	.-182    	; 0xd62e <udd_ep_trans_complet+0xde>
    d6e4:	89 81       	ldd	r24, Y+1	; 0x01
    d6e6:	9a 81       	ldd	r25, Y+2	; 0x02
    d6e8:	4d 81       	ldd	r20, Y+5	; 0x05
    d6ea:	5e 81       	ldd	r21, Y+6	; 0x06
    d6ec:	84 0f       	add	r24, r20
    d6ee:	95 1f       	adc	r25, r21
    d6f0:	d7 01       	movw	r26, r14
    d6f2:	14 96       	adiw	r26, 0x04	; 4
    d6f4:	8d 93       	st	X+, r24
    d6f6:	9c 93       	st	X, r25
    d6f8:	15 97       	sbiw	r26, 0x05	; 5
    d6fa:	16 96       	adiw	r26, 0x06	; 6
    d6fc:	2d 93       	st	X+, r18
    d6fe:	3c 93       	st	X, r19
    d700:	17 97       	sbiw	r26, 0x07	; 7
    d702:	95 cf       	rjmp	.-214    	; 0xd62e <udd_ep_trans_complet+0xde>
    d704:	88 81       	ld	r24, Y
    d706:	80 ff       	sbrs	r24, 0
    d708:	15 c0       	rjmp	.+42     	; 0xd734 <udd_ep_trans_complet+0x1e4>
    d70a:	8e 7f       	andi	r24, 0xFE	; 254
    d70c:	88 83       	st	Y, r24
    d70e:	ef 81       	ldd	r30, Y+7	; 0x07
    d710:	f8 85       	ldd	r31, Y+8	; 0x08
    d712:	30 97       	sbiw	r30, 0x00	; 0
    d714:	79 f0       	breq	.+30     	; 0xd734 <udd_ep_trans_complet+0x1e4>
    d716:	6d 81       	ldd	r22, Y+5	; 0x05
    d718:	7e 81       	ldd	r23, Y+6	; 0x06
    d71a:	4b 2d       	mov	r20, r11
    d71c:	80 e0       	ldi	r24, 0x00	; 0
    d71e:	90 e0       	ldi	r25, 0x00	; 0
    d720:	df 91       	pop	r29
    d722:	cf 91       	pop	r28
    d724:	1f 91       	pop	r17
    d726:	0f 91       	pop	r16
    d728:	ff 90       	pop	r15
    d72a:	ef 90       	pop	r14
    d72c:	df 90       	pop	r13
    d72e:	cf 90       	pop	r12
    d730:	bf 90       	pop	r11
    d732:	19 94       	eijmp
    d734:	df 91       	pop	r29
    d736:	cf 91       	pop	r28
    d738:	1f 91       	pop	r17
    d73a:	0f 91       	pop	r16
    d73c:	ff 90       	pop	r15
    d73e:	ef 90       	pop	r14
    d740:	df 90       	pop	r13
    d742:	cf 90       	pop	r12
    d744:	bf 90       	pop	r11
    d746:	08 95       	ret

0000d748 <udd_ctrl_in_sent>:
    d748:	0f 93       	push	r16
    d74a:	cf 93       	push	r28
    d74c:	df 93       	push	r29
    d74e:	80 91 d9 25 	lds	r24, 0x25D9
    d752:	90 91 da 25 	lds	r25, 0x25DA
    d756:	03 97       	sbiw	r24, 0x03	; 3
    d758:	29 f4       	brne	.+10     	; 0xd764 <udd_ctrl_in_sent+0x1c>
    d75a:	d8 de       	rcall	.-592    	; 0xd50c <udd_ctrl_endofrequest>
    d75c:	df 91       	pop	r29
    d75e:	cf 91       	pop	r28
    d760:	0f 91       	pop	r16
    d762:	85 ce       	rjmp	.-758    	; 0xd46e <udd_ctrl_init>
    d764:	20 91 dd 25 	lds	r18, 0x25DD
    d768:	30 91 de 25 	lds	r19, 0x25DE
    d76c:	c0 91 74 27 	lds	r28, 0x2774
    d770:	d0 91 75 27 	lds	r29, 0x2775
    d774:	c2 1b       	sub	r28, r18
    d776:	d3 0b       	sbc	r29, r19
    d778:	79 f5       	brne	.+94     	; 0xd7d8 <udd_ctrl_in_sent+0x90>
    d77a:	80 91 db 25 	lds	r24, 0x25DB
    d77e:	90 91 dc 25 	lds	r25, 0x25DC
    d782:	82 0f       	add	r24, r18
    d784:	93 1f       	adc	r25, r19
    d786:	80 93 db 25 	sts	0x25DB, r24
    d78a:	90 93 dc 25 	sts	0x25DC, r25
    d78e:	20 91 70 27 	lds	r18, 0x2770
    d792:	30 91 71 27 	lds	r19, 0x2771
    d796:	28 17       	cp	r18, r24
    d798:	39 07       	cpc	r19, r25
    d79a:	21 f0       	breq	.+8      	; 0xd7a4 <udd_ctrl_in_sent+0x5c>
    d79c:	80 91 df 25 	lds	r24, 0x25DF
    d7a0:	88 23       	and	r24, r24
    d7a2:	49 f0       	breq	.+18     	; 0xd7b6 <udd_ctrl_in_sent+0x6e>
    d7a4:	84 e0       	ldi	r24, 0x04	; 4
    d7a6:	90 e0       	ldi	r25, 0x00	; 0
    d7a8:	80 93 d9 25 	sts	0x25D9, r24
    d7ac:	90 93 da 25 	sts	0x25DA, r25
    d7b0:	e0 ec       	ldi	r30, 0xC0	; 192
    d7b2:	f4 e2       	ldi	r31, 0x24	; 36
    d7b4:	36 c0       	rjmp	.+108    	; 0xd822 <udd_ctrl_in_sent+0xda>
    d7b6:	e0 91 78 27 	lds	r30, 0x2778
    d7ba:	f0 91 79 27 	lds	r31, 0x2779
    d7be:	30 97       	sbiw	r30, 0x00	; 0
    d7c0:	99 f0       	breq	.+38     	; 0xd7e8 <udd_ctrl_in_sent+0xa0>
    d7c2:	19 95       	eicall
    d7c4:	88 23       	and	r24, r24
    d7c6:	81 f0       	breq	.+32     	; 0xd7e8 <udd_ctrl_in_sent+0xa0>
    d7c8:	10 92 dd 25 	sts	0x25DD, r1
    d7cc:	10 92 de 25 	sts	0x25DE, r1
    d7d0:	c0 91 74 27 	lds	r28, 0x2774
    d7d4:	d0 91 75 27 	lds	r29, 0x2775
    d7d8:	c0 34       	cpi	r28, 0x40	; 64
    d7da:	d1 05       	cpc	r29, r1
    d7dc:	28 f0       	brcs	.+10     	; 0xd7e8 <udd_ctrl_in_sent+0xa0>
    d7de:	10 92 df 25 	sts	0x25DF, r1
    d7e2:	c0 e4       	ldi	r28, 0x40	; 64
    d7e4:	d0 e0       	ldi	r29, 0x00	; 0
    d7e6:	03 c0       	rjmp	.+6      	; 0xd7ee <udd_ctrl_in_sent+0xa6>
    d7e8:	81 e0       	ldi	r24, 0x01	; 1
    d7ea:	80 93 df 25 	sts	0x25DF, r24
    d7ee:	c0 93 ca 24 	sts	0x24CA, r28
    d7f2:	d0 93 cb 24 	sts	0x24CB, r29
    d7f6:	20 91 dd 25 	lds	r18, 0x25DD
    d7fa:	30 91 de 25 	lds	r19, 0x25DE
    d7fe:	80 91 72 27 	lds	r24, 0x2772
    d802:	90 91 73 27 	lds	r25, 0x2773
    d806:	82 0f       	add	r24, r18
    d808:	93 1f       	adc	r25, r19
    d80a:	80 93 cc 24 	sts	0x24CC, r24
    d80e:	90 93 cd 24 	sts	0x24CD, r25
    d812:	c2 0f       	add	r28, r18
    d814:	d3 1f       	adc	r29, r19
    d816:	c0 93 dd 25 	sts	0x25DD, r28
    d81a:	d0 93 de 25 	sts	0x25DE, r29
    d81e:	e8 ec       	ldi	r30, 0xC8	; 200
    d820:	f4 e2       	ldi	r31, 0x24	; 36
    d822:	02 e0       	ldi	r16, 0x02	; 2
    d824:	06 93       	lac	Z, r16
    d826:	df 91       	pop	r29
    d828:	cf 91       	pop	r28
    d82a:	0f 91       	pop	r16
    d82c:	08 95       	ret

0000d82e <udd_ctrl_interrupt_tc_setup>:
    d82e:	0f 93       	push	r16
    d830:	80 91 cc 04 	lds	r24, 0x04CC
    d834:	80 ff       	sbrs	r24, 0
    d836:	6b c0       	rjmp	.+214    	; 0xd90e <udd_ctrl_interrupt_tc_setup+0xe0>
    d838:	21 e0       	ldi	r18, 0x01	; 1
    d83a:	20 93 cc 04 	sts	0x04CC, r18
    d83e:	80 ec       	ldi	r24, 0xC0	; 192
    d840:	94 e2       	ldi	r25, 0x24	; 36
    d842:	fc 01       	movw	r30, r24
    d844:	00 e8       	ldi	r16, 0x80	; 128
    d846:	06 93       	lac	Z, r16
    d848:	e8 ec       	ldi	r30, 0xC8	; 200
    d84a:	f4 e2       	ldi	r31, 0x24	; 36
    d84c:	00 e8       	ldi	r16, 0x80	; 128
    d84e:	06 93       	lac	Z, r16
    d850:	20 93 ca 04 	sts	0x04CA, r18
    d854:	fc 01       	movw	r30, r24
    d856:	00 e1       	ldi	r16, 0x10	; 16
    d858:	06 93       	lac	Z, r16
    d85a:	80 91 d9 25 	lds	r24, 0x25D9
    d85e:	90 91 da 25 	lds	r25, 0x25DA
    d862:	00 97       	sbiw	r24, 0x00	; 0
    d864:	29 f0       	breq	.+10     	; 0xd870 <udd_ctrl_interrupt_tc_setup+0x42>
    d866:	03 97       	sbiw	r24, 0x03	; 3
    d868:	02 97       	sbiw	r24, 0x02	; 2
    d86a:	08 f4       	brcc	.+2      	; 0xd86e <udd_ctrl_interrupt_tc_setup+0x40>
    d86c:	4f de       	rcall	.-866    	; 0xd50c <udd_ctrl_endofrequest>
    d86e:	ff dd       	rcall	.-1026   	; 0xd46e <udd_ctrl_init>
    d870:	80 91 c2 24 	lds	r24, 0x24C2
    d874:	90 91 c3 24 	lds	r25, 0x24C3
    d878:	08 97       	sbiw	r24, 0x08	; 8
    d87a:	09 f0       	breq	.+2      	; 0xd87e <udd_ctrl_interrupt_tc_setup+0x50>
    d87c:	4a c0       	rjmp	.+148    	; 0xd912 <udd_ctrl_interrupt_tc_setup+0xe4>
    d87e:	88 e0       	ldi	r24, 0x08	; 8
    d880:	e9 e9       	ldi	r30, 0x99	; 153
    d882:	f5 e2       	ldi	r31, 0x25	; 37
    d884:	aa e6       	ldi	r26, 0x6A	; 106
    d886:	b7 e2       	ldi	r27, 0x27	; 39
    d888:	01 90       	ld	r0, Z+
    d88a:	0d 92       	st	X+, r0
    d88c:	8a 95       	dec	r24
    d88e:	e1 f7       	brne	.-8      	; 0xd888 <udd_ctrl_interrupt_tc_setup+0x5a>
    d890:	80 91 c8 04 	lds	r24, 0x04C8
    d894:	80 62       	ori	r24, 0x20	; 32
    d896:	80 93 c8 04 	sts	0x04C8, r24
    d89a:	80 91 c8 04 	lds	r24, 0x04C8
    d89e:	80 62       	ori	r24, 0x20	; 32
    d8a0:	80 93 c8 04 	sts	0x04C8, r24
    d8a4:	0e 94 73 5c 	call	0xb8e6	; 0xb8e6 <udc_process_setup>
    d8a8:	81 11       	cpse	r24, r1
    d8aa:	02 c0       	rjmp	.+4      	; 0xd8b0 <udd_ctrl_interrupt_tc_setup+0x82>
    d8ac:	0d de       	rcall	.-998    	; 0xd4c8 <udd_ctrl_stall_data>
    d8ae:	31 c0       	rjmp	.+98     	; 0xd912 <udd_ctrl_interrupt_tc_setup+0xe4>
    d8b0:	80 91 6a 27 	lds	r24, 0x276A
    d8b4:	87 ff       	sbrs	r24, 7
    d8b6:	10 c0       	rjmp	.+32     	; 0xd8d8 <udd_ctrl_interrupt_tc_setup+0xaa>
    d8b8:	10 92 db 25 	sts	0x25DB, r1
    d8bc:	10 92 dc 25 	sts	0x25DC, r1
    d8c0:	10 92 dd 25 	sts	0x25DD, r1
    d8c4:	10 92 de 25 	sts	0x25DE, r1
    d8c8:	82 e0       	ldi	r24, 0x02	; 2
    d8ca:	90 e0       	ldi	r25, 0x00	; 0
    d8cc:	80 93 d9 25 	sts	0x25D9, r24
    d8d0:	90 93 da 25 	sts	0x25DA, r25
    d8d4:	39 df       	rcall	.-398    	; 0xd748 <udd_ctrl_in_sent>
    d8d6:	1d c0       	rjmp	.+58     	; 0xd912 <udd_ctrl_interrupt_tc_setup+0xe4>
    d8d8:	80 91 70 27 	lds	r24, 0x2770
    d8dc:	90 91 71 27 	lds	r25, 0x2771
    d8e0:	89 2b       	or	r24, r25
    d8e2:	11 f4       	brne	.+4      	; 0xd8e8 <udd_ctrl_interrupt_tc_setup+0xba>
    d8e4:	02 de       	rcall	.-1020   	; 0xd4ea <udd_ctrl_send_zlp_in>
    d8e6:	15 c0       	rjmp	.+42     	; 0xd912 <udd_ctrl_interrupt_tc_setup+0xe4>
    d8e8:	10 92 db 25 	sts	0x25DB, r1
    d8ec:	10 92 dc 25 	sts	0x25DC, r1
    d8f0:	10 92 dd 25 	sts	0x25DD, r1
    d8f4:	10 92 de 25 	sts	0x25DE, r1
    d8f8:	81 e0       	ldi	r24, 0x01	; 1
    d8fa:	90 e0       	ldi	r25, 0x00	; 0
    d8fc:	80 93 d9 25 	sts	0x25D9, r24
    d900:	90 93 da 25 	sts	0x25DA, r25
    d904:	e0 ec       	ldi	r30, 0xC0	; 192
    d906:	f4 e2       	ldi	r31, 0x24	; 36
    d908:	02 e0       	ldi	r16, 0x02	; 2
    d90a:	06 93       	lac	Z, r16
    d90c:	02 c0       	rjmp	.+4      	; 0xd912 <udd_ctrl_interrupt_tc_setup+0xe4>
    d90e:	80 e0       	ldi	r24, 0x00	; 0
    d910:	01 c0       	rjmp	.+2      	; 0xd914 <udd_ctrl_interrupt_tc_setup+0xe6>
    d912:	81 e0       	ldi	r24, 0x01	; 1
    d914:	0f 91       	pop	r16
    d916:	08 95       	ret

0000d918 <udd_disable>:
    d918:	cf 93       	push	r28
    d91a:	cf b7       	in	r28, 0x3f	; 63
    d91c:	f8 94       	cli
    d91e:	e1 ec       	ldi	r30, 0xC1	; 193
    d920:	f4 e0       	ldi	r31, 0x04	; 4
    d922:	80 81       	ld	r24, Z
    d924:	8e 7f       	andi	r24, 0xFE	; 254
    d926:	80 83       	st	Z, r24
    d928:	10 92 c0 04 	sts	0x04C0, r1
    d92c:	10 82       	st	Z, r1
    d92e:	0e 94 36 5b 	call	0xb66c	; 0xb66c <sysclk_disable_usb>
    d932:	80 e0       	ldi	r24, 0x00	; 0
    d934:	6b dd       	rcall	.-1322   	; 0xd40c <udd_sleep_mode>
    d936:	9f b7       	in	r25, 0x3f	; 63
    d938:	f8 94       	cli
    d93a:	e7 e6       	ldi	r30, 0x67	; 103
    d93c:	f7 e2       	ldi	r31, 0x27	; 39
    d93e:	80 81       	ld	r24, Z
    d940:	81 50       	subi	r24, 0x01	; 1
    d942:	80 83       	st	Z, r24
    d944:	9f bf       	out	0x3f, r25	; 63
    d946:	cf bf       	out	0x3f, r28	; 63
    d948:	cf 91       	pop	r28
    d94a:	08 95       	ret

0000d94c <udd_attach>:
    d94c:	cf 93       	push	r28
    d94e:	cf b7       	in	r28, 0x3f	; 63
    d950:	f8 94       	cli
    d952:	81 e0       	ldi	r24, 0x01	; 1
    d954:	5b dd       	rcall	.-1354   	; 0xd40c <udd_sleep_mode>
    d956:	ea ec       	ldi	r30, 0xCA	; 202
    d958:	f4 e0       	ldi	r31, 0x04	; 4
    d95a:	80 e4       	ldi	r24, 0x40	; 64
    d95c:	80 83       	st	Z, r24
    d95e:	80 e2       	ldi	r24, 0x20	; 32
    d960:	80 83       	st	Z, r24
    d962:	e1 ec       	ldi	r30, 0xC1	; 193
    d964:	f4 e0       	ldi	r31, 0x04	; 4
    d966:	80 81       	ld	r24, Z
    d968:	81 60       	ori	r24, 0x01	; 1
    d96a:	80 83       	st	Z, r24
    d96c:	a9 ec       	ldi	r26, 0xC9	; 201
    d96e:	b4 e0       	ldi	r27, 0x04	; 4
    d970:	8c 91       	ld	r24, X
    d972:	82 60       	ori	r24, 0x02	; 2
    d974:	8c 93       	st	X, r24
    d976:	e8 ec       	ldi	r30, 0xC8	; 200
    d978:	f4 e0       	ldi	r31, 0x04	; 4
    d97a:	80 81       	ld	r24, Z
    d97c:	80 64       	ori	r24, 0x40	; 64
    d97e:	80 83       	st	Z, r24
    d980:	8c 91       	ld	r24, X
    d982:	81 60       	ori	r24, 0x01	; 1
    d984:	8c 93       	st	X, r24
    d986:	80 81       	ld	r24, Z
    d988:	80 68       	ori	r24, 0x80	; 128
    d98a:	80 83       	st	Z, r24
    d98c:	cf bf       	out	0x3f, r28	; 63
    d98e:	cf 91       	pop	r28
    d990:	08 95       	ret

0000d992 <udd_enable>:
    d992:	cf 93       	push	r28
    d994:	10 92 60 00 	sts	0x0060, r1
    d998:	80 e3       	ldi	r24, 0x30	; 48
    d99a:	0e 94 1b 5b 	call	0xb636	; 0xb636 <sysclk_enable_usb>
    d99e:	80 91 c0 04 	lds	r24, 0x04C0
    d9a2:	80 64       	ori	r24, 0x40	; 64
    d9a4:	80 93 c0 04 	sts	0x04C0, r24
    d9a8:	81 e0       	ldi	r24, 0x01	; 1
    d9aa:	80 93 60 00 	sts	0x0060, r24
    d9ae:	cf b7       	in	r28, 0x3f	; 63
    d9b0:	f8 94       	cli
    d9b2:	10 92 c1 24 	sts	0x24C1, r1
    d9b6:	10 92 c9 24 	sts	0x24C9, r1
    d9ba:	10 92 d1 24 	sts	0x24D1, r1
    d9be:	10 92 d9 24 	sts	0x24D9, r1
    d9c2:	10 92 e1 24 	sts	0x24E1, r1
    d9c6:	10 92 e9 24 	sts	0x24E9, r1
    d9ca:	80 91 f4 24 	lds	r24, 0x24F4
    d9ce:	8e 7f       	andi	r24, 0xFE	; 254
    d9d0:	80 93 f4 24 	sts	0x24F4, r24
    d9d4:	80 91 fd 24 	lds	r24, 0x24FD
    d9d8:	8e 7f       	andi	r24, 0xFE	; 254
    d9da:	80 93 fd 24 	sts	0x24FD, r24
    d9de:	80 91 06 25 	lds	r24, 0x2506
    d9e2:	8e 7f       	andi	r24, 0xFE	; 254
    d9e4:	80 93 06 25 	sts	0x2506, r24
    d9e8:	80 91 0f 25 	lds	r24, 0x250F
    d9ec:	8e 7f       	andi	r24, 0xFE	; 254
    d9ee:	80 93 0f 25 	sts	0x250F, r24
    d9f2:	6a e1       	ldi	r22, 0x1A	; 26
    d9f4:	70 e0       	ldi	r23, 0x00	; 0
    d9f6:	82 e0       	ldi	r24, 0x02	; 2
    d9f8:	0e 94 44 5f 	call	0xbe88	; 0xbe88 <nvm_read_byte>
    d9fc:	8f 3f       	cpi	r24, 0xFF	; 255
    d9fe:	09 f0       	breq	.+2      	; 0xda02 <udd_enable+0x70>
    da00:	01 c0       	rjmp	.+2      	; 0xda04 <udd_enable+0x72>
    da02:	8f e1       	ldi	r24, 0x1F	; 31
    da04:	80 93 fa 04 	sts	0x04FA, r24
    da08:	6b e1       	ldi	r22, 0x1B	; 27
    da0a:	70 e0       	ldi	r23, 0x00	; 0
    da0c:	82 e0       	ldi	r24, 0x02	; 2
    da0e:	0e 94 44 5f 	call	0xbe88	; 0xbe88 <nvm_read_byte>
    da12:	8f 3f       	cpi	r24, 0xFF	; 255
    da14:	09 f0       	breq	.+2      	; 0xda18 <udd_enable+0x86>
    da16:	01 c0       	rjmp	.+2      	; 0xda1a <udd_enable+0x88>
    da18:	8f e1       	ldi	r24, 0x1F	; 31
    da1a:	80 93 fb 04 	sts	0x04FB, r24
    da1e:	80 91 c0 04 	lds	r24, 0x04C0
    da22:	82 60       	ori	r24, 0x02	; 2
    da24:	80 93 c0 04 	sts	0x04C0, r24
    da28:	80 91 c0 04 	lds	r24, 0x04C0
    da2c:	80 68       	ori	r24, 0x80	; 128
    da2e:	80 93 c0 04 	sts	0x04C0, r24
    da32:	80 91 c0 04 	lds	r24, 0x04C0
    da36:	80 61       	ori	r24, 0x10	; 16
    da38:	80 93 c0 04 	sts	0x04C0, r24
    da3c:	80 ec       	ldi	r24, 0xC0	; 192
    da3e:	94 e2       	ldi	r25, 0x24	; 36
    da40:	80 93 c6 04 	sts	0x04C6, r24
    da44:	90 93 c7 04 	sts	0x04C7, r25
    da48:	80 91 c0 04 	lds	r24, 0x04C0
    da4c:	80 62       	ori	r24, 0x20	; 32
    da4e:	80 93 c0 04 	sts	0x04C0, r24
    da52:	8f ef       	ldi	r24, 0xFF	; 255
    da54:	80 93 c5 04 	sts	0x04C5, r24
    da58:	80 91 c8 04 	lds	r24, 0x04C8
    da5c:	81 60       	ori	r24, 0x01	; 1
    da5e:	80 93 c8 04 	sts	0x04C8, r24
    da62:	10 92 18 25 	sts	0x2518, r1
    da66:	9f b7       	in	r25, 0x3f	; 63
    da68:	f8 94       	cli
    da6a:	80 91 67 27 	lds	r24, 0x2767
    da6e:	8f 5f       	subi	r24, 0xFF	; 255
    da70:	80 93 67 27 	sts	0x2767, r24
    da74:	9f bf       	out	0x3f, r25	; 63
    da76:	6a df       	rcall	.-300    	; 0xd94c <udd_attach>
    da78:	cf bf       	out	0x3f, r28	; 63
    da7a:	cf 91       	pop	r28
    da7c:	08 95       	ret

0000da7e <udd_detach>:
    da7e:	e1 ec       	ldi	r30, 0xC1	; 193
    da80:	f4 e0       	ldi	r31, 0x04	; 4
    da82:	80 81       	ld	r24, Z
    da84:	8e 7f       	andi	r24, 0xFE	; 254
    da86:	80 83       	st	Z, r24
    da88:	08 95       	ret

0000da8a <udd_is_high_speed>:
    da8a:	80 e0       	ldi	r24, 0x00	; 0
    da8c:	08 95       	ret

0000da8e <udd_set_address>:
    da8e:	80 93 c3 04 	sts	0x04C3, r24
    da92:	08 95       	ret

0000da94 <udd_getaddress>:
    da94:	80 91 c3 04 	lds	r24, 0x04C3
    da98:	08 95       	ret

0000da9a <udd_get_frame_number>:
    da9a:	20 91 f0 24 	lds	r18, 0x24F0
    da9e:	30 91 f1 24 	lds	r19, 0x24F1
    daa2:	c9 01       	movw	r24, r18
    daa4:	08 95       	ret

0000daa6 <udd_get_micro_frame_number>:
    daa6:	80 e0       	ldi	r24, 0x00	; 0
    daa8:	90 e0       	ldi	r25, 0x00	; 0
    daaa:	08 95       	ret

0000daac <udd_set_setup_payload>:
    daac:	80 93 72 27 	sts	0x2772, r24
    dab0:	90 93 73 27 	sts	0x2773, r25
    dab4:	60 93 74 27 	sts	0x2774, r22
    dab8:	70 93 75 27 	sts	0x2775, r23
    dabc:	08 95       	ret

0000dabe <udd_ep_alloc>:
    dabe:	0f 93       	push	r16
    dac0:	1f 93       	push	r17
    dac2:	cf 93       	push	r28
    dac4:	df 93       	push	r29
    dac6:	1f 92       	push	r1
    dac8:	cd b7       	in	r28, 0x3d	; 61
    daca:	de b7       	in	r29, 0x3e	; 62
    dacc:	8a 01       	movw	r16, r20
    dace:	69 83       	std	Y+1, r22	; 0x01
    dad0:	b7 dc       	rcall	.-1682   	; 0xd440 <udd_ep_get_ctrl>
    dad2:	fc 01       	movw	r30, r24
    dad4:	81 81       	ldd	r24, Z+1	; 0x01
    dad6:	80 7c       	andi	r24, 0xC0	; 192
    dad8:	69 81       	ldd	r22, Y+1	; 0x01
    dada:	81 11       	cpse	r24, r1
    dadc:	4d c0       	rjmp	.+154    	; 0xdb78 <udd_ep_alloc+0xba>
    dade:	63 70       	andi	r22, 0x03	; 3
    dae0:	61 30       	cpi	r22, 0x01	; 1
    dae2:	39 f0       	breq	.+14     	; 0xdaf2 <udd_ep_alloc+0x34>
    dae4:	18 f4       	brcc	.+6      	; 0xdaec <udd_ep_alloc+0x2e>
    dae6:	20 e4       	ldi	r18, 0x40	; 64
    dae8:	30 e0       	ldi	r19, 0x00	; 0
    daea:	05 c0       	rjmp	.+10     	; 0xdaf6 <udd_ep_alloc+0x38>
    daec:	20 e8       	ldi	r18, 0x80	; 128
    daee:	30 e0       	ldi	r19, 0x00	; 0
    daf0:	02 c0       	rjmp	.+4      	; 0xdaf6 <udd_ep_alloc+0x38>
    daf2:	20 ec       	ldi	r18, 0xC0	; 192
    daf4:	30 e0       	ldi	r19, 0x00	; 0
    daf6:	00 38       	cpi	r16, 0x80	; 128
    daf8:	11 05       	cpc	r17, r1
    dafa:	f9 f0       	breq	.+62     	; 0xdb3a <udd_ep_alloc+0x7c>
    dafc:	50 f4       	brcc	.+20     	; 0xdb12 <udd_ep_alloc+0x54>
    dafe:	00 32       	cpi	r16, 0x20	; 32
    db00:	11 05       	cpc	r17, r1
    db02:	a9 f0       	breq	.+42     	; 0xdb2e <udd_ep_alloc+0x70>
    db04:	00 34       	cpi	r16, 0x40	; 64
    db06:	11 05       	cpc	r17, r1
    db08:	a9 f0       	breq	.+42     	; 0xdb34 <udd_ep_alloc+0x76>
    db0a:	00 31       	cpi	r16, 0x10	; 16
    db0c:	11 05       	cpc	r17, r1
    db0e:	61 f4       	brne	.+24     	; 0xdb28 <udd_ep_alloc+0x6a>
    db10:	20 c0       	rjmp	.+64     	; 0xdb52 <udd_ep_alloc+0x94>
    db12:	01 15       	cp	r16, r1
    db14:	82 e0       	ldi	r24, 0x02	; 2
    db16:	18 07       	cpc	r17, r24
    db18:	b1 f0       	breq	.+44     	; 0xdb46 <udd_ep_alloc+0x88>
    db1a:	0f 3f       	cpi	r16, 0xFF	; 255
    db1c:	a3 e0       	ldi	r26, 0x03	; 3
    db1e:	1a 07       	cpc	r17, r26
    db20:	a9 f0       	breq	.+42     	; 0xdb4c <udd_ep_alloc+0x8e>
    db22:	01 15       	cp	r16, r1
    db24:	11 40       	sbci	r17, 0x01	; 1
    db26:	61 f0       	breq	.+24     	; 0xdb40 <udd_ep_alloc+0x82>
    db28:	80 e0       	ldi	r24, 0x00	; 0
    db2a:	90 e0       	ldi	r25, 0x00	; 0
    db2c:	14 c0       	rjmp	.+40     	; 0xdb56 <udd_ep_alloc+0x98>
    db2e:	82 e0       	ldi	r24, 0x02	; 2
    db30:	90 e0       	ldi	r25, 0x00	; 0
    db32:	11 c0       	rjmp	.+34     	; 0xdb56 <udd_ep_alloc+0x98>
    db34:	83 e0       	ldi	r24, 0x03	; 3
    db36:	90 e0       	ldi	r25, 0x00	; 0
    db38:	0e c0       	rjmp	.+28     	; 0xdb56 <udd_ep_alloc+0x98>
    db3a:	84 e0       	ldi	r24, 0x04	; 4
    db3c:	90 e0       	ldi	r25, 0x00	; 0
    db3e:	0b c0       	rjmp	.+22     	; 0xdb56 <udd_ep_alloc+0x98>
    db40:	85 e0       	ldi	r24, 0x05	; 5
    db42:	90 e0       	ldi	r25, 0x00	; 0
    db44:	08 c0       	rjmp	.+16     	; 0xdb56 <udd_ep_alloc+0x98>
    db46:	86 e0       	ldi	r24, 0x06	; 6
    db48:	90 e0       	ldi	r25, 0x00	; 0
    db4a:	05 c0       	rjmp	.+10     	; 0xdb56 <udd_ep_alloc+0x98>
    db4c:	87 e0       	ldi	r24, 0x07	; 7
    db4e:	90 e0       	ldi	r25, 0x00	; 0
    db50:	02 c0       	rjmp	.+4      	; 0xdb56 <udd_ep_alloc+0x98>
    db52:	81 e0       	ldi	r24, 0x01	; 1
    db54:	90 e0       	ldi	r25, 0x00	; 0
    db56:	11 82       	std	Z+1, r1	; 0x01
    db58:	96 e0       	ldi	r25, 0x06	; 6
    db5a:	90 83       	st	Z, r25
    db5c:	82 2b       	or	r24, r18
    db5e:	81 83       	std	Z+1, r24	; 0x01
    db60:	81 81       	ldd	r24, Z+1	; 0x01
    db62:	80 7c       	andi	r24, 0xC0	; 192
    db64:	80 3c       	cpi	r24, 0xC0	; 192
    db66:	21 f4       	brne	.+8      	; 0xdb70 <udd_ep_alloc+0xb2>
    db68:	81 81       	ldd	r24, Z+1	; 0x01
    db6a:	87 70       	andi	r24, 0x07	; 7
    db6c:	87 30       	cpi	r24, 0x07	; 7
    db6e:	31 f0       	breq	.+12     	; 0xdb7c <udd_ep_alloc+0xbe>
    db70:	81 81       	ldd	r24, Z+1	; 0x01
    db72:	80 62       	ori	r24, 0x20	; 32
    db74:	81 83       	std	Z+1, r24	; 0x01
    db76:	02 c0       	rjmp	.+4      	; 0xdb7c <udd_ep_alloc+0xbe>
    db78:	80 e0       	ldi	r24, 0x00	; 0
    db7a:	01 c0       	rjmp	.+2      	; 0xdb7e <udd_ep_alloc+0xc0>
    db7c:	81 e0       	ldi	r24, 0x01	; 1
    db7e:	0f 90       	pop	r0
    db80:	df 91       	pop	r29
    db82:	cf 91       	pop	r28
    db84:	1f 91       	pop	r17
    db86:	0f 91       	pop	r16
    db88:	08 95       	ret

0000db8a <udd_ep_is_halted>:
    db8a:	5a dc       	rcall	.-1868   	; 0xd440 <udd_ep_get_ctrl>
    db8c:	fc 01       	movw	r30, r24
    db8e:	81 81       	ldd	r24, Z+1	; 0x01
    db90:	82 fb       	bst	r24, 2
    db92:	88 27       	eor	r24, r24
    db94:	80 f9       	bld	r24, 0
    db96:	08 95       	ret

0000db98 <udd_ep_clear_halt>:
    db98:	cf 93       	push	r28
    db9a:	c8 2f       	mov	r28, r24
    db9c:	51 dc       	rcall	.-1886   	; 0xd440 <udd_ep_get_ctrl>
    db9e:	fc 01       	movw	r30, r24
    dba0:	81 81       	ldd	r24, Z+1	; 0x01
    dba2:	82 ff       	sbrs	r24, 2
    dba4:	0f c0       	rjmp	.+30     	; 0xdbc4 <udd_ep_clear_halt+0x2c>
    dba6:	91 81       	ldd	r25, Z+1	; 0x01
    dba8:	9b 7f       	andi	r25, 0xFB	; 251
    dbaa:	91 83       	std	Z+1, r25	; 0x01
    dbac:	8c 2f       	mov	r24, r28
    dbae:	b6 dc       	rcall	.-1684   	; 0xd51c <udd_ep_get_job>
    dbb0:	fc 01       	movw	r30, r24
    dbb2:	80 81       	ld	r24, Z
    dbb4:	80 ff       	sbrs	r24, 0
    dbb6:	06 c0       	rjmp	.+12     	; 0xdbc4 <udd_ep_clear_halt+0x2c>
    dbb8:	8e 7f       	andi	r24, 0xFE	; 254
    dbba:	80 83       	st	Z, r24
    dbbc:	07 80       	ldd	r0, Z+7	; 0x07
    dbbe:	f0 85       	ldd	r31, Z+8	; 0x08
    dbc0:	e0 2d       	mov	r30, r0
    dbc2:	19 95       	eicall
    dbc4:	81 e0       	ldi	r24, 0x01	; 1
    dbc6:	cf 91       	pop	r28
    dbc8:	08 95       	ret

0000dbca <udd_ep_run>:
    dbca:	8f 92       	push	r8
    dbcc:	9f 92       	push	r9
    dbce:	af 92       	push	r10
    dbd0:	bf 92       	push	r11
    dbd2:	df 92       	push	r13
    dbd4:	ef 92       	push	r14
    dbd6:	ff 92       	push	r15
    dbd8:	0f 93       	push	r16
    dbda:	1f 93       	push	r17
    dbdc:	cf 93       	push	r28
    dbde:	df 93       	push	r29
    dbe0:	1f 92       	push	r1
    dbe2:	cd b7       	in	r28, 0x3d	; 61
    dbe4:	de b7       	in	r29, 0x3e	; 62
    dbe6:	d8 2e       	mov	r13, r24
    dbe8:	5a 01       	movw	r10, r20
    dbea:	79 01       	movw	r14, r18
    dbec:	69 83       	std	Y+1, r22	; 0x01
    dbee:	96 dc       	rcall	.-1748   	; 0xd51c <udd_ep_get_job>
    dbf0:	4c 01       	movw	r8, r24
    dbf2:	8d 2d       	mov	r24, r13
    dbf4:	25 dc       	rcall	.-1974   	; 0xd440 <udd_ep_get_ctrl>
    dbf6:	fc 01       	movw	r30, r24
    dbf8:	81 81       	ldd	r24, Z+1	; 0x01
    dbfa:	80 7c       	andi	r24, 0xC0	; 192
    dbfc:	69 81       	ldd	r22, Y+1	; 0x01
    dbfe:	88 23       	and	r24, r24
    dc00:	09 f4       	brne	.+2      	; 0xdc04 <udd_ep_run+0x3a>
    dc02:	58 c0       	rjmp	.+176    	; 0xdcb4 <udd_ep_run+0xea>
    dc04:	81 81       	ldd	r24, Z+1	; 0x01
    dc06:	80 7c       	andi	r24, 0xC0	; 192
    dc08:	80 3c       	cpi	r24, 0xC0	; 192
    dc0a:	19 f0       	breq	.+6      	; 0xdc12 <udd_ep_run+0x48>
    dc0c:	81 81       	ldd	r24, Z+1	; 0x01
    dc0e:	82 fd       	sbrc	r24, 2
    dc10:	51 c0       	rjmp	.+162    	; 0xdcb4 <udd_ep_run+0xea>
    dc12:	8f b7       	in	r24, 0x3f	; 63
    dc14:	f8 94       	cli
    dc16:	d4 01       	movw	r26, r8
    dc18:	9c 91       	ld	r25, X
    dc1a:	90 ff       	sbrs	r25, 0
    dc1c:	02 c0       	rjmp	.+4      	; 0xdc22 <udd_ep_run+0x58>
    dc1e:	8f bf       	out	0x3f, r24	; 63
    dc20:	49 c0       	rjmp	.+146    	; 0xdcb4 <udd_ep_run+0xea>
    dc22:	91 60       	ori	r25, 0x01	; 1
    dc24:	d4 01       	movw	r26, r8
    dc26:	9c 93       	st	X, r25
    dc28:	8f bf       	out	0x3f, r24	; 63
    dc2a:	11 96       	adiw	r26, 0x01	; 1
    dc2c:	ad 92       	st	X+, r10
    dc2e:	bc 92       	st	X, r11
    dc30:	12 97       	sbiw	r26, 0x02	; 2
    dc32:	13 96       	adiw	r26, 0x03	; 3
    dc34:	ed 92       	st	X+, r14
    dc36:	fc 92       	st	X, r15
    dc38:	14 97       	sbiw	r26, 0x04	; 4
    dc3a:	15 96       	adiw	r26, 0x05	; 5
    dc3c:	1d 92       	st	X+, r1
    dc3e:	1c 92       	st	X, r1
    dc40:	16 97       	sbiw	r26, 0x06	; 6
    dc42:	17 96       	adiw	r26, 0x07	; 7
    dc44:	0d 93       	st	X+, r16
    dc46:	1c 93       	st	X, r17
    dc48:	18 97       	sbiw	r26, 0x08	; 8
    dc4a:	21 e0       	ldi	r18, 0x01	; 1
    dc4c:	30 e0       	ldi	r19, 0x00	; 0
    dc4e:	61 11       	cpse	r22, r1
    dc50:	05 c0       	rjmp	.+10     	; 0xdc5c <udd_ep_run+0x92>
    dc52:	e1 14       	cp	r14, r1
    dc54:	f1 04       	cpc	r15, r1
    dc56:	11 f0       	breq	.+4      	; 0xdc5c <udd_ep_run+0x92>
    dc58:	20 e0       	ldi	r18, 0x00	; 0
    dc5a:	30 e0       	ldi	r19, 0x00	; 0
    dc5c:	d4 01       	movw	r26, r8
    dc5e:	8c 91       	ld	r24, X
    dc60:	20 fb       	bst	r18, 0
    dc62:	81 f9       	bld	r24, 1
    dc64:	8b 7f       	andi	r24, 0xFB	; 251
    dc66:	8c 93       	st	X, r24
    dc68:	d7 fc       	sbrc	r13, 7
    dc6a:	1e c0       	rjmp	.+60     	; 0xdca8 <udd_ep_run+0xde>
    dc6c:	81 81       	ldd	r24, Z+1	; 0x01
    dc6e:	80 7c       	andi	r24, 0xC0	; 192
    dc70:	80 3c       	cpi	r24, 0xC0	; 192
    dc72:	c1 f4       	brne	.+48     	; 0xdca4 <udd_ep_run+0xda>
    dc74:	a1 81       	ldd	r26, Z+1	; 0x01
    dc76:	a7 70       	andi	r26, 0x07	; 7
    dc78:	a1 50       	subi	r26, 0x01	; 1
    dc7a:	a7 30       	cpi	r26, 0x07	; 7
    dc7c:	40 f4       	brcc	.+16     	; 0xdc8e <udd_ep_run+0xc4>
    dc7e:	b0 e0       	ldi	r27, 0x00	; 0
    dc80:	aa 0f       	add	r26, r26
    dc82:	bb 1f       	adc	r27, r27
    dc84:	a1 59       	subi	r26, 0x91	; 145
    dc86:	be 4d       	sbci	r27, 0xDE	; 222
    dc88:	6d 91       	ld	r22, X+
    dc8a:	7c 91       	ld	r23, X
    dc8c:	02 c0       	rjmp	.+4      	; 0xdc92 <udd_ep_run+0xc8>
    dc8e:	68 e0       	ldi	r22, 0x08	; 8
    dc90:	70 e0       	ldi	r23, 0x00	; 0
    dc92:	c7 01       	movw	r24, r14
    dc94:	f2 d3       	rcall	.+2020   	; 0xe47a <__udivmodhi4>
    dc96:	89 2b       	or	r24, r25
    dc98:	29 f0       	breq	.+10     	; 0xdca4 <udd_ep_run+0xda>
    dc9a:	f4 01       	movw	r30, r8
    dc9c:	80 81       	ld	r24, Z
    dc9e:	8e 7f       	andi	r24, 0xFE	; 254
    dca0:	80 83       	st	Z, r24
    dca2:	08 c0       	rjmp	.+16     	; 0xdcb4 <udd_ep_run+0xea>
    dca4:	12 82       	std	Z+2, r1	; 0x02
    dca6:	13 82       	std	Z+3, r1	; 0x03
    dca8:	16 82       	std	Z+6, r1	; 0x06
    dcaa:	17 82       	std	Z+7, r1	; 0x07
    dcac:	8d 2d       	mov	r24, r13
    dcae:	50 dc       	rcall	.-1888   	; 0xd550 <udd_ep_trans_complet>
    dcb0:	81 e0       	ldi	r24, 0x01	; 1
    dcb2:	01 c0       	rjmp	.+2      	; 0xdcb6 <udd_ep_run+0xec>
    dcb4:	80 e0       	ldi	r24, 0x00	; 0
    dcb6:	0f 90       	pop	r0
    dcb8:	df 91       	pop	r29
    dcba:	cf 91       	pop	r28
    dcbc:	1f 91       	pop	r17
    dcbe:	0f 91       	pop	r16
    dcc0:	ff 90       	pop	r15
    dcc2:	ef 90       	pop	r14
    dcc4:	df 90       	pop	r13
    dcc6:	bf 90       	pop	r11
    dcc8:	af 90       	pop	r10
    dcca:	9f 90       	pop	r9
    dccc:	8f 90       	pop	r8
    dcce:	08 95       	ret

0000dcd0 <udd_ep_abort>:
    dcd0:	0f 93       	push	r16
    dcd2:	1f 93       	push	r17
    dcd4:	cf 93       	push	r28
    dcd6:	df 93       	push	r29
    dcd8:	18 2f       	mov	r17, r24
    dcda:	b2 db       	rcall	.-2204   	; 0xd440 <udd_ep_get_ctrl>
    dcdc:	ec 01       	movw	r28, r24
    dcde:	81 2f       	mov	r24, r17
    dce0:	1d dc       	rcall	.-1990   	; 0xd51c <udd_ep_get_job>
    dce2:	dc 01       	movw	r26, r24
    dce4:	fe 01       	movw	r30, r28
    dce6:	02 e0       	ldi	r16, 0x02	; 2
    dce8:	05 93       	las	Z, r16
    dcea:	8c 91       	ld	r24, X
    dcec:	80 ff       	sbrs	r24, 0
    dcee:	17 c0       	rjmp	.+46     	; 0xdd1e <udd_ep_abort+0x4e>
    dcf0:	8e 7f       	andi	r24, 0xFE	; 254
    dcf2:	8c 93       	st	X, r24
    dcf4:	17 96       	adiw	r26, 0x07	; 7
    dcf6:	ed 91       	ld	r30, X+
    dcf8:	fc 91       	ld	r31, X
    dcfa:	18 97       	sbiw	r26, 0x08	; 8
    dcfc:	30 97       	sbiw	r30, 0x00	; 0
    dcfe:	79 f0       	breq	.+30     	; 0xdd1e <udd_ep_abort+0x4e>
    dd00:	17 ff       	sbrs	r17, 7
    dd02:	03 c0       	rjmp	.+6      	; 0xdd0a <udd_ep_abort+0x3a>
    dd04:	6e 81       	ldd	r22, Y+6	; 0x06
    dd06:	7f 81       	ldd	r23, Y+7	; 0x07
    dd08:	02 c0       	rjmp	.+4      	; 0xdd0e <udd_ep_abort+0x3e>
    dd0a:	6a 81       	ldd	r22, Y+2	; 0x02
    dd0c:	7b 81       	ldd	r23, Y+3	; 0x03
    dd0e:	41 2f       	mov	r20, r17
    dd10:	81 e0       	ldi	r24, 0x01	; 1
    dd12:	90 e0       	ldi	r25, 0x00	; 0
    dd14:	df 91       	pop	r29
    dd16:	cf 91       	pop	r28
    dd18:	1f 91       	pop	r17
    dd1a:	0f 91       	pop	r16
    dd1c:	19 94       	eijmp
    dd1e:	df 91       	pop	r29
    dd20:	cf 91       	pop	r28
    dd22:	1f 91       	pop	r17
    dd24:	0f 91       	pop	r16
    dd26:	08 95       	ret

0000dd28 <udd_ep_set_halt>:
    dd28:	0f 93       	push	r16
    dd2a:	cf 93       	push	r28
    dd2c:	c8 2f       	mov	r28, r24
    dd2e:	88 db       	rcall	.-2288   	; 0xd440 <udd_ep_get_ctrl>
    dd30:	fc 01       	movw	r30, r24
    dd32:	91 81       	ldd	r25, Z+1	; 0x01
    dd34:	94 60       	ori	r25, 0x04	; 4
    dd36:	91 83       	std	Z+1, r25	; 0x01
    dd38:	01 e0       	ldi	r16, 0x01	; 1
    dd3a:	06 93       	lac	Z, r16
    dd3c:	8c 2f       	mov	r24, r28
    dd3e:	c8 df       	rcall	.-112    	; 0xdcd0 <udd_ep_abort>
    dd40:	81 e0       	ldi	r24, 0x01	; 1
    dd42:	cf 91       	pop	r28
    dd44:	0f 91       	pop	r16
    dd46:	08 95       	ret

0000dd48 <udd_ep_free>:
    dd48:	cf 93       	push	r28
    dd4a:	c8 2f       	mov	r28, r24
    dd4c:	c1 df       	rcall	.-126    	; 0xdcd0 <udd_ep_abort>
    dd4e:	8c 2f       	mov	r24, r28
    dd50:	77 db       	rcall	.-2322   	; 0xd440 <udd_ep_get_ctrl>
    dd52:	fc 01       	movw	r30, r24
    dd54:	11 82       	std	Z+1, r1	; 0x01
    dd56:	cf 91       	pop	r28
    dd58:	08 95       	ret

0000dd5a <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    dd5a:	1f 92       	push	r1
    dd5c:	0f 92       	push	r0
    dd5e:	0f b6       	in	r0, 0x3f	; 63
    dd60:	0f 92       	push	r0
    dd62:	11 24       	eor	r1, r1
    dd64:	0b b6       	in	r0, 0x3b	; 59
    dd66:	0f 92       	push	r0
    dd68:	0f 93       	push	r16
    dd6a:	2f 93       	push	r18
    dd6c:	3f 93       	push	r19
    dd6e:	4f 93       	push	r20
    dd70:	5f 93       	push	r21
    dd72:	6f 93       	push	r22
    dd74:	7f 93       	push	r23
    dd76:	8f 93       	push	r24
    dd78:	9f 93       	push	r25
    dd7a:	af 93       	push	r26
    dd7c:	bf 93       	push	r27
    dd7e:	cf 93       	push	r28
    dd80:	df 93       	push	r29
    dd82:	ef 93       	push	r30
    dd84:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    dd86:	80 91 cb 04 	lds	r24, 0x04CB
    dd8a:	87 ff       	sbrs	r24, 7
    dd8c:	06 c0       	rjmp	.+12     	; 0xdd9a <__vector_125+0x40>
		udd_ack_start_of_frame_event();
    dd8e:	80 e8       	ldi	r24, 0x80	; 128
    dd90:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    dd94:	0e 94 4d 5c 	call	0xb89a	; 0xb89a <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    dd98:	88 c0       	rjmp	.+272    	; 0xdeaa <__vector_125+0x150>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    dd9a:	80 91 cb 04 	lds	r24, 0x04CB
    dd9e:	82 ff       	sbrs	r24, 2
    dda0:	1b c0       	rjmp	.+54     	; 0xddd8 <__vector_125+0x7e>
		udd_ack_underflow_event();
    dda2:	84 e0       	ldi	r24, 0x04	; 4
    dda4:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    dda8:	80 91 c8 24 	lds	r24, 0x24C8
    ddac:	86 ff       	sbrs	r24, 6
    ddae:	7d c0       	rjmp	.+250    	; 0xdeaa <__vector_125+0x150>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    ddb0:	80 91 cc 04 	lds	r24, 0x04CC
    ddb4:	81 fd       	sbrc	r24, 1
    ddb6:	79 c0       	rjmp	.+242    	; 0xdeaa <__vector_125+0x150>
    ddb8:	3a dd       	rcall	.-1420   	; 0xd82e <udd_ctrl_interrupt_tc_setup>
    ddba:	81 11       	cpse	r24, r1
    ddbc:	76 c0       	rjmp	.+236    	; 0xdeaa <__vector_125+0x150>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    ddbe:	80 91 d9 25 	lds	r24, 0x25D9
    ddc2:	90 91 da 25 	lds	r25, 0x25DA
    ddc6:	81 30       	cpi	r24, 0x01	; 1
    ddc8:	91 05       	cpc	r25, r1
    ddca:	11 f4       	brne	.+4      	; 0xddd0 <__vector_125+0x76>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    ddcc:	8e db       	rcall	.-2276   	; 0xd4ea <udd_ctrl_send_zlp_in>
    ddce:	6d c0       	rjmp	.+218    	; 0xdeaa <__vector_125+0x150>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    ddd0:	04 97       	sbiw	r24, 0x04	; 4
    ddd2:	09 f0       	breq	.+2      	; 0xddd6 <__vector_125+0x7c>
    ddd4:	6a c0       	rjmp	.+212    	; 0xdeaa <__vector_125+0x150>
    ddd6:	27 c0       	rjmp	.+78     	; 0xde26 <__vector_125+0xcc>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    ddd8:	80 91 cb 04 	lds	r24, 0x04CB
    dddc:	81 ff       	sbrs	r24, 1
    ddde:	60 c0       	rjmp	.+192    	; 0xdea0 <__vector_125+0x146>
		udd_ack_overflow_event();
    dde0:	82 e0       	ldi	r24, 0x02	; 2
    dde2:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    dde6:	80 91 c0 24 	lds	r24, 0x24C0
    ddea:	86 ff       	sbrs	r24, 6
    ddec:	5e c0       	rjmp	.+188    	; 0xdeaa <__vector_125+0x150>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    ddee:	80 91 cc 04 	lds	r24, 0x04CC
    ddf2:	81 fd       	sbrc	r24, 1
    ddf4:	5a c0       	rjmp	.+180    	; 0xdeaa <__vector_125+0x150>
    ddf6:	1b dd       	rcall	.-1482   	; 0xd82e <udd_ctrl_interrupt_tc_setup>
    ddf8:	81 11       	cpse	r24, r1
    ddfa:	57 c0       	rjmp	.+174    	; 0xdeaa <__vector_125+0x150>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    ddfc:	80 91 d9 25 	lds	r24, 0x25D9
    de00:	90 91 da 25 	lds	r25, 0x25DA
    de04:	82 30       	cpi	r24, 0x02	; 2
    de06:	91 05       	cpc	r25, r1
    de08:	59 f4       	brne	.+22     	; 0xde20 <__vector_125+0xc6>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    de0a:	84 e0       	ldi	r24, 0x04	; 4
    de0c:	90 e0       	ldi	r25, 0x00	; 0
    de0e:	80 93 d9 25 	sts	0x25D9, r24
    de12:	90 93 da 25 	sts	0x25DA, r25
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    de16:	e0 ec       	ldi	r30, 0xC0	; 192
    de18:	f4 e2       	ldi	r31, 0x24	; 36
    de1a:	02 e0       	ldi	r16, 0x02	; 2
    de1c:	06 93       	lac	Z, r16
    de1e:	45 c0       	rjmp	.+138    	; 0xdeaa <__vector_125+0x150>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    de20:	03 97       	sbiw	r24, 0x03	; 3
    de22:	09 f0       	breq	.+2      	; 0xde26 <__vector_125+0xcc>
    de24:	42 c0       	rjmp	.+132    	; 0xdeaa <__vector_125+0x150>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    de26:	e9 ec       	ldi	r30, 0xC9	; 201
    de28:	f4 e2       	ldi	r31, 0x24	; 36
    de2a:	04 e0       	ldi	r16, 0x04	; 4
    de2c:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    de2e:	e1 ec       	ldi	r30, 0xC1	; 193
    de30:	f4 e2       	ldi	r31, 0x24	; 36
    de32:	04 e0       	ldi	r16, 0x04	; 4
    de34:	05 93       	las	Z, r16
    de36:	39 c0       	rjmp	.+114    	; 0xdeaa <__vector_125+0x150>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    de38:	80 e1       	ldi	r24, 0x10	; 16
    de3a:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    de3e:	81 e0       	ldi	r24, 0x01	; 1
    de40:	47 df       	rcall	.-370    	; 0xdcd0 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    de42:	81 e8       	ldi	r24, 0x81	; 129
    de44:	45 df       	rcall	.-374    	; 0xdcd0 <udd_ep_abort>
		}
#endif
		udc_reset();
    de46:	0e 94 2a 5c 	call	0xb854	; 0xb854 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    de4a:	10 92 c3 04 	sts	0x04C3, r1
		break;
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    de4e:	80 e0       	ldi	r24, 0x00	; 0
    de50:	f7 da       	rcall	.-2578   	; 0xd440 <udd_ep_get_ctrl>
    de52:	fc 01       	movw	r30, r24
	udd_endpoint_disable(ep_ctrl);
    de54:	11 82       	std	Z+1, r1	; 0x01
	udd_endpoint_clear_status(ep_ctrl);
    de56:	d6 e0       	ldi	r29, 0x06	; 6
    de58:	d0 83       	st	Z, r29
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    de5a:	c3 e4       	ldi	r28, 0x43	; 67
    de5c:	c1 83       	std	Z+1, r28	; 0x01
		break;
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    de5e:	80 e8       	ldi	r24, 0x80	; 128
    de60:	ef da       	rcall	.-2594   	; 0xd440 <udd_ep_get_ctrl>
    de62:	fc 01       	movw	r30, r24
	udd_endpoint_disable(ep_ctrl);
    de64:	11 82       	std	Z+1, r1	; 0x01
	udd_endpoint_clear_status(ep_ctrl);
    de66:	d0 83       	st	Z, r29
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    de68:	c1 83       	std	Z+1, r28	; 0x01
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    de6a:	89 e9       	ldi	r24, 0x99	; 153
    de6c:	95 e2       	ldi	r25, 0x25	; 37
    de6e:	80 93 c4 24 	sts	0x24C4, r24
    de72:	90 93 c5 24 	sts	0x24C5, r25
		// Reset endpoint control management
		udd_ctrl_init();
    de76:	fb da       	rcall	.-2570   	; 0xd46e <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    de78:	18 c0       	rjmp	.+48     	; 0xdeaa <__vector_125+0x150>
	}

	if (udd_is_suspend_event()) {
    de7a:	80 91 cb 04 	lds	r24, 0x04CB
    de7e:	86 ff       	sbrs	r24, 6
    de80:	05 c0       	rjmp	.+10     	; 0xde8c <__vector_125+0x132>
		udd_ack_suspend_event();
    de82:	80 e4       	ldi	r24, 0x40	; 64
    de84:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    de88:	80 e0       	ldi	r24, 0x00	; 0
    de8a:	08 c0       	rjmp	.+16     	; 0xde9c <__vector_125+0x142>
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    de8c:	80 91 cb 04 	lds	r24, 0x04CB
    de90:	85 ff       	sbrs	r24, 5
    de92:	0b c0       	rjmp	.+22     	; 0xdeaa <__vector_125+0x150>
		udd_ack_resume_event();
    de94:	80 e2       	ldi	r24, 0x20	; 32
    de96:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    de9a:	81 e0       	ldi	r24, 0x01	; 1
    de9c:	b7 da       	rcall	.-2706   	; 0xd40c <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    de9e:	05 c0       	rjmp	.+10     	; 0xdeaa <__vector_125+0x150>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    dea0:	80 91 cb 04 	lds	r24, 0x04CB
    dea4:	84 fd       	sbrc	r24, 4
    dea6:	c8 cf       	rjmp	.-112    	; 0xde38 <__vector_125+0xde>
    dea8:	e8 cf       	rjmp	.-48     	; 0xde7a <__vector_125+0x120>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    deaa:	ff 91       	pop	r31
    deac:	ef 91       	pop	r30
    deae:	df 91       	pop	r29
    deb0:	cf 91       	pop	r28
    deb2:	bf 91       	pop	r27
    deb4:	af 91       	pop	r26
    deb6:	9f 91       	pop	r25
    deb8:	8f 91       	pop	r24
    deba:	7f 91       	pop	r23
    debc:	6f 91       	pop	r22
    debe:	5f 91       	pop	r21
    dec0:	4f 91       	pop	r20
    dec2:	3f 91       	pop	r19
    dec4:	2f 91       	pop	r18
    dec6:	0f 91       	pop	r16
    dec8:	0f 90       	pop	r0
    deca:	0b be       	out	0x3b, r0	; 59
    decc:	0f 90       	pop	r0
    dece:	0f be       	out	0x3f, r0	; 63
    ded0:	0f 90       	pop	r0
    ded2:	1f 90       	pop	r1
    ded4:	18 95       	reti

0000ded6 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    ded6:	1f 92       	push	r1
    ded8:	0f 92       	push	r0
    deda:	0f b6       	in	r0, 0x3f	; 63
    dedc:	0f 92       	push	r0
    dede:	11 24       	eor	r1, r1
    dee0:	0b b6       	in	r0, 0x3b	; 59
    dee2:	0f 92       	push	r0
    dee4:	0f 93       	push	r16
    dee6:	1f 93       	push	r17
    dee8:	2f 93       	push	r18
    deea:	3f 93       	push	r19
    deec:	4f 93       	push	r20
    deee:	5f 93       	push	r21
    def0:	6f 93       	push	r22
    def2:	7f 93       	push	r23
    def4:	8f 93       	push	r24
    def6:	9f 93       	push	r25
    def8:	af 93       	push	r26
    defa:	bf 93       	push	r27
    defc:	cf 93       	push	r28
    defe:	df 93       	push	r29
    df00:	ef 93       	push	r30
    df02:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    df04:	80 91 cc 04 	lds	r24, 0x04CC
    df08:	81 ff       	sbrs	r24, 1
    df0a:	1a c0       	rjmp	.+52     	; 0xdf40 <__vector_126+0x6a>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    df0c:	82 e0       	ldi	r24, 0x02	; 2
    df0e:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    df12:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    df16:	81 95       	neg	r24
    df18:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    df1a:	e0 ec       	ldi	r30, 0xC0	; 192
    df1c:	f4 e2       	ldi	r31, 0x24	; 36
    df1e:	e8 1b       	sub	r30, r24
    df20:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    df22:	20 81       	ld	r18, Z
    df24:	31 81       	ldd	r19, Z+1	; 0x01
    df26:	20 5c       	subi	r18, 0xC0	; 192
    df28:	34 42       	sbci	r19, 0x24	; 36
    df2a:	73 e0       	ldi	r23, 0x03	; 3
    df2c:	36 95       	lsr	r19
    df2e:	27 95       	ror	r18
    df30:	7a 95       	dec	r23
    df32:	e1 f7       	brne	.-8      	; 0xdf2c <__vector_126+0x56>
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    df34:	c2 2f       	mov	r28, r18
    df36:	c6 95       	lsr	r28
    df38:	20 ff       	sbrs	r18, 0
    df3a:	06 c0       	rjmp	.+12     	; 0xdf48 <__vector_126+0x72>
    df3c:	80 e8       	ldi	r24, 0x80	; 128
    df3e:	05 c0       	rjmp	.+10     	; 0xdf4a <__vector_126+0x74>
#endif

	if (!udd_is_tc_event()) {
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    df40:	76 dc       	rcall	.-1812   	; 0xd82e <udd_ctrl_interrupt_tc_setup>
    df42:	88 23       	and	r24, r24
    df44:	19 f3       	breq	.-58     	; 0xdf0c <__vector_126+0x36>
    df46:	8a c0       	rjmp	.+276    	; 0xe05c <__vector_126+0x186>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    df48:	80 e0       	ldi	r24, 0x00	; 0
    df4a:	c8 0f       	add	r28, r24
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    df4c:	8c 2f       	mov	r24, r28
    df4e:	78 da       	rcall	.-2832   	; 0xd440 <udd_ep_get_ctrl>
    df50:	fc 01       	movw	r30, r24
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    df52:	80 81       	ld	r24, Z
    df54:	85 ff       	sbrs	r24, 5
    df56:	82 c0       	rjmp	.+260    	; 0xe05c <__vector_126+0x186>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    df58:	00 e2       	ldi	r16, 0x20	; 32
    df5a:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    df5c:	c1 11       	cpse	r28, r1
    df5e:	78 c0       	rjmp	.+240    	; 0xe050 <__vector_126+0x17a>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    df60:	80 91 d9 25 	lds	r24, 0x25D9
    df64:	90 91 da 25 	lds	r25, 0x25DA
    df68:	04 97       	sbiw	r24, 0x04	; 4
    df6a:	19 f4       	brne	.+6      	; 0xdf72 <__vector_126+0x9c>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    df6c:	cf da       	rcall	.-2658   	; 0xd50c <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    df6e:	7f da       	rcall	.-2818   	; 0xd46e <udd_ctrl_init>
    df70:	75 c0       	rjmp	.+234    	; 0xe05c <__vector_126+0x186>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    df72:	c0 91 c2 24 	lds	r28, 0x24C2
    df76:	d0 91 c3 24 	lds	r29, 0x24C3

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    df7a:	80 91 74 27 	lds	r24, 0x2774
    df7e:	90 91 75 27 	lds	r25, 0x2775
    df82:	00 91 dd 25 	lds	r16, 0x25DD
    df86:	10 91 de 25 	lds	r17, 0x25DE
    df8a:	98 01       	movw	r18, r16
    df8c:	2c 0f       	add	r18, r28
    df8e:	3d 1f       	adc	r19, r29
    df90:	82 17       	cp	r24, r18
    df92:	93 07       	cpc	r25, r19
    df94:	18 f4       	brcc	.+6      	; 0xdf9c <__vector_126+0xc6>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    df96:	ec 01       	movw	r28, r24
    df98:	c0 1b       	sub	r28, r16
    df9a:	d1 0b       	sbc	r29, r17
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    df9c:	20 91 72 27 	lds	r18, 0x2772
    dfa0:	30 91 73 27 	lds	r19, 0x2773
    dfa4:	20 0f       	add	r18, r16
    dfa6:	31 1f       	adc	r19, r17
    dfa8:	89 e9       	ldi	r24, 0x99	; 153
    dfaa:	95 e2       	ldi	r25, 0x25	; 37
    dfac:	ae 01       	movw	r20, r28
    dfae:	bc 01       	movw	r22, r24
    dfb0:	c9 01       	movw	r24, r18
    dfb2:	72 d4       	rcall	.+2276   	; 0xe898 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    dfb4:	0c 0f       	add	r16, r28
    dfb6:	1d 1f       	adc	r17, r29
    dfb8:	00 93 dd 25 	sts	0x25DD, r16
    dfbc:	10 93 de 25 	sts	0x25DE, r17

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    dfc0:	c0 34       	cpi	r28, 0x40	; 64
    dfc2:	d1 05       	cpc	r29, r1
    dfc4:	69 f4       	brne	.+26     	; 0xdfe0 <__vector_126+0x10a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    dfc6:	80 91 db 25 	lds	r24, 0x25DB
    dfca:	90 91 dc 25 	lds	r25, 0x25DC
    dfce:	80 0f       	add	r24, r16
    dfd0:	91 1f       	adc	r25, r17

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    dfd2:	20 91 70 27 	lds	r18, 0x2770
    dfd6:	30 91 71 27 	lds	r19, 0x2771
    dfda:	82 17       	cp	r24, r18
    dfdc:	93 07       	cpc	r25, r19
    dfde:	88 f0       	brcs	.+34     	; 0xe002 <__vector_126+0x12c>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    dfe0:	00 93 74 27 	sts	0x2774, r16
    dfe4:	10 93 75 27 	sts	0x2775, r17
		if (NULL != udd_g_ctrlreq.over_under_run) {
    dfe8:	e0 91 78 27 	lds	r30, 0x2778
    dfec:	f0 91 79 27 	lds	r31, 0x2779
    dff0:	30 97       	sbiw	r30, 0x00	; 0
    dff2:	29 f0       	breq	.+10     	; 0xdffe <__vector_126+0x128>
			if (!udd_g_ctrlreq.over_under_run()) {
    dff4:	19 95       	eicall
    dff6:	81 11       	cpse	r24, r1
    dff8:	02 c0       	rjmp	.+4      	; 0xdffe <__vector_126+0x128>
				// Stall ZLP
				udd_ctrl_stall_data();
    dffa:	66 da       	rcall	.-2868   	; 0xd4c8 <udd_ctrl_stall_data>
    dffc:	2f c0       	rjmp	.+94     	; 0xe05c <__vector_126+0x186>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    dffe:	75 da       	rcall	.-2838   	; 0xd4ea <udd_ctrl_send_zlp_in>
    e000:	2d c0       	rjmp	.+90     	; 0xe05c <__vector_126+0x186>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    e002:	80 91 74 27 	lds	r24, 0x2774
    e006:	90 91 75 27 	lds	r25, 0x2775
    e00a:	80 17       	cp	r24, r16
    e00c:	91 07       	cpc	r25, r17
    e00e:	d9 f4       	brne	.+54     	; 0xe046 <__vector_126+0x170>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    e010:	e0 91 78 27 	lds	r30, 0x2778
    e014:	f0 91 79 27 	lds	r31, 0x2779
    e018:	30 97       	sbiw	r30, 0x00	; 0
    e01a:	79 f3       	breq	.-34     	; 0xdffa <__vector_126+0x124>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    e01c:	19 95       	eicall
    e01e:	88 23       	and	r24, r24
    e020:	61 f3       	breq	.-40     	; 0xdffa <__vector_126+0x124>
			udd_ctrl_stall_data();
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    e022:	80 91 db 25 	lds	r24, 0x25DB
    e026:	90 91 dc 25 	lds	r25, 0x25DC
    e02a:	20 91 dd 25 	lds	r18, 0x25DD
    e02e:	30 91 de 25 	lds	r19, 0x25DE
    e032:	82 0f       	add	r24, r18
    e034:	93 1f       	adc	r25, r19
    e036:	80 93 db 25 	sts	0x25DB, r24
    e03a:	90 93 dc 25 	sts	0x25DC, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    e03e:	10 92 dd 25 	sts	0x25DD, r1
    e042:	10 92 de 25 	sts	0x25DE, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    e046:	e0 ec       	ldi	r30, 0xC0	; 192
    e048:	f4 e2       	ldi	r31, 0x24	; 36
    e04a:	02 e0       	ldi	r16, 0x02	; 2
    e04c:	06 93       	lac	Z, r16
    e04e:	06 c0       	rjmp	.+12     	; 0xe05c <__vector_126+0x186>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    e050:	c0 38       	cpi	r28, 0x80	; 128
    e052:	11 f4       	brne	.+4      	; 0xe058 <__vector_126+0x182>
		udd_ctrl_in_sent();
    e054:	79 db       	rcall	.-2318   	; 0xd748 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    e056:	02 c0       	rjmp	.+4      	; 0xe05c <__vector_126+0x186>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    e058:	8c 2f       	mov	r24, r28
    e05a:	7a da       	rcall	.-2828   	; 0xd550 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    e05c:	ff 91       	pop	r31
    e05e:	ef 91       	pop	r30
    e060:	df 91       	pop	r29
    e062:	cf 91       	pop	r28
    e064:	bf 91       	pop	r27
    e066:	af 91       	pop	r26
    e068:	9f 91       	pop	r25
    e06a:	8f 91       	pop	r24
    e06c:	7f 91       	pop	r23
    e06e:	6f 91       	pop	r22
    e070:	5f 91       	pop	r21
    e072:	4f 91       	pop	r20
    e074:	3f 91       	pop	r19
    e076:	2f 91       	pop	r18
    e078:	1f 91       	pop	r17
    e07a:	0f 91       	pop	r16
    e07c:	0f 90       	pop	r0
    e07e:	0b be       	out	0x3b, r0	; 59
    e080:	0f 90       	pop	r0
    e082:	0f be       	out	0x3f, r0	; 63
    e084:	0f 90       	pop	r0
    e086:	1f 90       	pop	r1
    e088:	18 95       	reti

0000e08a <udi_cdc_comm_disable>:
	return nb_received;
}

iram_size_t udi_cdc_get_nb_received_data(void)
{
	return udi_cdc_multi_get_nb_received_data(0);
    e08a:	80 91 e9 25 	lds	r24, 0x25E9
    e08e:	81 50       	subi	r24, 0x01	; 1
    e090:	80 93 e9 25 	sts	0x25E9, r24
    e094:	08 95       	ret

0000e096 <udi_cdc_data_setup>:
    e096:	80 e0       	ldi	r24, 0x00	; 0
    e098:	08 95       	ret

0000e09a <udi_cdc_getsetting>:
    e09a:	80 e0       	ldi	r24, 0x00	; 0
    e09c:	08 95       	ret

0000e09e <udi_cdc_line_coding_received>:
    e09e:	08 95       	ret

0000e0a0 <udi_cdc_data_disable>:
    e0a0:	80 91 e8 25 	lds	r24, 0x25E8
    e0a4:	81 50       	subi	r24, 0x01	; 1
    e0a6:	80 93 e8 25 	sts	0x25E8, r24
    e0aa:	80 91 e8 25 	lds	r24, 0x25E8
    e0ae:	0e 94 88 5a 	call	0xb510	; 0xb510 <cdc_disable>
    e0b2:	10 92 e7 25 	sts	0x25E7, r1
    e0b6:	08 95       	ret

0000e0b8 <udi_cdc_tx_send.isra.3>:
    e0b8:	ff 92       	push	r15
    e0ba:	0f 93       	push	r16
    e0bc:	1f 93       	push	r17
    e0be:	cf 93       	push	r28
    e0c0:	df 93       	push	r29
    e0c2:	80 91 e1 25 	lds	r24, 0x25E1
    e0c6:	81 11       	cpse	r24, r1
    e0c8:	82 c0       	rjmp	.+260    	; 0xe1ce <udi_cdc_tx_send.isra.3+0x116>
    e0ca:	df dc       	rcall	.-1602   	; 0xda8a <udd_is_high_speed>
    e0cc:	c0 91 01 26 	lds	r28, 0x2601
    e0d0:	d0 91 02 26 	lds	r29, 0x2602
    e0d4:	88 23       	and	r24, r24
    e0d6:	a1 f0       	breq	.+40     	; 0xe100 <udi_cdc_tx_send.isra.3+0x48>
    e0d8:	e6 dc       	rcall	.-1588   	; 0xdaa6 <udd_get_micro_frame_number>
    e0da:	c8 17       	cp	r28, r24
    e0dc:	d9 07       	cpc	r29, r25
    e0de:	09 f4       	brne	.+2      	; 0xe0e2 <udi_cdc_tx_send.isra.3+0x2a>
    e0e0:	76 c0       	rjmp	.+236    	; 0xe1ce <udi_cdc_tx_send.isra.3+0x116>
    e0e2:	df b7       	in	r29, 0x3f	; 63
    e0e4:	f8 94       	cli
    e0e6:	c0 91 e2 25 	lds	r28, 0x25E2
    e0ea:	ec 2f       	mov	r30, r28
    e0ec:	f0 e0       	ldi	r31, 0x00	; 0
    e0ee:	ee 0f       	add	r30, r30
    e0f0:	ff 1f       	adc	r31, r31
    e0f2:	e3 50       	subi	r30, 0x03	; 3
    e0f4:	fa 4d       	sbci	r31, 0xDA	; 218
    e0f6:	80 81       	ld	r24, Z
    e0f8:	91 81       	ldd	r25, Z+1	; 0x01
    e0fa:	89 2b       	or	r24, r25
    e0fc:	11 f5       	brne	.+68     	; 0xe142 <udi_cdc_tx_send.isra.3+0x8a>
    e0fe:	02 c0       	rjmp	.+4      	; 0xe104 <udi_cdc_tx_send.isra.3+0x4c>
    e100:	cc dc       	rcall	.-1640   	; 0xda9a <udd_get_frame_number>
    e102:	eb cf       	rjmp	.-42     	; 0xe0da <udi_cdc_tx_send.isra.3+0x22>
    e104:	80 91 07 26 	lds	r24, 0x2607
    e108:	90 91 08 26 	lds	r25, 0x2608
    e10c:	01 96       	adiw	r24, 0x01	; 1
    e10e:	80 93 07 26 	sts	0x2607, r24
    e112:	90 93 08 26 	sts	0x2608, r25
    e116:	b9 dc       	rcall	.-1678   	; 0xda8a <udd_is_high_speed>
    e118:	81 11       	cpse	r24, r1
    e11a:	09 c0       	rjmp	.+18     	; 0xe12e <udi_cdc_tx_send.isra.3+0x76>
    e11c:	80 91 07 26 	lds	r24, 0x2607
    e120:	90 91 08 26 	lds	r25, 0x2608
    e124:	84 36       	cpi	r24, 0x64	; 100
    e126:	91 05       	cpc	r25, r1
    e128:	10 f4       	brcc	.+4      	; 0xe12e <udi_cdc_tx_send.isra.3+0x76>
    e12a:	df bf       	out	0x3f, r29	; 63
    e12c:	50 c0       	rjmp	.+160    	; 0xe1ce <udi_cdc_tx_send.isra.3+0x116>
    e12e:	ad dc       	rcall	.-1702   	; 0xda8a <udd_is_high_speed>
    e130:	88 23       	and	r24, r24
    e132:	39 f0       	breq	.+14     	; 0xe142 <udi_cdc_tx_send.isra.3+0x8a>
    e134:	80 91 07 26 	lds	r24, 0x2607
    e138:	90 91 08 26 	lds	r25, 0x2608
    e13c:	80 32       	cpi	r24, 0x20	; 32
    e13e:	93 40       	sbci	r25, 0x03	; 3
    e140:	a0 f3       	brcs	.-24     	; 0xe12a <udi_cdc_tx_send.isra.3+0x72>
    e142:	10 92 07 26 	sts	0x2607, r1
    e146:	10 92 08 26 	sts	0x2608, r1
    e14a:	80 91 e0 25 	lds	r24, 0x25E0
    e14e:	81 11       	cpse	r24, r1
    e150:	06 c0       	rjmp	.+12     	; 0xe15e <udi_cdc_tx_send.isra.3+0xa6>
    e152:	81 e0       	ldi	r24, 0x01	; 1
    e154:	c1 11       	cpse	r28, r1
    e156:	80 e0       	ldi	r24, 0x00	; 0
    e158:	80 93 e2 25 	sts	0x25E2, r24
    e15c:	04 c0       	rjmp	.+8      	; 0xe166 <udi_cdc_tx_send.isra.3+0xae>
    e15e:	81 e0       	ldi	r24, 0x01	; 1
    e160:	c1 11       	cpse	r28, r1
    e162:	80 e0       	ldi	r24, 0x00	; 0
    e164:	c8 2f       	mov	r28, r24
    e166:	81 e0       	ldi	r24, 0x01	; 1
    e168:	80 93 e1 25 	sts	0x25E1, r24
    e16c:	df bf       	out	0x3f, r29	; 63
    e16e:	d0 e0       	ldi	r29, 0x00	; 0
    e170:	8e 01       	movw	r16, r28
    e172:	00 0f       	add	r16, r16
    e174:	11 1f       	adc	r17, r17
    e176:	f8 01       	movw	r30, r16
    e178:	e3 50       	subi	r30, 0x03	; 3
    e17a:	fa 4d       	sbci	r31, 0xDA	; 218
    e17c:	ff 24       	eor	r15, r15
    e17e:	f3 94       	inc	r15
    e180:	80 81       	ld	r24, Z
    e182:	91 81       	ldd	r25, Z+1	; 0x01
    e184:	80 34       	cpi	r24, 0x40	; 64
    e186:	91 05       	cpc	r25, r1
    e188:	31 f4       	brne	.+12     	; 0xe196 <udi_cdc_tx_send.isra.3+0xde>
    e18a:	f1 2c       	mov	r15, r1
    e18c:	10 92 01 26 	sts	0x2601, r1
    e190:	10 92 02 26 	sts	0x2602, r1
    e194:	0a c0       	rjmp	.+20     	; 0xe1aa <udi_cdc_tx_send.isra.3+0xf2>
    e196:	79 dc       	rcall	.-1806   	; 0xda8a <udd_is_high_speed>
    e198:	88 23       	and	r24, r24
    e19a:	11 f0       	breq	.+4      	; 0xe1a0 <udi_cdc_tx_send.isra.3+0xe8>
    e19c:	84 dc       	rcall	.-1784   	; 0xdaa6 <udd_get_micro_frame_number>
    e19e:	01 c0       	rjmp	.+2      	; 0xe1a2 <udi_cdc_tx_send.isra.3+0xea>
    e1a0:	7c dc       	rcall	.-1800   	; 0xda9a <udd_get_frame_number>
    e1a2:	80 93 01 26 	sts	0x2601, r24
    e1a6:	90 93 02 26 	sts	0x2602, r25
    e1aa:	f8 01       	movw	r30, r16
    e1ac:	e3 50       	subi	r30, 0x03	; 3
    e1ae:	fa 4d       	sbci	r31, 0xDA	; 218
    e1b0:	20 81       	ld	r18, Z
    e1b2:	31 81       	ldd	r19, Z+1	; 0x01
    e1b4:	ae 01       	movw	r20, r28
    e1b6:	86 e0       	ldi	r24, 0x06	; 6
    e1b8:	44 0f       	add	r20, r20
    e1ba:	55 1f       	adc	r21, r21
    e1bc:	8a 95       	dec	r24
    e1be:	e1 f7       	brne	.-8      	; 0xe1b8 <udi_cdc_tx_send.isra.3+0x100>
    e1c0:	46 5f       	subi	r20, 0xF6	; 246
    e1c2:	59 4d       	sbci	r21, 0xD9	; 217
    e1c4:	0e ee       	ldi	r16, 0xEE	; 238
    e1c6:	10 e7       	ldi	r17, 0x70	; 112
    e1c8:	6f 2d       	mov	r22, r15
    e1ca:	81 e8       	ldi	r24, 0x81	; 129
    e1cc:	fe dc       	rcall	.-1540   	; 0xdbca <udd_ep_run>
    e1ce:	df 91       	pop	r29
    e1d0:	cf 91       	pop	r28
    e1d2:	1f 91       	pop	r17
    e1d4:	0f 91       	pop	r16
    e1d6:	ff 90       	pop	r15
    e1d8:	08 95       	ret

0000e1da <udi_cdc_data_sof_notify>:
    e1da:	6e cf       	rjmp	.-292    	; 0xe0b8 <udi_cdc_tx_send.isra.3>

0000e1dc <udi_cdc_data_sent>:
    e1dc:	89 2b       	or	r24, r25
    e1de:	99 f4       	brne	.+38     	; 0xe206 <udi_cdc_data_sent+0x2a>
    e1e0:	80 91 e2 25 	lds	r24, 0x25E2
    e1e4:	e1 e0       	ldi	r30, 0x01	; 1
    e1e6:	f0 e0       	ldi	r31, 0x00	; 0
    e1e8:	88 23       	and	r24, r24
    e1ea:	11 f0       	breq	.+4      	; 0xe1f0 <udi_cdc_data_sent+0x14>
    e1ec:	e0 e0       	ldi	r30, 0x00	; 0
    e1ee:	f0 e0       	ldi	r31, 0x00	; 0
    e1f0:	ee 0f       	add	r30, r30
    e1f2:	ff 1f       	adc	r31, r31
    e1f4:	e3 50       	subi	r30, 0x03	; 3
    e1f6:	fa 4d       	sbci	r31, 0xDA	; 218
    e1f8:	10 82       	st	Z, r1
    e1fa:	11 82       	std	Z+1, r1	; 0x01
    e1fc:	10 92 e0 25 	sts	0x25E0, r1
    e200:	10 92 e1 25 	sts	0x25E1, r1
    e204:	59 cf       	rjmp	.-334    	; 0xe0b8 <udi_cdc_tx_send.isra.3>
    e206:	08 95       	ret

0000e208 <udi_cdc_comm_setup>:
    e208:	90 91 6a 27 	lds	r25, 0x276A
    e20c:	89 2f       	mov	r24, r25
    e20e:	80 76       	andi	r24, 0x60	; 96
    e210:	97 ff       	sbrs	r25, 7
    e212:	0e c0       	rjmp	.+28     	; 0xe230 <udi_cdc_comm_setup+0x28>
    e214:	80 32       	cpi	r24, 0x20	; 32
    e216:	a1 f5       	brne	.+104    	; 0xe280 <udi_cdc_comm_setup+0x78>
    e218:	80 91 6b 27 	lds	r24, 0x276B
    e21c:	81 32       	cpi	r24, 0x21	; 33
    e21e:	81 f5       	brne	.+96     	; 0xe280 <udi_cdc_comm_setup+0x78>
    e220:	80 91 70 27 	lds	r24, 0x2770
    e224:	90 91 71 27 	lds	r25, 0x2771
    e228:	87 30       	cpi	r24, 0x07	; 7
    e22a:	91 05       	cpc	r25, r1
    e22c:	49 f5       	brne	.+82     	; 0xe280 <udi_cdc_comm_setup+0x78>
    e22e:	16 c0       	rjmp	.+44     	; 0xe25c <udi_cdc_comm_setup+0x54>
    e230:	80 32       	cpi	r24, 0x20	; 32
    e232:	31 f5       	brne	.+76     	; 0xe280 <udi_cdc_comm_setup+0x78>
    e234:	80 91 6b 27 	lds	r24, 0x276B
    e238:	80 32       	cpi	r24, 0x20	; 32
    e23a:	19 f0       	breq	.+6      	; 0xe242 <udi_cdc_comm_setup+0x3a>
    e23c:	82 32       	cpi	r24, 0x22	; 34
    e23e:	01 f5       	brne	.+64     	; 0xe280 <udi_cdc_comm_setup+0x78>
    e240:	18 c0       	rjmp	.+48     	; 0xe272 <udi_cdc_comm_setup+0x6a>
    e242:	80 91 70 27 	lds	r24, 0x2770
    e246:	90 91 71 27 	lds	r25, 0x2771
    e24a:	87 30       	cpi	r24, 0x07	; 7
    e24c:	91 05       	cpc	r25, r1
    e24e:	c1 f4       	brne	.+48     	; 0xe280 <udi_cdc_comm_setup+0x78>
    e250:	2f e4       	ldi	r18, 0x4F	; 79
    e252:	30 e7       	ldi	r19, 0x70	; 112
    e254:	20 93 76 27 	sts	0x2776, r18
    e258:	30 93 77 27 	sts	0x2777, r19
    e25c:	26 ef       	ldi	r18, 0xF6	; 246
    e25e:	35 e2       	ldi	r19, 0x25	; 37
    e260:	20 93 72 27 	sts	0x2772, r18
    e264:	30 93 73 27 	sts	0x2773, r19
    e268:	80 93 74 27 	sts	0x2774, r24
    e26c:	90 93 75 27 	sts	0x2775, r25
    e270:	05 c0       	rjmp	.+10     	; 0xe27c <udi_cdc_comm_setup+0x74>
    e272:	80 91 6c 27 	lds	r24, 0x276C
    e276:	81 70       	andi	r24, 0x01	; 1
    e278:	0e 94 8b 5a 	call	0xb516	; 0xb516 <cdc_set_dtr>
    e27c:	81 e0       	ldi	r24, 0x01	; 1
    e27e:	08 95       	ret
    e280:	80 e0       	ldi	r24, 0x00	; 0
    e282:	08 95       	ret

0000e284 <udi_cdc_comm_enable>:
    e284:	10 92 e9 25 	sts	0x25E9, r1
    e288:	10 92 ea 25 	sts	0x25EA, r1
    e28c:	10 92 eb 25 	sts	0x25EB, r1
    e290:	81 ea       	ldi	r24, 0xA1	; 161
    e292:	80 93 ec 25 	sts	0x25EC, r24
    e296:	80 e2       	ldi	r24, 0x20	; 32
    e298:	80 93 ed 25 	sts	0x25ED, r24
    e29c:	10 92 ee 25 	sts	0x25EE, r1
    e2a0:	10 92 ef 25 	sts	0x25EF, r1
    e2a4:	10 92 f0 25 	sts	0x25F0, r1
    e2a8:	10 92 f1 25 	sts	0x25F1, r1
    e2ac:	82 e0       	ldi	r24, 0x02	; 2
    e2ae:	90 e0       	ldi	r25, 0x00	; 0
    e2b0:	80 93 f2 25 	sts	0x25F2, r24
    e2b4:	90 93 f3 25 	sts	0x25F3, r25
    e2b8:	10 92 f4 25 	sts	0x25F4, r1
    e2bc:	10 92 f5 25 	sts	0x25F5, r1
    e2c0:	80 e0       	ldi	r24, 0x00	; 0
    e2c2:	92 ec       	ldi	r25, 0xC2	; 194
    e2c4:	a1 e0       	ldi	r26, 0x01	; 1
    e2c6:	b0 e0       	ldi	r27, 0x00	; 0
    e2c8:	80 93 f6 25 	sts	0x25F6, r24
    e2cc:	90 93 f7 25 	sts	0x25F7, r25
    e2d0:	a0 93 f8 25 	sts	0x25F8, r26
    e2d4:	b0 93 f9 25 	sts	0x25F9, r27
    e2d8:	10 92 fa 25 	sts	0x25FA, r1
    e2dc:	10 92 fb 25 	sts	0x25FB, r1
    e2e0:	88 e0       	ldi	r24, 0x08	; 8
    e2e2:	80 93 fc 25 	sts	0x25FC, r24
    e2e6:	0e 94 84 5a 	call	0xb508	; 0xb508 <cdc_enable>
    e2ea:	88 23       	and	r24, r24
    e2ec:	39 f0       	breq	.+14     	; 0xe2fc <udi_cdc_comm_enable+0x78>
    e2ee:	80 91 e9 25 	lds	r24, 0x25E9
    e2f2:	8f 5f       	subi	r24, 0xFF	; 255
    e2f4:	80 93 e9 25 	sts	0x25E9, r24
    e2f8:	81 e0       	ldi	r24, 0x01	; 1
    e2fa:	08 95       	ret
    e2fc:	80 e0       	ldi	r24, 0x00	; 0
    e2fe:	08 95       	ret

0000e300 <udi_cdc_multi_get_nb_received_data>:
    e300:	4f b7       	in	r20, 0x3f	; 63
    e302:	f8 94       	cli
    e304:	80 91 e4 25 	lds	r24, 0x25E4
    e308:	90 91 e5 25 	lds	r25, 0x25E5
    e30c:	e0 91 e6 25 	lds	r30, 0x25E6
    e310:	f0 e0       	ldi	r31, 0x00	; 0
    e312:	ee 0f       	add	r30, r30
    e314:	ff 1f       	adc	r31, r31
    e316:	ed 5f       	subi	r30, 0xFD	; 253
    e318:	f9 4d       	sbci	r31, 0xD9	; 217
    e31a:	20 81       	ld	r18, Z
    e31c:	31 81       	ldd	r19, Z+1	; 0x01
    e31e:	28 1b       	sub	r18, r24
    e320:	39 0b       	sbc	r19, r25
    e322:	4f bf       	out	0x3f, r20	; 63
    e324:	c9 01       	movw	r24, r18
    e326:	08 95       	ret

0000e328 <udi_cdc_multi_is_rx_ready>:
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
    e328:	eb df       	rcall	.-42     	; 0xe300 <udi_cdc_multi_get_nb_received_data>
    e32a:	21 e0       	ldi	r18, 0x01	; 1
    e32c:	89 2b       	or	r24, r25
    e32e:	09 f4       	brne	.+2      	; 0xe332 <udi_cdc_multi_is_rx_ready+0xa>
    e330:	20 e0       	ldi	r18, 0x00	; 0
}
    e332:	82 2f       	mov	r24, r18
    e334:	08 95       	ret

0000e336 <udi_cdc_rx_start.isra.8>:

//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
    e336:	0f 93       	push	r16
    e338:	1f 93       	push	r17
    e33a:	cf 93       	push	r28
    e33c:	df 93       	push	r29

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    e33e:	4f b7       	in	r20, 0x3f	; 63
	cpu_irq_disable();
    e340:	f8 94       	cli
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
    e342:	50 91 e6 25 	lds	r21, 0x25E6
	if (udi_cdc_rx_trans_ongoing[port] ||
    e346:	80 91 e3 25 	lds	r24, 0x25E3
    e34a:	81 11       	cpse	r24, r1
    e34c:	10 c0       	rjmp	.+32     	; 0xe36e <udi_cdc_rx_start.isra.8+0x38>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
    e34e:	20 91 e4 25 	lds	r18, 0x25E4
    e352:	30 91 e5 25 	lds	r19, 0x25E5
    e356:	c5 2f       	mov	r28, r21
    e358:	d0 e0       	ldi	r29, 0x00	; 0
    e35a:	fe 01       	movw	r30, r28
    e35c:	ee 0f       	add	r30, r30
    e35e:	ff 1f       	adc	r31, r31
    e360:	ed 5f       	subi	r30, 0xFD	; 253
    e362:	f9 4d       	sbci	r31, 0xD9	; 217
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
    e364:	80 81       	ld	r24, Z
    e366:	91 81       	ldd	r25, Z+1	; 0x01
    e368:	28 17       	cp	r18, r24
    e36a:	39 07       	cpc	r19, r25
    e36c:	18 f4       	brcc	.+6      	; 0xe374 <udi_cdc_rx_start.isra.8+0x3e>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    e36e:	4f bf       	out	0x3f, r20	; 63
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
    e370:	80 e0       	ldi	r24, 0x00	; 0
    e372:	1e c0       	rjmp	.+60     	; 0xe3b0 <udi_cdc_rx_start.isra.8+0x7a>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
    e374:	10 92 e4 25 	sts	0x25E4, r1
    e378:	10 92 e5 25 	sts	0x25E5, r1
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    e37c:	81 e0       	ldi	r24, 0x01	; 1
    e37e:	51 11       	cpse	r21, r1
    e380:	80 e0       	ldi	r24, 0x00	; 0
    e382:	80 93 e6 25 	sts	0x25E6, r24

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
    e386:	81 e0       	ldi	r24, 0x01	; 1
    e388:	80 93 e3 25 	sts	0x25E3, r24
    e38c:	4f bf       	out	0x3f, r20	; 63
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
    e38e:	80 e0       	ldi	r24, 0x00	; 0
    e390:	cb df       	rcall	.-106    	; 0xe328 <udi_cdc_multi_is_rx_ready>
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
    e392:	ae 01       	movw	r20, r28
    e394:	66 e0       	ldi	r22, 0x06	; 6
    e396:	44 0f       	add	r20, r20
    e398:	55 1f       	adc	r21, r21
    e39a:	6a 95       	dec	r22
    e39c:	e1 f7       	brne	.-8      	; 0xe396 <udi_cdc_rx_start.isra.8+0x60>
    e39e:	46 57       	subi	r20, 0x76	; 118
    e3a0:	59 4d       	sbci	r21, 0xD9	; 217
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
    e3a2:	0d ed       	ldi	r16, 0xDD	; 221
    e3a4:	11 e7       	ldi	r17, 0x71	; 113
    e3a6:	20 e4       	ldi	r18, 0x40	; 64
    e3a8:	30 e0       	ldi	r19, 0x00	; 0
    e3aa:	61 e0       	ldi	r22, 0x01	; 1
    e3ac:	82 e0       	ldi	r24, 0x02	; 2
    e3ae:	0d dc       	rcall	.-2022   	; 0xdbca <udd_ep_run>
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
    e3b0:	df 91       	pop	r29
    e3b2:	cf 91       	pop	r28
    e3b4:	1f 91       	pop	r17
    e3b6:	0f 91       	pop	r16
    e3b8:	08 95       	ret

0000e3ba <udi_cdc_data_received>:


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
    e3ba:	0f 93       	push	r16
    e3bc:	1f 93       	push	r17
    e3be:	a4 2f       	mov	r26, r20
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
    e3c0:	89 2b       	or	r24, r25
    e3c2:	21 f5       	brne	.+72     	; 0xe40c <udi_cdc_data_received+0x52>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
    e3c4:	80 91 e6 25 	lds	r24, 0x25E6
    e3c8:	e1 e0       	ldi	r30, 0x01	; 1
    e3ca:	81 11       	cpse	r24, r1
    e3cc:	e0 e0       	ldi	r30, 0x00	; 0
    e3ce:	f0 e0       	ldi	r31, 0x00	; 0
	if (!n) {
    e3d0:	61 15       	cp	r22, r1
    e3d2:	71 05       	cpc	r23, r1
    e3d4:	81 f4       	brne	.+32     	; 0xe3f6 <udi_cdc_data_received+0x3c>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
    e3d6:	af 01       	movw	r20, r30
    e3d8:	b6 e0       	ldi	r27, 0x06	; 6
    e3da:	44 0f       	add	r20, r20
    e3dc:	55 1f       	adc	r21, r21
    e3de:	ba 95       	dec	r27
    e3e0:	e1 f7       	brne	.-8      	; 0xe3da <udi_cdc_data_received+0x20>
    e3e2:	46 57       	subi	r20, 0x76	; 118
    e3e4:	59 4d       	sbci	r21, 0xD9	; 217
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
	if (!n) {
		udd_ep_run( ep,
    e3e6:	0d ed       	ldi	r16, 0xDD	; 221
    e3e8:	11 e7       	ldi	r17, 0x71	; 113
    e3ea:	20 e4       	ldi	r18, 0x40	; 64
    e3ec:	30 e0       	ldi	r19, 0x00	; 0
    e3ee:	61 e0       	ldi	r22, 0x01	; 1
    e3f0:	8a 2f       	mov	r24, r26
    e3f2:	eb db       	rcall	.-2090   	; 0xdbca <udd_ep_run>
    e3f4:	0b c0       	rjmp	.+22     	; 0xe40c <udi_cdc_data_received+0x52>
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
    e3f6:	ee 0f       	add	r30, r30
    e3f8:	ff 1f       	adc	r31, r31
    e3fa:	ed 5f       	subi	r30, 0xFD	; 253
    e3fc:	f9 4d       	sbci	r31, 0xD9	; 217
    e3fe:	60 83       	st	Z, r22
    e400:	71 83       	std	Z+1, r23	; 0x01
	udi_cdc_rx_trans_ongoing[port] = false;
    e402:	10 92 e3 25 	sts	0x25E3, r1
	udi_cdc_rx_start(port);
}
    e406:	1f 91       	pop	r17
    e408:	0f 91       	pop	r16
				udi_cdc_data_received);
		return;
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
	udi_cdc_rx_trans_ongoing[port] = false;
	udi_cdc_rx_start(port);
    e40a:	95 cf       	rjmp	.-214    	; 0xe336 <udi_cdc_rx_start.isra.8>
}
    e40c:	1f 91       	pop	r17
    e40e:	0f 91       	pop	r16
    e410:	08 95       	ret

0000e412 <udi_cdc_data_enable>:
{
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
    e412:	10 92 e8 25 	sts	0x25E8, r1
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
    e416:	10 92 e1 25 	sts	0x25E1, r1
	udi_cdc_tx_both_buf_to_send[port] = false;
    e41a:	10 92 e0 25 	sts	0x25E0, r1
	udi_cdc_tx_buf_sel[port] = 0;
    e41e:	10 92 e2 25 	sts	0x25E2, r1
	udi_cdc_tx_buf_nb[port][0] = 0;
    e422:	10 92 fd 25 	sts	0x25FD, r1
    e426:	10 92 fe 25 	sts	0x25FE, r1
	udi_cdc_tx_buf_nb[port][1] = 0;
    e42a:	10 92 ff 25 	sts	0x25FF, r1
    e42e:	10 92 00 26 	sts	0x2600, r1
	udi_cdc_tx_sof_num[port] = 0;
    e432:	10 92 01 26 	sts	0x2601, r1
    e436:	10 92 02 26 	sts	0x2602, r1
	udi_cdc_tx_send(port);
    e43a:	3e de       	rcall	.-900    	; 0xe0b8 <udi_cdc_tx_send.isra.3>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
    e43c:	10 92 e3 25 	sts	0x25E3, r1
	udi_cdc_rx_buf_sel[port] = 0;
    e440:	10 92 e6 25 	sts	0x25E6, r1
	udi_cdc_rx_buf_nb[port][0] = 0;
    e444:	10 92 03 26 	sts	0x2603, r1
    e448:	10 92 04 26 	sts	0x2604, r1
	udi_cdc_rx_pos[port] = 0;
    e44c:	10 92 e4 25 	sts	0x25E4, r1
    e450:	10 92 e5 25 	sts	0x25E5, r1
	if (!udi_cdc_rx_start(port)) {
    e454:	70 df       	rcall	.-288    	; 0xe336 <udi_cdc_rx_start.isra.8>
    e456:	88 23       	and	r24, r24
    e458:	61 f0       	breq	.+24     	; 0xe472 <udi_cdc_data_enable+0x60>
		return false;
	}
	udi_cdc_nb_data_enabled++;
    e45a:	80 91 e8 25 	lds	r24, 0x25E8
    e45e:	8f 5f       	subi	r24, 0xFF	; 255
    e460:	80 93 e8 25 	sts	0x25E8, r24
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
    e464:	80 91 e8 25 	lds	r24, 0x25E8
    e468:	81 30       	cpi	r24, 0x01	; 1
    e46a:	29 f4       	brne	.+10     	; 0xe476 <udi_cdc_data_enable+0x64>
		udi_cdc_data_running = true;
    e46c:	80 93 e7 25 	sts	0x25E7, r24
    e470:	08 95       	ret
	udi_cdc_rx_trans_ongoing[port] = false;
	udi_cdc_rx_buf_sel[port] = 0;
	udi_cdc_rx_buf_nb[port][0] = 0;
	udi_cdc_rx_pos[port] = 0;
	if (!udi_cdc_rx_start(port)) {
		return false;
    e472:	80 e0       	ldi	r24, 0x00	; 0
    e474:	08 95       	ret
	}
	udi_cdc_nb_data_enabled++;
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
    e476:	81 e0       	ldi	r24, 0x01	; 1
		udi_cdc_data_running = true;
	}
	return true;
}
    e478:	08 95       	ret

0000e47a <__udivmodhi4>:
    e47a:	aa 1b       	sub	r26, r26
    e47c:	bb 1b       	sub	r27, r27
    e47e:	51 e1       	ldi	r21, 0x11	; 17
    e480:	07 c0       	rjmp	.+14     	; 0xe490 <__udivmodhi4_ep>

0000e482 <__udivmodhi4_loop>:
    e482:	aa 1f       	adc	r26, r26
    e484:	bb 1f       	adc	r27, r27
    e486:	a6 17       	cp	r26, r22
    e488:	b7 07       	cpc	r27, r23
    e48a:	10 f0       	brcs	.+4      	; 0xe490 <__udivmodhi4_ep>
    e48c:	a6 1b       	sub	r26, r22
    e48e:	b7 0b       	sbc	r27, r23

0000e490 <__udivmodhi4_ep>:
    e490:	88 1f       	adc	r24, r24
    e492:	99 1f       	adc	r25, r25
    e494:	5a 95       	dec	r21
    e496:	a9 f7       	brne	.-22     	; 0xe482 <__udivmodhi4_loop>
    e498:	80 95       	com	r24
    e49a:	90 95       	com	r25
    e49c:	bc 01       	movw	r22, r24
    e49e:	cd 01       	movw	r24, r26
    e4a0:	08 95       	ret

0000e4a2 <__divmodhi4>:
    e4a2:	97 fb       	bst	r25, 7
    e4a4:	07 2e       	mov	r0, r23
    e4a6:	16 f4       	brtc	.+4      	; 0xe4ac <__divmodhi4+0xa>
    e4a8:	00 94       	com	r0
    e4aa:	06 d0       	rcall	.+12     	; 0xe4b8 <__divmodhi4_neg1>
    e4ac:	77 fd       	sbrc	r23, 7
    e4ae:	08 d0       	rcall	.+16     	; 0xe4c0 <__divmodhi4_neg2>
    e4b0:	e4 df       	rcall	.-56     	; 0xe47a <__udivmodhi4>
    e4b2:	07 fc       	sbrc	r0, 7
    e4b4:	05 d0       	rcall	.+10     	; 0xe4c0 <__divmodhi4_neg2>
    e4b6:	3e f4       	brtc	.+14     	; 0xe4c6 <__divmodhi4_exit>

0000e4b8 <__divmodhi4_neg1>:
    e4b8:	90 95       	com	r25
    e4ba:	81 95       	neg	r24
    e4bc:	9f 4f       	sbci	r25, 0xFF	; 255
    e4be:	08 95       	ret

0000e4c0 <__divmodhi4_neg2>:
    e4c0:	70 95       	com	r23
    e4c2:	61 95       	neg	r22
    e4c4:	7f 4f       	sbci	r23, 0xFF	; 255

0000e4c6 <__divmodhi4_exit>:
    e4c6:	08 95       	ret

0000e4c8 <__udivmodsi4>:
    e4c8:	a1 e2       	ldi	r26, 0x21	; 33
    e4ca:	1a 2e       	mov	r1, r26
    e4cc:	aa 1b       	sub	r26, r26
    e4ce:	bb 1b       	sub	r27, r27
    e4d0:	fd 01       	movw	r30, r26
    e4d2:	0d c0       	rjmp	.+26     	; 0xe4ee <__udivmodsi4_ep>

0000e4d4 <__udivmodsi4_loop>:
    e4d4:	aa 1f       	adc	r26, r26
    e4d6:	bb 1f       	adc	r27, r27
    e4d8:	ee 1f       	adc	r30, r30
    e4da:	ff 1f       	adc	r31, r31
    e4dc:	a2 17       	cp	r26, r18
    e4de:	b3 07       	cpc	r27, r19
    e4e0:	e4 07       	cpc	r30, r20
    e4e2:	f5 07       	cpc	r31, r21
    e4e4:	20 f0       	brcs	.+8      	; 0xe4ee <__udivmodsi4_ep>
    e4e6:	a2 1b       	sub	r26, r18
    e4e8:	b3 0b       	sbc	r27, r19
    e4ea:	e4 0b       	sbc	r30, r20
    e4ec:	f5 0b       	sbc	r31, r21

0000e4ee <__udivmodsi4_ep>:
    e4ee:	66 1f       	adc	r22, r22
    e4f0:	77 1f       	adc	r23, r23
    e4f2:	88 1f       	adc	r24, r24
    e4f4:	99 1f       	adc	r25, r25
    e4f6:	1a 94       	dec	r1
    e4f8:	69 f7       	brne	.-38     	; 0xe4d4 <__udivmodsi4_loop>
    e4fa:	60 95       	com	r22
    e4fc:	70 95       	com	r23
    e4fe:	80 95       	com	r24
    e500:	90 95       	com	r25
    e502:	9b 01       	movw	r18, r22
    e504:	ac 01       	movw	r20, r24
    e506:	bd 01       	movw	r22, r26
    e508:	cf 01       	movw	r24, r30
    e50a:	08 95       	ret

0000e50c <__umulhisi3>:
    e50c:	a2 9f       	mul	r26, r18
    e50e:	b0 01       	movw	r22, r0
    e510:	b3 9f       	mul	r27, r19
    e512:	c0 01       	movw	r24, r0
    e514:	a3 9f       	mul	r26, r19
    e516:	01 d0       	rcall	.+2      	; 0xe51a <__umulhisi3+0xe>
    e518:	b2 9f       	mul	r27, r18
    e51a:	70 0d       	add	r23, r0
    e51c:	81 1d       	adc	r24, r1
    e51e:	11 24       	eor	r1, r1
    e520:	91 1d       	adc	r25, r1
    e522:	08 95       	ret

0000e524 <__usmulhisi3>:
    e524:	f3 df       	rcall	.-26     	; 0xe50c <__umulhisi3>

0000e526 <__usmulhisi3_tail>:
    e526:	b7 ff       	sbrs	r27, 7
    e528:	08 95       	ret
    e52a:	82 1b       	sub	r24, r18
    e52c:	93 0b       	sbc	r25, r19
    e52e:	08 95       	ret

0000e530 <__muluhisi3>:
    e530:	ed df       	rcall	.-38     	; 0xe50c <__umulhisi3>
    e532:	a5 9f       	mul	r26, r21
    e534:	90 0d       	add	r25, r0
    e536:	b4 9f       	mul	r27, r20
    e538:	90 0d       	add	r25, r0
    e53a:	a4 9f       	mul	r26, r20
    e53c:	80 0d       	add	r24, r0
    e53e:	91 1d       	adc	r25, r1
    e540:	11 24       	eor	r1, r1
    e542:	08 95       	ret

0000e544 <__ashldi3>:
    e544:	0f 93       	push	r16
    e546:	0f 73       	andi	r16, 0x3F	; 63
    e548:	51 f0       	breq	.+20     	; 0xe55e <__ashldi3+0x1a>
    e54a:	22 0f       	add	r18, r18
    e54c:	33 1f       	adc	r19, r19
    e54e:	44 1f       	adc	r20, r20
    e550:	55 1f       	adc	r21, r21
    e552:	66 1f       	adc	r22, r22
    e554:	77 1f       	adc	r23, r23
    e556:	88 1f       	adc	r24, r24
    e558:	99 1f       	adc	r25, r25
    e55a:	0a 95       	dec	r16
    e55c:	b1 f7       	brne	.-20     	; 0xe54a <__ashldi3+0x6>
    e55e:	0f 91       	pop	r16
    e560:	08 95       	ret

0000e562 <__adddi3>:
    e562:	2a 0d       	add	r18, r10
    e564:	3b 1d       	adc	r19, r11
    e566:	4c 1d       	adc	r20, r12
    e568:	5d 1d       	adc	r21, r13
    e56a:	6e 1d       	adc	r22, r14
    e56c:	7f 1d       	adc	r23, r15
    e56e:	80 1f       	adc	r24, r16
    e570:	91 1f       	adc	r25, r17
    e572:	08 95       	ret

0000e574 <__subdi3>:
    e574:	2a 19       	sub	r18, r10
    e576:	3b 09       	sbc	r19, r11
    e578:	4c 09       	sbc	r20, r12
    e57a:	5d 09       	sbc	r21, r13
    e57c:	6e 09       	sbc	r22, r14
    e57e:	7f 09       	sbc	r23, r15
    e580:	80 0b       	sbc	r24, r16
    e582:	91 0b       	sbc	r25, r17
    e584:	08 95       	ret

0000e586 <__clzsi2>:
    e586:	06 d0       	rcall	.+12     	; 0xe594 <__clzhi2>
    e588:	84 ff       	sbrs	r24, 4
    e58a:	08 95       	ret
    e58c:	cb 01       	movw	r24, r22
    e58e:	02 d0       	rcall	.+4      	; 0xe594 <__clzhi2>
    e590:	80 5f       	subi	r24, 0xF0	; 240
    e592:	08 95       	ret

0000e594 <__clzhi2>:
    e594:	aa 27       	eor	r26, r26
    e596:	99 23       	and	r25, r25
    e598:	29 f4       	brne	.+10     	; 0xe5a4 <__clzhi2+0x10>
    e59a:	a8 5f       	subi	r26, 0xF8	; 248
    e59c:	98 2b       	or	r25, r24
    e59e:	11 f4       	brne	.+4      	; 0xe5a4 <__clzhi2+0x10>
    e5a0:	80 e1       	ldi	r24, 0x10	; 16
    e5a2:	08 95       	ret
    e5a4:	90 31       	cpi	r25, 0x10	; 16
    e5a6:	18 f4       	brcc	.+6      	; 0xe5ae <__clzhi2+0x1a>
    e5a8:	ad 5f       	subi	r26, 0xFD	; 253
    e5aa:	92 95       	swap	r25
    e5ac:	a3 95       	inc	r26
    e5ae:	99 0f       	add	r25, r25
    e5b0:	e8 f7       	brcc	.-6      	; 0xe5ac <__clzhi2+0x18>
    e5b2:	8a 2f       	mov	r24, r26
    e5b4:	99 27       	eor	r25, r25
    e5b6:	08 95       	ret

0000e5b8 <__prologue_saves__>:
    e5b8:	2f 92       	push	r2
    e5ba:	3f 92       	push	r3
    e5bc:	4f 92       	push	r4
    e5be:	5f 92       	push	r5
    e5c0:	6f 92       	push	r6
    e5c2:	7f 92       	push	r7
    e5c4:	8f 92       	push	r8
    e5c6:	9f 92       	push	r9
    e5c8:	af 92       	push	r10
    e5ca:	bf 92       	push	r11
    e5cc:	cf 92       	push	r12
    e5ce:	df 92       	push	r13
    e5d0:	ef 92       	push	r14
    e5d2:	ff 92       	push	r15
    e5d4:	0f 93       	push	r16
    e5d6:	1f 93       	push	r17
    e5d8:	cf 93       	push	r28
    e5da:	df 93       	push	r29
    e5dc:	cd b7       	in	r28, 0x3d	; 61
    e5de:	de b7       	in	r29, 0x3e	; 62
    e5e0:	ca 1b       	sub	r28, r26
    e5e2:	db 0b       	sbc	r29, r27
    e5e4:	cd bf       	out	0x3d, r28	; 61
    e5e6:	de bf       	out	0x3e, r29	; 62
    e5e8:	19 94       	eijmp

0000e5ea <__epilogue_restores__>:
    e5ea:	2a 88       	ldd	r2, Y+18	; 0x12
    e5ec:	39 88       	ldd	r3, Y+17	; 0x11
    e5ee:	48 88       	ldd	r4, Y+16	; 0x10
    e5f0:	5f 84       	ldd	r5, Y+15	; 0x0f
    e5f2:	6e 84       	ldd	r6, Y+14	; 0x0e
    e5f4:	7d 84       	ldd	r7, Y+13	; 0x0d
    e5f6:	8c 84       	ldd	r8, Y+12	; 0x0c
    e5f8:	9b 84       	ldd	r9, Y+11	; 0x0b
    e5fa:	aa 84       	ldd	r10, Y+10	; 0x0a
    e5fc:	b9 84       	ldd	r11, Y+9	; 0x09
    e5fe:	c8 84       	ldd	r12, Y+8	; 0x08
    e600:	df 80       	ldd	r13, Y+7	; 0x07
    e602:	ee 80       	ldd	r14, Y+6	; 0x06
    e604:	fd 80       	ldd	r15, Y+5	; 0x05
    e606:	0c 81       	ldd	r16, Y+4	; 0x04
    e608:	1b 81       	ldd	r17, Y+3	; 0x03
    e60a:	aa 81       	ldd	r26, Y+2	; 0x02
    e60c:	b9 81       	ldd	r27, Y+1	; 0x01
    e60e:	ce 0f       	add	r28, r30
    e610:	d1 1d       	adc	r29, r1
    e612:	cd bf       	out	0x3d, r28	; 61
    e614:	de bf       	out	0x3e, r29	; 62
    e616:	ed 01       	movw	r28, r26
    e618:	08 95       	ret

0000e61a <__lshrdi3>:
    e61a:	0f 93       	push	r16
    e61c:	0f 73       	andi	r16, 0x3F	; 63
    e61e:	51 f0       	breq	.+20     	; 0xe634 <__lshrdi3+0x1a>
    e620:	96 95       	lsr	r25
    e622:	87 95       	ror	r24
    e624:	77 95       	ror	r23
    e626:	67 95       	ror	r22
    e628:	57 95       	ror	r21
    e62a:	47 95       	ror	r20
    e62c:	37 95       	ror	r19
    e62e:	27 95       	ror	r18
    e630:	0a 95       	dec	r16
    e632:	b1 f7       	brne	.-20     	; 0xe620 <__lshrdi3+0x6>
    e634:	0f 91       	pop	r16
    e636:	08 95       	ret

0000e638 <__cmpdi2>:
    e638:	2a 15       	cp	r18, r10
    e63a:	3b 05       	cpc	r19, r11
    e63c:	4c 05       	cpc	r20, r12
    e63e:	5d 05       	cpc	r21, r13
    e640:	6e 05       	cpc	r22, r14
    e642:	7f 05       	cpc	r23, r15
    e644:	80 07       	cpc	r24, r16
    e646:	91 07       	cpc	r25, r17
    e648:	08 95       	ret

0000e64a <strtoul>:
    e64a:	4f 92       	push	r4
    e64c:	5f 92       	push	r5
    e64e:	6f 92       	push	r6
    e650:	7f 92       	push	r7
    e652:	8f 92       	push	r8
    e654:	9f 92       	push	r9
    e656:	af 92       	push	r10
    e658:	bf 92       	push	r11
    e65a:	cf 92       	push	r12
    e65c:	df 92       	push	r13
    e65e:	ef 92       	push	r14
    e660:	ff 92       	push	r15
    e662:	0f 93       	push	r16
    e664:	1f 93       	push	r17
    e666:	cf 93       	push	r28
    e668:	df 93       	push	r29
    e66a:	5b 01       	movw	r10, r22
    e66c:	ea 01       	movw	r28, r20
    e66e:	61 15       	cp	r22, r1
    e670:	71 05       	cpc	r23, r1
    e672:	19 f0       	breq	.+6      	; 0xe67a <strtoul+0x30>
    e674:	fb 01       	movw	r30, r22
    e676:	80 83       	st	Z, r24
    e678:	91 83       	std	Z+1, r25	; 0x01
    e67a:	20 97       	sbiw	r28, 0x00	; 0
    e67c:	39 f0       	breq	.+14     	; 0xe68c <strtoul+0x42>
    e67e:	9e 01       	movw	r18, r28
    e680:	22 50       	subi	r18, 0x02	; 2
    e682:	31 09       	sbc	r19, r1
    e684:	23 32       	cpi	r18, 0x23	; 35
    e686:	31 05       	cpc	r19, r1
    e688:	08 f0       	brcs	.+2      	; 0xe68c <strtoul+0x42>
    e68a:	be c0       	rjmp	.+380    	; 0xe808 <strtoul+0x1be>
    e68c:	7c 01       	movw	r14, r24
    e68e:	f7 01       	movw	r30, r14
    e690:	91 90       	ld	r9, Z+
    e692:	7f 01       	movw	r14, r30
    e694:	8f 01       	movw	r16, r30
    e696:	89 2d       	mov	r24, r9
    e698:	90 e0       	ldi	r25, 0x00	; 0
    e69a:	de d0       	rcall	.+444    	; 0xe858 <isspace>
    e69c:	89 2b       	or	r24, r25
    e69e:	b9 f7       	brne	.-18     	; 0xe68e <strtoul+0x44>
    e6a0:	fd e2       	ldi	r31, 0x2D	; 45
    e6a2:	9f 12       	cpse	r9, r31
    e6a4:	06 c0       	rjmp	.+12     	; 0xe6b2 <strtoul+0x68>
    e6a6:	f7 01       	movw	r30, r14
    e6a8:	91 90       	ld	r9, Z+
    e6aa:	8f 01       	movw	r16, r30
    e6ac:	88 24       	eor	r8, r8
    e6ae:	83 94       	inc	r8
    e6b0:	07 c0       	rjmp	.+14     	; 0xe6c0 <strtoul+0x76>
    e6b2:	fb e2       	ldi	r31, 0x2B	; 43
    e6b4:	9f 12       	cpse	r9, r31
    e6b6:	03 c0       	rjmp	.+6      	; 0xe6be <strtoul+0x74>
    e6b8:	f7 01       	movw	r30, r14
    e6ba:	91 90       	ld	r9, Z+
    e6bc:	8f 01       	movw	r16, r30
    e6be:	81 2c       	mov	r8, r1
    e6c0:	20 97       	sbiw	r28, 0x00	; 0
    e6c2:	09 f4       	brne	.+2      	; 0xe6c6 <strtoul+0x7c>
    e6c4:	ab c0       	rjmp	.+342    	; 0xe81c <strtoul+0x1d2>
    e6c6:	c0 31       	cpi	r28, 0x10	; 16
    e6c8:	d1 05       	cpc	r29, r1
    e6ca:	81 f4       	brne	.+32     	; 0xe6ec <strtoul+0xa2>
    e6cc:	ae c0       	rjmp	.+348    	; 0xe82a <strtoul+0x1e0>
    e6ce:	f8 01       	movw	r30, r16
    e6d0:	80 81       	ld	r24, Z
    e6d2:	88 37       	cpi	r24, 0x78	; 120
    e6d4:	19 f0       	breq	.+6      	; 0xe6dc <strtoul+0x92>
    e6d6:	88 35       	cpi	r24, 0x58	; 88
    e6d8:	09 f0       	breq	.+2      	; 0xe6dc <strtoul+0x92>
    e6da:	9a c0       	rjmp	.+308    	; 0xe810 <strtoul+0x1c6>
    e6dc:	f8 01       	movw	r30, r16
    e6de:	91 80       	ldd	r9, Z+1	; 0x01
    e6e0:	0e 5f       	subi	r16, 0xFE	; 254
    e6e2:	1f 4f       	sbci	r17, 0xFF	; 255
    e6e4:	f2 e0       	ldi	r31, 0x02	; 2
    e6e6:	8f 2a       	or	r8, r31
    e6e8:	c0 e1       	ldi	r28, 0x10	; 16
    e6ea:	d0 e0       	ldi	r29, 0x00	; 0
    e6ec:	ca 30       	cpi	r28, 0x0A	; 10
    e6ee:	d1 05       	cpc	r29, r1
    e6f0:	19 f1       	breq	.+70     	; 0xe738 <strtoul+0xee>
    e6f2:	c0 31       	cpi	r28, 0x10	; 16
    e6f4:	d1 05       	cpc	r29, r1
    e6f6:	21 f0       	breq	.+8      	; 0xe700 <strtoul+0xb6>
    e6f8:	c8 30       	cpi	r28, 0x08	; 8
    e6fa:	d1 05       	cpc	r29, r1
    e6fc:	89 f4       	brne	.+34     	; 0xe720 <strtoul+0xd6>
    e6fe:	07 c0       	rjmp	.+14     	; 0xe70e <strtoul+0xc4>
    e700:	cc 24       	eor	r12, r12
    e702:	ca 94       	dec	r12
    e704:	dc 2c       	mov	r13, r12
    e706:	ec 2c       	mov	r14, r12
    e708:	3f e0       	ldi	r19, 0x0F	; 15
    e70a:	f3 2e       	mov	r15, r19
    e70c:	1b c0       	rjmp	.+54     	; 0xe744 <strtoul+0xfa>
    e70e:	c8 e0       	ldi	r28, 0x08	; 8
    e710:	d0 e0       	ldi	r29, 0x00	; 0
    e712:	cc 24       	eor	r12, r12
    e714:	ca 94       	dec	r12
    e716:	dc 2c       	mov	r13, r12
    e718:	ec 2c       	mov	r14, r12
    e71a:	2f e1       	ldi	r18, 0x1F	; 31
    e71c:	f2 2e       	mov	r15, r18
    e71e:	12 c0       	rjmp	.+36     	; 0xe744 <strtoul+0xfa>
    e720:	9e 01       	movw	r18, r28
    e722:	44 27       	eor	r20, r20
    e724:	37 fd       	sbrc	r19, 7
    e726:	40 95       	com	r20
    e728:	54 2f       	mov	r21, r20
    e72a:	6f ef       	ldi	r22, 0xFF	; 255
    e72c:	7f ef       	ldi	r23, 0xFF	; 255
    e72e:	cb 01       	movw	r24, r22
    e730:	cb de       	rcall	.-618    	; 0xe4c8 <__udivmodsi4>
    e732:	69 01       	movw	r12, r18
    e734:	7a 01       	movw	r14, r20
    e736:	06 c0       	rjmp	.+12     	; 0xe744 <strtoul+0xfa>
    e738:	99 e9       	ldi	r25, 0x99	; 153
    e73a:	c9 2e       	mov	r12, r25
    e73c:	dc 2c       	mov	r13, r12
    e73e:	ec 2c       	mov	r14, r12
    e740:	99 e1       	ldi	r25, 0x19	; 25
    e742:	f9 2e       	mov	r15, r25
    e744:	60 e0       	ldi	r22, 0x00	; 0
    e746:	20 e0       	ldi	r18, 0x00	; 0
    e748:	30 e0       	ldi	r19, 0x00	; 0
    e74a:	a9 01       	movw	r20, r18
    e74c:	2e 01       	movw	r4, r28
    e74e:	66 24       	eor	r6, r6
    e750:	57 fc       	sbrc	r5, 7
    e752:	60 94       	com	r6
    e754:	76 2c       	mov	r7, r6
    e756:	e9 2d       	mov	r30, r9
    e758:	e0 53       	subi	r30, 0x30	; 48
    e75a:	ea 30       	cpi	r30, 0x0A	; 10
    e75c:	60 f0       	brcs	.+24     	; 0xe776 <strtoul+0x12c>
    e75e:	89 2d       	mov	r24, r9
    e760:	81 54       	subi	r24, 0x41	; 65
    e762:	8a 31       	cpi	r24, 0x1A	; 26
    e764:	10 f4       	brcc	.+4      	; 0xe76a <strtoul+0x120>
    e766:	e7 50       	subi	r30, 0x07	; 7
    e768:	06 c0       	rjmp	.+12     	; 0xe776 <strtoul+0x12c>
    e76a:	89 2d       	mov	r24, r9
    e76c:	81 56       	subi	r24, 0x61	; 97
    e76e:	8a 31       	cpi	r24, 0x1A	; 26
    e770:	38 f5       	brcc	.+78     	; 0xe7c0 <strtoul+0x176>
    e772:	e9 2d       	mov	r30, r9
    e774:	e7 55       	subi	r30, 0x57	; 87
    e776:	8e 2f       	mov	r24, r30
    e778:	90 e0       	ldi	r25, 0x00	; 0
    e77a:	8c 17       	cp	r24, r28
    e77c:	9d 07       	cpc	r25, r29
    e77e:	04 f5       	brge	.+64     	; 0xe7c0 <strtoul+0x176>
    e780:	6f 3f       	cpi	r22, 0xFF	; 255
    e782:	d1 f0       	breq	.+52     	; 0xe7b8 <strtoul+0x16e>
    e784:	c2 16       	cp	r12, r18
    e786:	d3 06       	cpc	r13, r19
    e788:	e4 06       	cpc	r14, r20
    e78a:	f5 06       	cpc	r15, r21
    e78c:	90 f0       	brcs	.+36     	; 0xe7b2 <strtoul+0x168>
    e78e:	c3 01       	movw	r24, r6
    e790:	b2 01       	movw	r22, r4
    e792:	ad d3       	rcall	.+1882   	; 0xeeee <__mulsi3>
    e794:	9b 01       	movw	r18, r22
    e796:	ac 01       	movw	r20, r24
    e798:	8e 2f       	mov	r24, r30
    e79a:	90 e0       	ldi	r25, 0x00	; 0
    e79c:	a0 e0       	ldi	r26, 0x00	; 0
    e79e:	b0 e0       	ldi	r27, 0x00	; 0
    e7a0:	28 0f       	add	r18, r24
    e7a2:	39 1f       	adc	r19, r25
    e7a4:	4a 1f       	adc	r20, r26
    e7a6:	5b 1f       	adc	r21, r27
    e7a8:	28 17       	cp	r18, r24
    e7aa:	39 07       	cpc	r19, r25
    e7ac:	4a 07       	cpc	r20, r26
    e7ae:	5b 07       	cpc	r21, r27
    e7b0:	10 f4       	brcc	.+4      	; 0xe7b6 <strtoul+0x16c>
    e7b2:	6f ef       	ldi	r22, 0xFF	; 255
    e7b4:	01 c0       	rjmp	.+2      	; 0xe7b8 <strtoul+0x16e>
    e7b6:	61 e0       	ldi	r22, 0x01	; 1
    e7b8:	f8 01       	movw	r30, r16
    e7ba:	91 90       	ld	r9, Z+
    e7bc:	8f 01       	movw	r16, r30
    e7be:	cb cf       	rjmp	.-106    	; 0xe756 <strtoul+0x10c>
    e7c0:	a1 14       	cp	r10, r1
    e7c2:	b1 04       	cpc	r11, r1
    e7c4:	61 f0       	breq	.+24     	; 0xe7de <strtoul+0x194>
    e7c6:	66 23       	and	r22, r22
    e7c8:	19 f0       	breq	.+6      	; 0xe7d0 <strtoul+0x186>
    e7ca:	01 50       	subi	r16, 0x01	; 1
    e7cc:	11 09       	sbc	r17, r1
    e7ce:	04 c0       	rjmp	.+8      	; 0xe7d8 <strtoul+0x18e>
    e7d0:	81 fe       	sbrs	r8, 1
    e7d2:	05 c0       	rjmp	.+10     	; 0xe7de <strtoul+0x194>
    e7d4:	02 50       	subi	r16, 0x02	; 2
    e7d6:	11 09       	sbc	r17, r1
    e7d8:	f5 01       	movw	r30, r10
    e7da:	00 83       	st	Z, r16
    e7dc:	11 83       	std	Z+1, r17	; 0x01
    e7de:	80 fe       	sbrs	r8, 0
    e7e0:	07 c0       	rjmp	.+14     	; 0xe7f0 <strtoul+0x1a6>
    e7e2:	50 95       	com	r21
    e7e4:	40 95       	com	r20
    e7e6:	30 95       	com	r19
    e7e8:	21 95       	neg	r18
    e7ea:	3f 4f       	sbci	r19, 0xFF	; 255
    e7ec:	4f 4f       	sbci	r20, 0xFF	; 255
    e7ee:	5f 4f       	sbci	r21, 0xFF	; 255
    e7f0:	67 ff       	sbrs	r22, 7
    e7f2:	1f c0       	rjmp	.+62     	; 0xe832 <strtoul+0x1e8>
    e7f4:	82 e2       	ldi	r24, 0x22	; 34
    e7f6:	90 e0       	ldi	r25, 0x00	; 0
    e7f8:	80 93 7a 27 	sts	0x277A, r24
    e7fc:	90 93 7b 27 	sts	0x277B, r25
    e800:	2f ef       	ldi	r18, 0xFF	; 255
    e802:	3f ef       	ldi	r19, 0xFF	; 255
    e804:	a9 01       	movw	r20, r18
    e806:	15 c0       	rjmp	.+42     	; 0xe832 <strtoul+0x1e8>
    e808:	20 e0       	ldi	r18, 0x00	; 0
    e80a:	30 e0       	ldi	r19, 0x00	; 0
    e80c:	a9 01       	movw	r20, r18
    e80e:	11 c0       	rjmp	.+34     	; 0xe832 <strtoul+0x1e8>
    e810:	80 e3       	ldi	r24, 0x30	; 48
    e812:	98 2e       	mov	r9, r24
    e814:	20 97       	sbiw	r28, 0x00	; 0
    e816:	09 f4       	brne	.+2      	; 0xe81a <strtoul+0x1d0>
    e818:	7a cf       	rjmp	.-268    	; 0xe70e <strtoul+0xc4>
    e81a:	68 cf       	rjmp	.-304    	; 0xe6ec <strtoul+0xa2>
    e81c:	f0 e3       	ldi	r31, 0x30	; 48
    e81e:	9f 16       	cp	r9, r31
    e820:	09 f4       	brne	.+2      	; 0xe824 <strtoul+0x1da>
    e822:	55 cf       	rjmp	.-342    	; 0xe6ce <strtoul+0x84>
    e824:	ca e0       	ldi	r28, 0x0A	; 10
    e826:	d0 e0       	ldi	r29, 0x00	; 0
    e828:	87 cf       	rjmp	.-242    	; 0xe738 <strtoul+0xee>
    e82a:	80 e3       	ldi	r24, 0x30	; 48
    e82c:	98 12       	cpse	r9, r24
    e82e:	5e cf       	rjmp	.-324    	; 0xe6ec <strtoul+0xa2>
    e830:	4e cf       	rjmp	.-356    	; 0xe6ce <strtoul+0x84>
    e832:	b9 01       	movw	r22, r18
    e834:	ca 01       	movw	r24, r20
    e836:	df 91       	pop	r29
    e838:	cf 91       	pop	r28
    e83a:	1f 91       	pop	r17
    e83c:	0f 91       	pop	r16
    e83e:	ff 90       	pop	r15
    e840:	ef 90       	pop	r14
    e842:	df 90       	pop	r13
    e844:	cf 90       	pop	r12
    e846:	bf 90       	pop	r11
    e848:	af 90       	pop	r10
    e84a:	9f 90       	pop	r9
    e84c:	8f 90       	pop	r8
    e84e:	7f 90       	pop	r7
    e850:	6f 90       	pop	r6
    e852:	5f 90       	pop	r5
    e854:	4f 90       	pop	r4
    e856:	08 95       	ret

0000e858 <isspace>:
    e858:	91 11       	cpse	r25, r1
    e85a:	a1 c2       	rjmp	.+1346   	; 0xed9e <__ctype_isfalse>
    e85c:	80 32       	cpi	r24, 0x20	; 32
    e85e:	19 f0       	breq	.+6      	; 0xe866 <isspace+0xe>
    e860:	89 50       	subi	r24, 0x09	; 9
    e862:	85 50       	subi	r24, 0x05	; 5
    e864:	d0 f7       	brcc	.-12     	; 0xe85a <isspace+0x2>
    e866:	08 95       	ret

0000e868 <strncasecmp_P>:
    e868:	fb 01       	movw	r30, r22
    e86a:	dc 01       	movw	r26, r24
    e86c:	41 50       	subi	r20, 0x01	; 1
    e86e:	50 40       	sbci	r21, 0x00	; 0
    e870:	88 f0       	brcs	.+34     	; 0xe894 <strncasecmp_P+0x2c>
    e872:	8d 91       	ld	r24, X+
    e874:	81 34       	cpi	r24, 0x41	; 65
    e876:	1c f0       	brlt	.+6      	; 0xe87e <strncasecmp_P+0x16>
    e878:	8b 35       	cpi	r24, 0x5B	; 91
    e87a:	0c f4       	brge	.+2      	; 0xe87e <strncasecmp_P+0x16>
    e87c:	80 5e       	subi	r24, 0xE0	; 224
    e87e:	65 91       	lpm	r22, Z+
    e880:	61 34       	cpi	r22, 0x41	; 65
    e882:	1c f0       	brlt	.+6      	; 0xe88a <strncasecmp_P+0x22>
    e884:	6b 35       	cpi	r22, 0x5B	; 91
    e886:	0c f4       	brge	.+2      	; 0xe88a <strncasecmp_P+0x22>
    e888:	60 5e       	subi	r22, 0xE0	; 224
    e88a:	86 1b       	sub	r24, r22
    e88c:	61 11       	cpse	r22, r1
    e88e:	71 f3       	breq	.-36     	; 0xe86c <strncasecmp_P+0x4>
    e890:	99 0b       	sbc	r25, r25
    e892:	08 95       	ret
    e894:	88 1b       	sub	r24, r24
    e896:	fc cf       	rjmp	.-8      	; 0xe890 <strncasecmp_P+0x28>

0000e898 <memcpy>:
    e898:	fb 01       	movw	r30, r22
    e89a:	dc 01       	movw	r26, r24
    e89c:	02 c0       	rjmp	.+4      	; 0xe8a2 <memcpy+0xa>
    e89e:	01 90       	ld	r0, Z+
    e8a0:	0d 92       	st	X+, r0
    e8a2:	41 50       	subi	r20, 0x01	; 1
    e8a4:	50 40       	sbci	r21, 0x00	; 0
    e8a6:	d8 f7       	brcc	.-10     	; 0xe89e <memcpy+0x6>
    e8a8:	08 95       	ret

0000e8aa <strnlen>:
    e8aa:	fc 01       	movw	r30, r24
    e8ac:	61 50       	subi	r22, 0x01	; 1
    e8ae:	70 40       	sbci	r23, 0x00	; 0
    e8b0:	01 90       	ld	r0, Z+
    e8b2:	01 10       	cpse	r0, r1
    e8b4:	d8 f7       	brcc	.-10     	; 0xe8ac <strnlen+0x2>
    e8b6:	80 95       	com	r24
    e8b8:	90 95       	com	r25
    e8ba:	8e 0f       	add	r24, r30
    e8bc:	9f 1f       	adc	r25, r31
    e8be:	08 95       	ret

0000e8c0 <itoa>:
    e8c0:	fb 01       	movw	r30, r22
    e8c2:	9f 01       	movw	r18, r30
    e8c4:	e8 94       	clt
    e8c6:	42 30       	cpi	r20, 0x02	; 2
    e8c8:	bc f0       	brlt	.+46     	; 0xe8f8 <itoa+0x38>
    e8ca:	45 32       	cpi	r20, 0x25	; 37
    e8cc:	ac f4       	brge	.+42     	; 0xe8f8 <itoa+0x38>
    e8ce:	4a 30       	cpi	r20, 0x0A	; 10
    e8d0:	29 f4       	brne	.+10     	; 0xe8dc <itoa+0x1c>
    e8d2:	97 fb       	bst	r25, 7
    e8d4:	1e f4       	brtc	.+6      	; 0xe8dc <itoa+0x1c>
    e8d6:	90 95       	com	r25
    e8d8:	81 95       	neg	r24
    e8da:	9f 4f       	sbci	r25, 0xFF	; 255
    e8dc:	64 2f       	mov	r22, r20
    e8de:	77 27       	eor	r23, r23
    e8e0:	cc dd       	rcall	.-1128   	; 0xe47a <__udivmodhi4>
    e8e2:	80 5d       	subi	r24, 0xD0	; 208
    e8e4:	8a 33       	cpi	r24, 0x3A	; 58
    e8e6:	0c f0       	brlt	.+2      	; 0xe8ea <itoa+0x2a>
    e8e8:	89 5d       	subi	r24, 0xD9	; 217
    e8ea:	81 93       	st	Z+, r24
    e8ec:	cb 01       	movw	r24, r22
    e8ee:	00 97       	sbiw	r24, 0x00	; 0
    e8f0:	a9 f7       	brne	.-22     	; 0xe8dc <itoa+0x1c>
    e8f2:	16 f4       	brtc	.+4      	; 0xe8f8 <itoa+0x38>
    e8f4:	5d e2       	ldi	r21, 0x2D	; 45
    e8f6:	51 93       	st	Z+, r21
    e8f8:	10 82       	st	Z, r1
    e8fa:	c9 01       	movw	r24, r18
    e8fc:	5e c2       	rjmp	.+1212   	; 0xedba <strrev>

0000e8fe <snprintf_P>:
    e8fe:	0f 93       	push	r16
    e900:	1f 93       	push	r17
    e902:	cf 93       	push	r28
    e904:	df 93       	push	r29
    e906:	cd b7       	in	r28, 0x3d	; 61
    e908:	de b7       	in	r29, 0x3e	; 62
    e90a:	2e 97       	sbiw	r28, 0x0e	; 14
    e90c:	cd bf       	out	0x3d, r28	; 61
    e90e:	de bf       	out	0x3e, r29	; 62
    e910:	0e 89       	ldd	r16, Y+22	; 0x16
    e912:	1f 89       	ldd	r17, Y+23	; 0x17
    e914:	88 8d       	ldd	r24, Y+24	; 0x18
    e916:	99 8d       	ldd	r25, Y+25	; 0x19
    e918:	2e e0       	ldi	r18, 0x0E	; 14
    e91a:	2c 83       	std	Y+4, r18	; 0x04
    e91c:	09 83       	std	Y+1, r16	; 0x01
    e91e:	1a 83       	std	Y+2, r17	; 0x02
    e920:	97 ff       	sbrs	r25, 7
    e922:	02 c0       	rjmp	.+4      	; 0xe928 <snprintf_P+0x2a>
    e924:	80 e0       	ldi	r24, 0x00	; 0
    e926:	90 e8       	ldi	r25, 0x80	; 128
    e928:	01 97       	sbiw	r24, 0x01	; 1
    e92a:	8d 83       	std	Y+5, r24	; 0x05
    e92c:	9e 83       	std	Y+6, r25	; 0x06
    e92e:	ce 01       	movw	r24, r28
    e930:	4c 96       	adiw	r24, 0x1c	; 28
    e932:	ac 01       	movw	r20, r24
    e934:	6a 8d       	ldd	r22, Y+26	; 0x1a
    e936:	7b 8d       	ldd	r23, Y+27	; 0x1b
    e938:	ce 01       	movw	r24, r28
    e93a:	01 96       	adiw	r24, 0x01	; 1
    e93c:	3e d0       	rcall	.+124    	; 0xe9ba <vfprintf>
    e93e:	4d 81       	ldd	r20, Y+5	; 0x05
    e940:	5e 81       	ldd	r21, Y+6	; 0x06
    e942:	57 fd       	sbrc	r21, 7
    e944:	0a c0       	rjmp	.+20     	; 0xe95a <snprintf_P+0x5c>
    e946:	2f 81       	ldd	r18, Y+7	; 0x07
    e948:	38 85       	ldd	r19, Y+8	; 0x08
    e94a:	42 17       	cp	r20, r18
    e94c:	53 07       	cpc	r21, r19
    e94e:	0c f4       	brge	.+2      	; 0xe952 <snprintf_P+0x54>
    e950:	9a 01       	movw	r18, r20
    e952:	f8 01       	movw	r30, r16
    e954:	e2 0f       	add	r30, r18
    e956:	f3 1f       	adc	r31, r19
    e958:	10 82       	st	Z, r1
    e95a:	2e 96       	adiw	r28, 0x0e	; 14
    e95c:	cd bf       	out	0x3d, r28	; 61
    e95e:	de bf       	out	0x3e, r29	; 62
    e960:	df 91       	pop	r29
    e962:	cf 91       	pop	r28
    e964:	1f 91       	pop	r17
    e966:	0f 91       	pop	r16
    e968:	08 95       	ret

0000e96a <sprintf_P>:
    e96a:	0f 93       	push	r16
    e96c:	1f 93       	push	r17
    e96e:	cf 93       	push	r28
    e970:	df 93       	push	r29
    e972:	cd b7       	in	r28, 0x3d	; 61
    e974:	de b7       	in	r29, 0x3e	; 62
    e976:	2e 97       	sbiw	r28, 0x0e	; 14
    e978:	cd bf       	out	0x3d, r28	; 61
    e97a:	de bf       	out	0x3e, r29	; 62
    e97c:	0e 89       	ldd	r16, Y+22	; 0x16
    e97e:	1f 89       	ldd	r17, Y+23	; 0x17
    e980:	8e e0       	ldi	r24, 0x0E	; 14
    e982:	8c 83       	std	Y+4, r24	; 0x04
    e984:	09 83       	std	Y+1, r16	; 0x01
    e986:	1a 83       	std	Y+2, r17	; 0x02
    e988:	8f ef       	ldi	r24, 0xFF	; 255
    e98a:	9f e7       	ldi	r25, 0x7F	; 127
    e98c:	8d 83       	std	Y+5, r24	; 0x05
    e98e:	9e 83       	std	Y+6, r25	; 0x06
    e990:	ce 01       	movw	r24, r28
    e992:	4a 96       	adiw	r24, 0x1a	; 26
    e994:	ac 01       	movw	r20, r24
    e996:	68 8d       	ldd	r22, Y+24	; 0x18
    e998:	79 8d       	ldd	r23, Y+25	; 0x19
    e99a:	ce 01       	movw	r24, r28
    e99c:	01 96       	adiw	r24, 0x01	; 1
    e99e:	0d d0       	rcall	.+26     	; 0xe9ba <vfprintf>
    e9a0:	ef 81       	ldd	r30, Y+7	; 0x07
    e9a2:	f8 85       	ldd	r31, Y+8	; 0x08
    e9a4:	e0 0f       	add	r30, r16
    e9a6:	f1 1f       	adc	r31, r17
    e9a8:	10 82       	st	Z, r1
    e9aa:	2e 96       	adiw	r28, 0x0e	; 14
    e9ac:	cd bf       	out	0x3d, r28	; 61
    e9ae:	de bf       	out	0x3e, r29	; 62
    e9b0:	df 91       	pop	r29
    e9b2:	cf 91       	pop	r28
    e9b4:	1f 91       	pop	r17
    e9b6:	0f 91       	pop	r16
    e9b8:	08 95       	ret

0000e9ba <vfprintf>:
    e9ba:	2f 92       	push	r2
    e9bc:	3f 92       	push	r3
    e9be:	4f 92       	push	r4
    e9c0:	5f 92       	push	r5
    e9c2:	6f 92       	push	r6
    e9c4:	7f 92       	push	r7
    e9c6:	8f 92       	push	r8
    e9c8:	9f 92       	push	r9
    e9ca:	af 92       	push	r10
    e9cc:	bf 92       	push	r11
    e9ce:	cf 92       	push	r12
    e9d0:	df 92       	push	r13
    e9d2:	ef 92       	push	r14
    e9d4:	ff 92       	push	r15
    e9d6:	0f 93       	push	r16
    e9d8:	1f 93       	push	r17
    e9da:	cf 93       	push	r28
    e9dc:	df 93       	push	r29
    e9de:	cd b7       	in	r28, 0x3d	; 61
    e9e0:	de b7       	in	r29, 0x3e	; 62
    e9e2:	2c 97       	sbiw	r28, 0x0c	; 12
    e9e4:	cd bf       	out	0x3d, r28	; 61
    e9e6:	de bf       	out	0x3e, r29	; 62
    e9e8:	7c 01       	movw	r14, r24
    e9ea:	6b 01       	movw	r12, r22
    e9ec:	8a 01       	movw	r16, r20
    e9ee:	fc 01       	movw	r30, r24
    e9f0:	16 82       	std	Z+6, r1	; 0x06
    e9f2:	17 82       	std	Z+7, r1	; 0x07
    e9f4:	83 81       	ldd	r24, Z+3	; 0x03
    e9f6:	81 ff       	sbrs	r24, 1
    e9f8:	b9 c1       	rjmp	.+882    	; 0xed6c <vfprintf+0x3b2>
    e9fa:	88 24       	eor	r8, r8
    e9fc:	83 94       	inc	r8
    e9fe:	91 2c       	mov	r9, r1
    ea00:	8c 0e       	add	r8, r28
    ea02:	9d 1e       	adc	r9, r29
    ea04:	f7 01       	movw	r30, r14
    ea06:	93 81       	ldd	r25, Z+3	; 0x03
    ea08:	f6 01       	movw	r30, r12
    ea0a:	93 fd       	sbrc	r25, 3
    ea0c:	85 91       	lpm	r24, Z+
    ea0e:	93 ff       	sbrs	r25, 3
    ea10:	81 91       	ld	r24, Z+
    ea12:	6f 01       	movw	r12, r30
    ea14:	88 23       	and	r24, r24
    ea16:	09 f4       	brne	.+2      	; 0xea1a <vfprintf+0x60>
    ea18:	a5 c1       	rjmp	.+842    	; 0xed64 <vfprintf+0x3aa>
    ea1a:	85 32       	cpi	r24, 0x25	; 37
    ea1c:	39 f4       	brne	.+14     	; 0xea2c <vfprintf+0x72>
    ea1e:	93 fd       	sbrc	r25, 3
    ea20:	85 91       	lpm	r24, Z+
    ea22:	93 ff       	sbrs	r25, 3
    ea24:	81 91       	ld	r24, Z+
    ea26:	6f 01       	movw	r12, r30
    ea28:	85 32       	cpi	r24, 0x25	; 37
    ea2a:	21 f4       	brne	.+8      	; 0xea34 <vfprintf+0x7a>
    ea2c:	b7 01       	movw	r22, r14
    ea2e:	90 e0       	ldi	r25, 0x00	; 0
    ea30:	d4 d1       	rcall	.+936    	; 0xedda <fputc>
    ea32:	e8 cf       	rjmp	.-48     	; 0xea04 <vfprintf+0x4a>
    ea34:	51 2c       	mov	r5, r1
    ea36:	31 2c       	mov	r3, r1
    ea38:	20 e0       	ldi	r18, 0x00	; 0
    ea3a:	20 32       	cpi	r18, 0x20	; 32
    ea3c:	a8 f4       	brcc	.+42     	; 0xea68 <vfprintf+0xae>
    ea3e:	8b 32       	cpi	r24, 0x2B	; 43
    ea40:	61 f0       	breq	.+24     	; 0xea5a <vfprintf+0xa0>
    ea42:	28 f4       	brcc	.+10     	; 0xea4e <vfprintf+0x94>
    ea44:	80 32       	cpi	r24, 0x20	; 32
    ea46:	51 f0       	breq	.+20     	; 0xea5c <vfprintf+0xa2>
    ea48:	83 32       	cpi	r24, 0x23	; 35
    ea4a:	71 f4       	brne	.+28     	; 0xea68 <vfprintf+0xae>
    ea4c:	0b c0       	rjmp	.+22     	; 0xea64 <vfprintf+0xaa>
    ea4e:	8d 32       	cpi	r24, 0x2D	; 45
    ea50:	39 f0       	breq	.+14     	; 0xea60 <vfprintf+0xa6>
    ea52:	80 33       	cpi	r24, 0x30	; 48
    ea54:	49 f4       	brne	.+18     	; 0xea68 <vfprintf+0xae>
    ea56:	21 60       	ori	r18, 0x01	; 1
    ea58:	28 c0       	rjmp	.+80     	; 0xeaaa <vfprintf+0xf0>
    ea5a:	22 60       	ori	r18, 0x02	; 2
    ea5c:	24 60       	ori	r18, 0x04	; 4
    ea5e:	25 c0       	rjmp	.+74     	; 0xeaaa <vfprintf+0xf0>
    ea60:	28 60       	ori	r18, 0x08	; 8
    ea62:	23 c0       	rjmp	.+70     	; 0xeaaa <vfprintf+0xf0>
    ea64:	20 61       	ori	r18, 0x10	; 16
    ea66:	21 c0       	rjmp	.+66     	; 0xeaaa <vfprintf+0xf0>
    ea68:	27 fd       	sbrc	r18, 7
    ea6a:	27 c0       	rjmp	.+78     	; 0xeaba <vfprintf+0x100>
    ea6c:	38 2f       	mov	r19, r24
    ea6e:	30 53       	subi	r19, 0x30	; 48
    ea70:	3a 30       	cpi	r19, 0x0A	; 10
    ea72:	78 f4       	brcc	.+30     	; 0xea92 <vfprintf+0xd8>
    ea74:	26 ff       	sbrs	r18, 6
    ea76:	06 c0       	rjmp	.+12     	; 0xea84 <vfprintf+0xca>
    ea78:	fa e0       	ldi	r31, 0x0A	; 10
    ea7a:	5f 9e       	mul	r5, r31
    ea7c:	30 0d       	add	r19, r0
    ea7e:	11 24       	eor	r1, r1
    ea80:	53 2e       	mov	r5, r19
    ea82:	13 c0       	rjmp	.+38     	; 0xeaaa <vfprintf+0xf0>
    ea84:	8a e0       	ldi	r24, 0x0A	; 10
    ea86:	38 9e       	mul	r3, r24
    ea88:	30 0d       	add	r19, r0
    ea8a:	11 24       	eor	r1, r1
    ea8c:	33 2e       	mov	r3, r19
    ea8e:	20 62       	ori	r18, 0x20	; 32
    ea90:	0c c0       	rjmp	.+24     	; 0xeaaa <vfprintf+0xf0>
    ea92:	8e 32       	cpi	r24, 0x2E	; 46
    ea94:	21 f4       	brne	.+8      	; 0xea9e <vfprintf+0xe4>
    ea96:	26 fd       	sbrc	r18, 6
    ea98:	65 c1       	rjmp	.+714    	; 0xed64 <vfprintf+0x3aa>
    ea9a:	20 64       	ori	r18, 0x40	; 64
    ea9c:	06 c0       	rjmp	.+12     	; 0xeaaa <vfprintf+0xf0>
    ea9e:	8c 36       	cpi	r24, 0x6C	; 108
    eaa0:	11 f4       	brne	.+4      	; 0xeaa6 <vfprintf+0xec>
    eaa2:	20 68       	ori	r18, 0x80	; 128
    eaa4:	02 c0       	rjmp	.+4      	; 0xeaaa <vfprintf+0xf0>
    eaa6:	88 36       	cpi	r24, 0x68	; 104
    eaa8:	41 f4       	brne	.+16     	; 0xeaba <vfprintf+0x100>
    eaaa:	f6 01       	movw	r30, r12
    eaac:	93 fd       	sbrc	r25, 3
    eaae:	85 91       	lpm	r24, Z+
    eab0:	93 ff       	sbrs	r25, 3
    eab2:	81 91       	ld	r24, Z+
    eab4:	6f 01       	movw	r12, r30
    eab6:	81 11       	cpse	r24, r1
    eab8:	c0 cf       	rjmp	.-128    	; 0xea3a <vfprintf+0x80>
    eaba:	98 2f       	mov	r25, r24
    eabc:	95 54       	subi	r25, 0x45	; 69
    eabe:	93 30       	cpi	r25, 0x03	; 3
    eac0:	18 f0       	brcs	.+6      	; 0xeac8 <vfprintf+0x10e>
    eac2:	90 52       	subi	r25, 0x20	; 32
    eac4:	93 30       	cpi	r25, 0x03	; 3
    eac6:	28 f4       	brcc	.+10     	; 0xead2 <vfprintf+0x118>
    eac8:	0c 5f       	subi	r16, 0xFC	; 252
    eaca:	1f 4f       	sbci	r17, 0xFF	; 255
    eacc:	ff e3       	ldi	r31, 0x3F	; 63
    eace:	f9 83       	std	Y+1, r31	; 0x01
    ead0:	0d c0       	rjmp	.+26     	; 0xeaec <vfprintf+0x132>
    ead2:	83 36       	cpi	r24, 0x63	; 99
    ead4:	31 f0       	breq	.+12     	; 0xeae2 <vfprintf+0x128>
    ead6:	83 37       	cpi	r24, 0x73	; 115
    ead8:	71 f0       	breq	.+28     	; 0xeaf6 <vfprintf+0x13c>
    eada:	83 35       	cpi	r24, 0x53	; 83
    eadc:	09 f0       	breq	.+2      	; 0xeae0 <vfprintf+0x126>
    eade:	5a c0       	rjmp	.+180    	; 0xeb94 <vfprintf+0x1da>
    eae0:	22 c0       	rjmp	.+68     	; 0xeb26 <vfprintf+0x16c>
    eae2:	f8 01       	movw	r30, r16
    eae4:	80 81       	ld	r24, Z
    eae6:	89 83       	std	Y+1, r24	; 0x01
    eae8:	0e 5f       	subi	r16, 0xFE	; 254
    eaea:	1f 4f       	sbci	r17, 0xFF	; 255
    eaec:	44 24       	eor	r4, r4
    eaee:	43 94       	inc	r4
    eaf0:	51 2c       	mov	r5, r1
    eaf2:	54 01       	movw	r10, r8
    eaf4:	14 c0       	rjmp	.+40     	; 0xeb1e <vfprintf+0x164>
    eaf6:	38 01       	movw	r6, r16
    eaf8:	f2 e0       	ldi	r31, 0x02	; 2
    eafa:	6f 0e       	add	r6, r31
    eafc:	71 1c       	adc	r7, r1
    eafe:	f8 01       	movw	r30, r16
    eb00:	a0 80       	ld	r10, Z
    eb02:	b1 80       	ldd	r11, Z+1	; 0x01
    eb04:	26 ff       	sbrs	r18, 6
    eb06:	03 c0       	rjmp	.+6      	; 0xeb0e <vfprintf+0x154>
    eb08:	65 2d       	mov	r22, r5
    eb0a:	70 e0       	ldi	r23, 0x00	; 0
    eb0c:	02 c0       	rjmp	.+4      	; 0xeb12 <vfprintf+0x158>
    eb0e:	6f ef       	ldi	r22, 0xFF	; 255
    eb10:	7f ef       	ldi	r23, 0xFF	; 255
    eb12:	c5 01       	movw	r24, r10
    eb14:	2c 87       	std	Y+12, r18	; 0x0c
    eb16:	c9 de       	rcall	.-622    	; 0xe8aa <strnlen>
    eb18:	2c 01       	movw	r4, r24
    eb1a:	83 01       	movw	r16, r6
    eb1c:	2c 85       	ldd	r18, Y+12	; 0x0c
    eb1e:	6f e7       	ldi	r22, 0x7F	; 127
    eb20:	26 2e       	mov	r2, r22
    eb22:	22 22       	and	r2, r18
    eb24:	17 c0       	rjmp	.+46     	; 0xeb54 <vfprintf+0x19a>
    eb26:	38 01       	movw	r6, r16
    eb28:	f2 e0       	ldi	r31, 0x02	; 2
    eb2a:	6f 0e       	add	r6, r31
    eb2c:	71 1c       	adc	r7, r1
    eb2e:	f8 01       	movw	r30, r16
    eb30:	a0 80       	ld	r10, Z
    eb32:	b1 80       	ldd	r11, Z+1	; 0x01
    eb34:	26 ff       	sbrs	r18, 6
    eb36:	03 c0       	rjmp	.+6      	; 0xeb3e <vfprintf+0x184>
    eb38:	65 2d       	mov	r22, r5
    eb3a:	70 e0       	ldi	r23, 0x00	; 0
    eb3c:	02 c0       	rjmp	.+4      	; 0xeb42 <vfprintf+0x188>
    eb3e:	6f ef       	ldi	r22, 0xFF	; 255
    eb40:	7f ef       	ldi	r23, 0xFF	; 255
    eb42:	c5 01       	movw	r24, r10
    eb44:	2c 87       	std	Y+12, r18	; 0x0c
    eb46:	2e d1       	rcall	.+604    	; 0xeda4 <strnlen_P>
    eb48:	2c 01       	movw	r4, r24
    eb4a:	2c 85       	ldd	r18, Y+12	; 0x0c
    eb4c:	50 e8       	ldi	r21, 0x80	; 128
    eb4e:	25 2e       	mov	r2, r21
    eb50:	22 2a       	or	r2, r18
    eb52:	83 01       	movw	r16, r6
    eb54:	23 fc       	sbrc	r2, 3
    eb56:	1a c0       	rjmp	.+52     	; 0xeb8c <vfprintf+0x1d2>
    eb58:	05 c0       	rjmp	.+10     	; 0xeb64 <vfprintf+0x1aa>
    eb5a:	b7 01       	movw	r22, r14
    eb5c:	80 e2       	ldi	r24, 0x20	; 32
    eb5e:	90 e0       	ldi	r25, 0x00	; 0
    eb60:	3c d1       	rcall	.+632    	; 0xedda <fputc>
    eb62:	3a 94       	dec	r3
    eb64:	83 2d       	mov	r24, r3
    eb66:	90 e0       	ldi	r25, 0x00	; 0
    eb68:	48 16       	cp	r4, r24
    eb6a:	59 06       	cpc	r5, r25
    eb6c:	b0 f3       	brcs	.-20     	; 0xeb5a <vfprintf+0x1a0>
    eb6e:	0e c0       	rjmp	.+28     	; 0xeb8c <vfprintf+0x1d2>
    eb70:	f5 01       	movw	r30, r10
    eb72:	27 fc       	sbrc	r2, 7
    eb74:	85 91       	lpm	r24, Z+
    eb76:	27 fe       	sbrs	r2, 7
    eb78:	81 91       	ld	r24, Z+
    eb7a:	5f 01       	movw	r10, r30
    eb7c:	b7 01       	movw	r22, r14
    eb7e:	90 e0       	ldi	r25, 0x00	; 0
    eb80:	2c d1       	rcall	.+600    	; 0xedda <fputc>
    eb82:	31 10       	cpse	r3, r1
    eb84:	3a 94       	dec	r3
    eb86:	f1 e0       	ldi	r31, 0x01	; 1
    eb88:	4f 1a       	sub	r4, r31
    eb8a:	51 08       	sbc	r5, r1
    eb8c:	41 14       	cp	r4, r1
    eb8e:	51 04       	cpc	r5, r1
    eb90:	79 f7       	brne	.-34     	; 0xeb70 <vfprintf+0x1b6>
    eb92:	e5 c0       	rjmp	.+458    	; 0xed5e <vfprintf+0x3a4>
    eb94:	84 36       	cpi	r24, 0x64	; 100
    eb96:	11 f0       	breq	.+4      	; 0xeb9c <vfprintf+0x1e2>
    eb98:	89 36       	cpi	r24, 0x69	; 105
    eb9a:	39 f5       	brne	.+78     	; 0xebea <vfprintf+0x230>
    eb9c:	f8 01       	movw	r30, r16
    eb9e:	27 ff       	sbrs	r18, 7
    eba0:	07 c0       	rjmp	.+14     	; 0xebb0 <vfprintf+0x1f6>
    eba2:	60 81       	ld	r22, Z
    eba4:	71 81       	ldd	r23, Z+1	; 0x01
    eba6:	82 81       	ldd	r24, Z+2	; 0x02
    eba8:	93 81       	ldd	r25, Z+3	; 0x03
    ebaa:	0c 5f       	subi	r16, 0xFC	; 252
    ebac:	1f 4f       	sbci	r17, 0xFF	; 255
    ebae:	08 c0       	rjmp	.+16     	; 0xebc0 <vfprintf+0x206>
    ebb0:	60 81       	ld	r22, Z
    ebb2:	71 81       	ldd	r23, Z+1	; 0x01
    ebb4:	88 27       	eor	r24, r24
    ebb6:	77 fd       	sbrc	r23, 7
    ebb8:	80 95       	com	r24
    ebba:	98 2f       	mov	r25, r24
    ebbc:	0e 5f       	subi	r16, 0xFE	; 254
    ebbe:	1f 4f       	sbci	r17, 0xFF	; 255
    ebc0:	4f e6       	ldi	r20, 0x6F	; 111
    ebc2:	b4 2e       	mov	r11, r20
    ebc4:	b2 22       	and	r11, r18
    ebc6:	97 ff       	sbrs	r25, 7
    ebc8:	09 c0       	rjmp	.+18     	; 0xebdc <vfprintf+0x222>
    ebca:	90 95       	com	r25
    ebcc:	80 95       	com	r24
    ebce:	70 95       	com	r23
    ebd0:	61 95       	neg	r22
    ebd2:	7f 4f       	sbci	r23, 0xFF	; 255
    ebd4:	8f 4f       	sbci	r24, 0xFF	; 255
    ebd6:	9f 4f       	sbci	r25, 0xFF	; 255
    ebd8:	f0 e8       	ldi	r31, 0x80	; 128
    ebda:	bf 2a       	or	r11, r31
    ebdc:	2a e0       	ldi	r18, 0x0A	; 10
    ebde:	30 e0       	ldi	r19, 0x00	; 0
    ebe0:	a4 01       	movw	r20, r8
    ebe2:	27 d1       	rcall	.+590    	; 0xee32 <__ultoa_invert>
    ebe4:	a8 2e       	mov	r10, r24
    ebe6:	a8 18       	sub	r10, r8
    ebe8:	42 c0       	rjmp	.+132    	; 0xec6e <vfprintf+0x2b4>
    ebea:	85 37       	cpi	r24, 0x75	; 117
    ebec:	31 f4       	brne	.+12     	; 0xebfa <vfprintf+0x240>
    ebee:	3f ee       	ldi	r19, 0xEF	; 239
    ebf0:	b3 2e       	mov	r11, r19
    ebf2:	b2 22       	and	r11, r18
    ebf4:	2a e0       	ldi	r18, 0x0A	; 10
    ebf6:	30 e0       	ldi	r19, 0x00	; 0
    ebf8:	24 c0       	rjmp	.+72     	; 0xec42 <vfprintf+0x288>
    ebfa:	99 ef       	ldi	r25, 0xF9	; 249
    ebfc:	b9 2e       	mov	r11, r25
    ebfe:	b2 22       	and	r11, r18
    ec00:	8f 36       	cpi	r24, 0x6F	; 111
    ec02:	b9 f0       	breq	.+46     	; 0xec32 <vfprintf+0x278>
    ec04:	20 f4       	brcc	.+8      	; 0xec0e <vfprintf+0x254>
    ec06:	88 35       	cpi	r24, 0x58	; 88
    ec08:	09 f0       	breq	.+2      	; 0xec0c <vfprintf+0x252>
    ec0a:	ac c0       	rjmp	.+344    	; 0xed64 <vfprintf+0x3aa>
    ec0c:	0d c0       	rjmp	.+26     	; 0xec28 <vfprintf+0x26e>
    ec0e:	80 37       	cpi	r24, 0x70	; 112
    ec10:	21 f0       	breq	.+8      	; 0xec1a <vfprintf+0x260>
    ec12:	88 37       	cpi	r24, 0x78	; 120
    ec14:	09 f0       	breq	.+2      	; 0xec18 <vfprintf+0x25e>
    ec16:	a6 c0       	rjmp	.+332    	; 0xed64 <vfprintf+0x3aa>
    ec18:	02 c0       	rjmp	.+4      	; 0xec1e <vfprintf+0x264>
    ec1a:	20 e1       	ldi	r18, 0x10	; 16
    ec1c:	b2 2a       	or	r11, r18
    ec1e:	b4 fe       	sbrs	r11, 4
    ec20:	0b c0       	rjmp	.+22     	; 0xec38 <vfprintf+0x27e>
    ec22:	84 e0       	ldi	r24, 0x04	; 4
    ec24:	b8 2a       	or	r11, r24
    ec26:	08 c0       	rjmp	.+16     	; 0xec38 <vfprintf+0x27e>
    ec28:	24 ff       	sbrs	r18, 4
    ec2a:	09 c0       	rjmp	.+18     	; 0xec3e <vfprintf+0x284>
    ec2c:	e6 e0       	ldi	r30, 0x06	; 6
    ec2e:	be 2a       	or	r11, r30
    ec30:	06 c0       	rjmp	.+12     	; 0xec3e <vfprintf+0x284>
    ec32:	28 e0       	ldi	r18, 0x08	; 8
    ec34:	30 e0       	ldi	r19, 0x00	; 0
    ec36:	05 c0       	rjmp	.+10     	; 0xec42 <vfprintf+0x288>
    ec38:	20 e1       	ldi	r18, 0x10	; 16
    ec3a:	30 e0       	ldi	r19, 0x00	; 0
    ec3c:	02 c0       	rjmp	.+4      	; 0xec42 <vfprintf+0x288>
    ec3e:	20 e1       	ldi	r18, 0x10	; 16
    ec40:	32 e0       	ldi	r19, 0x02	; 2
    ec42:	f8 01       	movw	r30, r16
    ec44:	b7 fe       	sbrs	r11, 7
    ec46:	07 c0       	rjmp	.+14     	; 0xec56 <vfprintf+0x29c>
    ec48:	60 81       	ld	r22, Z
    ec4a:	71 81       	ldd	r23, Z+1	; 0x01
    ec4c:	82 81       	ldd	r24, Z+2	; 0x02
    ec4e:	93 81       	ldd	r25, Z+3	; 0x03
    ec50:	0c 5f       	subi	r16, 0xFC	; 252
    ec52:	1f 4f       	sbci	r17, 0xFF	; 255
    ec54:	06 c0       	rjmp	.+12     	; 0xec62 <vfprintf+0x2a8>
    ec56:	60 81       	ld	r22, Z
    ec58:	71 81       	ldd	r23, Z+1	; 0x01
    ec5a:	80 e0       	ldi	r24, 0x00	; 0
    ec5c:	90 e0       	ldi	r25, 0x00	; 0
    ec5e:	0e 5f       	subi	r16, 0xFE	; 254
    ec60:	1f 4f       	sbci	r17, 0xFF	; 255
    ec62:	a4 01       	movw	r20, r8
    ec64:	e6 d0       	rcall	.+460    	; 0xee32 <__ultoa_invert>
    ec66:	a8 2e       	mov	r10, r24
    ec68:	a8 18       	sub	r10, r8
    ec6a:	ff e7       	ldi	r31, 0x7F	; 127
    ec6c:	bf 22       	and	r11, r31
    ec6e:	b6 fe       	sbrs	r11, 6
    ec70:	0b c0       	rjmp	.+22     	; 0xec88 <vfprintf+0x2ce>
    ec72:	2b 2d       	mov	r18, r11
    ec74:	2e 7f       	andi	r18, 0xFE	; 254
    ec76:	a5 14       	cp	r10, r5
    ec78:	50 f4       	brcc	.+20     	; 0xec8e <vfprintf+0x2d4>
    ec7a:	b4 fe       	sbrs	r11, 4
    ec7c:	0a c0       	rjmp	.+20     	; 0xec92 <vfprintf+0x2d8>
    ec7e:	b2 fc       	sbrc	r11, 2
    ec80:	08 c0       	rjmp	.+16     	; 0xec92 <vfprintf+0x2d8>
    ec82:	2b 2d       	mov	r18, r11
    ec84:	2e 7e       	andi	r18, 0xEE	; 238
    ec86:	05 c0       	rjmp	.+10     	; 0xec92 <vfprintf+0x2d8>
    ec88:	7a 2c       	mov	r7, r10
    ec8a:	2b 2d       	mov	r18, r11
    ec8c:	03 c0       	rjmp	.+6      	; 0xec94 <vfprintf+0x2da>
    ec8e:	7a 2c       	mov	r7, r10
    ec90:	01 c0       	rjmp	.+2      	; 0xec94 <vfprintf+0x2da>
    ec92:	75 2c       	mov	r7, r5
    ec94:	24 ff       	sbrs	r18, 4
    ec96:	0d c0       	rjmp	.+26     	; 0xecb2 <vfprintf+0x2f8>
    ec98:	fe 01       	movw	r30, r28
    ec9a:	ea 0d       	add	r30, r10
    ec9c:	f1 1d       	adc	r31, r1
    ec9e:	80 81       	ld	r24, Z
    eca0:	80 33       	cpi	r24, 0x30	; 48
    eca2:	11 f4       	brne	.+4      	; 0xeca8 <vfprintf+0x2ee>
    eca4:	29 7e       	andi	r18, 0xE9	; 233
    eca6:	09 c0       	rjmp	.+18     	; 0xecba <vfprintf+0x300>
    eca8:	22 ff       	sbrs	r18, 2
    ecaa:	06 c0       	rjmp	.+12     	; 0xecb8 <vfprintf+0x2fe>
    ecac:	73 94       	inc	r7
    ecae:	73 94       	inc	r7
    ecb0:	04 c0       	rjmp	.+8      	; 0xecba <vfprintf+0x300>
    ecb2:	82 2f       	mov	r24, r18
    ecb4:	86 78       	andi	r24, 0x86	; 134
    ecb6:	09 f0       	breq	.+2      	; 0xecba <vfprintf+0x300>
    ecb8:	73 94       	inc	r7
    ecba:	23 fd       	sbrc	r18, 3
    ecbc:	13 c0       	rjmp	.+38     	; 0xece4 <vfprintf+0x32a>
    ecbe:	20 ff       	sbrs	r18, 0
    ecc0:	0e c0       	rjmp	.+28     	; 0xecde <vfprintf+0x324>
    ecc2:	5a 2c       	mov	r5, r10
    ecc4:	73 14       	cp	r7, r3
    ecc6:	58 f4       	brcc	.+22     	; 0xecde <vfprintf+0x324>
    ecc8:	53 0c       	add	r5, r3
    ecca:	57 18       	sub	r5, r7
    eccc:	73 2c       	mov	r7, r3
    ecce:	07 c0       	rjmp	.+14     	; 0xecde <vfprintf+0x324>
    ecd0:	b7 01       	movw	r22, r14
    ecd2:	80 e2       	ldi	r24, 0x20	; 32
    ecd4:	90 e0       	ldi	r25, 0x00	; 0
    ecd6:	2c 87       	std	Y+12, r18	; 0x0c
    ecd8:	80 d0       	rcall	.+256    	; 0xedda <fputc>
    ecda:	73 94       	inc	r7
    ecdc:	2c 85       	ldd	r18, Y+12	; 0x0c
    ecde:	73 14       	cp	r7, r3
    ece0:	b8 f3       	brcs	.-18     	; 0xecd0 <vfprintf+0x316>
    ece2:	04 c0       	rjmp	.+8      	; 0xecec <vfprintf+0x332>
    ece4:	73 14       	cp	r7, r3
    ece6:	10 f4       	brcc	.+4      	; 0xecec <vfprintf+0x332>
    ece8:	37 18       	sub	r3, r7
    ecea:	01 c0       	rjmp	.+2      	; 0xecee <vfprintf+0x334>
    ecec:	31 2c       	mov	r3, r1
    ecee:	24 ff       	sbrs	r18, 4
    ecf0:	11 c0       	rjmp	.+34     	; 0xed14 <vfprintf+0x35a>
    ecf2:	b7 01       	movw	r22, r14
    ecf4:	80 e3       	ldi	r24, 0x30	; 48
    ecf6:	90 e0       	ldi	r25, 0x00	; 0
    ecf8:	2c 87       	std	Y+12, r18	; 0x0c
    ecfa:	6f d0       	rcall	.+222    	; 0xedda <fputc>
    ecfc:	2c 85       	ldd	r18, Y+12	; 0x0c
    ecfe:	22 ff       	sbrs	r18, 2
    ed00:	1c c0       	rjmp	.+56     	; 0xed3a <vfprintf+0x380>
    ed02:	21 ff       	sbrs	r18, 1
    ed04:	03 c0       	rjmp	.+6      	; 0xed0c <vfprintf+0x352>
    ed06:	88 e5       	ldi	r24, 0x58	; 88
    ed08:	90 e0       	ldi	r25, 0x00	; 0
    ed0a:	02 c0       	rjmp	.+4      	; 0xed10 <vfprintf+0x356>
    ed0c:	88 e7       	ldi	r24, 0x78	; 120
    ed0e:	90 e0       	ldi	r25, 0x00	; 0
    ed10:	b7 01       	movw	r22, r14
    ed12:	0c c0       	rjmp	.+24     	; 0xed2c <vfprintf+0x372>
    ed14:	82 2f       	mov	r24, r18
    ed16:	86 78       	andi	r24, 0x86	; 134
    ed18:	81 f0       	breq	.+32     	; 0xed3a <vfprintf+0x380>
    ed1a:	21 fd       	sbrc	r18, 1
    ed1c:	02 c0       	rjmp	.+4      	; 0xed22 <vfprintf+0x368>
    ed1e:	80 e2       	ldi	r24, 0x20	; 32
    ed20:	01 c0       	rjmp	.+2      	; 0xed24 <vfprintf+0x36a>
    ed22:	8b e2       	ldi	r24, 0x2B	; 43
    ed24:	27 fd       	sbrc	r18, 7
    ed26:	8d e2       	ldi	r24, 0x2D	; 45
    ed28:	b7 01       	movw	r22, r14
    ed2a:	90 e0       	ldi	r25, 0x00	; 0
    ed2c:	56 d0       	rcall	.+172    	; 0xedda <fputc>
    ed2e:	05 c0       	rjmp	.+10     	; 0xed3a <vfprintf+0x380>
    ed30:	b7 01       	movw	r22, r14
    ed32:	80 e3       	ldi	r24, 0x30	; 48
    ed34:	90 e0       	ldi	r25, 0x00	; 0
    ed36:	51 d0       	rcall	.+162    	; 0xedda <fputc>
    ed38:	5a 94       	dec	r5
    ed3a:	a5 14       	cp	r10, r5
    ed3c:	c8 f3       	brcs	.-14     	; 0xed30 <vfprintf+0x376>
    ed3e:	aa 94       	dec	r10
    ed40:	f4 01       	movw	r30, r8
    ed42:	ea 0d       	add	r30, r10
    ed44:	f1 1d       	adc	r31, r1
    ed46:	b7 01       	movw	r22, r14
    ed48:	80 81       	ld	r24, Z
    ed4a:	90 e0       	ldi	r25, 0x00	; 0
    ed4c:	46 d0       	rcall	.+140    	; 0xedda <fputc>
    ed4e:	a1 10       	cpse	r10, r1
    ed50:	f6 cf       	rjmp	.-20     	; 0xed3e <vfprintf+0x384>
    ed52:	05 c0       	rjmp	.+10     	; 0xed5e <vfprintf+0x3a4>
    ed54:	b7 01       	movw	r22, r14
    ed56:	80 e2       	ldi	r24, 0x20	; 32
    ed58:	90 e0       	ldi	r25, 0x00	; 0
    ed5a:	3f d0       	rcall	.+126    	; 0xedda <fputc>
    ed5c:	3a 94       	dec	r3
    ed5e:	31 10       	cpse	r3, r1
    ed60:	f9 cf       	rjmp	.-14     	; 0xed54 <vfprintf+0x39a>
    ed62:	50 ce       	rjmp	.-864    	; 0xea04 <vfprintf+0x4a>
    ed64:	f7 01       	movw	r30, r14
    ed66:	26 81       	ldd	r18, Z+6	; 0x06
    ed68:	37 81       	ldd	r19, Z+7	; 0x07
    ed6a:	02 c0       	rjmp	.+4      	; 0xed70 <vfprintf+0x3b6>
    ed6c:	2f ef       	ldi	r18, 0xFF	; 255
    ed6e:	3f ef       	ldi	r19, 0xFF	; 255
    ed70:	c9 01       	movw	r24, r18
    ed72:	2c 96       	adiw	r28, 0x0c	; 12
    ed74:	cd bf       	out	0x3d, r28	; 61
    ed76:	de bf       	out	0x3e, r29	; 62
    ed78:	df 91       	pop	r29
    ed7a:	cf 91       	pop	r28
    ed7c:	1f 91       	pop	r17
    ed7e:	0f 91       	pop	r16
    ed80:	ff 90       	pop	r15
    ed82:	ef 90       	pop	r14
    ed84:	df 90       	pop	r13
    ed86:	cf 90       	pop	r12
    ed88:	bf 90       	pop	r11
    ed8a:	af 90       	pop	r10
    ed8c:	9f 90       	pop	r9
    ed8e:	8f 90       	pop	r8
    ed90:	7f 90       	pop	r7
    ed92:	6f 90       	pop	r6
    ed94:	5f 90       	pop	r5
    ed96:	4f 90       	pop	r4
    ed98:	3f 90       	pop	r3
    ed9a:	2f 90       	pop	r2
    ed9c:	08 95       	ret

0000ed9e <__ctype_isfalse>:
    ed9e:	99 27       	eor	r25, r25
    eda0:	88 27       	eor	r24, r24

0000eda2 <__ctype_istrue>:
    eda2:	08 95       	ret

0000eda4 <strnlen_P>:
    eda4:	fc 01       	movw	r30, r24
    eda6:	05 90       	lpm	r0, Z+
    eda8:	61 50       	subi	r22, 0x01	; 1
    edaa:	70 40       	sbci	r23, 0x00	; 0
    edac:	01 10       	cpse	r0, r1
    edae:	d8 f7       	brcc	.-10     	; 0xeda6 <strnlen_P+0x2>
    edb0:	80 95       	com	r24
    edb2:	90 95       	com	r25
    edb4:	8e 0f       	add	r24, r30
    edb6:	9f 1f       	adc	r25, r31
    edb8:	08 95       	ret

0000edba <strrev>:
    edba:	dc 01       	movw	r26, r24
    edbc:	fc 01       	movw	r30, r24
    edbe:	67 2f       	mov	r22, r23
    edc0:	71 91       	ld	r23, Z+
    edc2:	77 23       	and	r23, r23
    edc4:	e1 f7       	brne	.-8      	; 0xedbe <strrev+0x4>
    edc6:	32 97       	sbiw	r30, 0x02	; 2
    edc8:	04 c0       	rjmp	.+8      	; 0xedd2 <strrev+0x18>
    edca:	7c 91       	ld	r23, X
    edcc:	6d 93       	st	X+, r22
    edce:	70 83       	st	Z, r23
    edd0:	62 91       	ld	r22, -Z
    edd2:	ae 17       	cp	r26, r30
    edd4:	bf 07       	cpc	r27, r31
    edd6:	c8 f3       	brcs	.-14     	; 0xedca <strrev+0x10>
    edd8:	08 95       	ret

0000edda <fputc>:
    edda:	0f 93       	push	r16
    eddc:	1f 93       	push	r17
    edde:	cf 93       	push	r28
    ede0:	df 93       	push	r29
    ede2:	8c 01       	movw	r16, r24
    ede4:	eb 01       	movw	r28, r22
    ede6:	8b 81       	ldd	r24, Y+3	; 0x03
    ede8:	81 fd       	sbrc	r24, 1
    edea:	03 c0       	rjmp	.+6      	; 0xedf2 <fputc+0x18>
    edec:	0f ef       	ldi	r16, 0xFF	; 255
    edee:	1f ef       	ldi	r17, 0xFF	; 255
    edf0:	1a c0       	rjmp	.+52     	; 0xee26 <fputc+0x4c>
    edf2:	82 ff       	sbrs	r24, 2
    edf4:	0d c0       	rjmp	.+26     	; 0xee10 <fputc+0x36>
    edf6:	2e 81       	ldd	r18, Y+6	; 0x06
    edf8:	3f 81       	ldd	r19, Y+7	; 0x07
    edfa:	8c 81       	ldd	r24, Y+4	; 0x04
    edfc:	9d 81       	ldd	r25, Y+5	; 0x05
    edfe:	28 17       	cp	r18, r24
    ee00:	39 07       	cpc	r19, r25
    ee02:	64 f4       	brge	.+24     	; 0xee1c <fputc+0x42>
    ee04:	e8 81       	ld	r30, Y
    ee06:	f9 81       	ldd	r31, Y+1	; 0x01
    ee08:	01 93       	st	Z+, r16
    ee0a:	e8 83       	st	Y, r30
    ee0c:	f9 83       	std	Y+1, r31	; 0x01
    ee0e:	06 c0       	rjmp	.+12     	; 0xee1c <fputc+0x42>
    ee10:	e8 85       	ldd	r30, Y+8	; 0x08
    ee12:	f9 85       	ldd	r31, Y+9	; 0x09
    ee14:	80 2f       	mov	r24, r16
    ee16:	19 95       	eicall
    ee18:	89 2b       	or	r24, r25
    ee1a:	41 f7       	brne	.-48     	; 0xedec <fputc+0x12>
    ee1c:	8e 81       	ldd	r24, Y+6	; 0x06
    ee1e:	9f 81       	ldd	r25, Y+7	; 0x07
    ee20:	01 96       	adiw	r24, 0x01	; 1
    ee22:	8e 83       	std	Y+6, r24	; 0x06
    ee24:	9f 83       	std	Y+7, r25	; 0x07
    ee26:	c8 01       	movw	r24, r16
    ee28:	df 91       	pop	r29
    ee2a:	cf 91       	pop	r28
    ee2c:	1f 91       	pop	r17
    ee2e:	0f 91       	pop	r16
    ee30:	08 95       	ret

0000ee32 <__ultoa_invert>:
    ee32:	fa 01       	movw	r30, r20
    ee34:	aa 27       	eor	r26, r26
    ee36:	28 30       	cpi	r18, 0x08	; 8
    ee38:	51 f1       	breq	.+84     	; 0xee8e <__ultoa_invert+0x5c>
    ee3a:	20 31       	cpi	r18, 0x10	; 16
    ee3c:	81 f1       	breq	.+96     	; 0xee9e <__ultoa_invert+0x6c>
    ee3e:	e8 94       	clt
    ee40:	6f 93       	push	r22
    ee42:	6e 7f       	andi	r22, 0xFE	; 254
    ee44:	6e 5f       	subi	r22, 0xFE	; 254
    ee46:	7f 4f       	sbci	r23, 0xFF	; 255
    ee48:	8f 4f       	sbci	r24, 0xFF	; 255
    ee4a:	9f 4f       	sbci	r25, 0xFF	; 255
    ee4c:	af 4f       	sbci	r26, 0xFF	; 255
    ee4e:	b1 e0       	ldi	r27, 0x01	; 1
    ee50:	3e d0       	rcall	.+124    	; 0xeece <__ultoa_invert+0x9c>
    ee52:	b4 e0       	ldi	r27, 0x04	; 4
    ee54:	3c d0       	rcall	.+120    	; 0xeece <__ultoa_invert+0x9c>
    ee56:	67 0f       	add	r22, r23
    ee58:	78 1f       	adc	r23, r24
    ee5a:	89 1f       	adc	r24, r25
    ee5c:	9a 1f       	adc	r25, r26
    ee5e:	a1 1d       	adc	r26, r1
    ee60:	68 0f       	add	r22, r24
    ee62:	79 1f       	adc	r23, r25
    ee64:	8a 1f       	adc	r24, r26
    ee66:	91 1d       	adc	r25, r1
    ee68:	a1 1d       	adc	r26, r1
    ee6a:	6a 0f       	add	r22, r26
    ee6c:	71 1d       	adc	r23, r1
    ee6e:	81 1d       	adc	r24, r1
    ee70:	91 1d       	adc	r25, r1
    ee72:	a1 1d       	adc	r26, r1
    ee74:	20 d0       	rcall	.+64     	; 0xeeb6 <__ultoa_invert+0x84>
    ee76:	09 f4       	brne	.+2      	; 0xee7a <__ultoa_invert+0x48>
    ee78:	68 94       	set
    ee7a:	3f 91       	pop	r19
    ee7c:	2a e0       	ldi	r18, 0x0A	; 10
    ee7e:	26 9f       	mul	r18, r22
    ee80:	11 24       	eor	r1, r1
    ee82:	30 19       	sub	r19, r0
    ee84:	30 5d       	subi	r19, 0xD0	; 208
    ee86:	31 93       	st	Z+, r19
    ee88:	de f6       	brtc	.-74     	; 0xee40 <__ultoa_invert+0xe>
    ee8a:	cf 01       	movw	r24, r30
    ee8c:	08 95       	ret
    ee8e:	46 2f       	mov	r20, r22
    ee90:	47 70       	andi	r20, 0x07	; 7
    ee92:	40 5d       	subi	r20, 0xD0	; 208
    ee94:	41 93       	st	Z+, r20
    ee96:	b3 e0       	ldi	r27, 0x03	; 3
    ee98:	0f d0       	rcall	.+30     	; 0xeeb8 <__ultoa_invert+0x86>
    ee9a:	c9 f7       	brne	.-14     	; 0xee8e <__ultoa_invert+0x5c>
    ee9c:	f6 cf       	rjmp	.-20     	; 0xee8a <__ultoa_invert+0x58>
    ee9e:	46 2f       	mov	r20, r22
    eea0:	4f 70       	andi	r20, 0x0F	; 15
    eea2:	40 5d       	subi	r20, 0xD0	; 208
    eea4:	4a 33       	cpi	r20, 0x3A	; 58
    eea6:	18 f0       	brcs	.+6      	; 0xeeae <__ultoa_invert+0x7c>
    eea8:	49 5d       	subi	r20, 0xD9	; 217
    eeaa:	31 fd       	sbrc	r19, 1
    eeac:	40 52       	subi	r20, 0x20	; 32
    eeae:	41 93       	st	Z+, r20
    eeb0:	02 d0       	rcall	.+4      	; 0xeeb6 <__ultoa_invert+0x84>
    eeb2:	a9 f7       	brne	.-22     	; 0xee9e <__ultoa_invert+0x6c>
    eeb4:	ea cf       	rjmp	.-44     	; 0xee8a <__ultoa_invert+0x58>
    eeb6:	b4 e0       	ldi	r27, 0x04	; 4
    eeb8:	a6 95       	lsr	r26
    eeba:	97 95       	ror	r25
    eebc:	87 95       	ror	r24
    eebe:	77 95       	ror	r23
    eec0:	67 95       	ror	r22
    eec2:	ba 95       	dec	r27
    eec4:	c9 f7       	brne	.-14     	; 0xeeb8 <__ultoa_invert+0x86>
    eec6:	00 97       	sbiw	r24, 0x00	; 0
    eec8:	61 05       	cpc	r22, r1
    eeca:	71 05       	cpc	r23, r1
    eecc:	08 95       	ret
    eece:	9b 01       	movw	r18, r22
    eed0:	ac 01       	movw	r20, r24
    eed2:	0a 2e       	mov	r0, r26
    eed4:	06 94       	lsr	r0
    eed6:	57 95       	ror	r21
    eed8:	47 95       	ror	r20
    eeda:	37 95       	ror	r19
    eedc:	27 95       	ror	r18
    eede:	ba 95       	dec	r27
    eee0:	c9 f7       	brne	.-14     	; 0xeed4 <__ultoa_invert+0xa2>
    eee2:	62 0f       	add	r22, r18
    eee4:	73 1f       	adc	r23, r19
    eee6:	84 1f       	adc	r24, r20
    eee8:	95 1f       	adc	r25, r21
    eeea:	a0 1d       	adc	r26, r0
    eeec:	08 95       	ret

0000eeee <__mulsi3>:
    eeee:	db 01       	movw	r26, r22
    eef0:	8f 93       	push	r24
    eef2:	9f 93       	push	r25
    eef4:	1d db       	rcall	.-2502   	; 0xe530 <__muluhisi3>
    eef6:	bf 91       	pop	r27
    eef8:	af 91       	pop	r26
    eefa:	a2 9f       	mul	r26, r18
    eefc:	80 0d       	add	r24, r0
    eefe:	91 1d       	adc	r25, r1
    ef00:	a3 9f       	mul	r26, r19
    ef02:	90 0d       	add	r25, r0
    ef04:	b2 9f       	mul	r27, r18
    ef06:	90 0d       	add	r25, r0
    ef08:	11 24       	eor	r1, r1
    ef0a:	08 95       	ret

0000ef0c <_exit>:
    ef0c:	f8 94       	cli

0000ef0e <__stop_program>:
    ef0e:	ff cf       	rjmp	.-2      	; 0xef0e <__stop_program>
